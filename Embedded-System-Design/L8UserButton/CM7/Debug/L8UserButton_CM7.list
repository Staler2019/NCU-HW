
L8UserButton_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e80  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08006120  08006120  00016120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006198  08006198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080061a0  080061a0  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080061a4  080061a4  000161a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  080061a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000190  20000074  0800621c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000204  0800621c  00020204  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ae2b  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002a7e  00000000  00000000  0003aecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001088  00000000  00000000  0003d950  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f80  00000000  00000000  0003e9d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003996d  00000000  00000000  0003f958  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000f24f  00000000  00000000  000792c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00181fed  00000000  00000000  00088514  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0020a501  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000490c  00000000  00000000  0020a57c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006108 	.word	0x08006108

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	08006108 	.word	0x08006108

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <SystemInit+0x104>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a3e      	ldr	r2, [pc, #248]	; (8000784 <SystemInit+0x104>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <SystemInit+0x104>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <SystemInit+0x104>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <SystemInit+0x108>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <SystemInit+0x108>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <SystemInit+0x10c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x10c>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <SystemInit+0x10c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <SystemInit+0x10c>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492e      	ldr	r1, [pc, #184]	; (800078c <SystemInit+0x10c>)
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x110>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemInit+0x108>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	d907      	bls.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemInit+0x108>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <SystemInit+0x108>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemInit+0x10c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemInit+0x10c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemInit+0x10c>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemInit+0x10c>)
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <SystemInit+0x114>)
 800070c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemInit+0x10c>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemInit+0x118>)
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <SystemInit+0x10c>)
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemInit+0x11c>)
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <SystemInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <SystemInit+0x10c>)
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <SystemInit+0x11c>)
 8000724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <SystemInit+0x10c>)
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <SystemInit+0x11c>)
 8000730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <SystemInit+0x10c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <SystemInit+0x10c>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <SystemInit+0x10c>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <SystemInit+0x120>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <SystemInit+0x120>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x124>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <SystemInit+0x128>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x12c>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x130>)
 800076c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000770:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x104>)
 8000774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000778:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	52002000 	.word	0x52002000
 800078c:	58024400 	.word	0x58024400
 8000790:	eaf6ed7f 	.word	0xeaf6ed7f
 8000794:	02020200 	.word	0x02020200
 8000798:	01ff0000 	.word	0x01ff0000
 800079c:	01010280 	.word	0x01010280
 80007a0:	580000c0 	.word	0x580000c0
 80007a4:	5c001000 	.word	0x5c001000
 80007a8:	ffff0000 	.word	0xffff0000
 80007ac:	51008108 	.word	0x51008108
 80007b0:	52004000 	.word	0x52004000

080007b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
    int32_t timeout;
    /* USER CODE END Boot_Mode_Sequence_0 */

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /* Wait until CPU2 boots and enters in stop mode or timeout*/
    timeout = 0xFFFF;
 80007ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007be:	607b      	str	r3, [r7, #4]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 80007c0:	bf00      	nop
 80007c2:	4b32      	ldr	r3, [pc, #200]	; (800088c <main+0xd8>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d004      	beq.n	80007d8 <main+0x24>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	1e5a      	subs	r2, r3, #1
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	dcf4      	bgt.n	80007c2 <main+0xe>
        ;
    if (timeout < 0) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	da01      	bge.n	80007e2 <main+0x2e>
        Error_Handler();
 80007de:	f000 fa9b 	bl	8000d18 <Error_Handler>
    }
    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80007e2:	f000 fbe7 	bl	8000fb4 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80007e6:	f000 f85f 	bl	80008a8 <SystemClock_Config>
    /* USER CODE BEGIN Boot_Mode_Sequence_2 */
    /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
    HSEM notification */
    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 80007ea:	4b28      	ldr	r3, [pc, #160]	; (800088c <main+0xd8>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f0:	4a26      	ldr	r2, [pc, #152]	; (800088c <main+0xd8>)
 80007f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007fa:	4b24      	ldr	r3, [pc, #144]	; (800088c <main+0xd8>)
 80007fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	683b      	ldr	r3, [r7, #0]
    /*Take HSEM */
    HAL_HSEM_FastTake(HSEM_ID_0);
 8000808:	2000      	movs	r0, #0
 800080a:	f000 ff87 	bl	800171c <HAL_HSEM_FastTake>
    /*Release HSEM in order to notify the CPU2(CM4)*/
    HAL_HSEM_Release(HSEM_ID_0, 0);
 800080e:	2100      	movs	r1, #0
 8000810:	2000      	movs	r0, #0
 8000812:	f000 ff9d 	bl	8001750 <HAL_HSEM_Release>
    /* wait until CPU2 wakes up from stop mode */
    timeout = 0xFFFF;
 8000816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800081a:	607b      	str	r3, [r7, #4]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 800081c:	bf00      	nop
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <main+0xd8>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000826:	2b00      	cmp	r3, #0
 8000828:	d104      	bne.n	8000834 <main+0x80>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	1e5a      	subs	r2, r3, #1
 800082e:	607a      	str	r2, [r7, #4]
 8000830:	2b00      	cmp	r3, #0
 8000832:	dcf4      	bgt.n	800081e <main+0x6a>
        ;
    if (timeout < 0) {
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	da01      	bge.n	800083e <main+0x8a>
        Error_Handler();
 800083a:	f000 fa6d 	bl	8000d18 <Error_Handler>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800083e:	f000 f96b 	bl	8000b18 <MX_GPIO_Init>
    MX_TIM3_Init();
 8000842:	f000 f8c9 	bl	80009d8 <MX_TIM3_Init>
    MX_USART3_UART_Init();
 8000846:	f000 f91b 	bl	8000a80 <MX_USART3_UART_Init>
    /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim3);
 800084a:	4811      	ldr	r0, [pc, #68]	; (8000890 <main+0xdc>)
 800084c:	f003 fada 	bl	8003e04 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN WHILE */
    while (1) {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        HAL_Delay(500);
 8000850:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000854:	f000 fc40 	bl	80010d8 <HAL_Delay>
        count = __HAL_TIM_GET_COUNTER(&htim3);
 8000858:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <main+0xdc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085e:	461a      	mov	r2, r3
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <main+0xe0>)
 8000862:	601a      	str	r2, [r3, #0]
        speech_len = sprintf(c, "count=%d\r\n", count);
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <main+0xe0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	490b      	ldr	r1, [pc, #44]	; (8000898 <main+0xe4>)
 800086c:	480b      	ldr	r0, [pc, #44]	; (800089c <main+0xe8>)
 800086e:	f005 f845 	bl	80058fc <siprintf>
 8000872:	4602      	mov	r2, r0
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <main+0xec>)
 8000876:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit(&huart3, c, speech_len, HAL_MAX_DELAY);
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <main+0xec>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	b29a      	uxth	r2, r3
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	4906      	ldr	r1, [pc, #24]	; (800089c <main+0xe8>)
 8000884:	4807      	ldr	r0, [pc, #28]	; (80008a4 <main+0xf0>)
 8000886:	f003 ff39 	bl	80046fc <HAL_UART_Transmit>
        HAL_Delay(500);
 800088a:	e7e1      	b.n	8000850 <main+0x9c>
 800088c:	58024400 	.word	0x58024400
 8000890:	20000130 	.word	0x20000130
 8000894:	20000090 	.word	0x20000090
 8000898:	08006120 	.word	0x08006120
 800089c:	2000017c 	.word	0x2000017c
 80008a0:	200000a0 	.word	0x200000a0
 80008a4:	200000a4 	.word	0x200000a4

080008a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b0cc      	sub	sp, #304	; 0x130
 80008ac:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008b2:	224c      	movs	r2, #76	; 0x4c
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f005 f818 	bl	80058ec <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008c0:	2220      	movs	r2, #32
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f005 f811 	bl	80058ec <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	4618      	mov	r0, r3
 80008d0:	23bc      	movs	r3, #188	; 0xbc
 80008d2:	461a      	mov	r2, r3
 80008d4:	2100      	movs	r1, #0
 80008d6:	f005 f809 	bl	80058ec <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008da:	2004      	movs	r0, #4
 80008dc:	f000 ff4c 	bl	8001778 <HAL_PWREx_ConfigSupply>
    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	4b3a      	ldr	r3, [pc, #232]	; (80009d0 <SystemClock_Config+0x128>)
 80008e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ea:	4a39      	ldr	r2, [pc, #228]	; (80009d0 <SystemClock_Config+0x128>)
 80008ec:	f023 0301 	bic.w	r3, r3, #1
 80008f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008f2:	4b37      	ldr	r3, [pc, #220]	; (80009d0 <SystemClock_Config+0x128>)
 80008f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f6:	f003 0201 	and.w	r2, r3, #1
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	4b35      	ldr	r3, [pc, #212]	; (80009d4 <SystemClock_Config+0x12c>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000906:	4a33      	ldr	r2, [pc, #204]	; (80009d4 <SystemClock_Config+0x12c>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090c:	6193      	str	r3, [r2, #24]
 800090e:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <SystemClock_Config+0x12c>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	681b      	ldr	r3, [r3, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800091e:	bf00      	nop
 8000920:	4b2c      	ldr	r3, [pc, #176]	; (80009d4 <SystemClock_Config+0x12c>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800092c:	d1f8      	bne.n	8000920 <SystemClock_Config+0x78>
    }
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092e:	2302      	movs	r3, #2
 8000930:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000934:	2301      	movs	r3, #1
 8000936:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093a:	2340      	movs	r3, #64	; 0x40
 800093c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000940:	2300      	movs	r3, #0
 8000942:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000946:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800094a:	4618      	mov	r0, r3
 800094c:	f000 ff6e 	bl	800182c <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xb2>
        Error_Handler();
 8000956:	f000 f9df 	bl	8000d18 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 800095a:	233f      	movs	r3, #63	; 0x3f
 800095c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 |
                                  RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800098a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fb5b 	bl	800204c <HAL_RCC_ClockConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0xf8>
        Error_Handler();
 800099c:	f000 f9bc 	bl	8000d18 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	2202      	movs	r2, #2
 80009a6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	2200      	movs	r2, #0
 80009ae:	675a      	str	r2, [r3, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 fecd 	bl	8002754 <HAL_RCCEx_PeriphCLKConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x11c>
        Error_Handler();
 80009c0:	f000 f9aa 	bl	8000d18 <Error_Handler>
    }
}
 80009c4:	bf00      	nop
 80009c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	58000400 	.word	0x58000400
 80009d4:	58024800 	.word	0x58024800

080009d8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	f107 0310 	add.w	r3, r7, #16
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 80009f6:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <MX_TIM3_Init+0xa0>)
 80009f8:	4a20      	ldr	r2, [pc, #128]	; (8000a7c <MX_TIM3_Init+0xa4>)
 80009fa:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <MX_TIM3_Init+0xa0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_TIM3_Init+0xa0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 10;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_TIM3_Init+0xa0>)
 8000a0a:	220a      	movs	r2, #10
 8000a0c:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_TIM3_Init+0xa0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_TIM3_Init+0xa0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000a1a:	4817      	ldr	r0, [pc, #92]	; (8000a78 <MX_TIM3_Init+0xa0>)
 8000a1c:	f003 f99a 	bl	8003d54 <HAL_TIM_Base_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM3_Init+0x52>
        Error_Handler();
 8000a26:	f000 f977 	bl	8000d18 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2e:	613b      	str	r3, [r7, #16]
    sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
    sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
    sClockSourceConfig.ClockFilter = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4619      	mov	r1, r3
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_TIM3_Init+0xa0>)
 8000a44:	f003 fb34 	bl	80040b0 <HAL_TIM_ConfigClockSource>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM3_Init+0x7a>
        Error_Handler();
 8000a4e:	f000 f963 	bl	8000d18 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4806      	ldr	r0, [pc, #24]	; (8000a78 <MX_TIM3_Init+0xa0>)
 8000a60:	f003 fd56 	bl	8004510 <HAL_TIMEx_MasterConfigSynchronization>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM3_Init+0x96>
        Error_Handler();
 8000a6a:	f000 f955 	bl	8000d18 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
}
 8000a6e:	bf00      	nop
 8000a70:	3720      	adds	r7, #32
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000130 	.word	0x20000130
 8000a7c:	40000400 	.word	0x40000400

08000a80 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
    /* USER CODE END USART3_Init 0 */

    /* USER CODE BEGIN USART3_Init 1 */

    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <MX_USART3_UART_Init+0x94>)
 8000a88:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
    huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000ac8:	4811      	ldr	r0, [pc, #68]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aca:	f003 fdc7 	bl	800465c <HAL_UART_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART3_UART_Init+0x58>
        Error_Handler();
 8000ad4:	f000 f920 	bl	8000d18 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000ad8:	2100      	movs	r1, #0
 8000ada:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000adc:	f004 fdf7 	bl	80056ce <HAL_UARTEx_SetTxFifoThreshold>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART3_UART_Init+0x6a>
        Error_Handler();
 8000ae6:	f000 f917 	bl	8000d18 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000aea:	2100      	movs	r1, #0
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aee:	f004 fe2c 	bl	800574a <HAL_UARTEx_SetRxFifoThreshold>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_USART3_UART_Init+0x7c>
        Error_Handler();
 8000af8:	f000 f90e 	bl	8000d18 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000afe:	f004 fdad 	bl	800565c <HAL_UARTEx_DisableFifoMode>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART3_UART_Init+0x8c>
        Error_Handler();
 8000b08:	f000 f906 	bl	8000d18 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200000a4 	.word	0x200000a4
 8000b14:	40004800 	.word	0x40004800

08000b18 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	; 0x30
 8000b1c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	4b69      	ldr	r3, [pc, #420]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b34:	4a67      	ldr	r2, [pc, #412]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3e:	4b65      	ldr	r3, [pc, #404]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4c:	4b61      	ldr	r3, [pc, #388]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b52:	4a60      	ldr	r2, [pc, #384]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5c:	4b5d      	ldr	r3, [pc, #372]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b5a      	ldr	r3, [pc, #360]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b70:	4a58      	ldr	r2, [pc, #352]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7a:	4b56      	ldr	r3, [pc, #344]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b88:	4b52      	ldr	r3, [pc, #328]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	4a51      	ldr	r2, [pc, #324]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b98:	4b4e      	ldr	r3, [pc, #312]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba6:	4b4b      	ldr	r3, [pc, #300]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bac:	4a49      	ldr	r2, [pc, #292]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000bae:	f043 0308 	orr.w	r3, r3, #8
 8000bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb6:	4b47      	ldr	r3, [pc, #284]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	f003 0308 	and.w	r3, r3, #8
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc4:	4b43      	ldr	r3, [pc, #268]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bca:	4a42      	ldr	r2, [pc, #264]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd4:	4b3f      	ldr	r3, [pc, #252]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000be2:	4b3c      	ldr	r3, [pc, #240]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be8:	4a3a      	ldr	r2, [pc, #232]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf2:	4b38      	ldr	r3, [pc, #224]	; (8000cd4 <MX_GPIO_Init+0x1bc>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	f003 0310 	and.w	r3, r3, #16
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2102      	movs	r1, #2
 8000c04:	4834      	ldr	r0, [pc, #208]	; (8000cd8 <MX_GPIO_Init+0x1c0>)
 8000c06:	f000 fd55 	bl	80016b4 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PC1 PC4 PC5 */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000c0a:	2332      	movs	r3, #50	; 0x32
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c1a:	230b      	movs	r3, #11
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	482d      	ldr	r0, [pc, #180]	; (8000cdc <MX_GPIO_Init+0x1c4>)
 8000c26:	f000 fb95 	bl	8001354 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA1 PA2 PA7 */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000c2a:	2386      	movs	r3, #134	; 0x86
 8000c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c3a:	230b      	movs	r3, #11
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4826      	ldr	r0, [pc, #152]	; (8000ce0 <MX_GPIO_Init+0x1c8>)
 8000c46:	f000 fb85 	bl	8001354 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB13 */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c5c:	230b      	movs	r3, #11
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	481f      	ldr	r0, [pc, #124]	; (8000ce4 <MX_GPIO_Init+0x1cc>)
 8000c68:	f000 fb74 	bl	8001354 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA8 PA11 PA12 */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12;
 8000c6c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c7e:	230a      	movs	r3, #10
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	4815      	ldr	r0, [pc, #84]	; (8000ce0 <MX_GPIO_Init+0x1c8>)
 8000c8a:	f000 fb63 	bl	8001354 <HAL_GPIO_Init>

    /*Configure GPIO pins : PG11 PG13 */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8000c8e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca0:	230b      	movs	r3, #11
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480f      	ldr	r0, [pc, #60]	; (8000ce8 <MX_GPIO_Init+0x1d0>)
 8000cac:	f000 fb52 	bl	8001354 <HAL_GPIO_Init>

    /*Configure GPIO pin : LD2_Pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_GPIO_Init+0x1c0>)
 8000cc8:	f000 fb44 	bl	8001354 <HAL_GPIO_Init>
}
 8000ccc:	bf00      	nop
 8000cce:	3730      	adds	r7, #48	; 0x30
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	58024400 	.word	0x58024400
 8000cd8:	58021000 	.word	0x58021000
 8000cdc:	58020800 	.word	0x58020800
 8000ce0:	58020000 	.word	0x58020000
 8000ce4:	58020400 	.word	0x58020400
 8000ce8:	58021800 	.word	0x58021800

08000cec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d103      	bne.n	8000d06 <HAL_TIM_PeriodElapsedCallback+0x1a>
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000cfe:	2102      	movs	r1, #2
 8000d00:	4804      	ldr	r0, [pc, #16]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d02:	f000 fcf0 	bl	80016e6 <HAL_GPIO_TogglePin>
    }
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40000400 	.word	0x40000400
 8000d14:	58021000 	.word	0x58021000

08000d18 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000d1e:	e7fe      	b.n	8000d1e <Error_Handler+0x6>

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_MspInit+0x30>)
 8000d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d2c:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_MspInit+0x30>)
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_MspInit+0x30>)
 8000d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	58024400 	.word	0x58024400

08000d54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a1e      	ldr	r2, [pc, #120]	; (8000dec <HAL_TIM_Base_MspInit+0x98>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d135      	bne.n	8000de2 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d76:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d7c:	4a1c      	ldr	r2, [pc, #112]	; (8000df0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9a:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_TIM_Base_MspInit+0x9c>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PD2     ------> TIM3_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000db2:	2304      	movs	r3, #4
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <HAL_TIM_Base_MspInit+0xa0>)
 8000dce:	f000 fac1 	bl	8001354 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	201d      	movs	r0, #29
 8000dd8:	f000 fa87 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ddc:	201d      	movs	r0, #29
 8000dde:	f000 fa9e 	bl	800131e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000de2:	bf00      	nop
 8000de4:	3728      	adds	r7, #40	; 0x28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40000400 	.word	0x40000400
 8000df0:	58024400 	.word	0x58024400
 8000df4:	58020c00 	.word	0x58020c00

08000df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a1a      	ldr	r2, [pc, #104]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d12e      	bne.n	8000e78 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <HAL_UART_MspInit+0x8c>)
 8000e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e20:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <HAL_UART_MspInit+0x8c>)
 8000e22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_UART_MspInit+0x8c>)
 8000e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_UART_MspInit+0x8c>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3e:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <HAL_UART_MspInit+0x8c>)
 8000e40:	f043 0308 	orr.w	r3, r3, #8
 8000e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_UART_MspInit+0x8c>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e68:	2307      	movs	r3, #7
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <HAL_UART_MspInit+0x90>)
 8000e74:	f000 fa6e 	bl	8001354 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3728      	adds	r7, #40	; 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40004800 	.word	0x40004800
 8000e84:	58024400 	.word	0x58024400
 8000e88:	58020c00 	.word	0x58020c00

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed8:	f000 f8de 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <TIM3_IRQHandler+0x10>)
 8000ee6:	f002 ffc3 	bl	8003e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000130 	.word	0x20000130

08000ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000efc:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <_sbrk+0x5c>)
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <_sbrk+0x60>)
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <_sbrk+0x64>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <_sbrk+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d207      	bcs.n	8000f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f24:	f004 fcb8 	bl	8005898 <__errno>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	230c      	movs	r3, #12
 8000f2c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	e009      	b.n	8000f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <_sbrk+0x64>)
 8000f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20020000 	.word	0x20020000
 8000f54:	00000400 	.word	0x00000400
 8000f58:	20000094 	.word	0x20000094
 8000f5c:	20000208 	.word	0x20000208

08000f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f98 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f64:	f7ff fb8c 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f6a:	e003      	b.n	8000f74 <LoopCopyDataInit>

08000f6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000f6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f72:	3104      	adds	r1, #4

08000f74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f74:	480a      	ldr	r0, [pc, #40]	; (8000fa0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000f78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f7c:	d3f6      	bcc.n	8000f6c <CopyDataInit>
  ldr  r2, =_sbss
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000f80:	e002      	b.n	8000f88 <LoopFillZerobss>

08000f82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f84:	f842 3b04 	str.w	r3, [r2], #4

08000f88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000f8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f8c:	d3f9      	bcc.n	8000f82 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8000f8e:	f004 fc89 	bl	80058a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f92:	f7ff fc0f 	bl	80007b4 <main>
  bx  lr    
 8000f96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f98:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f9c:	080061a8 	.word	0x080061a8
  ldr  r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fa4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000fa8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000fac:	20000204 	.word	0x20000204

08000fb0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC3_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fba:	2003      	movs	r0, #3
 8000fbc:	f000 f98a 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fc0:	f001 f9fa 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8000fc4:	4601      	mov	r1, r0
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <HAL_Init+0x68>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	0a1b      	lsrs	r3, r3, #8
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	4a13      	ldr	r2, [pc, #76]	; (8001020 <HAL_Init+0x6c>)
 8000fd2:	5cd3      	ldrb	r3, [r2, r3]
 8000fd4:	f003 031f 	and.w	r3, r3, #31
 8000fd8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fdc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_Init+0x68>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <HAL_Init+0x6c>)
 8000fe8:	5cd3      	ldrb	r3, [r2, r3]
 8000fea:	f003 031f 	and.w	r3, r3, #31
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <HAL_Init+0x70>)
 8000ff6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <HAL_Init+0x74>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 f814 	bl	800102c <HAL_InitTick>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e002      	b.n	8001014 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800100e:	f7ff fe87 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	58024400 	.word	0x58024400
 8001020:	0800613c 	.word	0x0800613c
 8001024:	20000004 	.word	0x20000004
 8001028:	20000000 	.word	0x20000000

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <HAL_InitTick+0x60>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e021      	b.n	8001084 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <HAL_InitTick+0x64>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_InitTick+0x60>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f96f 	bl	800133a <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 f939 	bl	80012ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_InitTick+0x68>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	2000000c 	.word	0x2000000c
 8001090:	20000000 	.word	0x20000000
 8001094:	20000008 	.word	0x20000008

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	2000000c 	.word	0x2000000c
 80010bc:	200001fc 	.word	0x200001fc

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	200001fc 	.word	0x200001fc

080010d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff ffee 	bl	80010c0 <HAL_GetTick>
 80010e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d005      	beq.n	80010fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_Delay+0x40>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010fe:	bf00      	nop
 8001100:	f7ff ffde 	bl	80010c0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	429a      	cmp	r2, r3
 800110e:	d8f7      	bhi.n	8001100 <HAL_Delay+0x28>
  {
  }
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000000c 	.word	0x2000000c

0800111c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetREVID+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	0c1b      	lsrs	r3, r3, #16
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	5c001000 	.word	0x5c001000

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <__NVIC_SetPriorityGrouping+0x40>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	4313      	orrs	r3, r2
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	; (8001174 <__NVIC_SetPriorityGrouping+0x40>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00
 8001178:	05fa0000 	.word	0x05fa0000

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db0b      	blt.n	80011c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	f003 021f 	and.w	r2, r3, #31
 80011b0:	4907      	ldr	r1, [pc, #28]	; (80011d0 <__NVIC_EnableIRQ+0x38>)
 80011b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	2001      	movs	r0, #1
 80011ba:	fa00 f202 	lsl.w	r2, r0, r2
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	; (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	; (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2b04      	cmp	r3, #4
 8001244:	bf28      	it	cs
 8001246:	2304      	movcs	r3, #4
 8001248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	2b06      	cmp	r3, #6
 8001250:	d902      	bls.n	8001258 <NVIC_EncodePriority+0x30>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3b03      	subs	r3, #3
 8001256:	e000      	b.n	800125a <NVIC_EncodePriority+0x32>
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	f04f 32ff 	mov.w	r2, #4294967295
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43d9      	mvns	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	4313      	orrs	r3, r2
         );
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a0:	d301      	bcc.n	80012a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00f      	b.n	80012c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <SysTick_Config+0x40>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ae:	210f      	movs	r1, #15
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f7ff ff8e 	bl	80011d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <SysTick_Config+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <SysTick_Config+0x40>)
 80012c0:	2207      	movs	r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff29 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012f8:	f7ff ff40 	bl	800117c <__NVIC_GetPriorityGrouping>
 80012fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	f7ff ff90 	bl	8001228 <NVIC_EncodePriority>
 8001308:	4602      	mov	r2, r0
 800130a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff5f 	bl	80011d4 <__NVIC_SetPriority>
}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff33 	bl	8001198 <__NVIC_EnableIRQ>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ffa4 	bl	8001290 <SysTick_Config>
 8001348:	4603      	mov	r3, r0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001362:	4b89      	ldr	r3, [pc, #548]	; (8001588 <HAL_GPIO_Init+0x234>)
 8001364:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001366:	e194      	b.n	8001692 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	2101      	movs	r1, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa01 f303 	lsl.w	r3, r1, r3
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 8186 	beq.w	800168c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d00b      	beq.n	80013a0 <HAL_GPIO_Init+0x4c>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d007      	beq.n	80013a0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001394:	2b11      	cmp	r3, #17
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b12      	cmp	r3, #18
 800139e:	d130      	bne.n	8001402 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013d6:	2201      	movs	r2, #1
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	091b      	lsrs	r3, r3, #4
 80013ec:	f003 0201 	and.w	r2, r3, #1
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	2203      	movs	r2, #3
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0xee>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b12      	cmp	r3, #18
 8001440:	d123      	bne.n	800148a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	08da      	lsrs	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3208      	adds	r2, #8
 800144a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	220f      	movs	r2, #15
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	08da      	lsrs	r2, r3, #3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3208      	adds	r2, #8
 8001484:	69b9      	ldr	r1, [r7, #24]
 8001486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 0203 	and.w	r2, r3, #3
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 80e0 	beq.w	800168c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014cc:	4b2f      	ldr	r3, [pc, #188]	; (800158c <HAL_GPIO_Init+0x238>)
 80014ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014d2:	4a2e      	ldr	r2, [pc, #184]	; (800158c <HAL_GPIO_Init+0x238>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <HAL_GPIO_Init+0x238>)
 80014de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ea:	4a29      	ldr	r2, [pc, #164]	; (8001590 <HAL_GPIO_Init+0x23c>)
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	3302      	adds	r3, #2
 80014f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	220f      	movs	r2, #15
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a20      	ldr	r2, [pc, #128]	; (8001594 <HAL_GPIO_Init+0x240>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d052      	beq.n	80015bc <HAL_GPIO_Init+0x268>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a1f      	ldr	r2, [pc, #124]	; (8001598 <HAL_GPIO_Init+0x244>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d031      	beq.n	8001582 <HAL_GPIO_Init+0x22e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a1e      	ldr	r2, [pc, #120]	; (800159c <HAL_GPIO_Init+0x248>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d02b      	beq.n	800157e <HAL_GPIO_Init+0x22a>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <HAL_GPIO_Init+0x24c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d025      	beq.n	800157a <HAL_GPIO_Init+0x226>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <HAL_GPIO_Init+0x250>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d01f      	beq.n	8001576 <HAL_GPIO_Init+0x222>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <HAL_GPIO_Init+0x254>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d019      	beq.n	8001572 <HAL_GPIO_Init+0x21e>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a1a      	ldr	r2, [pc, #104]	; (80015ac <HAL_GPIO_Init+0x258>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d013      	beq.n	800156e <HAL_GPIO_Init+0x21a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a19      	ldr	r2, [pc, #100]	; (80015b0 <HAL_GPIO_Init+0x25c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d00d      	beq.n	800156a <HAL_GPIO_Init+0x216>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a18      	ldr	r2, [pc, #96]	; (80015b4 <HAL_GPIO_Init+0x260>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d007      	beq.n	8001566 <HAL_GPIO_Init+0x212>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <HAL_GPIO_Init+0x264>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d101      	bne.n	8001562 <HAL_GPIO_Init+0x20e>
 800155e:	2309      	movs	r3, #9
 8001560:	e02d      	b.n	80015be <HAL_GPIO_Init+0x26a>
 8001562:	230a      	movs	r3, #10
 8001564:	e02b      	b.n	80015be <HAL_GPIO_Init+0x26a>
 8001566:	2308      	movs	r3, #8
 8001568:	e029      	b.n	80015be <HAL_GPIO_Init+0x26a>
 800156a:	2307      	movs	r3, #7
 800156c:	e027      	b.n	80015be <HAL_GPIO_Init+0x26a>
 800156e:	2306      	movs	r3, #6
 8001570:	e025      	b.n	80015be <HAL_GPIO_Init+0x26a>
 8001572:	2305      	movs	r3, #5
 8001574:	e023      	b.n	80015be <HAL_GPIO_Init+0x26a>
 8001576:	2304      	movs	r3, #4
 8001578:	e021      	b.n	80015be <HAL_GPIO_Init+0x26a>
 800157a:	2303      	movs	r3, #3
 800157c:	e01f      	b.n	80015be <HAL_GPIO_Init+0x26a>
 800157e:	2302      	movs	r3, #2
 8001580:	e01d      	b.n	80015be <HAL_GPIO_Init+0x26a>
 8001582:	2301      	movs	r3, #1
 8001584:	e01b      	b.n	80015be <HAL_GPIO_Init+0x26a>
 8001586:	bf00      	nop
 8001588:	58000080 	.word	0x58000080
 800158c:	58024400 	.word	0x58024400
 8001590:	58000400 	.word	0x58000400
 8001594:	58020000 	.word	0x58020000
 8001598:	58020400 	.word	0x58020400
 800159c:	58020800 	.word	0x58020800
 80015a0:	58020c00 	.word	0x58020c00
 80015a4:	58021000 	.word	0x58021000
 80015a8:	58021400 	.word	0x58021400
 80015ac:	58021800 	.word	0x58021800
 80015b0:	58021c00 	.word	0x58021c00
 80015b4:	58022000 	.word	0x58022000
 80015b8:	58022400 	.word	0x58022400
 80015bc:	2300      	movs	r3, #0
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	f002 0203 	and.w	r2, r2, #3
 80015c4:	0092      	lsls	r2, r2, #2
 80015c6:	4093      	lsls	r3, r2
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ce:	4938      	ldr	r1, [pc, #224]	; (80016b0 <HAL_GPIO_Init+0x35c>)
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	089b      	lsrs	r3, r3, #2
 80015d4:	3302      	adds	r3, #2
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001656:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800165e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	3301      	adds	r3, #1
 8001690:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa22 f303 	lsr.w	r3, r2, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	f47f ae63 	bne.w	8001368 <HAL_GPIO_Init+0x14>
  }
}
 80016a2:	bf00      	nop
 80016a4:	3724      	adds	r7, #36	; 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	58000400 	.word	0x58000400

080016b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80016d0:	e003      	b.n	80016da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	041a      	lsls	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	619a      	str	r2, [r3, #24]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	460b      	mov	r3, r1
 80016f0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	401a      	ands	r2, r3
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d104      	bne.n	800170a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001700:	887b      	ldrh	r3, [r7, #2]
 8001702:	041a      	lsls	r2, r3, #16
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001708:	e002      	b.n	8001710 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	619a      	str	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001724:	4a08      	ldr	r2, [pc, #32]	; (8001748 <HAL_HSEM_FastTake+0x2c>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3320      	adds	r3, #32
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	4a07      	ldr	r2, [pc, #28]	; (800174c <HAL_HSEM_FastTake+0x30>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d101      	bne.n	8001738 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	e000      	b.n	800173a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	58026400 	.word	0x58026400
 800174c:	80000300 	.word	0x80000300

08001750 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800175a:	4906      	ldr	r1, [pc, #24]	; (8001774 <HAL_HSEM_Release+0x24>)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	58026400 	.word	0x58026400

08001778 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001780:	4b29      	ldr	r3, [pc, #164]	; (8001828 <HAL_PWREx_ConfigSupply+0xb0>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	2b06      	cmp	r3, #6
 800178a:	d00a      	beq.n	80017a2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800178c:	4b26      	ldr	r3, [pc, #152]	; (8001828 <HAL_PWREx_ConfigSupply+0xb0>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	429a      	cmp	r2, r3
 8001798:	d001      	beq.n	800179e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e040      	b.n	8001820 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	e03e      	b.n	8001820 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80017a2:	4b21      	ldr	r3, [pc, #132]	; (8001828 <HAL_PWREx_ConfigSupply+0xb0>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80017aa:	491f      	ldr	r1, [pc, #124]	; (8001828 <HAL_PWREx_ConfigSupply+0xb0>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80017b2:	f7ff fc85 	bl	80010c0 <HAL_GetTick>
 80017b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017b8:	e009      	b.n	80017ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017ba:	f7ff fc81 	bl	80010c0 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017c8:	d901      	bls.n	80017ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e028      	b.n	8001820 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017ce:	4b16      	ldr	r3, [pc, #88]	; (8001828 <HAL_PWREx_ConfigSupply+0xb0>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017da:	d1ee      	bne.n	80017ba <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b1e      	cmp	r3, #30
 80017e0:	d008      	beq.n	80017f4 <HAL_PWREx_ConfigSupply+0x7c>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b2e      	cmp	r3, #46	; 0x2e
 80017e6:	d005      	beq.n	80017f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b1d      	cmp	r3, #29
 80017ec:	d002      	beq.n	80017f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b2d      	cmp	r3, #45	; 0x2d
 80017f2:	d114      	bne.n	800181e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80017f4:	f7ff fc64 	bl	80010c0 <HAL_GetTick>
 80017f8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017fa:	e009      	b.n	8001810 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017fc:	f7ff fc60 	bl	80010c0 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800180a:	d901      	bls.n	8001810 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e007      	b.n	8001820 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_PWREx_ConfigSupply+0xb0>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181c:	d1ee      	bne.n	80017fc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	58024800 	.word	0x58024800

0800182c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08c      	sub	sp, #48	; 0x30
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e3ff      	b.n	800203e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8087 	beq.w	800195a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800184c:	4b99      	ldr	r3, [pc, #612]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001856:	4b97      	ldr	r3, [pc, #604]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	2b10      	cmp	r3, #16
 8001860:	d007      	beq.n	8001872 <HAL_RCC_OscConfig+0x46>
 8001862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001864:	2b18      	cmp	r3, #24
 8001866:	d110      	bne.n	800188a <HAL_RCC_OscConfig+0x5e>
 8001868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d10b      	bne.n	800188a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001872:	4b90      	ldr	r3, [pc, #576]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d06c      	beq.n	8001958 <HAL_RCC_OscConfig+0x12c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d168      	bne.n	8001958 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e3d9      	b.n	800203e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001892:	d106      	bne.n	80018a2 <HAL_RCC_OscConfig+0x76>
 8001894:	4b87      	ldr	r3, [pc, #540]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a86      	ldr	r2, [pc, #536]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 800189a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	e02e      	b.n	8001900 <HAL_RCC_OscConfig+0xd4>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x98>
 80018aa:	4b82      	ldr	r3, [pc, #520]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a81      	ldr	r2, [pc, #516]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 80018b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b7f      	ldr	r3, [pc, #508]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a7e      	ldr	r2, [pc, #504]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 80018bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e01d      	b.n	8001900 <HAL_RCC_OscConfig+0xd4>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0xbc>
 80018ce:	4b79      	ldr	r3, [pc, #484]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a78      	ldr	r2, [pc, #480]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 80018d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b76      	ldr	r3, [pc, #472]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a75      	ldr	r2, [pc, #468]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0xd4>
 80018e8:	4b72      	ldr	r3, [pc, #456]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a71      	ldr	r2, [pc, #452]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 80018ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b6f      	ldr	r3, [pc, #444]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a6e      	ldr	r2, [pc, #440]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 80018fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d013      	beq.n	8001930 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff fbda 	bl	80010c0 <HAL_GetTick>
 800190c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff fbd6 	bl	80010c0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e38d      	b.n	800203e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001922:	4b64      	ldr	r3, [pc, #400]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0xe4>
 800192e:	e014      	b.n	800195a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001930:	f7ff fbc6 	bl	80010c0 <HAL_GetTick>
 8001934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001938:	f7ff fbc2 	bl	80010c0 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e379      	b.n	800203e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800194a:	4b5a      	ldr	r3, [pc, #360]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x10c>
 8001956:	e000      	b.n	800195a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 80ae 	beq.w	8001ac4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001968:	4b52      	ldr	r3, [pc, #328]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001970:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001972:	4b50      	ldr	r3, [pc, #320]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d007      	beq.n	800198e <HAL_RCC_OscConfig+0x162>
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	2b18      	cmp	r3, #24
 8001982:	d13a      	bne.n	80019fa <HAL_RCC_OscConfig+0x1ce>
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d135      	bne.n	80019fa <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800198e:	4b49      	ldr	r3, [pc, #292]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <HAL_RCC_OscConfig+0x17a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e34b      	b.n	800203e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a6:	f7ff fbb9 	bl	800111c <HAL_GetREVID>
 80019aa:	4602      	mov	r2, r0
 80019ac:	f241 0303 	movw	r3, #4099	; 0x1003
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d817      	bhi.n	80019e4 <HAL_RCC_OscConfig+0x1b8>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	2b40      	cmp	r3, #64	; 0x40
 80019ba:	d108      	bne.n	80019ce <HAL_RCC_OscConfig+0x1a2>
 80019bc:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80019c4:	4a3b      	ldr	r2, [pc, #236]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 80019c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ca:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019cc:	e07a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ce:	4b39      	ldr	r3, [pc, #228]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	031b      	lsls	r3, r3, #12
 80019dc:	4935      	ldr	r1, [pc, #212]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e2:	e06f      	b.n	8001ac4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e4:	4b33      	ldr	r3, [pc, #204]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	061b      	lsls	r3, r3, #24
 80019f2:	4930      	ldr	r1, [pc, #192]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019f8:	e064      	b.n	8001ac4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d045      	beq.n	8001a8e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a02:	4b2c      	ldr	r3, [pc, #176]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 0219 	bic.w	r2, r3, #25
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	4929      	ldr	r1, [pc, #164]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7ff fb54 	bl	80010c0 <HAL_GetTick>
 8001a18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a1c:	f7ff fb50 	bl	80010c0 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e307      	b.n	800203e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a2e:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3a:	f7ff fb6f 	bl	800111c <HAL_GetREVID>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	f241 0303 	movw	r3, #4099	; 0x1003
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d817      	bhi.n	8001a78 <HAL_RCC_OscConfig+0x24c>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	2b40      	cmp	r3, #64	; 0x40
 8001a4e:	d108      	bne.n	8001a62 <HAL_RCC_OscConfig+0x236>
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001a58:	4a16      	ldr	r2, [pc, #88]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 8001a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5e:	6053      	str	r3, [r2, #4]
 8001a60:	e030      	b.n	8001ac4 <HAL_RCC_OscConfig+0x298>
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	031b      	lsls	r3, r3, #12
 8001a70:	4910      	ldr	r1, [pc, #64]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	604b      	str	r3, [r1, #4]
 8001a76:	e025      	b.n	8001ac4 <HAL_RCC_OscConfig+0x298>
 8001a78:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	061b      	lsls	r3, r3, #24
 8001a86:	490b      	ldr	r1, [pc, #44]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
 8001a8c:	e01a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a08      	ldr	r2, [pc, #32]	; (8001ab4 <HAL_RCC_OscConfig+0x288>)
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9a:	f7ff fb11 	bl	80010c0 <HAL_GetTick>
 8001a9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001aa0:	e00a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa2:	f7ff fb0d 	bl	80010c0 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d903      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e2c4      	b.n	800203e <HAL_RCC_OscConfig+0x812>
 8001ab4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ab8:	4ba4      	ldr	r3, [pc, #656]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1ee      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0310 	and.w	r3, r3, #16
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80a9 	beq.w	8001c24 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad2:	4b9e      	ldr	r3, [pc, #632]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ada:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001adc:	4b9b      	ldr	r3, [pc, #620]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d007      	beq.n	8001af8 <HAL_RCC_OscConfig+0x2cc>
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2b18      	cmp	r3, #24
 8001aec:	d13a      	bne.n	8001b64 <HAL_RCC_OscConfig+0x338>
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d135      	bne.n	8001b64 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001af8:	4b94      	ldr	r3, [pc, #592]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_OscConfig+0x2e4>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	2b80      	cmp	r3, #128	; 0x80
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e296      	b.n	800203e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b10:	f7ff fb04 	bl	800111c <HAL_GetREVID>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f241 0303 	movw	r3, #4099	; 0x1003
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d817      	bhi.n	8001b4e <HAL_RCC_OscConfig+0x322>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	d108      	bne.n	8001b38 <HAL_RCC_OscConfig+0x30c>
 8001b26:	4b89      	ldr	r3, [pc, #548]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b2e:	4a87      	ldr	r2, [pc, #540]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001b30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b34:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b36:	e075      	b.n	8001c24 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b38:	4b84      	ldr	r3, [pc, #528]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	069b      	lsls	r3, r3, #26
 8001b46:	4981      	ldr	r1, [pc, #516]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b4c:	e06a      	b.n	8001c24 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b4e:	4b7f      	ldr	r3, [pc, #508]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	061b      	lsls	r3, r3, #24
 8001b5c:	497b      	ldr	r1, [pc, #492]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b62:	e05f      	b.n	8001c24 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d042      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b6c:	4b77      	ldr	r3, [pc, #476]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a76      	ldr	r2, [pc, #472]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff faa2 	bl	80010c0 <HAL_GetTick>
 8001b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b80:	f7ff fa9e 	bl	80010c0 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e255      	b.n	800203e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b92:	4b6e      	ldr	r3, [pc, #440]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b9e:	f7ff fabd 	bl	800111c <HAL_GetREVID>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	f241 0303 	movw	r3, #4099	; 0x1003
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d817      	bhi.n	8001bdc <HAL_RCC_OscConfig+0x3b0>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d108      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x39a>
 8001bb4:	4b65      	ldr	r3, [pc, #404]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001bbc:	4a63      	ldr	r2, [pc, #396]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001bbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001bc2:	6053      	str	r3, [r2, #4]
 8001bc4:	e02e      	b.n	8001c24 <HAL_RCC_OscConfig+0x3f8>
 8001bc6:	4b61      	ldr	r3, [pc, #388]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	069b      	lsls	r3, r3, #26
 8001bd4:	495d      	ldr	r1, [pc, #372]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	604b      	str	r3, [r1, #4]
 8001bda:	e023      	b.n	8001c24 <HAL_RCC_OscConfig+0x3f8>
 8001bdc:	4b5b      	ldr	r3, [pc, #364]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	061b      	lsls	r3, r3, #24
 8001bea:	4958      	ldr	r1, [pc, #352]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60cb      	str	r3, [r1, #12]
 8001bf0:	e018      	b.n	8001c24 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001bf2:	4b56      	ldr	r3, [pc, #344]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a55      	ldr	r2, [pc, #340]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001bf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fa5f 	bl	80010c0 <HAL_GetTick>
 8001c02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c06:	f7ff fa5b 	bl	80010c0 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e212      	b.n	800203e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c18:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f0      	bne.n	8001c06 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d036      	beq.n	8001c9e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d019      	beq.n	8001c6c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c38:	4b44      	ldr	r3, [pc, #272]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c3c:	4a43      	ldr	r2, [pc, #268]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c44:	f7ff fa3c 	bl	80010c0 <HAL_GetTick>
 8001c48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c4c:	f7ff fa38 	bl	80010c0 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e1ef      	b.n	800203e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c5e:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x420>
 8001c6a:	e018      	b.n	8001c9e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6c:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c70:	4a36      	ldr	r2, [pc, #216]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c78:	f7ff fa22 	bl	80010c0 <HAL_GetTick>
 8001c7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c80:	f7ff fa1e 	bl	80010c0 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e1d5      	b.n	800203e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c92:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d036      	beq.n	8001d18 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d019      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cb2:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a25      	ldr	r2, [pc, #148]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001cb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cbc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cbe:	f7ff f9ff 	bl	80010c0 <HAL_GetTick>
 8001cc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001cc6:	f7ff f9fb 	bl	80010c0 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e1b2      	b.n	800203e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cd8:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x49a>
 8001ce4:	e018      	b.n	8001d18 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ce6:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a18      	ldr	r2, [pc, #96]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001cec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cf0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cf2:	f7ff f9e5 	bl	80010c0 <HAL_GetTick>
 8001cf6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001cfa:	f7ff f9e1 	bl	80010c0 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e198      	b.n	800203e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <HAL_RCC_OscConfig+0x520>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1f0      	bne.n	8001cfa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 8085 	beq.w	8001e30 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_RCC_OscConfig+0x524>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a09      	ldr	r2, [pc, #36]	; (8001d50 <HAL_RCC_OscConfig+0x524>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d32:	f7ff f9c5 	bl	80010c0 <HAL_GetTick>
 8001d36:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d38:	e00c      	b.n	8001d54 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d3a:	f7ff f9c1 	bl	80010c0 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b64      	cmp	r3, #100	; 0x64
 8001d46:	d905      	bls.n	8001d54 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e178      	b.n	800203e <HAL_RCC_OscConfig+0x812>
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d54:	4b96      	ldr	r3, [pc, #600]	; (8001fb0 <HAL_RCC_OscConfig+0x784>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0ec      	beq.n	8001d3a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x54a>
 8001d68:	4b92      	ldr	r3, [pc, #584]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	4a91      	ldr	r2, [pc, #580]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6713      	str	r3, [r2, #112]	; 0x70
 8001d74:	e02d      	b.n	8001dd2 <HAL_RCC_OscConfig+0x5a6>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x56c>
 8001d7e:	4b8d      	ldr	r3, [pc, #564]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d82:	4a8c      	ldr	r2, [pc, #560]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8a:	4b8a      	ldr	r3, [pc, #552]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8e:	4a89      	ldr	r2, [pc, #548]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	6713      	str	r3, [r2, #112]	; 0x70
 8001d96:	e01c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x5a6>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_OscConfig+0x58e>
 8001da0:	4b84      	ldr	r3, [pc, #528]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	4a83      	ldr	r2, [pc, #524]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6713      	str	r3, [r2, #112]	; 0x70
 8001dac:	4b81      	ldr	r3, [pc, #516]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db0:	4a80      	ldr	r2, [pc, #512]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6713      	str	r3, [r2, #112]	; 0x70
 8001db8:	e00b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x5a6>
 8001dba:	4b7e      	ldr	r3, [pc, #504]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	4a7d      	ldr	r2, [pc, #500]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc6:	4b7b      	ldr	r3, [pc, #492]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dca:	4a7a      	ldr	r2, [pc, #488]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d015      	beq.n	8001e06 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dda:	f7ff f971 	bl	80010c0 <HAL_GetTick>
 8001dde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7ff f96d 	bl	80010c0 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e122      	b.n	800203e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001df8:	4b6e      	ldr	r3, [pc, #440]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ee      	beq.n	8001de2 <HAL_RCC_OscConfig+0x5b6>
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e06:	f7ff f95b 	bl	80010c0 <HAL_GetTick>
 8001e0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7ff f957 	bl	80010c0 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e10c      	b.n	800203e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e24:	4b63      	ldr	r3, [pc, #396]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1ee      	bne.n	8001e0e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 8101 	beq.w	800203c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e3a:	4b5e      	ldr	r3, [pc, #376]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e42:	2b18      	cmp	r3, #24
 8001e44:	f000 80bc 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	f040 8095 	bne.w	8001f7c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e52:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a57      	ldr	r2, [pc, #348]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001e58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5e:	f7ff f92f 	bl	80010c0 <HAL_GetTick>
 8001e62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e66:	f7ff f92b 	bl	80010c0 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e0e2      	b.n	800203e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e78:	4b4e      	ldr	r3, [pc, #312]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f0      	bne.n	8001e66 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e84:	4b4b      	ldr	r3, [pc, #300]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001e86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e88:	4b4b      	ldr	r3, [pc, #300]	; (8001fb8 <HAL_RCC_OscConfig+0x78c>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e94:	0112      	lsls	r2, r2, #4
 8001e96:	430a      	orrs	r2, r1
 8001e98:	4946      	ldr	r1, [pc, #280]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	628b      	str	r3, [r1, #40]	; 0x28
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eac:	3b01      	subs	r3, #1
 8001eae:	025b      	lsls	r3, r3, #9
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	041b      	lsls	r3, r3, #16
 8001ebc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	061b      	lsls	r3, r3, #24
 8001eca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001ece:	4939      	ldr	r1, [pc, #228]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001ed4:	4b37      	ldr	r3, [pc, #220]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	4a36      	ldr	r2, [pc, #216]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ee0:	4b34      	ldr	r3, [pc, #208]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ee4:	4b35      	ldr	r3, [pc, #212]	; (8001fbc <HAL_RCC_OscConfig+0x790>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001eec:	00d2      	lsls	r2, r2, #3
 8001eee:	4931      	ldr	r1, [pc, #196]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ef4:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	f023 020c 	bic.w	r2, r3, #12
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	492c      	ldr	r1, [pc, #176]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f06:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	f023 0202 	bic.w	r2, r3, #2
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	4928      	ldr	r1, [pc, #160]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f18:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	4a25      	ldr	r2, [pc, #148]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f24:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	4a22      	ldr	r2, [pc, #136]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f30:	4b20      	ldr	r3, [pc, #128]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001f36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	4a1c      	ldr	r2, [pc, #112]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f48:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7ff f8b4 	bl	80010c0 <HAL_GetTick>
 8001f58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7ff f8b0 	bl	80010c0 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e067      	b.n	800203e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x730>
 8001f7a:	e05f      	b.n	800203c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0c      	ldr	r2, [pc, #48]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7ff f89a 	bl	80010c0 <HAL_GetTick>
 8001f8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f90:	f7ff f896 	bl	80010c0 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e04d      	b.n	800203e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <HAL_RCC_OscConfig+0x788>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x764>
 8001fae:	e045      	b.n	800203c <HAL_RCC_OscConfig+0x810>
 8001fb0:	58024800 	.word	0x58024800
 8001fb4:	58024400 	.word	0x58024400
 8001fb8:	fffffc0c 	.word	0xfffffc0c
 8001fbc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001fc0:	4b21      	ldr	r3, [pc, #132]	; (8002048 <HAL_RCC_OscConfig+0x81c>)
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_OscConfig+0x81c>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d031      	beq.n	8002038 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	f003 0203 	and.w	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d12a      	bne.n	8002038 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d122      	bne.n	8002038 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d11a      	bne.n	8002038 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	0a5b      	lsrs	r3, r3, #9
 8002006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002010:	429a      	cmp	r2, r3
 8002012:	d111      	bne.n	8002038 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	0c1b      	lsrs	r3, r3, #16
 8002018:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002020:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d108      	bne.n	8002038 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	0e1b      	lsrs	r3, r3, #24
 800202a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002032:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3730      	adds	r7, #48	; 0x30
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	58024400 	.word	0x58024400

0800204c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e19c      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002060:	4b8a      	ldr	r3, [pc, #552]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d910      	bls.n	8002090 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206e:	4b87      	ldr	r3, [pc, #540]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 020f 	bic.w	r2, r3, #15
 8002076:	4985      	ldr	r1, [pc, #532]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207e:	4b83      	ldr	r3, [pc, #524]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e184      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d010      	beq.n	80020be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	4b7b      	ldr	r3, [pc, #492]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d908      	bls.n	80020be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020ac:	4b78      	ldr	r3, [pc, #480]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	4975      	ldr	r1, [pc, #468]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d010      	beq.n	80020ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	4b70      	ldr	r3, [pc, #448]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d908      	bls.n	80020ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020da:	4b6d      	ldr	r3, [pc, #436]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	496a      	ldr	r1, [pc, #424]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d010      	beq.n	800211a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699a      	ldr	r2, [r3, #24]
 80020fc:	4b64      	ldr	r3, [pc, #400]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002104:	429a      	cmp	r2, r3
 8002106:	d908      	bls.n	800211a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002108:	4b61      	ldr	r3, [pc, #388]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	495e      	ldr	r1, [pc, #376]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002116:	4313      	orrs	r3, r2
 8002118:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d010      	beq.n	8002148 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	4b59      	ldr	r3, [pc, #356]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002132:	429a      	cmp	r2, r3
 8002134:	d908      	bls.n	8002148 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002136:	4b56      	ldr	r3, [pc, #344]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	4953      	ldr	r1, [pc, #332]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002144:	4313      	orrs	r3, r2
 8002146:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d010      	beq.n	8002176 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	4b4d      	ldr	r3, [pc, #308]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	429a      	cmp	r2, r3
 8002162:	d908      	bls.n	8002176 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002164:	4b4a      	ldr	r3, [pc, #296]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f023 020f 	bic.w	r2, r3, #15
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4947      	ldr	r1, [pc, #284]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002172:	4313      	orrs	r3, r2
 8002174:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d055      	beq.n	800222e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002182:	4b43      	ldr	r3, [pc, #268]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	4940      	ldr	r1, [pc, #256]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002190:	4313      	orrs	r3, r2
 8002192:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d107      	bne.n	80021ac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800219c:	4b3c      	ldr	r3, [pc, #240]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d121      	bne.n	80021ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0f6      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d107      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021b4:	4b36      	ldr	r3, [pc, #216]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d115      	bne.n	80021ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0ea      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d109      	bne.n	80021ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0de      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021dc:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0d6      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021ec:	4b28      	ldr	r3, [pc, #160]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f023 0207 	bic.w	r2, r3, #7
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4925      	ldr	r1, [pc, #148]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fe:	f7fe ff5f 	bl	80010c0 <HAL_GetTick>
 8002202:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002204:	e00a      	b.n	800221c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002206:	f7fe ff5b 	bl	80010c0 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f241 3288 	movw	r2, #5000	; 0x1388
 8002214:	4293      	cmp	r3, r2
 8002216:	d901      	bls.n	800221c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e0be      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221c:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	429a      	cmp	r2, r3
 800222c:	d1eb      	bne.n	8002206 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d010      	beq.n	800225c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	4b14      	ldr	r3, [pc, #80]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	429a      	cmp	r2, r3
 8002248:	d208      	bcs.n	800225c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f023 020f 	bic.w	r2, r3, #15
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	490e      	ldr	r1, [pc, #56]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002258:	4313      	orrs	r3, r2
 800225a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d214      	bcs.n	8002294 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 020f 	bic.w	r2, r3, #15
 8002272:	4906      	ldr	r1, [pc, #24]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b04      	ldr	r3, [pc, #16]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d005      	beq.n	8002294 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e086      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
 800228c:	52002000 	.word	0x52002000
 8002290:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d010      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d208      	bcs.n	80022c2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022b0:	4b3c      	ldr	r3, [pc, #240]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	4939      	ldr	r1, [pc, #228]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d010      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	4b34      	ldr	r3, [pc, #208]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022da:	429a      	cmp	r2, r3
 80022dc:	d208      	bcs.n	80022f0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022de:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	492e      	ldr	r1, [pc, #184]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d010      	beq.n	800231e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699a      	ldr	r2, [r3, #24]
 8002300:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002308:	429a      	cmp	r2, r3
 800230a:	d208      	bcs.n	800231e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800230c:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	4922      	ldr	r1, [pc, #136]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 800231a:	4313      	orrs	r3, r2
 800231c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	2b00      	cmp	r3, #0
 8002328:	d010      	beq.n	800234c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69da      	ldr	r2, [r3, #28]
 800232e:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002336:	429a      	cmp	r2, r3
 8002338:	d208      	bcs.n	800234c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4917      	ldr	r1, [pc, #92]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 8002348:	4313      	orrs	r3, r2
 800234a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800234c:	f000 f834 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002350:	4601      	mov	r1, r0
 8002352:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	f003 030f 	and.w	r3, r3, #15
 800235c:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <HAL_RCC_ClockConfig+0x35c>)
 800235e:	5cd3      	ldrb	r3, [r2, r3]
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	fa21 f303 	lsr.w	r3, r1, r3
 8002368:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	4a0d      	ldr	r2, [pc, #52]	; (80023a8 <HAL_RCC_ClockConfig+0x35c>)
 8002374:	5cd3      	ldrb	r3, [r2, r3]
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
 8002380:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x360>)
 8002382:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002384:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <HAL_RCC_ClockConfig+0x364>)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_RCC_ClockConfig+0x368>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe fe4c 	bl	800102c <HAL_InitTick>
 8002394:	4603      	mov	r3, r0
 8002396:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002398:	7bfb      	ldrb	r3, [r7, #15]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	58024400 	.word	0x58024400
 80023a8:	0800613c 	.word	0x0800613c
 80023ac:	20000004 	.word	0x20000004
 80023b0:	20000000 	.word	0x20000000
 80023b4:	20000008 	.word	0x20000008

080023b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	; 0x24
 80023bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023be:	4baf      	ldr	r3, [pc, #700]	; (800267c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023c6:	2b18      	cmp	r3, #24
 80023c8:	f200 814e 	bhi.w	8002668 <HAL_RCC_GetSysClockFreq+0x2b0>
 80023cc:	a201      	add	r2, pc, #4	; (adr r2, 80023d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80023ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d2:	bf00      	nop
 80023d4:	08002439 	.word	0x08002439
 80023d8:	08002669 	.word	0x08002669
 80023dc:	08002669 	.word	0x08002669
 80023e0:	08002669 	.word	0x08002669
 80023e4:	08002669 	.word	0x08002669
 80023e8:	08002669 	.word	0x08002669
 80023ec:	08002669 	.word	0x08002669
 80023f0:	08002669 	.word	0x08002669
 80023f4:	0800245f 	.word	0x0800245f
 80023f8:	08002669 	.word	0x08002669
 80023fc:	08002669 	.word	0x08002669
 8002400:	08002669 	.word	0x08002669
 8002404:	08002669 	.word	0x08002669
 8002408:	08002669 	.word	0x08002669
 800240c:	08002669 	.word	0x08002669
 8002410:	08002669 	.word	0x08002669
 8002414:	08002465 	.word	0x08002465
 8002418:	08002669 	.word	0x08002669
 800241c:	08002669 	.word	0x08002669
 8002420:	08002669 	.word	0x08002669
 8002424:	08002669 	.word	0x08002669
 8002428:	08002669 	.word	0x08002669
 800242c:	08002669 	.word	0x08002669
 8002430:	08002669 	.word	0x08002669
 8002434:	0800246b 	.word	0x0800246b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002438:	4b90      	ldr	r3, [pc, #576]	; (800267c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b00      	cmp	r3, #0
 8002442:	d009      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002444:	4b8d      	ldr	r3, [pc, #564]	; (800267c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	08db      	lsrs	r3, r3, #3
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	4a8c      	ldr	r2, [pc, #560]	; (8002680 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
 8002454:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002456:	e10a      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002458:	4b89      	ldr	r3, [pc, #548]	; (8002680 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800245a:	61bb      	str	r3, [r7, #24]
    break;
 800245c:	e107      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800245e:	4b89      	ldr	r3, [pc, #548]	; (8002684 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002460:	61bb      	str	r3, [r7, #24]
    break;
 8002462:	e104      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002464:	4b88      	ldr	r3, [pc, #544]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002466:	61bb      	str	r3, [r7, #24]
    break;
 8002468:	e101      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800246a:	4b84      	ldr	r3, [pc, #528]	; (800267c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002474:	4b81      	ldr	r3, [pc, #516]	; (800267c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800247e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002480:	4b7e      	ldr	r3, [pc, #504]	; (800267c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800248a:	4b7c      	ldr	r3, [pc, #496]	; (800267c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800248c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248e:	08db      	lsrs	r3, r3, #3
 8002490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80da 	beq.w	8002662 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d05a      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0x1b2>
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d302      	bcc.n	80024be <HAL_RCC_GetSysClockFreq+0x106>
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d078      	beq.n	80025ae <HAL_RCC_GetSysClockFreq+0x1f6>
 80024bc:	e099      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024be:	4b6f      	ldr	r3, [pc, #444]	; (800267c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0320 	and.w	r3, r3, #32
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d02d      	beq.n	8002526 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024ca:	4b6c      	ldr	r3, [pc, #432]	; (800267c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	08db      	lsrs	r3, r3, #3
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	4a6a      	ldr	r2, [pc, #424]	; (8002680 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80024d6:	fa22 f303 	lsr.w	r3, r2, r3
 80024da:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	ee07 3a90 	vmov	s15, r3
 80024e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	ee07 3a90 	vmov	s15, r3
 80024ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024f4:	4b61      	ldr	r3, [pc, #388]	; (800267c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024fc:	ee07 3a90 	vmov	s15, r3
 8002500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002504:	ed97 6a02 	vldr	s12, [r7, #8]
 8002508:	eddf 5a60 	vldr	s11, [pc, #384]	; 800268c <HAL_RCC_GetSysClockFreq+0x2d4>
 800250c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002510:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002514:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002518:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800251c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002520:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002524:	e087      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	ee07 3a90 	vmov	s15, r3
 800252c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002530:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002690 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002534:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002538:	4b50      	ldr	r3, [pc, #320]	; (800267c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002548:	ed97 6a02 	vldr	s12, [r7, #8]
 800254c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800268c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002550:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002554:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002558:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800255c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002564:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002568:	e065      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	ee07 3a90 	vmov	s15, r3
 8002570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002574:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002694 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800257c:	4b3f      	ldr	r3, [pc, #252]	; (800267c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002584:	ee07 3a90 	vmov	s15, r3
 8002588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800258c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002590:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800268c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002594:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002598:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800259c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025ac:	e043      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	ee07 3a90 	vmov	s15, r3
 80025b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025b8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002698 <HAL_RCC_GetSysClockFreq+0x2e0>
 80025bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025c0:	4b2e      	ldr	r3, [pc, #184]	; (800267c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c8:	ee07 3a90 	vmov	s15, r3
 80025cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80025d4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800268c <HAL_RCC_GetSysClockFreq+0x2d4>
 80025d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025f0:	e021      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	ee07 3a90 	vmov	s15, r3
 80025f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025fc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002694 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800260c:	ee07 3a90 	vmov	s15, r3
 8002610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002614:	ed97 6a02 	vldr	s12, [r7, #8]
 8002618:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800268c <HAL_RCC_GetSysClockFreq+0x2d4>
 800261c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002624:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002628:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800262c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002630:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002634:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002636:	4b11      	ldr	r3, [pc, #68]	; (800267c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	0a5b      	lsrs	r3, r3, #9
 800263c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002640:	3301      	adds	r3, #1
 8002642:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800264e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002652:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800265a:	ee17 3a90 	vmov	r3, s15
 800265e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002660:	e005      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
    break;
 8002666:	e002      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800266a:	61bb      	str	r3, [r7, #24]
    break;
 800266c:	bf00      	nop
  }

  return sysclockfreq;
 800266e:	69bb      	ldr	r3, [r7, #24]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3724      	adds	r7, #36	; 0x24
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	58024400 	.word	0x58024400
 8002680:	03d09000 	.word	0x03d09000
 8002684:	003d0900 	.word	0x003d0900
 8002688:	017d7840 	.word	0x017d7840
 800268c:	46000000 	.word	0x46000000
 8002690:	4c742400 	.word	0x4c742400
 8002694:	4a742400 	.word	0x4a742400
 8002698:	4bbebc20 	.word	0x4bbebc20

0800269c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80026a2:	f7ff fe89 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 80026a6:	4601      	mov	r1, r0
 80026a8:	4b10      	ldr	r3, [pc, #64]	; (80026ec <HAL_RCC_GetHCLKFreq+0x50>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	4a0f      	ldr	r2, [pc, #60]	; (80026f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80026b4:	5cd3      	ldrb	r3, [r2, r3]
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	fa21 f303 	lsr.w	r3, r1, r3
 80026be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026c0:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <HAL_RCC_GetHCLKFreq+0x50>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	4a09      	ldr	r2, [pc, #36]	; (80026f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80026ca:	5cd3      	ldrb	r3, [r2, r3]
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	fa22 f303 	lsr.w	r3, r2, r3
 80026d6:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80026d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026da:	4a07      	ldr	r2, [pc, #28]	; (80026f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80026e2:	681b      	ldr	r3, [r3, #0]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	58024400 	.word	0x58024400
 80026f0:	0800613c 	.word	0x0800613c
 80026f4:	20000004 	.word	0x20000004
 80026f8:	20000000 	.word	0x20000000

080026fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002700:	f7ff ffcc 	bl	800269c <HAL_RCC_GetHCLKFreq>
 8002704:	4601      	mov	r1, r0
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	4a04      	ldr	r2, [pc, #16]	; (8002724 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002712:	5cd3      	ldrb	r3, [r2, r3]
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800271c:	4618      	mov	r0, r3
 800271e:	bd80      	pop	{r7, pc}
 8002720:	58024400 	.word	0x58024400
 8002724:	0800613c 	.word	0x0800613c

08002728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800272c:	f7ff ffb6 	bl	800269c <HAL_RCC_GetHCLKFreq>
 8002730:	4601      	mov	r1, r0
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	4a04      	ldr	r2, [pc, #16]	; (8002750 <HAL_RCC_GetPCLK2Freq+0x28>)
 800273e:	5cd3      	ldrb	r3, [r2, r3]
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002748:	4618      	mov	r0, r3
 800274a:	bd80      	pop	{r7, pc}
 800274c:	58024400 	.word	0x58024400
 8002750:	0800613c 	.word	0x0800613c

08002754 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800275c:	2300      	movs	r3, #0
 800275e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002760:	2300      	movs	r3, #0
 8002762:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d03d      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002778:	d013      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800277a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800277e:	d802      	bhi.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002780:	2b00      	cmp	r3, #0
 8002782:	d007      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002784:	e01f      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002786:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800278a:	d013      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800278c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002790:	d01c      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002792:	e018      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002794:	4baf      	ldr	r3, [pc, #700]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	4aae      	ldr	r2, [pc, #696]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800279a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800279e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027a0:	e015      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3304      	adds	r3, #4
 80027a6:	2102      	movs	r1, #2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 f96f 	bl	8003a8c <RCCEx_PLL2_Config>
 80027ae:	4603      	mov	r3, r0
 80027b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027b2:	e00c      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3324      	adds	r3, #36	; 0x24
 80027b8:	2102      	movs	r1, #2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f001 fa18 	bl	8003bf0 <RCCEx_PLL3_Config>
 80027c0:	4603      	mov	r3, r0
 80027c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027c4:	e003      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	75fb      	strb	r3, [r7, #23]
      break;
 80027ca:	e000      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80027cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d109      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80027d4:	4b9f      	ldr	r3, [pc, #636]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027e0:	499c      	ldr	r1, [pc, #624]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	650b      	str	r3, [r1, #80]	; 0x50
 80027e6:	e001      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
 80027ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d03d      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d826      	bhi.n	800284e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002800:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8002802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002806:	bf00      	nop
 8002808:	0800281d 	.word	0x0800281d
 800280c:	0800282b 	.word	0x0800282b
 8002810:	0800283d 	.word	0x0800283d
 8002814:	08002855 	.word	0x08002855
 8002818:	08002855 	.word	0x08002855
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800281c:	4b8d      	ldr	r3, [pc, #564]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	4a8c      	ldr	r2, [pc, #560]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002826:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002828:	e015      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3304      	adds	r3, #4
 800282e:	2100      	movs	r1, #0
 8002830:	4618      	mov	r0, r3
 8002832:	f001 f92b 	bl	8003a8c <RCCEx_PLL2_Config>
 8002836:	4603      	mov	r3, r0
 8002838:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800283a:	e00c      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3324      	adds	r3, #36	; 0x24
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f001 f9d4 	bl	8003bf0 <RCCEx_PLL3_Config>
 8002848:	4603      	mov	r3, r0
 800284a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800284c:	e003      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	75fb      	strb	r3, [r7, #23]
      break;
 8002852:	e000      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d109      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800285c:	4b7d      	ldr	r3, [pc, #500]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800285e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002860:	f023 0207 	bic.w	r2, r3, #7
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002868:	497a      	ldr	r1, [pc, #488]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800286a:	4313      	orrs	r3, r2
 800286c:	650b      	str	r3, [r1, #80]	; 0x50
 800286e:	e001      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002870:	7dfb      	ldrb	r3, [r7, #23]
 8002872:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800287c:	2b00      	cmp	r3, #0
 800287e:	d03e      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002884:	2b80      	cmp	r3, #128	; 0x80
 8002886:	d01c      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002888:	2b80      	cmp	r3, #128	; 0x80
 800288a:	d804      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	d00d      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002894:	e01e      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002896:	2bc0      	cmp	r3, #192	; 0xc0
 8002898:	d01f      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x186>
 800289a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800289e:	d01e      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80028a0:	e018      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a2:	4b6c      	ldr	r3, [pc, #432]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	4a6b      	ldr	r2, [pc, #428]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80028ae:	e017      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3304      	adds	r3, #4
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f001 f8e8 	bl	8003a8c <RCCEx_PLL2_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80028c0:	e00e      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3324      	adds	r3, #36	; 0x24
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f001 f991 	bl	8003bf0 <RCCEx_PLL3_Config>
 80028ce:	4603      	mov	r3, r0
 80028d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80028d2:	e005      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	75fb      	strb	r3, [r7, #23]
      break;
 80028d8:	e002      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80028da:	bf00      	nop
 80028dc:	e000      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80028de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028e0:	7dfb      	ldrb	r3, [r7, #23]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80028e6:	4b5b      	ldr	r3, [pc, #364]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	4958      	ldr	r1, [pc, #352]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	650b      	str	r3, [r1, #80]	; 0x50
 80028f8:	e001      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
 80028fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002906:	2b00      	cmp	r3, #0
 8002908:	d044      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002910:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002914:	d01f      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800291a:	d805      	bhi.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002920:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002924:	d00e      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8002926:	e01f      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002928:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800292c:	d01f      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800292e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002932:	d01e      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002934:	e018      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002936:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	4a46      	ldr	r2, [pc, #280]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800293c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002940:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002942:	e017      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3304      	adds	r3, #4
 8002948:	2100      	movs	r1, #0
 800294a:	4618      	mov	r0, r3
 800294c:	f001 f89e 	bl	8003a8c <RCCEx_PLL2_Config>
 8002950:	4603      	mov	r3, r0
 8002952:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002954:	e00e      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3324      	adds	r3, #36	; 0x24
 800295a:	2100      	movs	r1, #0
 800295c:	4618      	mov	r0, r3
 800295e:	f001 f947 	bl	8003bf0 <RCCEx_PLL3_Config>
 8002962:	4603      	mov	r3, r0
 8002964:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002966:	e005      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	75fb      	strb	r3, [r7, #23]
      break;
 800296c:	e002      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800296e:	bf00      	nop
 8002970:	e000      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002974:	7dfb      	ldrb	r3, [r7, #23]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10a      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800297a:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002988:	4932      	ldr	r1, [pc, #200]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800298a:	4313      	orrs	r3, r2
 800298c:	658b      	str	r3, [r1, #88]	; 0x58
 800298e:	e001      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002990:	7dfb      	ldrb	r3, [r7, #23]
 8002992:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800299c:	2b00      	cmp	r3, #0
 800299e:	d044      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029aa:	d01f      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 80029ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029b0:	d805      	bhi.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x278>
 80029b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029ba:	d00e      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x286>
 80029bc:	e01f      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80029be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029c2:	d01f      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80029c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029c8:	d01e      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80029ca:	e018      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029cc:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	4a20      	ldr	r2, [pc, #128]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029d8:	e017      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3304      	adds	r3, #4
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f001 f853 	bl	8003a8c <RCCEx_PLL2_Config>
 80029e6:	4603      	mov	r3, r0
 80029e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80029ea:	e00e      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3324      	adds	r3, #36	; 0x24
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f001 f8fc 	bl	8003bf0 <RCCEx_PLL3_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029fc:	e005      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	75fb      	strb	r3, [r7, #23]
      break;
 8002a02:	e002      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002a04:	bf00      	nop
 8002a06:	e000      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a10:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a14:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a1e:	490d      	ldr	r1, [pc, #52]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	658b      	str	r3, [r1, #88]	; 0x58
 8002a24:	e001      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
 8002a28:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d035      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a3a:	2b10      	cmp	r3, #16
 8002a3c:	d00c      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002a3e:	2b10      	cmp	r3, #16
 8002a40:	d802      	bhi.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d01b      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002a46:	e017      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	d00c      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002a4c:	2b30      	cmp	r3, #48	; 0x30
 8002a4e:	d018      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002a50:	e012      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002a52:	bf00      	nop
 8002a54:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a58:	4baf      	ldr	r3, [pc, #700]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	4aae      	ldr	r2, [pc, #696]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002a64:	e00e      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f001 f80d 	bl	8003a8c <RCCEx_PLL2_Config>
 8002a72:	4603      	mov	r3, r0
 8002a74:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002a76:	e005      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a7c:	e002      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002a7e:	bf00      	nop
 8002a80:	e000      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002a82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a84:	7dfb      	ldrb	r3, [r7, #23]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a8a:	4ba3      	ldr	r3, [pc, #652]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a96:	49a0      	ldr	r1, [pc, #640]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a9c:	e001      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a9e:	7dfb      	ldrb	r3, [r7, #23]
 8002aa0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d042      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ab6:	d01f      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002abc:	d805      	bhi.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac6:	d00e      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002ac8:	e01f      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002aca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ace:	d01f      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002ad0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ad4:	d01e      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002ad6:	e018      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ad8:	4b8f      	ldr	r3, [pc, #572]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	4a8e      	ldr	r2, [pc, #568]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ae4:	e017      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	2100      	movs	r1, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 ffcd 	bl	8003a8c <RCCEx_PLL2_Config>
 8002af2:	4603      	mov	r3, r0
 8002af4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002af6:	e00e      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3324      	adds	r3, #36	; 0x24
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f001 f876 	bl	8003bf0 <RCCEx_PLL3_Config>
 8002b04:	4603      	mov	r3, r0
 8002b06:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b08:	e005      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b0e:	e002      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002b10:	bf00      	nop
 8002b12:	e000      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002b14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d109      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b1c:	4b7e      	ldr	r3, [pc, #504]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b20:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b28:	497b      	ldr	r1, [pc, #492]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	650b      	str	r3, [r1, #80]	; 0x50
 8002b2e:	e001      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
 8002b32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d042      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b48:	d01b      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002b4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b4e:	d805      	bhi.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d022      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002b5a:	e01b      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002b5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b60:	d01d      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002b62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b66:	d01c      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002b68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b6c:	d01b      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002b6e:	e011      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3304      	adds	r3, #4
 8002b74:	2101      	movs	r1, #1
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 ff88 	bl	8003a8c <RCCEx_PLL2_Config>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b80:	e012      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3324      	adds	r3, #36	; 0x24
 8002b86:	2101      	movs	r1, #1
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f001 f831 	bl	8003bf0 <RCCEx_PLL3_Config>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b92:	e009      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	75fb      	strb	r3, [r7, #23]
      break;
 8002b98:	e006      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002b9a:	bf00      	nop
 8002b9c:	e004      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e002      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e000      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ba8:	7dfb      	ldrb	r3, [r7, #23]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d109      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002bae:	4b5a      	ldr	r3, [pc, #360]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bba:	4957      	ldr	r1, [pc, #348]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	650b      	str	r3, [r1, #80]	; 0x50
 8002bc0:	e001      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc2:	7dfb      	ldrb	r3, [r7, #23]
 8002bc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d044      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bdc:	d01b      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002be2:	d805      	bhi.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d022      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002be8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bec:	d00a      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002bee:	e01b      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf4:	d01d      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bfa:	d01c      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002bfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c00:	d01b      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002c02:	e011      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3304      	adds	r3, #4
 8002c08:	2101      	movs	r1, #1
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 ff3e 	bl	8003a8c <RCCEx_PLL2_Config>
 8002c10:	4603      	mov	r3, r0
 8002c12:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c14:	e012      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3324      	adds	r3, #36	; 0x24
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 ffe7 	bl	8003bf0 <RCCEx_PLL3_Config>
 8002c22:	4603      	mov	r3, r0
 8002c24:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c26:	e009      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c2c:	e006      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002c2e:	bf00      	nop
 8002c30:	e004      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002c32:	bf00      	nop
 8002c34:	e002      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002c36:	bf00      	nop
 8002c38:	e000      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10a      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c42:	4b35      	ldr	r3, [pc, #212]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c50:	4931      	ldr	r1, [pc, #196]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	658b      	str	r3, [r1, #88]	; 0x58
 8002c56:	e001      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c58:	7dfb      	ldrb	r3, [r7, #23]
 8002c5a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d02d      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c70:	d005      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c76:	d009      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d013      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002c7c:	e00f      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c7e:	4b26      	ldr	r3, [pc, #152]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	4a25      	ldr	r2, [pc, #148]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002c8a:	e00c      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	2101      	movs	r1, #1
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fefa 	bl	8003a8c <RCCEx_PLL2_Config>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002c9c:	e003      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d109      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002cac:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cb8:	4917      	ldr	r1, [pc, #92]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	650b      	str	r3, [r1, #80]	; 0x50
 8002cbe:	e001      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc0:	7dfb      	ldrb	r3, [r7, #23]
 8002cc2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d035      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d81b      	bhi.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002cd8:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cde:	bf00      	nop
 8002ce0:	08002d1d 	.word	0x08002d1d
 8002ce4:	08002cf1 	.word	0x08002cf1
 8002ce8:	08002cff 	.word	0x08002cff
 8002cec:	08002d1d 	.word	0x08002d1d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cf0:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	4a08      	ldr	r2, [pc, #32]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002cfc:	e00f      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3304      	adds	r3, #4
 8002d02:	2102      	movs	r1, #2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fec1 	bl	8003a8c <RCCEx_PLL2_Config>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002d0e:	e006      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	75fb      	strb	r3, [r7, #23]
      break;
 8002d14:	e003      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002d16:	bf00      	nop
 8002d18:	58024400 	.word	0x58024400
      break;
 8002d1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d109      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d24:	4bba      	ldr	r3, [pc, #744]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d28:	f023 0203 	bic.w	r2, r3, #3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	49b7      	ldr	r1, [pc, #732]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d36:	e001      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8086 	beq.w	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d4a:	4bb2      	ldr	r3, [pc, #712]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4ab1      	ldr	r2, [pc, #708]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d56:	f7fe f9b3 	bl	80010c0 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d5c:	e009      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5e:	f7fe f9af 	bl	80010c0 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b64      	cmp	r3, #100	; 0x64
 8002d6a:	d902      	bls.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	75fb      	strb	r3, [r7, #23]
        break;
 8002d70:	e005      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d72:	4ba8      	ldr	r3, [pc, #672]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0ef      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d166      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d84:	4ba2      	ldr	r3, [pc, #648]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d8e:	4053      	eors	r3, r2
 8002d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d013      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d98:	4b9d      	ldr	r3, [pc, #628]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da0:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002da2:	4b9b      	ldr	r3, [pc, #620]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da6:	4a9a      	ldr	r2, [pc, #616]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dae:	4b98      	ldr	r3, [pc, #608]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db2:	4a97      	ldr	r2, [pc, #604]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002dba:	4a95      	ldr	r2, [pc, #596]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dca:	d115      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7fe f978 	bl	80010c0 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dd2:	e00b      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd4:	f7fe f974 	bl	80010c0 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d902      	bls.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	75fb      	strb	r3, [r7, #23]
            break;
 8002dea:	e005      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dec:	4b88      	ldr	r3, [pc, #544]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ed      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d126      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e0c:	d10d      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002e0e:	4b80      	ldr	r3, [pc, #512]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e1c:	0919      	lsrs	r1, r3, #4
 8002e1e:	4b7e      	ldr	r3, [pc, #504]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002e20:	400b      	ands	r3, r1
 8002e22:	497b      	ldr	r1, [pc, #492]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	610b      	str	r3, [r1, #16]
 8002e28:	e005      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002e2a:	4b79      	ldr	r3, [pc, #484]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	4a78      	ldr	r2, [pc, #480]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e34:	6113      	str	r3, [r2, #16]
 8002e36:	4b76      	ldr	r3, [pc, #472]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e44:	4972      	ldr	r1, [pc, #456]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	670b      	str	r3, [r1, #112]	; 0x70
 8002e4a:	e004      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e4c:	7dfb      	ldrb	r3, [r7, #23]
 8002e4e:	75bb      	strb	r3, [r7, #22]
 8002e50:	e001      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
 8002e54:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d07d      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e66:	2b28      	cmp	r3, #40	; 0x28
 8002e68:	d866      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002e6a:	a201      	add	r2, pc, #4	; (adr r2, 8002e70 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e70:	08002f3f 	.word	0x08002f3f
 8002e74:	08002f39 	.word	0x08002f39
 8002e78:	08002f39 	.word	0x08002f39
 8002e7c:	08002f39 	.word	0x08002f39
 8002e80:	08002f39 	.word	0x08002f39
 8002e84:	08002f39 	.word	0x08002f39
 8002e88:	08002f39 	.word	0x08002f39
 8002e8c:	08002f39 	.word	0x08002f39
 8002e90:	08002f15 	.word	0x08002f15
 8002e94:	08002f39 	.word	0x08002f39
 8002e98:	08002f39 	.word	0x08002f39
 8002e9c:	08002f39 	.word	0x08002f39
 8002ea0:	08002f39 	.word	0x08002f39
 8002ea4:	08002f39 	.word	0x08002f39
 8002ea8:	08002f39 	.word	0x08002f39
 8002eac:	08002f39 	.word	0x08002f39
 8002eb0:	08002f27 	.word	0x08002f27
 8002eb4:	08002f39 	.word	0x08002f39
 8002eb8:	08002f39 	.word	0x08002f39
 8002ebc:	08002f39 	.word	0x08002f39
 8002ec0:	08002f39 	.word	0x08002f39
 8002ec4:	08002f39 	.word	0x08002f39
 8002ec8:	08002f39 	.word	0x08002f39
 8002ecc:	08002f39 	.word	0x08002f39
 8002ed0:	08002f3f 	.word	0x08002f3f
 8002ed4:	08002f39 	.word	0x08002f39
 8002ed8:	08002f39 	.word	0x08002f39
 8002edc:	08002f39 	.word	0x08002f39
 8002ee0:	08002f39 	.word	0x08002f39
 8002ee4:	08002f39 	.word	0x08002f39
 8002ee8:	08002f39 	.word	0x08002f39
 8002eec:	08002f39 	.word	0x08002f39
 8002ef0:	08002f3f 	.word	0x08002f3f
 8002ef4:	08002f39 	.word	0x08002f39
 8002ef8:	08002f39 	.word	0x08002f39
 8002efc:	08002f39 	.word	0x08002f39
 8002f00:	08002f39 	.word	0x08002f39
 8002f04:	08002f39 	.word	0x08002f39
 8002f08:	08002f39 	.word	0x08002f39
 8002f0c:	08002f39 	.word	0x08002f39
 8002f10:	08002f3f 	.word	0x08002f3f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3304      	adds	r3, #4
 8002f18:	2101      	movs	r1, #1
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fdb6 	bl	8003a8c <RCCEx_PLL2_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002f24:	e00c      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3324      	adds	r3, #36	; 0x24
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 fe5f 	bl	8003bf0 <RCCEx_PLL3_Config>
 8002f32:	4603      	mov	r3, r0
 8002f34:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002f36:	e003      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f3c:	e000      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8002f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f40:	7dfb      	ldrb	r3, [r7, #23]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f46:	4b32      	ldr	r3, [pc, #200]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f52:	492f      	ldr	r1, [pc, #188]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	654b      	str	r3, [r1, #84]	; 0x54
 8002f58:	e001      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f5a:	7dfb      	ldrb	r3, [r7, #23]
 8002f5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d037      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6e:	2b05      	cmp	r3, #5
 8002f70:	d820      	bhi.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002f72:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f78:	08002fbb 	.word	0x08002fbb
 8002f7c:	08002f91 	.word	0x08002f91
 8002f80:	08002fa3 	.word	0x08002fa3
 8002f84:	08002fbb 	.word	0x08002fbb
 8002f88:	08002fbb 	.word	0x08002fbb
 8002f8c:	08002fbb 	.word	0x08002fbb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3304      	adds	r3, #4
 8002f94:	2101      	movs	r1, #1
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fd78 	bl	8003a8c <RCCEx_PLL2_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002fa0:	e00c      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3324      	adds	r3, #36	; 0x24
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fe21 	bl	8003bf0 <RCCEx_PLL3_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002fb2:	e003      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fb8:	e000      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fbc:	7dfb      	ldrb	r3, [r7, #23]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d109      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002fc2:	4b13      	ldr	r3, [pc, #76]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc6:	f023 0207 	bic.w	r2, r3, #7
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fce:	4910      	ldr	r1, [pc, #64]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	654b      	str	r3, [r1, #84]	; 0x54
 8002fd4:	e001      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
 8002fd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d040      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fec:	2b05      	cmp	r3, #5
 8002fee:	d827      	bhi.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002ff0:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff6:	bf00      	nop
 8002ff8:	08003047 	.word	0x08003047
 8002ffc:	0800301d 	.word	0x0800301d
 8003000:	0800302f 	.word	0x0800302f
 8003004:	08003047 	.word	0x08003047
 8003008:	08003047 	.word	0x08003047
 800300c:	08003047 	.word	0x08003047
 8003010:	58024400 	.word	0x58024400
 8003014:	58024800 	.word	0x58024800
 8003018:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	2101      	movs	r1, #1
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fd32 	bl	8003a8c <RCCEx_PLL2_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800302c:	e00c      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3324      	adds	r3, #36	; 0x24
 8003032:	2101      	movs	r1, #1
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fddb 	bl	8003bf0 <RCCEx_PLL3_Config>
 800303a:	4603      	mov	r3, r0
 800303c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800303e:	e003      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	75fb      	strb	r3, [r7, #23]
      break;
 8003044:	e000      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8003046:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003048:	7dfb      	ldrb	r3, [r7, #23]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10a      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800304e:	4bb2      	ldr	r3, [pc, #712]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003052:	f023 0207 	bic.w	r2, r3, #7
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	49ae      	ldr	r1, [pc, #696]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800305e:	4313      	orrs	r3, r2
 8003060:	658b      	str	r3, [r1, #88]	; 0x58
 8003062:	e001      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003064:	7dfb      	ldrb	r3, [r7, #23]
 8003066:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d044      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800307a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800307e:	d01b      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003084:	d805      	bhi.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d022      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800308a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003090:	e01b      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003096:	d01d      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8003098:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800309c:	d01c      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800309e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030a2:	d01b      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x988>
 80030a4:	e011      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3304      	adds	r3, #4
 80030aa:	2100      	movs	r1, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fced 	bl	8003a8c <RCCEx_PLL2_Config>
 80030b2:	4603      	mov	r3, r0
 80030b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80030b6:	e012      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3324      	adds	r3, #36	; 0x24
 80030bc:	2102      	movs	r1, #2
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fd96 	bl	8003bf0 <RCCEx_PLL3_Config>
 80030c4:	4603      	mov	r3, r0
 80030c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80030c8:	e009      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	75fb      	strb	r3, [r7, #23]
      break;
 80030ce:	e006      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80030d0:	bf00      	nop
 80030d2:	e004      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80030d4:	bf00      	nop
 80030d6:	e002      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80030d8:	bf00      	nop
 80030da:	e000      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80030dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10a      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030e4:	4b8c      	ldr	r3, [pc, #560]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80030e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030f2:	4989      	ldr	r1, [pc, #548]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	654b      	str	r3, [r1, #84]	; 0x54
 80030f8:	e001      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
 80030fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d044      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003114:	d01b      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800311a:	d805      	bhi.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800311c:	2b00      	cmp	r3, #0
 800311e:	d022      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003124:	d00a      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003126:	e01b      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312c:	d01d      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800312e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003132:	d01c      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003134:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003138:	d01b      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800313a:	e011      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3304      	adds	r3, #4
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fca2 	bl	8003a8c <RCCEx_PLL2_Config>
 8003148:	4603      	mov	r3, r0
 800314a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800314c:	e012      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3324      	adds	r3, #36	; 0x24
 8003152:	2102      	movs	r1, #2
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fd4b 	bl	8003bf0 <RCCEx_PLL3_Config>
 800315a:	4603      	mov	r3, r0
 800315c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800315e:	e009      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	75fb      	strb	r3, [r7, #23]
      break;
 8003164:	e006      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003166:	bf00      	nop
 8003168:	e004      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800316a:	bf00      	nop
 800316c:	e002      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800316e:	bf00      	nop
 8003170:	e000      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003174:	7dfb      	ldrb	r3, [r7, #23]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10a      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800317a:	4b67      	ldr	r3, [pc, #412]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003188:	4963      	ldr	r1, [pc, #396]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800318a:	4313      	orrs	r3, r2
 800318c:	658b      	str	r3, [r1, #88]	; 0x58
 800318e:	e001      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319c:	2b00      	cmp	r3, #0
 800319e:	d044      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031aa:	d01b      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80031ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031b0:	d805      	bhi.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d022      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80031b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ba:	d00a      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80031bc:	e01b      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80031be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c2:	d01d      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80031c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80031c8:	d01c      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80031ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80031ce:	d01b      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80031d0:	e011      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3304      	adds	r3, #4
 80031d6:	2100      	movs	r1, #0
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fc57 	bl	8003a8c <RCCEx_PLL2_Config>
 80031de:	4603      	mov	r3, r0
 80031e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80031e2:	e012      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3324      	adds	r3, #36	; 0x24
 80031e8:	2102      	movs	r1, #2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fd00 	bl	8003bf0 <RCCEx_PLL3_Config>
 80031f0:	4603      	mov	r3, r0
 80031f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80031f4:	e009      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	75fb      	strb	r3, [r7, #23]
      break;
 80031fa:	e006      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80031fc:	bf00      	nop
 80031fe:	e004      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003200:	bf00      	nop
 8003202:	e002      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003204:	bf00      	nop
 8003206:	e000      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800320a:	7dfb      	ldrb	r3, [r7, #23]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003210:	4b41      	ldr	r3, [pc, #260]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800321e:	493e      	ldr	r1, [pc, #248]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003220:	4313      	orrs	r3, r2
 8003222:	658b      	str	r3, [r1, #88]	; 0x58
 8003224:	e001      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003226:	7dfb      	ldrb	r3, [r7, #23]
 8003228:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01a      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800323c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003240:	d10a      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3324      	adds	r3, #36	; 0x24
 8003246:	2102      	movs	r1, #2
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fcd1 	bl	8003bf0 <RCCEx_PLL3_Config>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003258:	4b2f      	ldr	r3, [pc, #188]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003266:	492c      	ldr	r1, [pc, #176]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003268:	4313      	orrs	r3, r2
 800326a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01a      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800327e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003282:	d10a      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3324      	adds	r3, #36	; 0x24
 8003288:	2102      	movs	r1, #2
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fcb0 	bl	8003bf0 <RCCEx_PLL3_Config>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800329a:	4b1f      	ldr	r3, [pc, #124]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a8:	491b      	ldr	r1, [pc, #108]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d032      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c4:	d00d      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80032c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032ca:	d016      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d111      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	2100      	movs	r1, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fbd8 	bl	8003a8c <RCCEx_PLL2_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80032e0:	e00c      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3324      	adds	r3, #36	; 0x24
 80032e6:	2102      	movs	r1, #2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fc81 	bl	8003bf0 <RCCEx_PLL3_Config>
 80032ee:	4603      	mov	r3, r0
 80032f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80032f2:	e003      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	75fb      	strb	r3, [r7, #23]
      break;
 80032f8:	e000      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80032fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032fc:	7dfb      	ldrb	r3, [r7, #23]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10c      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003302:	4b05      	ldr	r3, [pc, #20]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003306:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003310:	4901      	ldr	r1, [pc, #4]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003312:	4313      	orrs	r3, r2
 8003314:	658b      	str	r3, [r1, #88]	; 0x58
 8003316:	e003      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8003318:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331c:	7dfb      	ldrb	r3, [r7, #23]
 800331e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d02f      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003332:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003336:	d00c      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003338:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800333c:	d015      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800333e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003342:	d10f      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003344:	4b79      	ldr	r3, [pc, #484]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	4a78      	ldr	r2, [pc, #480]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800334a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800334e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003350:	e00c      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3324      	adds	r3, #36	; 0x24
 8003356:	2101      	movs	r1, #1
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fc49 	bl	8003bf0 <RCCEx_PLL3_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003362:	e003      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	75fb      	strb	r3, [r7, #23]
      break;
 8003368:	e000      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800336a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003372:	4b6e      	ldr	r3, [pc, #440]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003376:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003380:	496a      	ldr	r1, [pc, #424]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003382:	4313      	orrs	r3, r2
 8003384:	654b      	str	r3, [r1, #84]	; 0x54
 8003386:	e001      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d029      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80033a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a4:	d007      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80033a6:	e00f      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a8:	4b60      	ldr	r3, [pc, #384]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	4a5f      	ldr	r2, [pc, #380]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80033b4:	e00b      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3304      	adds	r3, #4
 80033ba:	2102      	movs	r1, #2
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fb65 	bl	8003a8c <RCCEx_PLL2_Config>
 80033c2:	4603      	mov	r3, r0
 80033c4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80033c6:	e002      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	75fb      	strb	r3, [r7, #23]
      break;
 80033cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d109      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80033d4:	4b55      	ldr	r3, [pc, #340]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e0:	4952      	ldr	r1, [pc, #328]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80033e6:	e001      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
 80033ea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3324      	adds	r3, #36	; 0x24
 80033fc:	2102      	movs	r1, #2
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fbf6 	bl	8003bf0 <RCCEx_PLL3_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d02f      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800341e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003422:	d00c      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003428:	d802      	bhi.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800342a:	2b00      	cmp	r3, #0
 800342c:	d011      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800342e:	e00d      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8003430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003434:	d00f      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8003436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800343a:	d00e      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800343c:	e006      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800343e:	4b3b      	ldr	r3, [pc, #236]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003442:	4a3a      	ldr	r2, [pc, #232]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003448:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800344a:	e007      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	75fb      	strb	r3, [r7, #23]
      break;
 8003450:	e004      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003452:	bf00      	nop
 8003454:	e002      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003456:	bf00      	nop
 8003458:	e000      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800345a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800345c:	7dfb      	ldrb	r3, [r7, #23]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003462:	4b32      	ldr	r3, [pc, #200]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800346e:	492f      	ldr	r1, [pc, #188]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003470:	4313      	orrs	r3, r2
 8003472:	654b      	str	r3, [r1, #84]	; 0x54
 8003474:	e001      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003476:	7dfb      	ldrb	r3, [r7, #23]
 8003478:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003486:	4b29      	ldr	r3, [pc, #164]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	4926      	ldr	r1, [pc, #152]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003494:	4313      	orrs	r3, r2
 8003496:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d009      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80034a4:	4b21      	ldr	r3, [pc, #132]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034b2:	491e      	ldr	r1, [pc, #120]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034c4:	4b19      	ldr	r3, [pc, #100]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80034c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034d0:	4916      	ldr	r1, [pc, #88]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00d      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034e2:	4b12      	ldr	r3, [pc, #72]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	4a11      	ldr	r2, [pc, #68]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80034e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80034ec:	6113      	str	r3, [r2, #16]
 80034ee:	4b0f      	ldr	r3, [pc, #60]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80034f8:	490c      	ldr	r1, [pc, #48]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	da08      	bge.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003506:	4b09      	ldr	r3, [pc, #36]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003512:	4906      	ldr	r1, [pc, #24]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003514:	4313      	orrs	r3, r2
 8003516:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003518:	7dbb      	ldrb	r3, [r7, #22]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	e000      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	58024400 	.word	0x58024400

08003530 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003534:	f7ff f8b2 	bl	800269c <HAL_RCC_GetHCLKFreq>
 8003538:	4601      	mov	r1, r0
 800353a:	4b06      	ldr	r3, [pc, #24]	; (8003554 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	4a04      	ldr	r2, [pc, #16]	; (8003558 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003546:	5cd3      	ldrb	r3, [r2, r3]
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003550:	4618      	mov	r0, r3
 8003552:	bd80      	pop	{r7, pc}
 8003554:	58024400 	.word	0x58024400
 8003558:	0800613c 	.word	0x0800613c

0800355c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800355c:	b480      	push	{r7}
 800355e:	b089      	sub	sp, #36	; 0x24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003564:	4b9d      	ldr	r3, [pc, #628]	; (80037dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800356e:	4b9b      	ldr	r3, [pc, #620]	; (80037dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	0b1b      	lsrs	r3, r3, #12
 8003574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003578:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800357a:	4b98      	ldr	r3, [pc, #608]	; (80037dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003586:	4b95      	ldr	r3, [pc, #596]	; (80037dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358a:	08db      	lsrs	r3, r3, #3
 800358c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	fb02 f303 	mul.w	r3, r2, r3
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 810a 	beq.w	80037be <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d05a      	beq.n	8003666 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d302      	bcc.n	80035ba <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d078      	beq.n	80036aa <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80035b8:	e099      	b.n	80036ee <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035ba:	4b88      	ldr	r3, [pc, #544]	; (80037dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d02d      	beq.n	8003622 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035c6:	4b85      	ldr	r3, [pc, #532]	; (80037dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	08db      	lsrs	r3, r3, #3
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	4a83      	ldr	r2, [pc, #524]	; (80037e0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80035d2:	fa22 f303 	lsr.w	r3, r2, r3
 80035d6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	ee07 3a90 	vmov	s15, r3
 80035e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f0:	4b7a      	ldr	r3, [pc, #488]	; (80037dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f8:	ee07 3a90 	vmov	s15, r3
 80035fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003600:	ed97 6a03 	vldr	s12, [r7, #12]
 8003604:	eddf 5a77 	vldr	s11, [pc, #476]	; 80037e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003608:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800360c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003610:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003614:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800361c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003620:	e087      	b.n	8003732 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	ee07 3a90 	vmov	s15, r3
 8003628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800362c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80037e8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8003630:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003634:	4b69      	ldr	r3, [pc, #420]	; (80037dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800363c:	ee07 3a90 	vmov	s15, r3
 8003640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003644:	ed97 6a03 	vldr	s12, [r7, #12]
 8003648:	eddf 5a66 	vldr	s11, [pc, #408]	; 80037e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800364c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003650:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003654:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003658:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800365c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003660:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003664:	e065      	b.n	8003732 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	ee07 3a90 	vmov	s15, r3
 800366c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003670:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003674:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003678:	4b58      	ldr	r3, [pc, #352]	; (80037dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003680:	ee07 3a90 	vmov	s15, r3
 8003684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003688:	ed97 6a03 	vldr	s12, [r7, #12]
 800368c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80037e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003690:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003694:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003698:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800369c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036a8:	e043      	b.n	8003732 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	ee07 3a90 	vmov	s15, r3
 80036b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80037f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80036b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036bc:	4b47      	ldr	r3, [pc, #284]	; (80037dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c4:	ee07 3a90 	vmov	s15, r3
 80036c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80036d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80037e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80036d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036ec:	e021      	b.n	8003732 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	ee07 3a90 	vmov	s15, r3
 80036f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80036fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003700:	4b36      	ldr	r3, [pc, #216]	; (80037dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003708:	ee07 3a90 	vmov	s15, r3
 800370c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003710:	ed97 6a03 	vldr	s12, [r7, #12]
 8003714:	eddf 5a33 	vldr	s11, [pc, #204]	; 80037e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800371c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800372c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003730:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003732:	4b2a      	ldr	r3, [pc, #168]	; (80037dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	0a5b      	lsrs	r3, r3, #9
 8003738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800373c:	ee07 3a90 	vmov	s15, r3
 8003740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003748:	ee37 7a87 	vadd.f32	s14, s15, s14
 800374c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003758:	ee17 2a90 	vmov	r2, s15
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003760:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	0c1b      	lsrs	r3, r3, #16
 8003766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800376a:	ee07 3a90 	vmov	s15, r3
 800376e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003776:	ee37 7a87 	vadd.f32	s14, s15, s14
 800377a:	edd7 6a07 	vldr	s13, [r7, #28]
 800377e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003786:	ee17 2a90 	vmov	r2, s15
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800378e:	4b13      	ldr	r3, [pc, #76]	; (80037dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	0e1b      	lsrs	r3, r3, #24
 8003794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003798:	ee07 3a90 	vmov	s15, r3
 800379c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80037ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037b4:	ee17 2a90 	vmov	r2, s15
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80037bc:	e008      	b.n	80037d0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	609a      	str	r2, [r3, #8]
}
 80037d0:	bf00      	nop
 80037d2:	3724      	adds	r7, #36	; 0x24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	58024400 	.word	0x58024400
 80037e0:	03d09000 	.word	0x03d09000
 80037e4:	46000000 	.word	0x46000000
 80037e8:	4c742400 	.word	0x4c742400
 80037ec:	4a742400 	.word	0x4a742400
 80037f0:	4bbebc20 	.word	0x4bbebc20

080037f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b089      	sub	sp, #36	; 0x24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037fc:	4b9d      	ldr	r3, [pc, #628]	; (8003a74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003806:	4b9b      	ldr	r3, [pc, #620]	; (8003a74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	0d1b      	lsrs	r3, r3, #20
 800380c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003810:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003812:	4b98      	ldr	r3, [pc, #608]	; (8003a74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800381e:	4b95      	ldr	r3, [pc, #596]	; (8003a74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	08db      	lsrs	r3, r3, #3
 8003824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	ee07 3a90 	vmov	s15, r3
 8003832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003836:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 810a 	beq.w	8003a56 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d05a      	beq.n	80038fe <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8003848:	2b01      	cmp	r3, #1
 800384a:	d302      	bcc.n	8003852 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800384c:	2b02      	cmp	r3, #2
 800384e:	d078      	beq.n	8003942 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8003850:	e099      	b.n	8003986 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003852:	4b88      	ldr	r3, [pc, #544]	; (8003a74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d02d      	beq.n	80038ba <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800385e:	4b85      	ldr	r3, [pc, #532]	; (8003a74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	08db      	lsrs	r3, r3, #3
 8003864:	f003 0303 	and.w	r3, r3, #3
 8003868:	4a83      	ldr	r2, [pc, #524]	; (8003a78 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800386a:	fa22 f303 	lsr.w	r3, r2, r3
 800386e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	ee07 3a90 	vmov	s15, r3
 8003876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	ee07 3a90 	vmov	s15, r3
 8003880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003884:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003888:	4b7a      	ldr	r3, [pc, #488]	; (8003a74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003890:	ee07 3a90 	vmov	s15, r3
 8003894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003898:	ed97 6a03 	vldr	s12, [r7, #12]
 800389c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003a7c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80038a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80038b8:	e087      	b.n	80039ca <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	ee07 3a90 	vmov	s15, r3
 80038c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003a80 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80038c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038cc:	4b69      	ldr	r3, [pc, #420]	; (8003a74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d4:	ee07 3a90 	vmov	s15, r3
 80038d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80038e0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003a7c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80038e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038fc:	e065      	b.n	80039ca <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	ee07 3a90 	vmov	s15, r3
 8003904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003908:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800390c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003910:	4b58      	ldr	r3, [pc, #352]	; (8003a74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003918:	ee07 3a90 	vmov	s15, r3
 800391c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003920:	ed97 6a03 	vldr	s12, [r7, #12]
 8003924:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003a7c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003928:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800392c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003930:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800393c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003940:	e043      	b.n	80039ca <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	ee07 3a90 	vmov	s15, r3
 8003948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003a88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8003950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003954:	4b47      	ldr	r3, [pc, #284]	; (8003a74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800395c:	ee07 3a90 	vmov	s15, r3
 8003960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003964:	ed97 6a03 	vldr	s12, [r7, #12]
 8003968:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003a7c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800396c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800397c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003980:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003984:	e021      	b.n	80039ca <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	ee07 3a90 	vmov	s15, r3
 800398c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003990:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003998:	4b36      	ldr	r3, [pc, #216]	; (8003a74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a0:	ee07 3a90 	vmov	s15, r3
 80039a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ac:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003a7c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80039b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039c8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80039ca:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	0a5b      	lsrs	r3, r3, #9
 80039d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039d4:	ee07 3a90 	vmov	s15, r3
 80039d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80039e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039f0:	ee17 2a90 	vmov	r2, s15
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80039f8:	4b1e      	ldr	r3, [pc, #120]	; (8003a74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	0c1b      	lsrs	r3, r3, #16
 80039fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a12:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a1e:	ee17 2a90 	vmov	r2, s15
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003a26:	4b13      	ldr	r3, [pc, #76]	; (8003a74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	0e1b      	lsrs	r3, r3, #24
 8003a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a30:	ee07 3a90 	vmov	s15, r3
 8003a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a40:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a4c:	ee17 2a90 	vmov	r2, s15
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003a54:	e008      	b.n	8003a68 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	609a      	str	r2, [r3, #8]
}
 8003a68:	bf00      	nop
 8003a6a:	3724      	adds	r7, #36	; 0x24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	58024400 	.word	0x58024400
 8003a78:	03d09000 	.word	0x03d09000
 8003a7c:	46000000 	.word	0x46000000
 8003a80:	4c742400 	.word	0x4c742400
 8003a84:	4a742400 	.word	0x4a742400
 8003a88:	4bbebc20 	.word	0x4bbebc20

08003a8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a9a:	4b53      	ldr	r3, [pc, #332]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d101      	bne.n	8003aaa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e099      	b.n	8003bde <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003aaa:	4b4f      	ldr	r3, [pc, #316]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a4e      	ldr	r2, [pc, #312]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003ab0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab6:	f7fd fb03 	bl	80010c0 <HAL_GetTick>
 8003aba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003abc:	e008      	b.n	8003ad0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003abe:	f7fd faff 	bl	80010c0 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e086      	b.n	8003bde <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ad0:	4b45      	ldr	r3, [pc, #276]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f0      	bne.n	8003abe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003adc:	4b42      	ldr	r3, [pc, #264]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	031b      	lsls	r3, r3, #12
 8003aea:	493f      	ldr	r1, [pc, #252]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	628b      	str	r3, [r1, #40]	; 0x28
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	025b      	lsls	r3, r3, #9
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	041b      	lsls	r3, r3, #16
 8003b0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	061b      	lsls	r3, r3, #24
 8003b1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b20:	4931      	ldr	r1, [pc, #196]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003b26:	4b30      	ldr	r3, [pc, #192]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	492d      	ldr	r1, [pc, #180]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003b38:	4b2b      	ldr	r3, [pc, #172]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	f023 0220 	bic.w	r2, r3, #32
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	4928      	ldr	r1, [pc, #160]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003b4a:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	4a26      	ldr	r2, [pc, #152]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003b50:	f023 0310 	bic.w	r3, r3, #16
 8003b54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003b56:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b5a:	4b24      	ldr	r3, [pc, #144]	; (8003bec <RCCEx_PLL2_Config+0x160>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	69d2      	ldr	r2, [r2, #28]
 8003b62:	00d2      	lsls	r2, r2, #3
 8003b64:	4920      	ldr	r1, [pc, #128]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003b6a:	4b1f      	ldr	r3, [pc, #124]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	4a1e      	ldr	r2, [pc, #120]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003b70:	f043 0310 	orr.w	r3, r3, #16
 8003b74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d106      	bne.n	8003b8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003b7c:	4b1a      	ldr	r3, [pc, #104]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	4a19      	ldr	r2, [pc, #100]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003b82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b88:	e00f      	b.n	8003baa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d106      	bne.n	8003b9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003b90:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	4a14      	ldr	r2, [pc, #80]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b9c:	e005      	b.n	8003baa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003b9e:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	4a11      	ldr	r2, [pc, #68]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003ba4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ba8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003baa:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a0e      	ldr	r2, [pc, #56]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003bb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb6:	f7fd fa83 	bl	80010c0 <HAL_GetTick>
 8003bba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003bbc:	e008      	b.n	8003bd0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003bbe:	f7fd fa7f 	bl	80010c0 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e006      	b.n	8003bde <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <RCCEx_PLL2_Config+0x15c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0f0      	beq.n	8003bbe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	58024400 	.word	0x58024400
 8003bec:	ffff0007 	.word	0xffff0007

08003bf0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003bfe:	4b53      	ldr	r3, [pc, #332]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d101      	bne.n	8003c0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e099      	b.n	8003d42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003c0e:	4b4f      	ldr	r3, [pc, #316]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a4e      	ldr	r2, [pc, #312]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c1a:	f7fd fa51 	bl	80010c0 <HAL_GetTick>
 8003c1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c20:	e008      	b.n	8003c34 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003c22:	f7fd fa4d 	bl	80010c0 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e086      	b.n	8003d42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c34:	4b45      	ldr	r3, [pc, #276]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f0      	bne.n	8003c22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003c40:	4b42      	ldr	r3, [pc, #264]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c44:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	051b      	lsls	r3, r3, #20
 8003c4e:	493f      	ldr	r1, [pc, #252]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	628b      	str	r3, [r1, #40]	; 0x28
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	025b      	lsls	r3, r3, #9
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	041b      	lsls	r3, r3, #16
 8003c72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	061b      	lsls	r3, r3, #24
 8003c80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c84:	4931      	ldr	r1, [pc, #196]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003c8a:	4b30      	ldr	r3, [pc, #192]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	492d      	ldr	r1, [pc, #180]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003c9c:	4b2b      	ldr	r3, [pc, #172]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	4928      	ldr	r1, [pc, #160]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003cae:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	4a26      	ldr	r2, [pc, #152]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003cba:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cbe:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <RCCEx_PLL3_Config+0x160>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	69d2      	ldr	r2, [r2, #28]
 8003cc6:	00d2      	lsls	r2, r2, #3
 8003cc8:	4920      	ldr	r1, [pc, #128]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003cce:	4b1f      	ldr	r3, [pc, #124]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	4a1e      	ldr	r2, [pc, #120]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d106      	bne.n	8003cee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	4a19      	ldr	r2, [pc, #100]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003ce6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003cec:	e00f      	b.n	8003d0e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d106      	bne.n	8003d02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003cf4:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003cfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d00:	e005      	b.n	8003d0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003d02:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	4a11      	ldr	r2, [pc, #68]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003d08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a0e      	ldr	r2, [pc, #56]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d1a:	f7fd f9d1 	bl	80010c0 <HAL_GetTick>
 8003d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d20:	e008      	b.n	8003d34 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d22:	f7fd f9cd 	bl	80010c0 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e006      	b.n	8003d42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <RCCEx_PLL3_Config+0x15c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	58024400 	.word	0x58024400
 8003d50:	ffff0007 	.word	0xffff0007

08003d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e049      	b.n	8003dfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7fc ffea 	bl	8000d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	4619      	mov	r1, r3
 8003d92:	4610      	mov	r0, r2
 8003d94:	f000 fa84 	bl	80042a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d001      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e021      	b.n	8003e60 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <HAL_TIM_Base_Start_IT+0x68>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b06      	cmp	r3, #6
 8003e44:	d00b      	beq.n	8003e5e <HAL_TIM_Base_Start_IT+0x5a>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e4c:	d007      	beq.n	8003e5e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0201 	orr.w	r2, r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	00010007 	.word	0x00010007

08003e70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d122      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d11b      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0202 	mvn.w	r2, #2
 8003e9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f9d6 	bl	8004264 <HAL_TIM_IC_CaptureCallback>
 8003eb8:	e005      	b.n	8003ec6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f9c8 	bl	8004250 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f9d9 	bl	8004278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d122      	bne.n	8003f20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d11b      	bne.n	8003f20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0204 	mvn.w	r2, #4
 8003ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f9ac 	bl	8004264 <HAL_TIM_IC_CaptureCallback>
 8003f0c:	e005      	b.n	8003f1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f99e 	bl	8004250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f9af 	bl	8004278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d122      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d11b      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0208 	mvn.w	r2, #8
 8003f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2204      	movs	r2, #4
 8003f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f982 	bl	8004264 <HAL_TIM_IC_CaptureCallback>
 8003f60:	e005      	b.n	8003f6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f974 	bl	8004250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f985 	bl	8004278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0310 	and.w	r3, r3, #16
 8003f7e:	2b10      	cmp	r3, #16
 8003f80:	d122      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	d11b      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0210 	mvn.w	r2, #16
 8003f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2208      	movs	r2, #8
 8003f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f958 	bl	8004264 <HAL_TIM_IC_CaptureCallback>
 8003fb4:	e005      	b.n	8003fc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f94a 	bl	8004250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f95b 	bl	8004278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d10e      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d107      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0201 	mvn.w	r2, #1
 8003fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fc fe7c 	bl	8000cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffe:	2b80      	cmp	r3, #128	; 0x80
 8004000:	d10e      	bne.n	8004020 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400c:	2b80      	cmp	r3, #128	; 0x80
 800400e:	d107      	bne.n	8004020 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fb0a 	bl	8004634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800402e:	d10e      	bne.n	800404e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403a:	2b80      	cmp	r3, #128	; 0x80
 800403c:	d107      	bne.n	800404e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 fafd 	bl	8004648 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004058:	2b40      	cmp	r3, #64	; 0x40
 800405a:	d10e      	bne.n	800407a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004066:	2b40      	cmp	r3, #64	; 0x40
 8004068:	d107      	bne.n	800407a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f909 	bl	800428c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f003 0320 	and.w	r3, r3, #32
 8004084:	2b20      	cmp	r3, #32
 8004086:	d10e      	bne.n	80040a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	2b20      	cmp	r3, #32
 8004094:	d107      	bne.n	80040a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f06f 0220 	mvn.w	r2, #32
 800409e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fabd 	bl	8004620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_TIM_ConfigClockSource+0x18>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e0b7      	b.n	8004238 <HAL_TIM_ConfigClockSource+0x188>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4b57      	ldr	r3, [pc, #348]	; (8004240 <HAL_TIM_ConfigClockSource+0x190>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b70      	cmp	r3, #112	; 0x70
 80040fe:	d02e      	beq.n	800415e <HAL_TIM_ConfigClockSource+0xae>
 8004100:	2b70      	cmp	r3, #112	; 0x70
 8004102:	d812      	bhi.n	800412a <HAL_TIM_ConfigClockSource+0x7a>
 8004104:	2b30      	cmp	r3, #48	; 0x30
 8004106:	f000 8084 	beq.w	8004212 <HAL_TIM_ConfigClockSource+0x162>
 800410a:	2b30      	cmp	r3, #48	; 0x30
 800410c:	d806      	bhi.n	800411c <HAL_TIM_ConfigClockSource+0x6c>
 800410e:	2b10      	cmp	r3, #16
 8004110:	d07f      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0x162>
 8004112:	2b20      	cmp	r3, #32
 8004114:	d07d      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0x162>
 8004116:	2b00      	cmp	r3, #0
 8004118:	d07b      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800411a:	e084      	b.n	8004226 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800411c:	2b50      	cmp	r3, #80	; 0x50
 800411e:	d048      	beq.n	80041b2 <HAL_TIM_ConfigClockSource+0x102>
 8004120:	2b60      	cmp	r3, #96	; 0x60
 8004122:	d056      	beq.n	80041d2 <HAL_TIM_ConfigClockSource+0x122>
 8004124:	2b40      	cmp	r3, #64	; 0x40
 8004126:	d064      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8004128:	e07d      	b.n	8004226 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800412a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800412e:	d070      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0x162>
 8004130:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004134:	d809      	bhi.n	800414a <HAL_TIM_ConfigClockSource+0x9a>
 8004136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800413a:	d027      	beq.n	800418c <HAL_TIM_ConfigClockSource+0xdc>
 800413c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004140:	d067      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0x162>
 8004142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004146:	d06d      	beq.n	8004224 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004148:	e06d      	b.n	8004226 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800414a:	4a3e      	ldr	r2, [pc, #248]	; (8004244 <HAL_TIM_ConfigClockSource+0x194>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d060      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0x162>
 8004150:	4a3d      	ldr	r2, [pc, #244]	; (8004248 <HAL_TIM_ConfigClockSource+0x198>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d05d      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0x162>
 8004156:	4a3d      	ldr	r2, [pc, #244]	; (800424c <HAL_TIM_ConfigClockSource+0x19c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d05a      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0x162>
      break;
 800415c:	e063      	b.n	8004226 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6899      	ldr	r1, [r3, #8]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f000 f9af 	bl	80044d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004180:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	609a      	str	r2, [r3, #8]
      break;
 800418a:	e04c      	b.n	8004226 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6818      	ldr	r0, [r3, #0]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	6899      	ldr	r1, [r3, #8]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f000 f998 	bl	80044d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041ae:	609a      	str	r2, [r3, #8]
      break;
 80041b0:	e039      	b.n	8004226 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	6859      	ldr	r1, [r3, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	461a      	mov	r2, r3
 80041c0:	f000 f908 	bl	80043d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2150      	movs	r1, #80	; 0x50
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 f962 	bl	8004494 <TIM_ITRx_SetConfig>
      break;
 80041d0:	e029      	b.n	8004226 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	6859      	ldr	r1, [r3, #4]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	461a      	mov	r2, r3
 80041e0:	f000 f927 	bl	8004432 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2160      	movs	r1, #96	; 0x60
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f952 	bl	8004494 <TIM_ITRx_SetConfig>
      break;
 80041f0:	e019      	b.n	8004226 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6859      	ldr	r1, [r3, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	461a      	mov	r2, r3
 8004200:	f000 f8e8 	bl	80043d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2140      	movs	r1, #64	; 0x40
 800420a:	4618      	mov	r0, r3
 800420c:	f000 f942 	bl	8004494 <TIM_ITRx_SetConfig>
      break;
 8004210:	e009      	b.n	8004226 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4619      	mov	r1, r3
 800421c:	4610      	mov	r0, r2
 800421e:	f000 f939 	bl	8004494 <TIM_ITRx_SetConfig>
      break;
 8004222:	e000      	b.n	8004226 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004224:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	ffceff88 	.word	0xffceff88
 8004244:	00100030 	.word	0x00100030
 8004248:	00100040 	.word	0x00100040
 800424c:	00100020 	.word	0x00100020

08004250 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a40      	ldr	r2, [pc, #256]	; (80043b4 <TIM_Base_SetConfig+0x114>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d013      	beq.n	80042e0 <TIM_Base_SetConfig+0x40>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042be:	d00f      	beq.n	80042e0 <TIM_Base_SetConfig+0x40>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a3d      	ldr	r2, [pc, #244]	; (80043b8 <TIM_Base_SetConfig+0x118>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00b      	beq.n	80042e0 <TIM_Base_SetConfig+0x40>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a3c      	ldr	r2, [pc, #240]	; (80043bc <TIM_Base_SetConfig+0x11c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d007      	beq.n	80042e0 <TIM_Base_SetConfig+0x40>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a3b      	ldr	r2, [pc, #236]	; (80043c0 <TIM_Base_SetConfig+0x120>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_Base_SetConfig+0x40>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a3a      	ldr	r2, [pc, #232]	; (80043c4 <TIM_Base_SetConfig+0x124>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d108      	bne.n	80042f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a2f      	ldr	r2, [pc, #188]	; (80043b4 <TIM_Base_SetConfig+0x114>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d01f      	beq.n	800433a <TIM_Base_SetConfig+0x9a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004300:	d01b      	beq.n	800433a <TIM_Base_SetConfig+0x9a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a2c      	ldr	r2, [pc, #176]	; (80043b8 <TIM_Base_SetConfig+0x118>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d017      	beq.n	800433a <TIM_Base_SetConfig+0x9a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a2b      	ldr	r2, [pc, #172]	; (80043bc <TIM_Base_SetConfig+0x11c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d013      	beq.n	800433a <TIM_Base_SetConfig+0x9a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a2a      	ldr	r2, [pc, #168]	; (80043c0 <TIM_Base_SetConfig+0x120>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00f      	beq.n	800433a <TIM_Base_SetConfig+0x9a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a29      	ldr	r2, [pc, #164]	; (80043c4 <TIM_Base_SetConfig+0x124>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d00b      	beq.n	800433a <TIM_Base_SetConfig+0x9a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a28      	ldr	r2, [pc, #160]	; (80043c8 <TIM_Base_SetConfig+0x128>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d007      	beq.n	800433a <TIM_Base_SetConfig+0x9a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a27      	ldr	r2, [pc, #156]	; (80043cc <TIM_Base_SetConfig+0x12c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d003      	beq.n	800433a <TIM_Base_SetConfig+0x9a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a26      	ldr	r2, [pc, #152]	; (80043d0 <TIM_Base_SetConfig+0x130>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d108      	bne.n	800434c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a10      	ldr	r2, [pc, #64]	; (80043b4 <TIM_Base_SetConfig+0x114>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00f      	beq.n	8004398 <TIM_Base_SetConfig+0xf8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a12      	ldr	r2, [pc, #72]	; (80043c4 <TIM_Base_SetConfig+0x124>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00b      	beq.n	8004398 <TIM_Base_SetConfig+0xf8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a11      	ldr	r2, [pc, #68]	; (80043c8 <TIM_Base_SetConfig+0x128>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d007      	beq.n	8004398 <TIM_Base_SetConfig+0xf8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a10      	ldr	r2, [pc, #64]	; (80043cc <TIM_Base_SetConfig+0x12c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d003      	beq.n	8004398 <TIM_Base_SetConfig+0xf8>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a0f      	ldr	r2, [pc, #60]	; (80043d0 <TIM_Base_SetConfig+0x130>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d103      	bne.n	80043a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	615a      	str	r2, [r3, #20]
}
 80043a6:	bf00      	nop
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40010000 	.word	0x40010000
 80043b8:	40000400 	.word	0x40000400
 80043bc:	40000800 	.word	0x40000800
 80043c0:	40000c00 	.word	0x40000c00
 80043c4:	40010400 	.word	0x40010400
 80043c8:	40014000 	.word	0x40014000
 80043cc:	40014400 	.word	0x40014400
 80043d0:	40014800 	.word	0x40014800

080043d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	f023 0201 	bic.w	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f023 030a 	bic.w	r3, r3, #10
 8004410:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	621a      	str	r2, [r3, #32]
}
 8004426:	bf00      	nop
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004432:	b480      	push	{r7}
 8004434:	b087      	sub	sp, #28
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f023 0210 	bic.w	r2, r3, #16
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800445c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	031b      	lsls	r3, r3, #12
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800446e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	4313      	orrs	r3, r2
 8004478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	621a      	str	r2, [r3, #32]
}
 8004486:	bf00      	nop
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
	...

08004494 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4b09      	ldr	r3, [pc, #36]	; (80044cc <TIM_ITRx_SetConfig+0x38>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f043 0307 	orr.w	r3, r3, #7
 80044b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	609a      	str	r2, [r3, #8]
}
 80044be:	bf00      	nop
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	ffcfff8f 	.word	0xffcfff8f

080044d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	021a      	lsls	r2, r3, #8
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	609a      	str	r2, [r3, #8]
}
 8004504:	bf00      	nop
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004524:	2302      	movs	r3, #2
 8004526:	e068      	b.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a2e      	ldr	r2, [pc, #184]	; (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d004      	beq.n	800455c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a2d      	ldr	r2, [pc, #180]	; (800460c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d108      	bne.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004562:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a1e      	ldr	r2, [pc, #120]	; (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d01d      	beq.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459a:	d018      	beq.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1b      	ldr	r2, [pc, #108]	; (8004610 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a1a      	ldr	r2, [pc, #104]	; (8004614 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00e      	beq.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a18      	ldr	r2, [pc, #96]	; (8004618 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d009      	beq.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a13      	ldr	r2, [pc, #76]	; (800460c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d004      	beq.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a14      	ldr	r2, [pc, #80]	; (800461c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d10c      	bne.n	80045e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40010000 	.word	0x40010000
 800460c:	40010400 	.word	0x40010400
 8004610:	40000400 	.word	0x40000400
 8004614:	40000800 	.word	0x40000800
 8004618:	40000c00 	.word	0x40000c00
 800461c:	40001800 	.word	0x40001800

08004620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e042      	b.n	80046f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004674:	2b00      	cmp	r3, #0
 8004676:	d106      	bne.n	8004686 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7fc fbb9 	bl	8000df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2224      	movs	r2, #36	; 0x24
 800468a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0201 	bic.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f8c2 	bl	8004828 <UART_SetConfig>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e022      	b.n	80046f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fe66 	bl	8005388 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 feed 	bl	80054cc <UART_CheckIdleState>
 80046f2:	4603      	mov	r3, r0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08a      	sub	sp, #40	; 0x28
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	4613      	mov	r3, r2
 800470a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004712:	2b20      	cmp	r3, #32
 8004714:	f040 8083 	bne.w	800481e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_UART_Transmit+0x28>
 800471e:	88fb      	ldrh	r3, [r7, #6]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e07b      	b.n	8004820 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_UART_Transmit+0x3a>
 8004732:	2302      	movs	r3, #2
 8004734:	e074      	b.n	8004820 <HAL_UART_Transmit+0x124>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2221      	movs	r2, #33	; 0x21
 800474a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800474e:	f7fc fcb7 	bl	80010c0 <HAL_GetTick>
 8004752:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	88fa      	ldrh	r2, [r7, #6]
 8004758:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	88fa      	ldrh	r2, [r7, #6]
 8004760:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476c:	d108      	bne.n	8004780 <HAL_UART_Transmit+0x84>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d104      	bne.n	8004780 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004776:	2300      	movs	r3, #0
 8004778:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	e003      	b.n	8004788 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004784:	2300      	movs	r3, #0
 8004786:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004790:	e02c      	b.n	80047ec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2200      	movs	r2, #0
 800479a:	2180      	movs	r1, #128	; 0x80
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 fedd 	bl	800555c <UART_WaitOnFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e039      	b.n	8004820 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10b      	bne.n	80047ca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	3302      	adds	r3, #2
 80047c6:	61bb      	str	r3, [r7, #24]
 80047c8:	e007      	b.n	80047da <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	781a      	ldrb	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	3301      	adds	r3, #1
 80047d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1cc      	bne.n	8004792 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2200      	movs	r2, #0
 8004800:	2140      	movs	r1, #64	; 0x40
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 feaa 	bl	800555c <UART_WaitOnFlagUntilTimeout>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e006      	b.n	8004820 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	e000      	b.n	8004820 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800481e:	2302      	movs	r3, #2
  }
}
 8004820:	4618      	mov	r0, r3
 8004822:	3720      	adds	r7, #32
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004828:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800482c:	b08e      	sub	sp, #56	; 0x38
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	4313      	orrs	r3, r2
 800484e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004856:	4313      	orrs	r3, r2
 8004858:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4bc1      	ldr	r3, [pc, #772]	; (8004b68 <UART_SetConfig+0x340>)
 8004862:	4013      	ands	r3, r2
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800486a:	430b      	orrs	r3, r1
 800486c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4ab7      	ldr	r2, [pc, #732]	; (8004b6c <UART_SetConfig+0x344>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800489a:	4313      	orrs	r3, r2
 800489c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	4bb2      	ldr	r3, [pc, #712]	; (8004b70 <UART_SetConfig+0x348>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80048ae:	430b      	orrs	r3, r1
 80048b0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	f023 010f 	bic.w	r1, r3, #15
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4aa9      	ldr	r2, [pc, #676]	; (8004b74 <UART_SetConfig+0x34c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d177      	bne.n	80049c2 <UART_SetConfig+0x19a>
 80048d2:	4ba9      	ldr	r3, [pc, #676]	; (8004b78 <UART_SetConfig+0x350>)
 80048d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048da:	2b28      	cmp	r3, #40	; 0x28
 80048dc:	d86c      	bhi.n	80049b8 <UART_SetConfig+0x190>
 80048de:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <UART_SetConfig+0xbc>)
 80048e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e4:	08004989 	.word	0x08004989
 80048e8:	080049b9 	.word	0x080049b9
 80048ec:	080049b9 	.word	0x080049b9
 80048f0:	080049b9 	.word	0x080049b9
 80048f4:	080049b9 	.word	0x080049b9
 80048f8:	080049b9 	.word	0x080049b9
 80048fc:	080049b9 	.word	0x080049b9
 8004900:	080049b9 	.word	0x080049b9
 8004904:	08004991 	.word	0x08004991
 8004908:	080049b9 	.word	0x080049b9
 800490c:	080049b9 	.word	0x080049b9
 8004910:	080049b9 	.word	0x080049b9
 8004914:	080049b9 	.word	0x080049b9
 8004918:	080049b9 	.word	0x080049b9
 800491c:	080049b9 	.word	0x080049b9
 8004920:	080049b9 	.word	0x080049b9
 8004924:	08004999 	.word	0x08004999
 8004928:	080049b9 	.word	0x080049b9
 800492c:	080049b9 	.word	0x080049b9
 8004930:	080049b9 	.word	0x080049b9
 8004934:	080049b9 	.word	0x080049b9
 8004938:	080049b9 	.word	0x080049b9
 800493c:	080049b9 	.word	0x080049b9
 8004940:	080049b9 	.word	0x080049b9
 8004944:	080049a1 	.word	0x080049a1
 8004948:	080049b9 	.word	0x080049b9
 800494c:	080049b9 	.word	0x080049b9
 8004950:	080049b9 	.word	0x080049b9
 8004954:	080049b9 	.word	0x080049b9
 8004958:	080049b9 	.word	0x080049b9
 800495c:	080049b9 	.word	0x080049b9
 8004960:	080049b9 	.word	0x080049b9
 8004964:	080049a9 	.word	0x080049a9
 8004968:	080049b9 	.word	0x080049b9
 800496c:	080049b9 	.word	0x080049b9
 8004970:	080049b9 	.word	0x080049b9
 8004974:	080049b9 	.word	0x080049b9
 8004978:	080049b9 	.word	0x080049b9
 800497c:	080049b9 	.word	0x080049b9
 8004980:	080049b9 	.word	0x080049b9
 8004984:	080049b1 	.word	0x080049b1
 8004988:	2301      	movs	r3, #1
 800498a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800498e:	e233      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004990:	2304      	movs	r3, #4
 8004992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004996:	e22f      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004998:	2308      	movs	r3, #8
 800499a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800499e:	e22b      	b.n	8004df8 <UART_SetConfig+0x5d0>
 80049a0:	2310      	movs	r3, #16
 80049a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049a6:	e227      	b.n	8004df8 <UART_SetConfig+0x5d0>
 80049a8:	2320      	movs	r3, #32
 80049aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049ae:	e223      	b.n	8004df8 <UART_SetConfig+0x5d0>
 80049b0:	2340      	movs	r3, #64	; 0x40
 80049b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049b6:	e21f      	b.n	8004df8 <UART_SetConfig+0x5d0>
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049be:	bf00      	nop
 80049c0:	e21a      	b.n	8004df8 <UART_SetConfig+0x5d0>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a6d      	ldr	r2, [pc, #436]	; (8004b7c <UART_SetConfig+0x354>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d132      	bne.n	8004a32 <UART_SetConfig+0x20a>
 80049cc:	4b6a      	ldr	r3, [pc, #424]	; (8004b78 <UART_SetConfig+0x350>)
 80049ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	2b05      	cmp	r3, #5
 80049d6:	d827      	bhi.n	8004a28 <UART_SetConfig+0x200>
 80049d8:	a201      	add	r2, pc, #4	; (adr r2, 80049e0 <UART_SetConfig+0x1b8>)
 80049da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049de:	bf00      	nop
 80049e0:	080049f9 	.word	0x080049f9
 80049e4:	08004a01 	.word	0x08004a01
 80049e8:	08004a09 	.word	0x08004a09
 80049ec:	08004a11 	.word	0x08004a11
 80049f0:	08004a19 	.word	0x08004a19
 80049f4:	08004a21 	.word	0x08004a21
 80049f8:	2300      	movs	r3, #0
 80049fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049fe:	e1fb      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004a00:	2304      	movs	r3, #4
 8004a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a06:	e1f7      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004a08:	2308      	movs	r3, #8
 8004a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a0e:	e1f3      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004a10:	2310      	movs	r3, #16
 8004a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a16:	e1ef      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004a18:	2320      	movs	r3, #32
 8004a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a1e:	e1eb      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004a20:	2340      	movs	r3, #64	; 0x40
 8004a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a26:	e1e7      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a2e:	bf00      	nop
 8004a30:	e1e2      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a52      	ldr	r2, [pc, #328]	; (8004b80 <UART_SetConfig+0x358>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d132      	bne.n	8004aa2 <UART_SetConfig+0x27a>
 8004a3c:	4b4e      	ldr	r3, [pc, #312]	; (8004b78 <UART_SetConfig+0x350>)
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	2b05      	cmp	r3, #5
 8004a46:	d827      	bhi.n	8004a98 <UART_SetConfig+0x270>
 8004a48:	a201      	add	r2, pc, #4	; (adr r2, 8004a50 <UART_SetConfig+0x228>)
 8004a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4e:	bf00      	nop
 8004a50:	08004a69 	.word	0x08004a69
 8004a54:	08004a71 	.word	0x08004a71
 8004a58:	08004a79 	.word	0x08004a79
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a89 	.word	0x08004a89
 8004a64:	08004a91 	.word	0x08004a91
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a6e:	e1c3      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004a70:	2304      	movs	r3, #4
 8004a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a76:	e1bf      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004a78:	2308      	movs	r3, #8
 8004a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a7e:	e1bb      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004a80:	2310      	movs	r3, #16
 8004a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a86:	e1b7      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004a88:	2320      	movs	r3, #32
 8004a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a8e:	e1b3      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004a90:	2340      	movs	r3, #64	; 0x40
 8004a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a96:	e1af      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004a98:	2380      	movs	r3, #128	; 0x80
 8004a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a9e:	bf00      	nop
 8004aa0:	e1aa      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a37      	ldr	r2, [pc, #220]	; (8004b84 <UART_SetConfig+0x35c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d132      	bne.n	8004b12 <UART_SetConfig+0x2ea>
 8004aac:	4b32      	ldr	r3, [pc, #200]	; (8004b78 <UART_SetConfig+0x350>)
 8004aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	2b05      	cmp	r3, #5
 8004ab6:	d827      	bhi.n	8004b08 <UART_SetConfig+0x2e0>
 8004ab8:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <UART_SetConfig+0x298>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004ad9 	.word	0x08004ad9
 8004ac4:	08004ae1 	.word	0x08004ae1
 8004ac8:	08004ae9 	.word	0x08004ae9
 8004acc:	08004af1 	.word	0x08004af1
 8004ad0:	08004af9 	.word	0x08004af9
 8004ad4:	08004b01 	.word	0x08004b01
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ade:	e18b      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ae6:	e187      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004ae8:	2308      	movs	r3, #8
 8004aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aee:	e183      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004af0:	2310      	movs	r3, #16
 8004af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004af6:	e17f      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004af8:	2320      	movs	r3, #32
 8004afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004afe:	e17b      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004b00:	2340      	movs	r3, #64	; 0x40
 8004b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b06:	e177      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b0e:	bf00      	nop
 8004b10:	e172      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a1c      	ldr	r2, [pc, #112]	; (8004b88 <UART_SetConfig+0x360>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d144      	bne.n	8004ba6 <UART_SetConfig+0x37e>
 8004b1c:	4b16      	ldr	r3, [pc, #88]	; (8004b78 <UART_SetConfig+0x350>)
 8004b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	2b05      	cmp	r3, #5
 8004b26:	d839      	bhi.n	8004b9c <UART_SetConfig+0x374>
 8004b28:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <UART_SetConfig+0x308>)
 8004b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2e:	bf00      	nop
 8004b30:	08004b49 	.word	0x08004b49
 8004b34:	08004b51 	.word	0x08004b51
 8004b38:	08004b59 	.word	0x08004b59
 8004b3c:	08004b61 	.word	0x08004b61
 8004b40:	08004b8d 	.word	0x08004b8d
 8004b44:	08004b95 	.word	0x08004b95
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b4e:	e153      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004b50:	2304      	movs	r3, #4
 8004b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b56:	e14f      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004b58:	2308      	movs	r3, #8
 8004b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b5e:	e14b      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004b60:	2310      	movs	r3, #16
 8004b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b66:	e147      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004b68:	cfff69f3 	.word	0xcfff69f3
 8004b6c:	58000c00 	.word	0x58000c00
 8004b70:	11fff4ff 	.word	0x11fff4ff
 8004b74:	40011000 	.word	0x40011000
 8004b78:	58024400 	.word	0x58024400
 8004b7c:	40004400 	.word	0x40004400
 8004b80:	40004800 	.word	0x40004800
 8004b84:	40004c00 	.word	0x40004c00
 8004b88:	40005000 	.word	0x40005000
 8004b8c:	2320      	movs	r3, #32
 8004b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b92:	e131      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004b94:	2340      	movs	r3, #64	; 0x40
 8004b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b9a:	e12d      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ba2:	bf00      	nop
 8004ba4:	e128      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4ab6      	ldr	r2, [pc, #728]	; (8004e84 <UART_SetConfig+0x65c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d178      	bne.n	8004ca2 <UART_SetConfig+0x47a>
 8004bb0:	4bb5      	ldr	r3, [pc, #724]	; (8004e88 <UART_SetConfig+0x660>)
 8004bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bb8:	2b28      	cmp	r3, #40	; 0x28
 8004bba:	d86d      	bhi.n	8004c98 <UART_SetConfig+0x470>
 8004bbc:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <UART_SetConfig+0x39c>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004c69 	.word	0x08004c69
 8004bc8:	08004c99 	.word	0x08004c99
 8004bcc:	08004c99 	.word	0x08004c99
 8004bd0:	08004c99 	.word	0x08004c99
 8004bd4:	08004c99 	.word	0x08004c99
 8004bd8:	08004c99 	.word	0x08004c99
 8004bdc:	08004c99 	.word	0x08004c99
 8004be0:	08004c99 	.word	0x08004c99
 8004be4:	08004c71 	.word	0x08004c71
 8004be8:	08004c99 	.word	0x08004c99
 8004bec:	08004c99 	.word	0x08004c99
 8004bf0:	08004c99 	.word	0x08004c99
 8004bf4:	08004c99 	.word	0x08004c99
 8004bf8:	08004c99 	.word	0x08004c99
 8004bfc:	08004c99 	.word	0x08004c99
 8004c00:	08004c99 	.word	0x08004c99
 8004c04:	08004c79 	.word	0x08004c79
 8004c08:	08004c99 	.word	0x08004c99
 8004c0c:	08004c99 	.word	0x08004c99
 8004c10:	08004c99 	.word	0x08004c99
 8004c14:	08004c99 	.word	0x08004c99
 8004c18:	08004c99 	.word	0x08004c99
 8004c1c:	08004c99 	.word	0x08004c99
 8004c20:	08004c99 	.word	0x08004c99
 8004c24:	08004c81 	.word	0x08004c81
 8004c28:	08004c99 	.word	0x08004c99
 8004c2c:	08004c99 	.word	0x08004c99
 8004c30:	08004c99 	.word	0x08004c99
 8004c34:	08004c99 	.word	0x08004c99
 8004c38:	08004c99 	.word	0x08004c99
 8004c3c:	08004c99 	.word	0x08004c99
 8004c40:	08004c99 	.word	0x08004c99
 8004c44:	08004c89 	.word	0x08004c89
 8004c48:	08004c99 	.word	0x08004c99
 8004c4c:	08004c99 	.word	0x08004c99
 8004c50:	08004c99 	.word	0x08004c99
 8004c54:	08004c99 	.word	0x08004c99
 8004c58:	08004c99 	.word	0x08004c99
 8004c5c:	08004c99 	.word	0x08004c99
 8004c60:	08004c99 	.word	0x08004c99
 8004c64:	08004c91 	.word	0x08004c91
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c6e:	e0c3      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004c70:	2304      	movs	r3, #4
 8004c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c76:	e0bf      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004c78:	2308      	movs	r3, #8
 8004c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c7e:	e0bb      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004c80:	2310      	movs	r3, #16
 8004c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c86:	e0b7      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004c88:	2320      	movs	r3, #32
 8004c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c8e:	e0b3      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004c90:	2340      	movs	r3, #64	; 0x40
 8004c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c96:	e0af      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004c98:	2380      	movs	r3, #128	; 0x80
 8004c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c9e:	bf00      	nop
 8004ca0:	e0aa      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a79      	ldr	r2, [pc, #484]	; (8004e8c <UART_SetConfig+0x664>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d132      	bne.n	8004d12 <UART_SetConfig+0x4ea>
 8004cac:	4b76      	ldr	r3, [pc, #472]	; (8004e88 <UART_SetConfig+0x660>)
 8004cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	2b05      	cmp	r3, #5
 8004cb6:	d827      	bhi.n	8004d08 <UART_SetConfig+0x4e0>
 8004cb8:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <UART_SetConfig+0x498>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004cd9 	.word	0x08004cd9
 8004cc4:	08004ce1 	.word	0x08004ce1
 8004cc8:	08004ce9 	.word	0x08004ce9
 8004ccc:	08004cf1 	.word	0x08004cf1
 8004cd0:	08004cf9 	.word	0x08004cf9
 8004cd4:	08004d01 	.word	0x08004d01
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cde:	e08b      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004ce0:	2304      	movs	r3, #4
 8004ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ce6:	e087      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004ce8:	2308      	movs	r3, #8
 8004cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cee:	e083      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004cf0:	2310      	movs	r3, #16
 8004cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cf6:	e07f      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004cf8:	2320      	movs	r3, #32
 8004cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cfe:	e07b      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004d00:	2340      	movs	r3, #64	; 0x40
 8004d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d06:	e077      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004d08:	2380      	movs	r3, #128	; 0x80
 8004d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d0e:	bf00      	nop
 8004d10:	e072      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a5e      	ldr	r2, [pc, #376]	; (8004e90 <UART_SetConfig+0x668>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d132      	bne.n	8004d82 <UART_SetConfig+0x55a>
 8004d1c:	4b5a      	ldr	r3, [pc, #360]	; (8004e88 <UART_SetConfig+0x660>)
 8004d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	2b05      	cmp	r3, #5
 8004d26:	d827      	bhi.n	8004d78 <UART_SetConfig+0x550>
 8004d28:	a201      	add	r2, pc, #4	; (adr r2, 8004d30 <UART_SetConfig+0x508>)
 8004d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2e:	bf00      	nop
 8004d30:	08004d49 	.word	0x08004d49
 8004d34:	08004d51 	.word	0x08004d51
 8004d38:	08004d59 	.word	0x08004d59
 8004d3c:	08004d61 	.word	0x08004d61
 8004d40:	08004d69 	.word	0x08004d69
 8004d44:	08004d71 	.word	0x08004d71
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d4e:	e053      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004d50:	2304      	movs	r3, #4
 8004d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d56:	e04f      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004d58:	2308      	movs	r3, #8
 8004d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d5e:	e04b      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004d60:	2310      	movs	r3, #16
 8004d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d66:	e047      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004d68:	2320      	movs	r3, #32
 8004d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d6e:	e043      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004d70:	2340      	movs	r3, #64	; 0x40
 8004d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d76:	e03f      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004d78:	2380      	movs	r3, #128	; 0x80
 8004d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d7e:	bf00      	nop
 8004d80:	e03a      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a43      	ldr	r2, [pc, #268]	; (8004e94 <UART_SetConfig+0x66c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d132      	bne.n	8004df2 <UART_SetConfig+0x5ca>
 8004d8c:	4b3e      	ldr	r3, [pc, #248]	; (8004e88 <UART_SetConfig+0x660>)
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	2b05      	cmp	r3, #5
 8004d96:	d827      	bhi.n	8004de8 <UART_SetConfig+0x5c0>
 8004d98:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <UART_SetConfig+0x578>)
 8004d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9e:	bf00      	nop
 8004da0:	08004db9 	.word	0x08004db9
 8004da4:	08004dc1 	.word	0x08004dc1
 8004da8:	08004dc9 	.word	0x08004dc9
 8004dac:	08004dd1 	.word	0x08004dd1
 8004db0:	08004dd9 	.word	0x08004dd9
 8004db4:	08004de1 	.word	0x08004de1
 8004db8:	2302      	movs	r3, #2
 8004dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dbe:	e01b      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004dc0:	2304      	movs	r3, #4
 8004dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dc6:	e017      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004dc8:	2308      	movs	r3, #8
 8004dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dce:	e013      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004dd0:	2310      	movs	r3, #16
 8004dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dd6:	e00f      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004dd8:	2320      	movs	r3, #32
 8004dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dde:	e00b      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004de0:	2340      	movs	r3, #64	; 0x40
 8004de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004de6:	e007      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004de8:	2380      	movs	r3, #128	; 0x80
 8004dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dee:	bf00      	nop
 8004df0:	e002      	b.n	8004df8 <UART_SetConfig+0x5d0>
 8004df2:	2380      	movs	r3, #128	; 0x80
 8004df4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a25      	ldr	r2, [pc, #148]	; (8004e94 <UART_SetConfig+0x66c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	f040 80b8 	bne.w	8004f74 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d019      	beq.n	8004e40 <UART_SetConfig+0x618>
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	dc04      	bgt.n	8004e1a <UART_SetConfig+0x5f2>
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d009      	beq.n	8004e28 <UART_SetConfig+0x600>
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d00b      	beq.n	8004e30 <UART_SetConfig+0x608>
 8004e18:	e042      	b.n	8004ea0 <UART_SetConfig+0x678>
 8004e1a:	2b20      	cmp	r3, #32
 8004e1c:	d02b      	beq.n	8004e76 <UART_SetConfig+0x64e>
 8004e1e:	2b40      	cmp	r3, #64	; 0x40
 8004e20:	d02c      	beq.n	8004e7c <UART_SetConfig+0x654>
 8004e22:	2b10      	cmp	r3, #16
 8004e24:	d014      	beq.n	8004e50 <UART_SetConfig+0x628>
 8004e26:	e03b      	b.n	8004ea0 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004e28:	f7fe fb82 	bl	8003530 <HAL_RCCEx_GetD3PCLK1Freq>
 8004e2c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004e2e:	e03d      	b.n	8004eac <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e30:	f107 0314 	add.w	r3, r7, #20
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fe fb91 	bl	800355c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e3e:	e035      	b.n	8004eac <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e40:	f107 0308 	add.w	r3, r7, #8
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fe fcd5 	bl	80037f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e4e:	e02d      	b.n	8004eac <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e50:	4b0d      	ldr	r3, [pc, #52]	; (8004e88 <UART_SetConfig+0x660>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0320 	and.w	r3, r3, #32
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d009      	beq.n	8004e70 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <UART_SetConfig+0x660>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	08db      	lsrs	r3, r3, #3
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	4a0c      	ldr	r2, [pc, #48]	; (8004e98 <UART_SetConfig+0x670>)
 8004e68:	fa22 f303 	lsr.w	r3, r2, r3
 8004e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e6e:	e01d      	b.n	8004eac <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8004e70:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <UART_SetConfig+0x670>)
 8004e72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e74:	e01a      	b.n	8004eac <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <UART_SetConfig+0x674>)
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e7a:	e017      	b.n	8004eac <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e82:	e013      	b.n	8004eac <UART_SetConfig+0x684>
 8004e84:	40011400 	.word	0x40011400
 8004e88:	58024400 	.word	0x58024400
 8004e8c:	40007800 	.word	0x40007800
 8004e90:	40007c00 	.word	0x40007c00
 8004e94:	58000c00 	.word	0x58000c00
 8004e98:	03d09000 	.word	0x03d09000
 8004e9c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004eaa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 824d 	beq.w	800534e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	4aad      	ldr	r2, [pc, #692]	; (8005170 <UART_SetConfig+0x948>)
 8004eba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ec6:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	4413      	add	r3, r2
 8004ed2:	6a3a      	ldr	r2, [r7, #32]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d305      	bcc.n	8004ee4 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ede:	6a3a      	ldr	r2, [r7, #32]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d903      	bls.n	8004eec <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004eea:	e230      	b.n	800534e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f04f 0100 	mov.w	r1, #0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	4a9d      	ldr	r2, [pc, #628]	; (8005170 <UART_SetConfig+0x948>)
 8004efa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f04f 0400 	mov.w	r4, #0
 8004f04:	461a      	mov	r2, r3
 8004f06:	4623      	mov	r3, r4
 8004f08:	f7fb fa3a 	bl	8000380 <__aeabi_uldivmod>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	460c      	mov	r4, r1
 8004f10:	4619      	mov	r1, r3
 8004f12:	4622      	mov	r2, r4
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	f04f 0400 	mov.w	r4, #0
 8004f1c:	0214      	lsls	r4, r2, #8
 8004f1e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004f22:	020b      	lsls	r3, r1, #8
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6852      	ldr	r2, [r2, #4]
 8004f28:	0852      	lsrs	r2, r2, #1
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	eb13 0b01 	adds.w	fp, r3, r1
 8004f34:	eb44 0c02 	adc.w	ip, r4, r2
 8004f38:	4658      	mov	r0, fp
 8004f3a:	4661      	mov	r1, ip
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f04f 0400 	mov.w	r4, #0
 8004f44:	461a      	mov	r2, r3
 8004f46:	4623      	mov	r3, r4
 8004f48:	f7fb fa1a 	bl	8000380 <__aeabi_uldivmod>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	460c      	mov	r4, r1
 8004f50:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f58:	d308      	bcc.n	8004f6c <UART_SetConfig+0x744>
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f60:	d204      	bcs.n	8004f6c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f68:	60da      	str	r2, [r3, #12]
 8004f6a:	e1f0      	b.n	800534e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004f72:	e1ec      	b.n	800534e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7c:	f040 8100 	bne.w	8005180 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8004f80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f84:	2b40      	cmp	r3, #64	; 0x40
 8004f86:	f200 80b7 	bhi.w	80050f8 <UART_SetConfig+0x8d0>
 8004f8a:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <UART_SetConfig+0x768>)
 8004f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f90:	08005095 	.word	0x08005095
 8004f94:	0800509d 	.word	0x0800509d
 8004f98:	080050f9 	.word	0x080050f9
 8004f9c:	080050f9 	.word	0x080050f9
 8004fa0:	080050a5 	.word	0x080050a5
 8004fa4:	080050f9 	.word	0x080050f9
 8004fa8:	080050f9 	.word	0x080050f9
 8004fac:	080050f9 	.word	0x080050f9
 8004fb0:	080050b5 	.word	0x080050b5
 8004fb4:	080050f9 	.word	0x080050f9
 8004fb8:	080050f9 	.word	0x080050f9
 8004fbc:	080050f9 	.word	0x080050f9
 8004fc0:	080050f9 	.word	0x080050f9
 8004fc4:	080050f9 	.word	0x080050f9
 8004fc8:	080050f9 	.word	0x080050f9
 8004fcc:	080050f9 	.word	0x080050f9
 8004fd0:	080050c5 	.word	0x080050c5
 8004fd4:	080050f9 	.word	0x080050f9
 8004fd8:	080050f9 	.word	0x080050f9
 8004fdc:	080050f9 	.word	0x080050f9
 8004fe0:	080050f9 	.word	0x080050f9
 8004fe4:	080050f9 	.word	0x080050f9
 8004fe8:	080050f9 	.word	0x080050f9
 8004fec:	080050f9 	.word	0x080050f9
 8004ff0:	080050f9 	.word	0x080050f9
 8004ff4:	080050f9 	.word	0x080050f9
 8004ff8:	080050f9 	.word	0x080050f9
 8004ffc:	080050f9 	.word	0x080050f9
 8005000:	080050f9 	.word	0x080050f9
 8005004:	080050f9 	.word	0x080050f9
 8005008:	080050f9 	.word	0x080050f9
 800500c:	080050f9 	.word	0x080050f9
 8005010:	080050eb 	.word	0x080050eb
 8005014:	080050f9 	.word	0x080050f9
 8005018:	080050f9 	.word	0x080050f9
 800501c:	080050f9 	.word	0x080050f9
 8005020:	080050f9 	.word	0x080050f9
 8005024:	080050f9 	.word	0x080050f9
 8005028:	080050f9 	.word	0x080050f9
 800502c:	080050f9 	.word	0x080050f9
 8005030:	080050f9 	.word	0x080050f9
 8005034:	080050f9 	.word	0x080050f9
 8005038:	080050f9 	.word	0x080050f9
 800503c:	080050f9 	.word	0x080050f9
 8005040:	080050f9 	.word	0x080050f9
 8005044:	080050f9 	.word	0x080050f9
 8005048:	080050f9 	.word	0x080050f9
 800504c:	080050f9 	.word	0x080050f9
 8005050:	080050f9 	.word	0x080050f9
 8005054:	080050f9 	.word	0x080050f9
 8005058:	080050f9 	.word	0x080050f9
 800505c:	080050f9 	.word	0x080050f9
 8005060:	080050f9 	.word	0x080050f9
 8005064:	080050f9 	.word	0x080050f9
 8005068:	080050f9 	.word	0x080050f9
 800506c:	080050f9 	.word	0x080050f9
 8005070:	080050f9 	.word	0x080050f9
 8005074:	080050f9 	.word	0x080050f9
 8005078:	080050f9 	.word	0x080050f9
 800507c:	080050f9 	.word	0x080050f9
 8005080:	080050f9 	.word	0x080050f9
 8005084:	080050f9 	.word	0x080050f9
 8005088:	080050f9 	.word	0x080050f9
 800508c:	080050f9 	.word	0x080050f9
 8005090:	080050f1 	.word	0x080050f1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005094:	f7fd fb32 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8005098:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800509a:	e033      	b.n	8005104 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800509c:	f7fd fb44 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 80050a0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80050a2:	e02f      	b.n	8005104 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050a4:	f107 0314 	add.w	r3, r7, #20
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fe fa57 	bl	800355c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050b2:	e027      	b.n	8005104 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050b4:	f107 0308 	add.w	r3, r7, #8
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fe fb9b 	bl	80037f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050c2:	e01f      	b.n	8005104 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050c4:	4b2b      	ldr	r3, [pc, #172]	; (8005174 <UART_SetConfig+0x94c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0320 	and.w	r3, r3, #32
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d009      	beq.n	80050e4 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050d0:	4b28      	ldr	r3, [pc, #160]	; (8005174 <UART_SetConfig+0x94c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	08db      	lsrs	r3, r3, #3
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	4a27      	ldr	r2, [pc, #156]	; (8005178 <UART_SetConfig+0x950>)
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
 80050e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050e2:	e00f      	b.n	8005104 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80050e4:	4b24      	ldr	r3, [pc, #144]	; (8005178 <UART_SetConfig+0x950>)
 80050e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050e8:	e00c      	b.n	8005104 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80050ea:	4b24      	ldr	r3, [pc, #144]	; (800517c <UART_SetConfig+0x954>)
 80050ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050ee:	e009      	b.n	8005104 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050f6:	e005      	b.n	8005104 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005102:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 8121 	beq.w	800534e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	4a17      	ldr	r2, [pc, #92]	; (8005170 <UART_SetConfig+0x948>)
 8005112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005116:	461a      	mov	r2, r3
 8005118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511a:	fbb3 f3f2 	udiv	r3, r3, r2
 800511e:	005a      	lsls	r2, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	085b      	lsrs	r3, r3, #1
 8005126:	441a      	add	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005130:	b29b      	uxth	r3, r3
 8005132:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005136:	2b0f      	cmp	r3, #15
 8005138:	d916      	bls.n	8005168 <UART_SetConfig+0x940>
 800513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005140:	d212      	bcs.n	8005168 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005144:	b29b      	uxth	r3, r3
 8005146:	f023 030f 	bic.w	r3, r3, #15
 800514a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	b29b      	uxth	r3, r3
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	b29a      	uxth	r2, r3
 8005158:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800515a:	4313      	orrs	r3, r2
 800515c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005164:	60da      	str	r2, [r3, #12]
 8005166:	e0f2      	b.n	800534e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800516e:	e0ee      	b.n	800534e <UART_SetConfig+0xb26>
 8005170:	0800614c 	.word	0x0800614c
 8005174:	58024400 	.word	0x58024400
 8005178:	03d09000 	.word	0x03d09000
 800517c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8005180:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005184:	2b40      	cmp	r3, #64	; 0x40
 8005186:	f200 80b7 	bhi.w	80052f8 <UART_SetConfig+0xad0>
 800518a:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <UART_SetConfig+0x968>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	08005295 	.word	0x08005295
 8005194:	0800529d 	.word	0x0800529d
 8005198:	080052f9 	.word	0x080052f9
 800519c:	080052f9 	.word	0x080052f9
 80051a0:	080052a5 	.word	0x080052a5
 80051a4:	080052f9 	.word	0x080052f9
 80051a8:	080052f9 	.word	0x080052f9
 80051ac:	080052f9 	.word	0x080052f9
 80051b0:	080052b5 	.word	0x080052b5
 80051b4:	080052f9 	.word	0x080052f9
 80051b8:	080052f9 	.word	0x080052f9
 80051bc:	080052f9 	.word	0x080052f9
 80051c0:	080052f9 	.word	0x080052f9
 80051c4:	080052f9 	.word	0x080052f9
 80051c8:	080052f9 	.word	0x080052f9
 80051cc:	080052f9 	.word	0x080052f9
 80051d0:	080052c5 	.word	0x080052c5
 80051d4:	080052f9 	.word	0x080052f9
 80051d8:	080052f9 	.word	0x080052f9
 80051dc:	080052f9 	.word	0x080052f9
 80051e0:	080052f9 	.word	0x080052f9
 80051e4:	080052f9 	.word	0x080052f9
 80051e8:	080052f9 	.word	0x080052f9
 80051ec:	080052f9 	.word	0x080052f9
 80051f0:	080052f9 	.word	0x080052f9
 80051f4:	080052f9 	.word	0x080052f9
 80051f8:	080052f9 	.word	0x080052f9
 80051fc:	080052f9 	.word	0x080052f9
 8005200:	080052f9 	.word	0x080052f9
 8005204:	080052f9 	.word	0x080052f9
 8005208:	080052f9 	.word	0x080052f9
 800520c:	080052f9 	.word	0x080052f9
 8005210:	080052eb 	.word	0x080052eb
 8005214:	080052f9 	.word	0x080052f9
 8005218:	080052f9 	.word	0x080052f9
 800521c:	080052f9 	.word	0x080052f9
 8005220:	080052f9 	.word	0x080052f9
 8005224:	080052f9 	.word	0x080052f9
 8005228:	080052f9 	.word	0x080052f9
 800522c:	080052f9 	.word	0x080052f9
 8005230:	080052f9 	.word	0x080052f9
 8005234:	080052f9 	.word	0x080052f9
 8005238:	080052f9 	.word	0x080052f9
 800523c:	080052f9 	.word	0x080052f9
 8005240:	080052f9 	.word	0x080052f9
 8005244:	080052f9 	.word	0x080052f9
 8005248:	080052f9 	.word	0x080052f9
 800524c:	080052f9 	.word	0x080052f9
 8005250:	080052f9 	.word	0x080052f9
 8005254:	080052f9 	.word	0x080052f9
 8005258:	080052f9 	.word	0x080052f9
 800525c:	080052f9 	.word	0x080052f9
 8005260:	080052f9 	.word	0x080052f9
 8005264:	080052f9 	.word	0x080052f9
 8005268:	080052f9 	.word	0x080052f9
 800526c:	080052f9 	.word	0x080052f9
 8005270:	080052f9 	.word	0x080052f9
 8005274:	080052f9 	.word	0x080052f9
 8005278:	080052f9 	.word	0x080052f9
 800527c:	080052f9 	.word	0x080052f9
 8005280:	080052f9 	.word	0x080052f9
 8005284:	080052f9 	.word	0x080052f9
 8005288:	080052f9 	.word	0x080052f9
 800528c:	080052f9 	.word	0x080052f9
 8005290:	080052f1 	.word	0x080052f1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005294:	f7fd fa32 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8005298:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800529a:	e033      	b.n	8005304 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800529c:	f7fd fa44 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 80052a0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80052a2:	e02f      	b.n	8005304 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052a4:	f107 0314 	add.w	r3, r7, #20
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fe f957 	bl	800355c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052b2:	e027      	b.n	8005304 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052b4:	f107 0308 	add.w	r3, r7, #8
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fe fa9b 	bl	80037f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052c2:	e01f      	b.n	8005304 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052c4:	4b2c      	ldr	r3, [pc, #176]	; (8005378 <UART_SetConfig+0xb50>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d009      	beq.n	80052e4 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80052d0:	4b29      	ldr	r3, [pc, #164]	; (8005378 <UART_SetConfig+0xb50>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	08db      	lsrs	r3, r3, #3
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	4a28      	ldr	r2, [pc, #160]	; (800537c <UART_SetConfig+0xb54>)
 80052dc:	fa22 f303 	lsr.w	r3, r2, r3
 80052e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052e2:	e00f      	b.n	8005304 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80052e4:	4b25      	ldr	r3, [pc, #148]	; (800537c <UART_SetConfig+0xb54>)
 80052e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052e8:	e00c      	b.n	8005304 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80052ea:	4b25      	ldr	r3, [pc, #148]	; (8005380 <UART_SetConfig+0xb58>)
 80052ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052ee:	e009      	b.n	8005304 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052f6:	e005      	b.n	8005304 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005302:	bf00      	nop
    }

    if (pclk != 0U)
 8005304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005306:	2b00      	cmp	r3, #0
 8005308:	d021      	beq.n	800534e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	4a1d      	ldr	r2, [pc, #116]	; (8005384 <UART_SetConfig+0xb5c>)
 8005310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005314:	461a      	mov	r2, r3
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	fbb3 f2f2 	udiv	r2, r3, r2
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	085b      	lsrs	r3, r3, #1
 8005322:	441a      	add	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	fbb2 f3f3 	udiv	r3, r2, r3
 800532c:	b29b      	uxth	r3, r3
 800532e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005332:	2b0f      	cmp	r3, #15
 8005334:	d908      	bls.n	8005348 <UART_SetConfig+0xb20>
 8005336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533c:	d204      	bcs.n	8005348 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005344:	60da      	str	r2, [r3, #12]
 8005346:	e002      	b.n	800534e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800536a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800536e:	4618      	mov	r0, r3
 8005370:	3738      	adds	r7, #56	; 0x38
 8005372:	46bd      	mov	sp, r7
 8005374:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005378:	58024400 	.word	0x58024400
 800537c:	03d09000 	.word	0x03d09000
 8005380:	003d0900 	.word	0x003d0900
 8005384:	0800614c 	.word	0x0800614c

08005388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00a      	beq.n	80053b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541c:	f003 0310 	and.w	r3, r3, #16
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005464:	2b00      	cmp	r3, #0
 8005466:	d01a      	beq.n	800549e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005486:	d10a      	bne.n	800549e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	605a      	str	r2, [r3, #4]
  }
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80054dc:	f7fb fdf0 	bl	80010c0 <HAL_GetTick>
 80054e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d10e      	bne.n	800550e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f82c 	bl	800555c <UART_WaitOnFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e022      	b.n	8005554 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b04      	cmp	r3, #4
 800551a:	d10e      	bne.n	800553a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800551c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f816 	bl	800555c <UART_WaitOnFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e00c      	b.n	8005554 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2220      	movs	r2, #32
 800553e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2220      	movs	r2, #32
 8005546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	4613      	mov	r3, r2
 800556a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800556c:	e062      	b.n	8005634 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005574:	d05e      	beq.n	8005634 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005576:	f7fb fda3 	bl	80010c0 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	429a      	cmp	r2, r3
 8005584:	d302      	bcc.n	800558c <UART_WaitOnFlagUntilTimeout+0x30>
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d11d      	bne.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800559a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0201 	bic.w	r2, r2, #1
 80055aa:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e045      	b.n	8005654 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d02e      	beq.n	8005634 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055e4:	d126      	bne.n	8005634 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055fe:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0201 	bic.w	r2, r2, #1
 800560e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2220      	movs	r2, #32
 8005614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2220      	movs	r2, #32
 800561c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2220      	movs	r2, #32
 8005624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e00f      	b.n	8005654 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	69da      	ldr	r2, [r3, #28]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4013      	ands	r3, r2
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	429a      	cmp	r2, r3
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	461a      	mov	r2, r3
 800564c:	79fb      	ldrb	r3, [r7, #7]
 800564e:	429a      	cmp	r2, r3
 8005650:	d08d      	beq.n	800556e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_UARTEx_DisableFifoMode+0x16>
 800566e:	2302      	movs	r3, #2
 8005670:	e027      	b.n	80056c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2224      	movs	r2, #36	; 0x24
 800567e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0201 	bic.w	r2, r2, #1
 8005698:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80056a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e02d      	b.n	8005742 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2224      	movs	r2, #36	; 0x24
 80056f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0201 	bic.w	r2, r2, #1
 800570c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f850 	bl	80057c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2220      	movs	r2, #32
 8005734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800575e:	2302      	movs	r3, #2
 8005760:	e02d      	b.n	80057be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2224      	movs	r2, #36	; 0x24
 800576e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0201 	bic.w	r2, r2, #1
 8005788:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f812 	bl	80057c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b089      	sub	sp, #36	; 0x24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80057d0:	4a2f      	ldr	r2, [pc, #188]	; (8005890 <UARTEx_SetNbDataToProcess+0xc8>)
 80057d2:	f107 0314 	add.w	r3, r7, #20
 80057d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057da:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80057de:	4a2d      	ldr	r2, [pc, #180]	; (8005894 <UARTEx_SetNbDataToProcess+0xcc>)
 80057e0:	f107 030c 	add.w	r3, r7, #12
 80057e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057e8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d108      	bne.n	8005806 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005804:	e03d      	b.n	8005882 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005806:	2310      	movs	r3, #16
 8005808:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800580a:	2310      	movs	r3, #16
 800580c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	0e5b      	lsrs	r3, r3, #25
 8005816:	b2db      	uxtb	r3, r3
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	0f5b      	lsrs	r3, r3, #29
 8005826:	b2db      	uxtb	r3, r3
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800582e:	7fbb      	ldrb	r3, [r7, #30]
 8005830:	7f3a      	ldrb	r2, [r7, #28]
 8005832:	f107 0120 	add.w	r1, r7, #32
 8005836:	440a      	add	r2, r1
 8005838:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800583c:	fb02 f303 	mul.w	r3, r2, r3
 8005840:	7f3a      	ldrb	r2, [r7, #28]
 8005842:	f107 0120 	add.w	r1, r7, #32
 8005846:	440a      	add	r2, r1
 8005848:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800584c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005850:	b29a      	uxth	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005858:	7ffb      	ldrb	r3, [r7, #31]
 800585a:	7f7a      	ldrb	r2, [r7, #29]
 800585c:	f107 0120 	add.w	r1, r7, #32
 8005860:	440a      	add	r2, r1
 8005862:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005866:	fb02 f303 	mul.w	r3, r2, r3
 800586a:	7f7a      	ldrb	r2, [r7, #29]
 800586c:	f107 0120 	add.w	r1, r7, #32
 8005870:	440a      	add	r2, r1
 8005872:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005876:	fb93 f3f2 	sdiv	r3, r3, r2
 800587a:	b29a      	uxth	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005882:	bf00      	nop
 8005884:	3724      	adds	r7, #36	; 0x24
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	0800612c 	.word	0x0800612c
 8005894:	08006134 	.word	0x08006134

08005898 <__errno>:
 8005898:	4b01      	ldr	r3, [pc, #4]	; (80058a0 <__errno+0x8>)
 800589a:	6818      	ldr	r0, [r3, #0]
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	20000010 	.word	0x20000010

080058a4 <__libc_init_array>:
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	4e0d      	ldr	r6, [pc, #52]	; (80058dc <__libc_init_array+0x38>)
 80058a8:	4c0d      	ldr	r4, [pc, #52]	; (80058e0 <__libc_init_array+0x3c>)
 80058aa:	1ba4      	subs	r4, r4, r6
 80058ac:	10a4      	asrs	r4, r4, #2
 80058ae:	2500      	movs	r5, #0
 80058b0:	42a5      	cmp	r5, r4
 80058b2:	d109      	bne.n	80058c8 <__libc_init_array+0x24>
 80058b4:	4e0b      	ldr	r6, [pc, #44]	; (80058e4 <__libc_init_array+0x40>)
 80058b6:	4c0c      	ldr	r4, [pc, #48]	; (80058e8 <__libc_init_array+0x44>)
 80058b8:	f000 fc26 	bl	8006108 <_init>
 80058bc:	1ba4      	subs	r4, r4, r6
 80058be:	10a4      	asrs	r4, r4, #2
 80058c0:	2500      	movs	r5, #0
 80058c2:	42a5      	cmp	r5, r4
 80058c4:	d105      	bne.n	80058d2 <__libc_init_array+0x2e>
 80058c6:	bd70      	pop	{r4, r5, r6, pc}
 80058c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058cc:	4798      	blx	r3
 80058ce:	3501      	adds	r5, #1
 80058d0:	e7ee      	b.n	80058b0 <__libc_init_array+0xc>
 80058d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058d6:	4798      	blx	r3
 80058d8:	3501      	adds	r5, #1
 80058da:	e7f2      	b.n	80058c2 <__libc_init_array+0x1e>
 80058dc:	080061a0 	.word	0x080061a0
 80058e0:	080061a0 	.word	0x080061a0
 80058e4:	080061a0 	.word	0x080061a0
 80058e8:	080061a4 	.word	0x080061a4

080058ec <memset>:
 80058ec:	4402      	add	r2, r0
 80058ee:	4603      	mov	r3, r0
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d100      	bne.n	80058f6 <memset+0xa>
 80058f4:	4770      	bx	lr
 80058f6:	f803 1b01 	strb.w	r1, [r3], #1
 80058fa:	e7f9      	b.n	80058f0 <memset+0x4>

080058fc <siprintf>:
 80058fc:	b40e      	push	{r1, r2, r3}
 80058fe:	b500      	push	{lr}
 8005900:	b09c      	sub	sp, #112	; 0x70
 8005902:	ab1d      	add	r3, sp, #116	; 0x74
 8005904:	9002      	str	r0, [sp, #8]
 8005906:	9006      	str	r0, [sp, #24]
 8005908:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800590c:	4809      	ldr	r0, [pc, #36]	; (8005934 <siprintf+0x38>)
 800590e:	9107      	str	r1, [sp, #28]
 8005910:	9104      	str	r1, [sp, #16]
 8005912:	4909      	ldr	r1, [pc, #36]	; (8005938 <siprintf+0x3c>)
 8005914:	f853 2b04 	ldr.w	r2, [r3], #4
 8005918:	9105      	str	r1, [sp, #20]
 800591a:	6800      	ldr	r0, [r0, #0]
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	a902      	add	r1, sp, #8
 8005920:	f000 f866 	bl	80059f0 <_svfiprintf_r>
 8005924:	9b02      	ldr	r3, [sp, #8]
 8005926:	2200      	movs	r2, #0
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	b01c      	add	sp, #112	; 0x70
 800592c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005930:	b003      	add	sp, #12
 8005932:	4770      	bx	lr
 8005934:	20000010 	.word	0x20000010
 8005938:	ffff0208 	.word	0xffff0208

0800593c <__ssputs_r>:
 800593c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005940:	688e      	ldr	r6, [r1, #8]
 8005942:	429e      	cmp	r6, r3
 8005944:	4682      	mov	sl, r0
 8005946:	460c      	mov	r4, r1
 8005948:	4690      	mov	r8, r2
 800594a:	4699      	mov	r9, r3
 800594c:	d837      	bhi.n	80059be <__ssputs_r+0x82>
 800594e:	898a      	ldrh	r2, [r1, #12]
 8005950:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005954:	d031      	beq.n	80059ba <__ssputs_r+0x7e>
 8005956:	6825      	ldr	r5, [r4, #0]
 8005958:	6909      	ldr	r1, [r1, #16]
 800595a:	1a6f      	subs	r7, r5, r1
 800595c:	6965      	ldr	r5, [r4, #20]
 800595e:	2302      	movs	r3, #2
 8005960:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005964:	fb95 f5f3 	sdiv	r5, r5, r3
 8005968:	f109 0301 	add.w	r3, r9, #1
 800596c:	443b      	add	r3, r7
 800596e:	429d      	cmp	r5, r3
 8005970:	bf38      	it	cc
 8005972:	461d      	movcc	r5, r3
 8005974:	0553      	lsls	r3, r2, #21
 8005976:	d530      	bpl.n	80059da <__ssputs_r+0x9e>
 8005978:	4629      	mov	r1, r5
 800597a:	f000 fb2b 	bl	8005fd4 <_malloc_r>
 800597e:	4606      	mov	r6, r0
 8005980:	b950      	cbnz	r0, 8005998 <__ssputs_r+0x5c>
 8005982:	230c      	movs	r3, #12
 8005984:	f8ca 3000 	str.w	r3, [sl]
 8005988:	89a3      	ldrh	r3, [r4, #12]
 800598a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800598e:	81a3      	strh	r3, [r4, #12]
 8005990:	f04f 30ff 	mov.w	r0, #4294967295
 8005994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005998:	463a      	mov	r2, r7
 800599a:	6921      	ldr	r1, [r4, #16]
 800599c:	f000 faa8 	bl	8005ef0 <memcpy>
 80059a0:	89a3      	ldrh	r3, [r4, #12]
 80059a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059aa:	81a3      	strh	r3, [r4, #12]
 80059ac:	6126      	str	r6, [r4, #16]
 80059ae:	6165      	str	r5, [r4, #20]
 80059b0:	443e      	add	r6, r7
 80059b2:	1bed      	subs	r5, r5, r7
 80059b4:	6026      	str	r6, [r4, #0]
 80059b6:	60a5      	str	r5, [r4, #8]
 80059b8:	464e      	mov	r6, r9
 80059ba:	454e      	cmp	r6, r9
 80059bc:	d900      	bls.n	80059c0 <__ssputs_r+0x84>
 80059be:	464e      	mov	r6, r9
 80059c0:	4632      	mov	r2, r6
 80059c2:	4641      	mov	r1, r8
 80059c4:	6820      	ldr	r0, [r4, #0]
 80059c6:	f000 fa9e 	bl	8005f06 <memmove>
 80059ca:	68a3      	ldr	r3, [r4, #8]
 80059cc:	1b9b      	subs	r3, r3, r6
 80059ce:	60a3      	str	r3, [r4, #8]
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	441e      	add	r6, r3
 80059d4:	6026      	str	r6, [r4, #0]
 80059d6:	2000      	movs	r0, #0
 80059d8:	e7dc      	b.n	8005994 <__ssputs_r+0x58>
 80059da:	462a      	mov	r2, r5
 80059dc:	f000 fb54 	bl	8006088 <_realloc_r>
 80059e0:	4606      	mov	r6, r0
 80059e2:	2800      	cmp	r0, #0
 80059e4:	d1e2      	bne.n	80059ac <__ssputs_r+0x70>
 80059e6:	6921      	ldr	r1, [r4, #16]
 80059e8:	4650      	mov	r0, sl
 80059ea:	f000 faa5 	bl	8005f38 <_free_r>
 80059ee:	e7c8      	b.n	8005982 <__ssputs_r+0x46>

080059f0 <_svfiprintf_r>:
 80059f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f4:	461d      	mov	r5, r3
 80059f6:	898b      	ldrh	r3, [r1, #12]
 80059f8:	061f      	lsls	r7, r3, #24
 80059fa:	b09d      	sub	sp, #116	; 0x74
 80059fc:	4680      	mov	r8, r0
 80059fe:	460c      	mov	r4, r1
 8005a00:	4616      	mov	r6, r2
 8005a02:	d50f      	bpl.n	8005a24 <_svfiprintf_r+0x34>
 8005a04:	690b      	ldr	r3, [r1, #16]
 8005a06:	b96b      	cbnz	r3, 8005a24 <_svfiprintf_r+0x34>
 8005a08:	2140      	movs	r1, #64	; 0x40
 8005a0a:	f000 fae3 	bl	8005fd4 <_malloc_r>
 8005a0e:	6020      	str	r0, [r4, #0]
 8005a10:	6120      	str	r0, [r4, #16]
 8005a12:	b928      	cbnz	r0, 8005a20 <_svfiprintf_r+0x30>
 8005a14:	230c      	movs	r3, #12
 8005a16:	f8c8 3000 	str.w	r3, [r8]
 8005a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a1e:	e0c8      	b.n	8005bb2 <_svfiprintf_r+0x1c2>
 8005a20:	2340      	movs	r3, #64	; 0x40
 8005a22:	6163      	str	r3, [r4, #20]
 8005a24:	2300      	movs	r3, #0
 8005a26:	9309      	str	r3, [sp, #36]	; 0x24
 8005a28:	2320      	movs	r3, #32
 8005a2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a2e:	2330      	movs	r3, #48	; 0x30
 8005a30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a34:	9503      	str	r5, [sp, #12]
 8005a36:	f04f 0b01 	mov.w	fp, #1
 8005a3a:	4637      	mov	r7, r6
 8005a3c:	463d      	mov	r5, r7
 8005a3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005a42:	b10b      	cbz	r3, 8005a48 <_svfiprintf_r+0x58>
 8005a44:	2b25      	cmp	r3, #37	; 0x25
 8005a46:	d13e      	bne.n	8005ac6 <_svfiprintf_r+0xd6>
 8005a48:	ebb7 0a06 	subs.w	sl, r7, r6
 8005a4c:	d00b      	beq.n	8005a66 <_svfiprintf_r+0x76>
 8005a4e:	4653      	mov	r3, sl
 8005a50:	4632      	mov	r2, r6
 8005a52:	4621      	mov	r1, r4
 8005a54:	4640      	mov	r0, r8
 8005a56:	f7ff ff71 	bl	800593c <__ssputs_r>
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	f000 80a4 	beq.w	8005ba8 <_svfiprintf_r+0x1b8>
 8005a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a62:	4453      	add	r3, sl
 8005a64:	9309      	str	r3, [sp, #36]	; 0x24
 8005a66:	783b      	ldrb	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 809d 	beq.w	8005ba8 <_svfiprintf_r+0x1b8>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f04f 32ff 	mov.w	r2, #4294967295
 8005a74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a78:	9304      	str	r3, [sp, #16]
 8005a7a:	9307      	str	r3, [sp, #28]
 8005a7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a80:	931a      	str	r3, [sp, #104]	; 0x68
 8005a82:	462f      	mov	r7, r5
 8005a84:	2205      	movs	r2, #5
 8005a86:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005a8a:	4850      	ldr	r0, [pc, #320]	; (8005bcc <_svfiprintf_r+0x1dc>)
 8005a8c:	f7fa fc28 	bl	80002e0 <memchr>
 8005a90:	9b04      	ldr	r3, [sp, #16]
 8005a92:	b9d0      	cbnz	r0, 8005aca <_svfiprintf_r+0xda>
 8005a94:	06d9      	lsls	r1, r3, #27
 8005a96:	bf44      	itt	mi
 8005a98:	2220      	movmi	r2, #32
 8005a9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a9e:	071a      	lsls	r2, r3, #28
 8005aa0:	bf44      	itt	mi
 8005aa2:	222b      	movmi	r2, #43	; 0x2b
 8005aa4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005aa8:	782a      	ldrb	r2, [r5, #0]
 8005aaa:	2a2a      	cmp	r2, #42	; 0x2a
 8005aac:	d015      	beq.n	8005ada <_svfiprintf_r+0xea>
 8005aae:	9a07      	ldr	r2, [sp, #28]
 8005ab0:	462f      	mov	r7, r5
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	250a      	movs	r5, #10
 8005ab6:	4639      	mov	r1, r7
 8005ab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005abc:	3b30      	subs	r3, #48	; 0x30
 8005abe:	2b09      	cmp	r3, #9
 8005ac0:	d94d      	bls.n	8005b5e <_svfiprintf_r+0x16e>
 8005ac2:	b1b8      	cbz	r0, 8005af4 <_svfiprintf_r+0x104>
 8005ac4:	e00f      	b.n	8005ae6 <_svfiprintf_r+0xf6>
 8005ac6:	462f      	mov	r7, r5
 8005ac8:	e7b8      	b.n	8005a3c <_svfiprintf_r+0x4c>
 8005aca:	4a40      	ldr	r2, [pc, #256]	; (8005bcc <_svfiprintf_r+0x1dc>)
 8005acc:	1a80      	subs	r0, r0, r2
 8005ace:	fa0b f000 	lsl.w	r0, fp, r0
 8005ad2:	4318      	orrs	r0, r3
 8005ad4:	9004      	str	r0, [sp, #16]
 8005ad6:	463d      	mov	r5, r7
 8005ad8:	e7d3      	b.n	8005a82 <_svfiprintf_r+0x92>
 8005ada:	9a03      	ldr	r2, [sp, #12]
 8005adc:	1d11      	adds	r1, r2, #4
 8005ade:	6812      	ldr	r2, [r2, #0]
 8005ae0:	9103      	str	r1, [sp, #12]
 8005ae2:	2a00      	cmp	r2, #0
 8005ae4:	db01      	blt.n	8005aea <_svfiprintf_r+0xfa>
 8005ae6:	9207      	str	r2, [sp, #28]
 8005ae8:	e004      	b.n	8005af4 <_svfiprintf_r+0x104>
 8005aea:	4252      	negs	r2, r2
 8005aec:	f043 0302 	orr.w	r3, r3, #2
 8005af0:	9207      	str	r2, [sp, #28]
 8005af2:	9304      	str	r3, [sp, #16]
 8005af4:	783b      	ldrb	r3, [r7, #0]
 8005af6:	2b2e      	cmp	r3, #46	; 0x2e
 8005af8:	d10c      	bne.n	8005b14 <_svfiprintf_r+0x124>
 8005afa:	787b      	ldrb	r3, [r7, #1]
 8005afc:	2b2a      	cmp	r3, #42	; 0x2a
 8005afe:	d133      	bne.n	8005b68 <_svfiprintf_r+0x178>
 8005b00:	9b03      	ldr	r3, [sp, #12]
 8005b02:	1d1a      	adds	r2, r3, #4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	9203      	str	r2, [sp, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bfb8      	it	lt
 8005b0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b10:	3702      	adds	r7, #2
 8005b12:	9305      	str	r3, [sp, #20]
 8005b14:	4d2e      	ldr	r5, [pc, #184]	; (8005bd0 <_svfiprintf_r+0x1e0>)
 8005b16:	7839      	ldrb	r1, [r7, #0]
 8005b18:	2203      	movs	r2, #3
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	f7fa fbe0 	bl	80002e0 <memchr>
 8005b20:	b138      	cbz	r0, 8005b32 <_svfiprintf_r+0x142>
 8005b22:	2340      	movs	r3, #64	; 0x40
 8005b24:	1b40      	subs	r0, r0, r5
 8005b26:	fa03 f000 	lsl.w	r0, r3, r0
 8005b2a:	9b04      	ldr	r3, [sp, #16]
 8005b2c:	4303      	orrs	r3, r0
 8005b2e:	3701      	adds	r7, #1
 8005b30:	9304      	str	r3, [sp, #16]
 8005b32:	7839      	ldrb	r1, [r7, #0]
 8005b34:	4827      	ldr	r0, [pc, #156]	; (8005bd4 <_svfiprintf_r+0x1e4>)
 8005b36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b3a:	2206      	movs	r2, #6
 8005b3c:	1c7e      	adds	r6, r7, #1
 8005b3e:	f7fa fbcf 	bl	80002e0 <memchr>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d038      	beq.n	8005bb8 <_svfiprintf_r+0x1c8>
 8005b46:	4b24      	ldr	r3, [pc, #144]	; (8005bd8 <_svfiprintf_r+0x1e8>)
 8005b48:	bb13      	cbnz	r3, 8005b90 <_svfiprintf_r+0x1a0>
 8005b4a:	9b03      	ldr	r3, [sp, #12]
 8005b4c:	3307      	adds	r3, #7
 8005b4e:	f023 0307 	bic.w	r3, r3, #7
 8005b52:	3308      	adds	r3, #8
 8005b54:	9303      	str	r3, [sp, #12]
 8005b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b58:	444b      	add	r3, r9
 8005b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b5c:	e76d      	b.n	8005a3a <_svfiprintf_r+0x4a>
 8005b5e:	fb05 3202 	mla	r2, r5, r2, r3
 8005b62:	2001      	movs	r0, #1
 8005b64:	460f      	mov	r7, r1
 8005b66:	e7a6      	b.n	8005ab6 <_svfiprintf_r+0xc6>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	3701      	adds	r7, #1
 8005b6c:	9305      	str	r3, [sp, #20]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	250a      	movs	r5, #10
 8005b72:	4638      	mov	r0, r7
 8005b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b78:	3a30      	subs	r2, #48	; 0x30
 8005b7a:	2a09      	cmp	r2, #9
 8005b7c:	d903      	bls.n	8005b86 <_svfiprintf_r+0x196>
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0c8      	beq.n	8005b14 <_svfiprintf_r+0x124>
 8005b82:	9105      	str	r1, [sp, #20]
 8005b84:	e7c6      	b.n	8005b14 <_svfiprintf_r+0x124>
 8005b86:	fb05 2101 	mla	r1, r5, r1, r2
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	4607      	mov	r7, r0
 8005b8e:	e7f0      	b.n	8005b72 <_svfiprintf_r+0x182>
 8005b90:	ab03      	add	r3, sp, #12
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	4622      	mov	r2, r4
 8005b96:	4b11      	ldr	r3, [pc, #68]	; (8005bdc <_svfiprintf_r+0x1ec>)
 8005b98:	a904      	add	r1, sp, #16
 8005b9a:	4640      	mov	r0, r8
 8005b9c:	f3af 8000 	nop.w
 8005ba0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005ba4:	4681      	mov	r9, r0
 8005ba6:	d1d6      	bne.n	8005b56 <_svfiprintf_r+0x166>
 8005ba8:	89a3      	ldrh	r3, [r4, #12]
 8005baa:	065b      	lsls	r3, r3, #25
 8005bac:	f53f af35 	bmi.w	8005a1a <_svfiprintf_r+0x2a>
 8005bb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bb2:	b01d      	add	sp, #116	; 0x74
 8005bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb8:	ab03      	add	r3, sp, #12
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	4622      	mov	r2, r4
 8005bbe:	4b07      	ldr	r3, [pc, #28]	; (8005bdc <_svfiprintf_r+0x1ec>)
 8005bc0:	a904      	add	r1, sp, #16
 8005bc2:	4640      	mov	r0, r8
 8005bc4:	f000 f882 	bl	8005ccc <_printf_i>
 8005bc8:	e7ea      	b.n	8005ba0 <_svfiprintf_r+0x1b0>
 8005bca:	bf00      	nop
 8005bcc:	08006164 	.word	0x08006164
 8005bd0:	0800616a 	.word	0x0800616a
 8005bd4:	0800616e 	.word	0x0800616e
 8005bd8:	00000000 	.word	0x00000000
 8005bdc:	0800593d 	.word	0x0800593d

08005be0 <_printf_common>:
 8005be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005be4:	4691      	mov	r9, r2
 8005be6:	461f      	mov	r7, r3
 8005be8:	688a      	ldr	r2, [r1, #8]
 8005bea:	690b      	ldr	r3, [r1, #16]
 8005bec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	bfb8      	it	lt
 8005bf4:	4613      	movlt	r3, r2
 8005bf6:	f8c9 3000 	str.w	r3, [r9]
 8005bfa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bfe:	4606      	mov	r6, r0
 8005c00:	460c      	mov	r4, r1
 8005c02:	b112      	cbz	r2, 8005c0a <_printf_common+0x2a>
 8005c04:	3301      	adds	r3, #1
 8005c06:	f8c9 3000 	str.w	r3, [r9]
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	0699      	lsls	r1, r3, #26
 8005c0e:	bf42      	ittt	mi
 8005c10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c14:	3302      	addmi	r3, #2
 8005c16:	f8c9 3000 	strmi.w	r3, [r9]
 8005c1a:	6825      	ldr	r5, [r4, #0]
 8005c1c:	f015 0506 	ands.w	r5, r5, #6
 8005c20:	d107      	bne.n	8005c32 <_printf_common+0x52>
 8005c22:	f104 0a19 	add.w	sl, r4, #25
 8005c26:	68e3      	ldr	r3, [r4, #12]
 8005c28:	f8d9 2000 	ldr.w	r2, [r9]
 8005c2c:	1a9b      	subs	r3, r3, r2
 8005c2e:	42ab      	cmp	r3, r5
 8005c30:	dc28      	bgt.n	8005c84 <_printf_common+0xa4>
 8005c32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c36:	6822      	ldr	r2, [r4, #0]
 8005c38:	3300      	adds	r3, #0
 8005c3a:	bf18      	it	ne
 8005c3c:	2301      	movne	r3, #1
 8005c3e:	0692      	lsls	r2, r2, #26
 8005c40:	d42d      	bmi.n	8005c9e <_printf_common+0xbe>
 8005c42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c46:	4639      	mov	r1, r7
 8005c48:	4630      	mov	r0, r6
 8005c4a:	47c0      	blx	r8
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d020      	beq.n	8005c92 <_printf_common+0xb2>
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	68e5      	ldr	r5, [r4, #12]
 8005c54:	f8d9 2000 	ldr.w	r2, [r9]
 8005c58:	f003 0306 	and.w	r3, r3, #6
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	bf08      	it	eq
 8005c60:	1aad      	subeq	r5, r5, r2
 8005c62:	68a3      	ldr	r3, [r4, #8]
 8005c64:	6922      	ldr	r2, [r4, #16]
 8005c66:	bf0c      	ite	eq
 8005c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c6c:	2500      	movne	r5, #0
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	bfc4      	itt	gt
 8005c72:	1a9b      	subgt	r3, r3, r2
 8005c74:	18ed      	addgt	r5, r5, r3
 8005c76:	f04f 0900 	mov.w	r9, #0
 8005c7a:	341a      	adds	r4, #26
 8005c7c:	454d      	cmp	r5, r9
 8005c7e:	d11a      	bne.n	8005cb6 <_printf_common+0xd6>
 8005c80:	2000      	movs	r0, #0
 8005c82:	e008      	b.n	8005c96 <_printf_common+0xb6>
 8005c84:	2301      	movs	r3, #1
 8005c86:	4652      	mov	r2, sl
 8005c88:	4639      	mov	r1, r7
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	47c0      	blx	r8
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d103      	bne.n	8005c9a <_printf_common+0xba>
 8005c92:	f04f 30ff 	mov.w	r0, #4294967295
 8005c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c9a:	3501      	adds	r5, #1
 8005c9c:	e7c3      	b.n	8005c26 <_printf_common+0x46>
 8005c9e:	18e1      	adds	r1, r4, r3
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	2030      	movs	r0, #48	; 0x30
 8005ca4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ca8:	4422      	add	r2, r4
 8005caa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cb2:	3302      	adds	r3, #2
 8005cb4:	e7c5      	b.n	8005c42 <_printf_common+0x62>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	4622      	mov	r2, r4
 8005cba:	4639      	mov	r1, r7
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	47c0      	blx	r8
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d0e6      	beq.n	8005c92 <_printf_common+0xb2>
 8005cc4:	f109 0901 	add.w	r9, r9, #1
 8005cc8:	e7d8      	b.n	8005c7c <_printf_common+0x9c>
	...

08005ccc <_printf_i>:
 8005ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cd0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	7e09      	ldrb	r1, [r1, #24]
 8005cd8:	b085      	sub	sp, #20
 8005cda:	296e      	cmp	r1, #110	; 0x6e
 8005cdc:	4617      	mov	r7, r2
 8005cde:	4606      	mov	r6, r0
 8005ce0:	4698      	mov	r8, r3
 8005ce2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ce4:	f000 80b3 	beq.w	8005e4e <_printf_i+0x182>
 8005ce8:	d822      	bhi.n	8005d30 <_printf_i+0x64>
 8005cea:	2963      	cmp	r1, #99	; 0x63
 8005cec:	d036      	beq.n	8005d5c <_printf_i+0x90>
 8005cee:	d80a      	bhi.n	8005d06 <_printf_i+0x3a>
 8005cf0:	2900      	cmp	r1, #0
 8005cf2:	f000 80b9 	beq.w	8005e68 <_printf_i+0x19c>
 8005cf6:	2958      	cmp	r1, #88	; 0x58
 8005cf8:	f000 8083 	beq.w	8005e02 <_printf_i+0x136>
 8005cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005d04:	e032      	b.n	8005d6c <_printf_i+0xa0>
 8005d06:	2964      	cmp	r1, #100	; 0x64
 8005d08:	d001      	beq.n	8005d0e <_printf_i+0x42>
 8005d0a:	2969      	cmp	r1, #105	; 0x69
 8005d0c:	d1f6      	bne.n	8005cfc <_printf_i+0x30>
 8005d0e:	6820      	ldr	r0, [r4, #0]
 8005d10:	6813      	ldr	r3, [r2, #0]
 8005d12:	0605      	lsls	r5, r0, #24
 8005d14:	f103 0104 	add.w	r1, r3, #4
 8005d18:	d52a      	bpl.n	8005d70 <_printf_i+0xa4>
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6011      	str	r1, [r2, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	da03      	bge.n	8005d2a <_printf_i+0x5e>
 8005d22:	222d      	movs	r2, #45	; 0x2d
 8005d24:	425b      	negs	r3, r3
 8005d26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005d2a:	486f      	ldr	r0, [pc, #444]	; (8005ee8 <_printf_i+0x21c>)
 8005d2c:	220a      	movs	r2, #10
 8005d2e:	e039      	b.n	8005da4 <_printf_i+0xd8>
 8005d30:	2973      	cmp	r1, #115	; 0x73
 8005d32:	f000 809d 	beq.w	8005e70 <_printf_i+0x1a4>
 8005d36:	d808      	bhi.n	8005d4a <_printf_i+0x7e>
 8005d38:	296f      	cmp	r1, #111	; 0x6f
 8005d3a:	d020      	beq.n	8005d7e <_printf_i+0xb2>
 8005d3c:	2970      	cmp	r1, #112	; 0x70
 8005d3e:	d1dd      	bne.n	8005cfc <_printf_i+0x30>
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	f043 0320 	orr.w	r3, r3, #32
 8005d46:	6023      	str	r3, [r4, #0]
 8005d48:	e003      	b.n	8005d52 <_printf_i+0x86>
 8005d4a:	2975      	cmp	r1, #117	; 0x75
 8005d4c:	d017      	beq.n	8005d7e <_printf_i+0xb2>
 8005d4e:	2978      	cmp	r1, #120	; 0x78
 8005d50:	d1d4      	bne.n	8005cfc <_printf_i+0x30>
 8005d52:	2378      	movs	r3, #120	; 0x78
 8005d54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d58:	4864      	ldr	r0, [pc, #400]	; (8005eec <_printf_i+0x220>)
 8005d5a:	e055      	b.n	8005e08 <_printf_i+0x13c>
 8005d5c:	6813      	ldr	r3, [r2, #0]
 8005d5e:	1d19      	adds	r1, r3, #4
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6011      	str	r1, [r2, #0]
 8005d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e08c      	b.n	8005e8a <_printf_i+0x1be>
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6011      	str	r1, [r2, #0]
 8005d74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d78:	bf18      	it	ne
 8005d7a:	b21b      	sxthne	r3, r3
 8005d7c:	e7cf      	b.n	8005d1e <_printf_i+0x52>
 8005d7e:	6813      	ldr	r3, [r2, #0]
 8005d80:	6825      	ldr	r5, [r4, #0]
 8005d82:	1d18      	adds	r0, r3, #4
 8005d84:	6010      	str	r0, [r2, #0]
 8005d86:	0628      	lsls	r0, r5, #24
 8005d88:	d501      	bpl.n	8005d8e <_printf_i+0xc2>
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	e002      	b.n	8005d94 <_printf_i+0xc8>
 8005d8e:	0668      	lsls	r0, r5, #25
 8005d90:	d5fb      	bpl.n	8005d8a <_printf_i+0xbe>
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	4854      	ldr	r0, [pc, #336]	; (8005ee8 <_printf_i+0x21c>)
 8005d96:	296f      	cmp	r1, #111	; 0x6f
 8005d98:	bf14      	ite	ne
 8005d9a:	220a      	movne	r2, #10
 8005d9c:	2208      	moveq	r2, #8
 8005d9e:	2100      	movs	r1, #0
 8005da0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005da4:	6865      	ldr	r5, [r4, #4]
 8005da6:	60a5      	str	r5, [r4, #8]
 8005da8:	2d00      	cmp	r5, #0
 8005daa:	f2c0 8095 	blt.w	8005ed8 <_printf_i+0x20c>
 8005dae:	6821      	ldr	r1, [r4, #0]
 8005db0:	f021 0104 	bic.w	r1, r1, #4
 8005db4:	6021      	str	r1, [r4, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d13d      	bne.n	8005e36 <_printf_i+0x16a>
 8005dba:	2d00      	cmp	r5, #0
 8005dbc:	f040 808e 	bne.w	8005edc <_printf_i+0x210>
 8005dc0:	4665      	mov	r5, ip
 8005dc2:	2a08      	cmp	r2, #8
 8005dc4:	d10b      	bne.n	8005dde <_printf_i+0x112>
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	07db      	lsls	r3, r3, #31
 8005dca:	d508      	bpl.n	8005dde <_printf_i+0x112>
 8005dcc:	6923      	ldr	r3, [r4, #16]
 8005dce:	6862      	ldr	r2, [r4, #4]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	bfde      	ittt	le
 8005dd4:	2330      	movle	r3, #48	; 0x30
 8005dd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dde:	ebac 0305 	sub.w	r3, ip, r5
 8005de2:	6123      	str	r3, [r4, #16]
 8005de4:	f8cd 8000 	str.w	r8, [sp]
 8005de8:	463b      	mov	r3, r7
 8005dea:	aa03      	add	r2, sp, #12
 8005dec:	4621      	mov	r1, r4
 8005dee:	4630      	mov	r0, r6
 8005df0:	f7ff fef6 	bl	8005be0 <_printf_common>
 8005df4:	3001      	adds	r0, #1
 8005df6:	d14d      	bne.n	8005e94 <_printf_i+0x1c8>
 8005df8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dfc:	b005      	add	sp, #20
 8005dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e02:	4839      	ldr	r0, [pc, #228]	; (8005ee8 <_printf_i+0x21c>)
 8005e04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005e08:	6813      	ldr	r3, [r2, #0]
 8005e0a:	6821      	ldr	r1, [r4, #0]
 8005e0c:	1d1d      	adds	r5, r3, #4
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6015      	str	r5, [r2, #0]
 8005e12:	060a      	lsls	r2, r1, #24
 8005e14:	d50b      	bpl.n	8005e2e <_printf_i+0x162>
 8005e16:	07ca      	lsls	r2, r1, #31
 8005e18:	bf44      	itt	mi
 8005e1a:	f041 0120 	orrmi.w	r1, r1, #32
 8005e1e:	6021      	strmi	r1, [r4, #0]
 8005e20:	b91b      	cbnz	r3, 8005e2a <_printf_i+0x15e>
 8005e22:	6822      	ldr	r2, [r4, #0]
 8005e24:	f022 0220 	bic.w	r2, r2, #32
 8005e28:	6022      	str	r2, [r4, #0]
 8005e2a:	2210      	movs	r2, #16
 8005e2c:	e7b7      	b.n	8005d9e <_printf_i+0xd2>
 8005e2e:	064d      	lsls	r5, r1, #25
 8005e30:	bf48      	it	mi
 8005e32:	b29b      	uxthmi	r3, r3
 8005e34:	e7ef      	b.n	8005e16 <_printf_i+0x14a>
 8005e36:	4665      	mov	r5, ip
 8005e38:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e3c:	fb02 3311 	mls	r3, r2, r1, r3
 8005e40:	5cc3      	ldrb	r3, [r0, r3]
 8005e42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e46:	460b      	mov	r3, r1
 8005e48:	2900      	cmp	r1, #0
 8005e4a:	d1f5      	bne.n	8005e38 <_printf_i+0x16c>
 8005e4c:	e7b9      	b.n	8005dc2 <_printf_i+0xf6>
 8005e4e:	6813      	ldr	r3, [r2, #0]
 8005e50:	6825      	ldr	r5, [r4, #0]
 8005e52:	6961      	ldr	r1, [r4, #20]
 8005e54:	1d18      	adds	r0, r3, #4
 8005e56:	6010      	str	r0, [r2, #0]
 8005e58:	0628      	lsls	r0, r5, #24
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	d501      	bpl.n	8005e62 <_printf_i+0x196>
 8005e5e:	6019      	str	r1, [r3, #0]
 8005e60:	e002      	b.n	8005e68 <_printf_i+0x19c>
 8005e62:	066a      	lsls	r2, r5, #25
 8005e64:	d5fb      	bpl.n	8005e5e <_printf_i+0x192>
 8005e66:	8019      	strh	r1, [r3, #0]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	6123      	str	r3, [r4, #16]
 8005e6c:	4665      	mov	r5, ip
 8005e6e:	e7b9      	b.n	8005de4 <_printf_i+0x118>
 8005e70:	6813      	ldr	r3, [r2, #0]
 8005e72:	1d19      	adds	r1, r3, #4
 8005e74:	6011      	str	r1, [r2, #0]
 8005e76:	681d      	ldr	r5, [r3, #0]
 8005e78:	6862      	ldr	r2, [r4, #4]
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f7fa fa2f 	bl	80002e0 <memchr>
 8005e82:	b108      	cbz	r0, 8005e88 <_printf_i+0x1bc>
 8005e84:	1b40      	subs	r0, r0, r5
 8005e86:	6060      	str	r0, [r4, #4]
 8005e88:	6863      	ldr	r3, [r4, #4]
 8005e8a:	6123      	str	r3, [r4, #16]
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e92:	e7a7      	b.n	8005de4 <_printf_i+0x118>
 8005e94:	6923      	ldr	r3, [r4, #16]
 8005e96:	462a      	mov	r2, r5
 8005e98:	4639      	mov	r1, r7
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	47c0      	blx	r8
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	d0aa      	beq.n	8005df8 <_printf_i+0x12c>
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	079b      	lsls	r3, r3, #30
 8005ea6:	d413      	bmi.n	8005ed0 <_printf_i+0x204>
 8005ea8:	68e0      	ldr	r0, [r4, #12]
 8005eaa:	9b03      	ldr	r3, [sp, #12]
 8005eac:	4298      	cmp	r0, r3
 8005eae:	bfb8      	it	lt
 8005eb0:	4618      	movlt	r0, r3
 8005eb2:	e7a3      	b.n	8005dfc <_printf_i+0x130>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	464a      	mov	r2, r9
 8005eb8:	4639      	mov	r1, r7
 8005eba:	4630      	mov	r0, r6
 8005ebc:	47c0      	blx	r8
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	d09a      	beq.n	8005df8 <_printf_i+0x12c>
 8005ec2:	3501      	adds	r5, #1
 8005ec4:	68e3      	ldr	r3, [r4, #12]
 8005ec6:	9a03      	ldr	r2, [sp, #12]
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	42ab      	cmp	r3, r5
 8005ecc:	dcf2      	bgt.n	8005eb4 <_printf_i+0x1e8>
 8005ece:	e7eb      	b.n	8005ea8 <_printf_i+0x1dc>
 8005ed0:	2500      	movs	r5, #0
 8005ed2:	f104 0919 	add.w	r9, r4, #25
 8005ed6:	e7f5      	b.n	8005ec4 <_printf_i+0x1f8>
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1ac      	bne.n	8005e36 <_printf_i+0x16a>
 8005edc:	7803      	ldrb	r3, [r0, #0]
 8005ede:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ee2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee6:	e76c      	b.n	8005dc2 <_printf_i+0xf6>
 8005ee8:	08006175 	.word	0x08006175
 8005eec:	08006186 	.word	0x08006186

08005ef0 <memcpy>:
 8005ef0:	b510      	push	{r4, lr}
 8005ef2:	1e43      	subs	r3, r0, #1
 8005ef4:	440a      	add	r2, r1
 8005ef6:	4291      	cmp	r1, r2
 8005ef8:	d100      	bne.n	8005efc <memcpy+0xc>
 8005efa:	bd10      	pop	{r4, pc}
 8005efc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f04:	e7f7      	b.n	8005ef6 <memcpy+0x6>

08005f06 <memmove>:
 8005f06:	4288      	cmp	r0, r1
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	eb01 0302 	add.w	r3, r1, r2
 8005f0e:	d807      	bhi.n	8005f20 <memmove+0x1a>
 8005f10:	1e42      	subs	r2, r0, #1
 8005f12:	4299      	cmp	r1, r3
 8005f14:	d00a      	beq.n	8005f2c <memmove+0x26>
 8005f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f1a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005f1e:	e7f8      	b.n	8005f12 <memmove+0xc>
 8005f20:	4283      	cmp	r3, r0
 8005f22:	d9f5      	bls.n	8005f10 <memmove+0xa>
 8005f24:	1881      	adds	r1, r0, r2
 8005f26:	1ad2      	subs	r2, r2, r3
 8005f28:	42d3      	cmn	r3, r2
 8005f2a:	d100      	bne.n	8005f2e <memmove+0x28>
 8005f2c:	bd10      	pop	{r4, pc}
 8005f2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f32:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005f36:	e7f7      	b.n	8005f28 <memmove+0x22>

08005f38 <_free_r>:
 8005f38:	b538      	push	{r3, r4, r5, lr}
 8005f3a:	4605      	mov	r5, r0
 8005f3c:	2900      	cmp	r1, #0
 8005f3e:	d045      	beq.n	8005fcc <_free_r+0x94>
 8005f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f44:	1f0c      	subs	r4, r1, #4
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bfb8      	it	lt
 8005f4a:	18e4      	addlt	r4, r4, r3
 8005f4c:	f000 f8d2 	bl	80060f4 <__malloc_lock>
 8005f50:	4a1f      	ldr	r2, [pc, #124]	; (8005fd0 <_free_r+0x98>)
 8005f52:	6813      	ldr	r3, [r2, #0]
 8005f54:	4610      	mov	r0, r2
 8005f56:	b933      	cbnz	r3, 8005f66 <_free_r+0x2e>
 8005f58:	6063      	str	r3, [r4, #4]
 8005f5a:	6014      	str	r4, [r2, #0]
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f62:	f000 b8c8 	b.w	80060f6 <__malloc_unlock>
 8005f66:	42a3      	cmp	r3, r4
 8005f68:	d90c      	bls.n	8005f84 <_free_r+0x4c>
 8005f6a:	6821      	ldr	r1, [r4, #0]
 8005f6c:	1862      	adds	r2, r4, r1
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	bf04      	itt	eq
 8005f72:	681a      	ldreq	r2, [r3, #0]
 8005f74:	685b      	ldreq	r3, [r3, #4]
 8005f76:	6063      	str	r3, [r4, #4]
 8005f78:	bf04      	itt	eq
 8005f7a:	1852      	addeq	r2, r2, r1
 8005f7c:	6022      	streq	r2, [r4, #0]
 8005f7e:	6004      	str	r4, [r0, #0]
 8005f80:	e7ec      	b.n	8005f5c <_free_r+0x24>
 8005f82:	4613      	mov	r3, r2
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	b10a      	cbz	r2, 8005f8c <_free_r+0x54>
 8005f88:	42a2      	cmp	r2, r4
 8005f8a:	d9fa      	bls.n	8005f82 <_free_r+0x4a>
 8005f8c:	6819      	ldr	r1, [r3, #0]
 8005f8e:	1858      	adds	r0, r3, r1
 8005f90:	42a0      	cmp	r0, r4
 8005f92:	d10b      	bne.n	8005fac <_free_r+0x74>
 8005f94:	6820      	ldr	r0, [r4, #0]
 8005f96:	4401      	add	r1, r0
 8005f98:	1858      	adds	r0, r3, r1
 8005f9a:	4282      	cmp	r2, r0
 8005f9c:	6019      	str	r1, [r3, #0]
 8005f9e:	d1dd      	bne.n	8005f5c <_free_r+0x24>
 8005fa0:	6810      	ldr	r0, [r2, #0]
 8005fa2:	6852      	ldr	r2, [r2, #4]
 8005fa4:	605a      	str	r2, [r3, #4]
 8005fa6:	4401      	add	r1, r0
 8005fa8:	6019      	str	r1, [r3, #0]
 8005faa:	e7d7      	b.n	8005f5c <_free_r+0x24>
 8005fac:	d902      	bls.n	8005fb4 <_free_r+0x7c>
 8005fae:	230c      	movs	r3, #12
 8005fb0:	602b      	str	r3, [r5, #0]
 8005fb2:	e7d3      	b.n	8005f5c <_free_r+0x24>
 8005fb4:	6820      	ldr	r0, [r4, #0]
 8005fb6:	1821      	adds	r1, r4, r0
 8005fb8:	428a      	cmp	r2, r1
 8005fba:	bf04      	itt	eq
 8005fbc:	6811      	ldreq	r1, [r2, #0]
 8005fbe:	6852      	ldreq	r2, [r2, #4]
 8005fc0:	6062      	str	r2, [r4, #4]
 8005fc2:	bf04      	itt	eq
 8005fc4:	1809      	addeq	r1, r1, r0
 8005fc6:	6021      	streq	r1, [r4, #0]
 8005fc8:	605c      	str	r4, [r3, #4]
 8005fca:	e7c7      	b.n	8005f5c <_free_r+0x24>
 8005fcc:	bd38      	pop	{r3, r4, r5, pc}
 8005fce:	bf00      	nop
 8005fd0:	20000098 	.word	0x20000098

08005fd4 <_malloc_r>:
 8005fd4:	b570      	push	{r4, r5, r6, lr}
 8005fd6:	1ccd      	adds	r5, r1, #3
 8005fd8:	f025 0503 	bic.w	r5, r5, #3
 8005fdc:	3508      	adds	r5, #8
 8005fde:	2d0c      	cmp	r5, #12
 8005fe0:	bf38      	it	cc
 8005fe2:	250c      	movcc	r5, #12
 8005fe4:	2d00      	cmp	r5, #0
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	db01      	blt.n	8005fee <_malloc_r+0x1a>
 8005fea:	42a9      	cmp	r1, r5
 8005fec:	d903      	bls.n	8005ff6 <_malloc_r+0x22>
 8005fee:	230c      	movs	r3, #12
 8005ff0:	6033      	str	r3, [r6, #0]
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	bd70      	pop	{r4, r5, r6, pc}
 8005ff6:	f000 f87d 	bl	80060f4 <__malloc_lock>
 8005ffa:	4a21      	ldr	r2, [pc, #132]	; (8006080 <_malloc_r+0xac>)
 8005ffc:	6814      	ldr	r4, [r2, #0]
 8005ffe:	4621      	mov	r1, r4
 8006000:	b991      	cbnz	r1, 8006028 <_malloc_r+0x54>
 8006002:	4c20      	ldr	r4, [pc, #128]	; (8006084 <_malloc_r+0xb0>)
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	b91b      	cbnz	r3, 8006010 <_malloc_r+0x3c>
 8006008:	4630      	mov	r0, r6
 800600a:	f000 f863 	bl	80060d4 <_sbrk_r>
 800600e:	6020      	str	r0, [r4, #0]
 8006010:	4629      	mov	r1, r5
 8006012:	4630      	mov	r0, r6
 8006014:	f000 f85e 	bl	80060d4 <_sbrk_r>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d124      	bne.n	8006066 <_malloc_r+0x92>
 800601c:	230c      	movs	r3, #12
 800601e:	6033      	str	r3, [r6, #0]
 8006020:	4630      	mov	r0, r6
 8006022:	f000 f868 	bl	80060f6 <__malloc_unlock>
 8006026:	e7e4      	b.n	8005ff2 <_malloc_r+0x1e>
 8006028:	680b      	ldr	r3, [r1, #0]
 800602a:	1b5b      	subs	r3, r3, r5
 800602c:	d418      	bmi.n	8006060 <_malloc_r+0x8c>
 800602e:	2b0b      	cmp	r3, #11
 8006030:	d90f      	bls.n	8006052 <_malloc_r+0x7e>
 8006032:	600b      	str	r3, [r1, #0]
 8006034:	50cd      	str	r5, [r1, r3]
 8006036:	18cc      	adds	r4, r1, r3
 8006038:	4630      	mov	r0, r6
 800603a:	f000 f85c 	bl	80060f6 <__malloc_unlock>
 800603e:	f104 000b 	add.w	r0, r4, #11
 8006042:	1d23      	adds	r3, r4, #4
 8006044:	f020 0007 	bic.w	r0, r0, #7
 8006048:	1ac3      	subs	r3, r0, r3
 800604a:	d0d3      	beq.n	8005ff4 <_malloc_r+0x20>
 800604c:	425a      	negs	r2, r3
 800604e:	50e2      	str	r2, [r4, r3]
 8006050:	e7d0      	b.n	8005ff4 <_malloc_r+0x20>
 8006052:	428c      	cmp	r4, r1
 8006054:	684b      	ldr	r3, [r1, #4]
 8006056:	bf16      	itet	ne
 8006058:	6063      	strne	r3, [r4, #4]
 800605a:	6013      	streq	r3, [r2, #0]
 800605c:	460c      	movne	r4, r1
 800605e:	e7eb      	b.n	8006038 <_malloc_r+0x64>
 8006060:	460c      	mov	r4, r1
 8006062:	6849      	ldr	r1, [r1, #4]
 8006064:	e7cc      	b.n	8006000 <_malloc_r+0x2c>
 8006066:	1cc4      	adds	r4, r0, #3
 8006068:	f024 0403 	bic.w	r4, r4, #3
 800606c:	42a0      	cmp	r0, r4
 800606e:	d005      	beq.n	800607c <_malloc_r+0xa8>
 8006070:	1a21      	subs	r1, r4, r0
 8006072:	4630      	mov	r0, r6
 8006074:	f000 f82e 	bl	80060d4 <_sbrk_r>
 8006078:	3001      	adds	r0, #1
 800607a:	d0cf      	beq.n	800601c <_malloc_r+0x48>
 800607c:	6025      	str	r5, [r4, #0]
 800607e:	e7db      	b.n	8006038 <_malloc_r+0x64>
 8006080:	20000098 	.word	0x20000098
 8006084:	2000009c 	.word	0x2000009c

08006088 <_realloc_r>:
 8006088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608a:	4607      	mov	r7, r0
 800608c:	4614      	mov	r4, r2
 800608e:	460e      	mov	r6, r1
 8006090:	b921      	cbnz	r1, 800609c <_realloc_r+0x14>
 8006092:	4611      	mov	r1, r2
 8006094:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006098:	f7ff bf9c 	b.w	8005fd4 <_malloc_r>
 800609c:	b922      	cbnz	r2, 80060a8 <_realloc_r+0x20>
 800609e:	f7ff ff4b 	bl	8005f38 <_free_r>
 80060a2:	4625      	mov	r5, r4
 80060a4:	4628      	mov	r0, r5
 80060a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060a8:	f000 f826 	bl	80060f8 <_malloc_usable_size_r>
 80060ac:	42a0      	cmp	r0, r4
 80060ae:	d20f      	bcs.n	80060d0 <_realloc_r+0x48>
 80060b0:	4621      	mov	r1, r4
 80060b2:	4638      	mov	r0, r7
 80060b4:	f7ff ff8e 	bl	8005fd4 <_malloc_r>
 80060b8:	4605      	mov	r5, r0
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d0f2      	beq.n	80060a4 <_realloc_r+0x1c>
 80060be:	4631      	mov	r1, r6
 80060c0:	4622      	mov	r2, r4
 80060c2:	f7ff ff15 	bl	8005ef0 <memcpy>
 80060c6:	4631      	mov	r1, r6
 80060c8:	4638      	mov	r0, r7
 80060ca:	f7ff ff35 	bl	8005f38 <_free_r>
 80060ce:	e7e9      	b.n	80060a4 <_realloc_r+0x1c>
 80060d0:	4635      	mov	r5, r6
 80060d2:	e7e7      	b.n	80060a4 <_realloc_r+0x1c>

080060d4 <_sbrk_r>:
 80060d4:	b538      	push	{r3, r4, r5, lr}
 80060d6:	4c06      	ldr	r4, [pc, #24]	; (80060f0 <_sbrk_r+0x1c>)
 80060d8:	2300      	movs	r3, #0
 80060da:	4605      	mov	r5, r0
 80060dc:	4608      	mov	r0, r1
 80060de:	6023      	str	r3, [r4, #0]
 80060e0:	f7fa ff08 	bl	8000ef4 <_sbrk>
 80060e4:	1c43      	adds	r3, r0, #1
 80060e6:	d102      	bne.n	80060ee <_sbrk_r+0x1a>
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	b103      	cbz	r3, 80060ee <_sbrk_r+0x1a>
 80060ec:	602b      	str	r3, [r5, #0]
 80060ee:	bd38      	pop	{r3, r4, r5, pc}
 80060f0:	20000200 	.word	0x20000200

080060f4 <__malloc_lock>:
 80060f4:	4770      	bx	lr

080060f6 <__malloc_unlock>:
 80060f6:	4770      	bx	lr

080060f8 <_malloc_usable_size_r>:
 80060f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060fc:	1f18      	subs	r0, r3, #4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	bfbc      	itt	lt
 8006102:	580b      	ldrlt	r3, [r1, r0]
 8006104:	18c0      	addlt	r0, r0, r3
 8006106:	4770      	bx	lr

08006108 <_init>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	bf00      	nop
 800610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610e:	bc08      	pop	{r3}
 8006110:	469e      	mov	lr, r3
 8006112:	4770      	bx	lr

08006114 <_fini>:
 8006114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006116:	bf00      	nop
 8006118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800611a:	bc08      	pop	{r3}
 800611c:	469e      	mov	lr, r3
 800611e:	4770      	bx	lr
