
L8LEDBreathingLight_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a70  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002d08  08002d08  00012d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002d18  08002d18  00012d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002d1c  08002d1c  00012d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  20000010  08002d30  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000007c  08002d30  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013961  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002076  00000000  00000000  0003399f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c90  00000000  00000000  00035a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bc8  00000000  00000000  000366a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003812a  00000000  00000000  00037270  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000b559  00000000  00000000  0006f39a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0017912a  00000000  00000000  0007a8f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  001f3a1d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003464  00000000  00000000  001f3a98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002cf0 	.word	0x08002cf0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	08002cf0 	.word	0x08002cf0

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 030f 	and.w	r3, r3, #15
 800033a:	2b07      	cmp	r3, #7
 800033c:	d907      	bls.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000416:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000418:	bf00      	nop
 800041a:	4b33      	ldr	r3, [pc, #204]	; (80004e8 <main+0xdc>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000422:	2b00      	cmp	r3, #0
 8000424:	d004      	beq.n	8000430 <main+0x24>
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	60fa      	str	r2, [r7, #12]
 800042c:	2b00      	cmp	r3, #0
 800042e:	dcf4      	bgt.n	800041a <main+0xe>
  if ( timeout < 0 )
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	2b00      	cmp	r3, #0
 8000434:	da01      	bge.n	800043a <main+0x2e>
  {
  Error_Handler();
 8000436:	f000 f9fd 	bl	8000834 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043a:	f000 fac9 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043e:	f000 f859 	bl	80004f4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000442:	4b29      	ldr	r3, [pc, #164]	; (80004e8 <main+0xdc>)
 8000444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000448:	4a27      	ldr	r2, [pc, #156]	; (80004e8 <main+0xdc>)
 800044a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000452:	4b25      	ldr	r3, [pc, #148]	; (80004e8 <main+0xdc>)
 8000454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000460:	2000      	movs	r0, #0
 8000462:	f000 fe09 	bl	8001078 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000466:	2100      	movs	r1, #0
 8000468:	2000      	movs	r0, #0
 800046a:	f000 fe1f 	bl	80010ac <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800046e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000472:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000474:	bf00      	nop
 8000476:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <main+0xdc>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800047e:	2b00      	cmp	r3, #0
 8000480:	d104      	bne.n	800048c <main+0x80>
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	1e5a      	subs	r2, r3, #1
 8000486:	60fa      	str	r2, [r7, #12]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dcf4      	bgt.n	8000476 <main+0x6a>
if ( timeout < 0 )
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	2b00      	cmp	r3, #0
 8000490:	da01      	bge.n	8000496 <main+0x8a>
{
Error_Handler();
 8000492:	f000 f9cf 	bl	8000834 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000496:	f000 f8f3 	bl	8000680 <MX_GPIO_Init>
  MX_TIM3_Init();
 800049a:	f000 f895 	bl	80005c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800049e:	2108      	movs	r1, #8
 80004a0:	4812      	ldr	r0, [pc, #72]	; (80004ec <main+0xe0>)
 80004a2:	f001 fe01 	bl	80020a8 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    for(int i = 0; i <1000;i+=10){
 80004a6:	2300      	movs	r3, #0
 80004a8:	60bb      	str	r3, [r7, #8]
 80004aa:	e008      	b.n	80004be <main+0xb2>
      TIM3->CCR3 = i;
 80004ac:	4a10      	ldr	r2, [pc, #64]	; (80004f0 <main+0xe4>)
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	63d3      	str	r3, [r2, #60]	; 0x3c
      HAL_Delay(10);
 80004b2:	200a      	movs	r0, #10
 80004b4:	f000 fb1e 	bl	8000af4 <HAL_Delay>
    for(int i = 0; i <1000;i+=10){
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	330a      	adds	r3, #10
 80004bc:	60bb      	str	r3, [r7, #8]
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004c4:	dbf2      	blt.n	80004ac <main+0xa0>
    }
    for(int i = 1000; i > 0;i-=10){
 80004c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	e008      	b.n	80004e0 <main+0xd4>
      TIM3->CCR3 = i;
 80004ce:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <main+0xe4>)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	63d3      	str	r3, [r2, #60]	; 0x3c
      HAL_Delay(10);
 80004d4:	200a      	movs	r0, #10
 80004d6:	f000 fb0d 	bl	8000af4 <HAL_Delay>
    for(int i = 1000; i > 0;i-=10){
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	3b0a      	subs	r3, #10
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	dcf3      	bgt.n	80004ce <main+0xc2>
    for(int i = 0; i <1000;i+=10){
 80004e6:	e7de      	b.n	80004a6 <main+0x9a>
 80004e8:	58024400 	.word	0x58024400
 80004ec:	2000002c 	.word	0x2000002c
 80004f0:	40000400 	.word	0x40000400

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b09c      	sub	sp, #112	; 0x70
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004fe:	224c      	movs	r2, #76	; 0x4c
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f002 fbec 	bl	8002ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2220      	movs	r2, #32
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f002 fbe6 	bl	8002ce0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000514:	2004      	movs	r0, #4
 8000516:	f000 fddd 	bl	80010d4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800051a:	2300      	movs	r3, #0
 800051c:	603b      	str	r3, [r7, #0]
 800051e:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <SystemClock_Config+0xcc>)
 8000520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000522:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <SystemClock_Config+0xcc>)
 8000524:	f023 0301 	bic.w	r3, r3, #1
 8000528:	62d3      	str	r3, [r2, #44]	; 0x2c
 800052a:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <SystemClock_Config+0xcc>)
 800052c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <SystemClock_Config+0xd0>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800053c:	4a21      	ldr	r2, [pc, #132]	; (80005c4 <SystemClock_Config+0xd0>)
 800053e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <SystemClock_Config+0xd0>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000550:	bf00      	nop
 8000552:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <SystemClock_Config+0xd0>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800055a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800055e:	d1f8      	bne.n	8000552 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000564:	2301      	movs	r3, #1
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000568:	2340      	movs	r3, #64	; 0x40
 800056a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800056c:	2300      	movs	r3, #0
 800056e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fe07 	bl	8001188 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000580:	f000 f958 	bl	8000834 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	233f      	movs	r3, #63	; 0x3f
 8000586:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 f9fd 	bl	80019a8 <HAL_RCC_ClockConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b4:	f000 f93e 	bl	8000834 <Error_Handler>
  }
}
 80005b8:	bf00      	nop
 80005ba:	3770      	adds	r7, #112	; 0x70
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	58000400 	.word	0x58000400
 80005c4:	58024800 	.word	0x58024800

080005c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005da:	463b      	mov	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
 80005e8:	615a      	str	r2, [r3, #20]
 80005ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005ec:	4b22      	ldr	r3, [pc, #136]	; (8000678 <MX_TIM3_Init+0xb0>)
 80005ee:	4a23      	ldr	r2, [pc, #140]	; (800067c <MX_TIM3_Init+0xb4>)
 80005f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 320-1;
 80005f2:	4b21      	ldr	r3, [pc, #132]	; (8000678 <MX_TIM3_Init+0xb0>)
 80005f4:	f240 123f 	movw	r2, #319	; 0x13f
 80005f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <MX_TIM3_Init+0xb0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <MX_TIM3_Init+0xb0>)
 8000602:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000606:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_TIM3_Init+0xb0>)
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_TIM3_Init+0xb0>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000614:	4818      	ldr	r0, [pc, #96]	; (8000678 <MX_TIM3_Init+0xb0>)
 8000616:	f001 fcef 	bl	8001ff8 <HAL_TIM_PWM_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000620:	f000 f908 	bl	8000834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800062c:	f107 031c 	add.w	r3, r7, #28
 8000630:	4619      	mov	r1, r3
 8000632:	4811      	ldr	r0, [pc, #68]	; (8000678 <MX_TIM3_Init+0xb0>)
 8000634:	f002 faa8 	bl	8002b88 <HAL_TIMEx_MasterConfigSynchronization>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800063e:	f000 f8f9 	bl	8000834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000642:	2360      	movs	r3, #96	; 0x60
 8000644:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000652:	463b      	mov	r3, r7
 8000654:	2208      	movs	r2, #8
 8000656:	4619      	mov	r1, r3
 8000658:	4807      	ldr	r0, [pc, #28]	; (8000678 <MX_TIM3_Init+0xb0>)
 800065a:	f001 fdf7 	bl	800224c <HAL_TIM_PWM_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000664:	f000 f8e6 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <MX_TIM3_Init+0xb0>)
 800066a:	f000 f923 	bl	80008b4 <HAL_TIM_MspPostInit>

}
 800066e:	bf00      	nop
 8000670:	3728      	adds	r7, #40	; 0x28
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	2000002c 	.word	0x2000002c
 800067c:	40000400 	.word	0x40000400

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08c      	sub	sp, #48	; 0x30
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4b61      	ldr	r3, [pc, #388]	; (800081c <MX_GPIO_Init+0x19c>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069c:	4a5f      	ldr	r2, [pc, #380]	; (800081c <MX_GPIO_Init+0x19c>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006a6:	4b5d      	ldr	r3, [pc, #372]	; (800081c <MX_GPIO_Init+0x19c>)
 80006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	61bb      	str	r3, [r7, #24]
 80006b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b4:	4b59      	ldr	r3, [pc, #356]	; (800081c <MX_GPIO_Init+0x19c>)
 80006b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ba:	4a58      	ldr	r2, [pc, #352]	; (800081c <MX_GPIO_Init+0x19c>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c4:	4b55      	ldr	r3, [pc, #340]	; (800081c <MX_GPIO_Init+0x19c>)
 80006c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b52      	ldr	r3, [pc, #328]	; (800081c <MX_GPIO_Init+0x19c>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d8:	4a50      	ldr	r2, [pc, #320]	; (800081c <MX_GPIO_Init+0x19c>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e2:	4b4e      	ldr	r3, [pc, #312]	; (800081c <MX_GPIO_Init+0x19c>)
 80006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	4b4a      	ldr	r3, [pc, #296]	; (800081c <MX_GPIO_Init+0x19c>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f6:	4a49      	ldr	r2, [pc, #292]	; (800081c <MX_GPIO_Init+0x19c>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000700:	4b46      	ldr	r3, [pc, #280]	; (800081c <MX_GPIO_Init+0x19c>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070e:	4b43      	ldr	r3, [pc, #268]	; (800081c <MX_GPIO_Init+0x19c>)
 8000710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000714:	4a41      	ldr	r2, [pc, #260]	; (800081c <MX_GPIO_Init+0x19c>)
 8000716:	f043 0308 	orr.w	r3, r3, #8
 800071a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800071e:	4b3f      	ldr	r3, [pc, #252]	; (800081c <MX_GPIO_Init+0x19c>)
 8000720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000724:	f003 0308 	and.w	r3, r3, #8
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800072c:	4b3b      	ldr	r3, [pc, #236]	; (800081c <MX_GPIO_Init+0x19c>)
 800072e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000732:	4a3a      	ldr	r2, [pc, #232]	; (800081c <MX_GPIO_Init+0x19c>)
 8000734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000738:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800073c:	4b37      	ldr	r3, [pc, #220]	; (800081c <MX_GPIO_Init+0x19c>)
 800073e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800074a:	2332      	movs	r3, #50	; 0x32
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	2302      	movs	r3, #2
 8000750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800075a:	230b      	movs	r3, #11
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	482e      	ldr	r0, [pc, #184]	; (8000820 <MX_GPIO_Init+0x1a0>)
 8000766:	f000 fad7 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800076a:	2386      	movs	r3, #134	; 0x86
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800077a:	230b      	movs	r3, #11
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	4827      	ldr	r0, [pc, #156]	; (8000824 <MX_GPIO_Init+0x1a4>)
 8000786:	f000 fac7 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800078a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800079c:	230b      	movs	r3, #11
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	4820      	ldr	r0, [pc, #128]	; (8000828 <MX_GPIO_Init+0x1a8>)
 80007a8:	f000 fab6 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007be:	2307      	movs	r3, #7
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	4818      	ldr	r0, [pc, #96]	; (800082c <MX_GPIO_Init+0x1ac>)
 80007ca:	f000 faa5 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80007ce:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80007e0:	230a      	movs	r3, #10
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	480e      	ldr	r0, [pc, #56]	; (8000824 <MX_GPIO_Init+0x1a4>)
 80007ec:	f000 fa94 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000802:	230b      	movs	r3, #11
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4808      	ldr	r0, [pc, #32]	; (8000830 <MX_GPIO_Init+0x1b0>)
 800080e:	f000 fa83 	bl	8000d18 <HAL_GPIO_Init>

}
 8000812:	bf00      	nop
 8000814:	3730      	adds	r7, #48	; 0x30
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	58024400 	.word	0x58024400
 8000820:	58020800 	.word	0x58020800
 8000824:	58020000 	.word	0x58020000
 8000828:	58020400 	.word	0x58020400
 800082c:	58020c00 	.word	0x58020c00
 8000830:	58021800 	.word	0x58021800

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083a:	e7fe      	b.n	800083a <Error_Handler+0x6>

0800083c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <HAL_MspInit+0x30>)
 8000844:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000848:	4a08      	ldr	r2, [pc, #32]	; (800086c <HAL_MspInit+0x30>)
 800084a:	f043 0302 	orr.w	r3, r3, #2
 800084e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_MspInit+0x30>)
 8000854:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	58024400 	.word	0x58024400

08000870 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <HAL_TIM_PWM_MspInit+0x3c>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d10e      	bne.n	80008a0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <HAL_TIM_PWM_MspInit+0x40>)
 8000884:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000888:	4a09      	ldr	r2, [pc, #36]	; (80008b0 <HAL_TIM_PWM_MspInit+0x40>)
 800088a:	f043 0302 	orr.w	r3, r3, #2
 800088e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <HAL_TIM_PWM_MspInit+0x40>)
 8000894:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000898:	f003 0302 	and.w	r3, r3, #2
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	40000400 	.word	0x40000400
 80008b0:	58024400 	.word	0x58024400

080008b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a12      	ldr	r2, [pc, #72]	; (800091c <HAL_TIM_MspPostInit+0x68>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d11e      	bne.n	8000914 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_TIM_MspPostInit+0x6c>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	4a10      	ldr	r2, [pc, #64]	; (8000920 <HAL_TIM_MspPostInit+0x6c>)
 80008de:	f043 0302 	orr.w	r3, r3, #2
 80008e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <HAL_TIM_MspPostInit+0x6c>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ec:	f003 0302 	and.w	r3, r3, #2
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008f4:	2301      	movs	r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000904:	2302      	movs	r3, #2
 8000906:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4619      	mov	r1, r3
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <HAL_TIM_MspPostInit+0x70>)
 8000910:	f000 fa02 	bl	8000d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000914:	bf00      	nop
 8000916:	3720      	adds	r7, #32
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40000400 	.word	0x40000400
 8000920:	58024400 	.word	0x58024400
 8000924:	58020400 	.word	0x58020400

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800092c:	e7fe      	b.n	800092c <NMI_Handler+0x4>

0800092e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <MemManage_Handler+0x4>

0800093a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <BusFault_Handler+0x4>

08000940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <UsageFault_Handler+0x4>

08000946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000974:	f000 f89e 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}

0800097c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000980:	f7ff fcaa 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000984:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000986:	e003      	b.n	8000990 <LoopCopyDataInit>

08000988 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800098a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800098c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800098e:	3104      	adds	r1, #4

08000990 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000990:	480a      	ldr	r0, [pc, #40]	; (80009bc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000994:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000996:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000998:	d3f6      	bcc.n	8000988 <CopyDataInit>
  ldr  r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800099c:	e002      	b.n	80009a4 <LoopFillZerobss>

0800099e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800099e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009a0:	f842 3b04 	str.w	r3, [r2], #4

080009a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80009a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009a8:	d3f9      	bcc.n	800099e <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 80009aa:	f002 f975 	bl	8002c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ae:	f7ff fd2d 	bl	800040c <main>
  bx  lr    
 80009b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80009b8:	08002d20 	.word	0x08002d20
  ldr  r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009c0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80009c4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80009c8:	2000007c 	.word	0x2000007c

080009cc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC3_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d6:	2003      	movs	r0, #3
 80009d8:	f000 f96c 	bl	8000cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009dc:	f001 f99a 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 80009e0:	4601      	mov	r1, r0
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <HAL_Init+0x68>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	0a1b      	lsrs	r3, r3, #8
 80009e8:	f003 030f 	and.w	r3, r3, #15
 80009ec:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <HAL_Init+0x6c>)
 80009ee:	5cd3      	ldrb	r3, [r2, r3]
 80009f0:	f003 031f 	and.w	r3, r3, #31
 80009f4:	fa21 f303 	lsr.w	r3, r1, r3
 80009f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_Init+0x68>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <HAL_Init+0x6c>)
 8000a04:	5cd3      	ldrb	r3, [r2, r3]
 8000a06:	f003 031f 	and.w	r3, r3, #31
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a10:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <HAL_Init+0x70>)
 8000a12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a14:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <HAL_Init+0x74>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f000 f814 	bl	8000a48 <HAL_InitTick>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e002      	b.n	8000a30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2a:	f7ff ff07 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	58024400 	.word	0x58024400
 8000a3c:	08002d08 	.word	0x08002d08
 8000a40:	20000004 	.word	0x20000004
 8000a44:	20000000 	.word	0x20000000

08000a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_InitTick+0x60>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e021      	b.n	8000aa0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <HAL_InitTick+0x64>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <HAL_InitTick+0x60>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f943 	bl	8000cfe <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f91b 	bl	8000cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_InitTick+0x68>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000000c 	.word	0x2000000c
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000008 	.word	0x20000008

08000ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x20>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	2000000c 	.word	0x2000000c
 8000ad8:	20000078 	.word	0x20000078

08000adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_GetTick+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000078 	.word	0x20000078

08000af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000afc:	f7ff ffee 	bl	8000adc <HAL_GetTick>
 8000b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0c:	d005      	beq.n	8000b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_Delay+0x40>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b1a:	bf00      	nop
 8000b1c:	f7ff ffde 	bl	8000adc <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d8f7      	bhi.n	8000b1c <HAL_Delay+0x28>
  {
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2000000c 	.word	0x2000000c

08000b38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <HAL_GetREVID+0x14>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	0c1b      	lsrs	r3, r3, #16
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	5c001000 	.word	0x5c001000

08000b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <__NVIC_SetPriorityGrouping+0x40>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x40>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00
 8000b94:	05fa0000 	.word	0x05fa0000

08000b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	f003 0307 	and.w	r3, r3, #7
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db0a      	blt.n	8000bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	490c      	ldr	r1, [pc, #48]	; (8000c00 <__NVIC_SetPriority+0x4c>)
 8000bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bdc:	e00a      	b.n	8000bf4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	; (8000c04 <__NVIC_SetPriority+0x50>)
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	0112      	lsls	r2, r2, #4
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	761a      	strb	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	bf28      	it	cs
 8000c26:	2304      	movcs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	d902      	bls.n	8000c38 <NVIC_EncodePriority+0x30>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b03      	subs	r3, #3
 8000c36:	e000      	b.n	8000c3a <NVIC_EncodePriority+0x32>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43da      	mvns	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
         );
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c80:	d301      	bcc.n	8000c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00f      	b.n	8000ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <SysTick_Config+0x40>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8e:	210f      	movs	r1, #15
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f7ff ff8e 	bl	8000bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <SysTick_Config+0x40>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SysTick_Config+0x40>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff47 	bl	8000b50 <__NVIC_SetPriorityGrouping>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd8:	f7ff ff5e 	bl	8000b98 <__NVIC_GetPriorityGrouping>
 8000cdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	6978      	ldr	r0, [r7, #20]
 8000ce4:	f7ff ff90 	bl	8000c08 <NVIC_EncodePriority>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff5f 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffb2 	bl	8000c70 <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000d26:	4b89      	ldr	r3, [pc, #548]	; (8000f4c <HAL_GPIO_Init+0x234>)
 8000d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d2a:	e194      	b.n	8001056 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	2101      	movs	r1, #1
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	fa01 f303 	lsl.w	r3, r1, r3
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f000 8186 	beq.w	8001050 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d00b      	beq.n	8000d64 <HAL_GPIO_Init+0x4c>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d007      	beq.n	8000d64 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d58:	2b11      	cmp	r3, #17
 8000d5a:	d003      	beq.n	8000d64 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2b12      	cmp	r3, #18
 8000d62:	d130      	bne.n	8000dc6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	2203      	movs	r2, #3
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	091b      	lsrs	r3, r3, #4
 8000db0:	f003 0201 	and.w	r2, r3, #1
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0xee>
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b12      	cmp	r3, #18
 8000e04:	d123      	bne.n	8000e4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	08da      	lsrs	r2, r3, #3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3208      	adds	r2, #8
 8000e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	220f      	movs	r2, #15
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	691a      	ldr	r2, [r3, #16]
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	08da      	lsrs	r2, r3, #3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3208      	adds	r2, #8
 8000e48:	69b9      	ldr	r1, [r7, #24]
 8000e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0203 	and.w	r2, r3, #3
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 80e0 	beq.w	8001050 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e90:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <HAL_GPIO_Init+0x238>)
 8000e92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e96:	4a2e      	ldr	r2, [pc, #184]	; (8000f50 <HAL_GPIO_Init+0x238>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ea0:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <HAL_GPIO_Init+0x238>)
 8000ea2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eae:	4a29      	ldr	r2, [pc, #164]	; (8000f54 <HAL_GPIO_Init+0x23c>)
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	089b      	lsrs	r3, r3, #2
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	220f      	movs	r2, #15
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a20      	ldr	r2, [pc, #128]	; (8000f58 <HAL_GPIO_Init+0x240>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d052      	beq.n	8000f80 <HAL_GPIO_Init+0x268>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a1f      	ldr	r2, [pc, #124]	; (8000f5c <HAL_GPIO_Init+0x244>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d031      	beq.n	8000f46 <HAL_GPIO_Init+0x22e>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a1e      	ldr	r2, [pc, #120]	; (8000f60 <HAL_GPIO_Init+0x248>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d02b      	beq.n	8000f42 <HAL_GPIO_Init+0x22a>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <HAL_GPIO_Init+0x24c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d025      	beq.n	8000f3e <HAL_GPIO_Init+0x226>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <HAL_GPIO_Init+0x250>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d01f      	beq.n	8000f3a <HAL_GPIO_Init+0x222>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a1b      	ldr	r2, [pc, #108]	; (8000f6c <HAL_GPIO_Init+0x254>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d019      	beq.n	8000f36 <HAL_GPIO_Init+0x21e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a1a      	ldr	r2, [pc, #104]	; (8000f70 <HAL_GPIO_Init+0x258>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d013      	beq.n	8000f32 <HAL_GPIO_Init+0x21a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a19      	ldr	r2, [pc, #100]	; (8000f74 <HAL_GPIO_Init+0x25c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d00d      	beq.n	8000f2e <HAL_GPIO_Init+0x216>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a18      	ldr	r2, [pc, #96]	; (8000f78 <HAL_GPIO_Init+0x260>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d007      	beq.n	8000f2a <HAL_GPIO_Init+0x212>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <HAL_GPIO_Init+0x264>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d101      	bne.n	8000f26 <HAL_GPIO_Init+0x20e>
 8000f22:	2309      	movs	r3, #9
 8000f24:	e02d      	b.n	8000f82 <HAL_GPIO_Init+0x26a>
 8000f26:	230a      	movs	r3, #10
 8000f28:	e02b      	b.n	8000f82 <HAL_GPIO_Init+0x26a>
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	e029      	b.n	8000f82 <HAL_GPIO_Init+0x26a>
 8000f2e:	2307      	movs	r3, #7
 8000f30:	e027      	b.n	8000f82 <HAL_GPIO_Init+0x26a>
 8000f32:	2306      	movs	r3, #6
 8000f34:	e025      	b.n	8000f82 <HAL_GPIO_Init+0x26a>
 8000f36:	2305      	movs	r3, #5
 8000f38:	e023      	b.n	8000f82 <HAL_GPIO_Init+0x26a>
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	e021      	b.n	8000f82 <HAL_GPIO_Init+0x26a>
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e01f      	b.n	8000f82 <HAL_GPIO_Init+0x26a>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e01d      	b.n	8000f82 <HAL_GPIO_Init+0x26a>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e01b      	b.n	8000f82 <HAL_GPIO_Init+0x26a>
 8000f4a:	bf00      	nop
 8000f4c:	58000080 	.word	0x58000080
 8000f50:	58024400 	.word	0x58024400
 8000f54:	58000400 	.word	0x58000400
 8000f58:	58020000 	.word	0x58020000
 8000f5c:	58020400 	.word	0x58020400
 8000f60:	58020800 	.word	0x58020800
 8000f64:	58020c00 	.word	0x58020c00
 8000f68:	58021000 	.word	0x58021000
 8000f6c:	58021400 	.word	0x58021400
 8000f70:	58021800 	.word	0x58021800
 8000f74:	58021c00 	.word	0x58021c00
 8000f78:	58022000 	.word	0x58022000
 8000f7c:	58022400 	.word	0x58022400
 8000f80:	2300      	movs	r3, #0
 8000f82:	69fa      	ldr	r2, [r7, #28]
 8000f84:	f002 0203 	and.w	r2, r2, #3
 8000f88:	0092      	lsls	r2, r2, #2
 8000f8a:	4093      	lsls	r3, r2
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f92:	4938      	ldr	r1, [pc, #224]	; (8001074 <HAL_GPIO_Init+0x35c>)
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	3302      	adds	r3, #2
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800101a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	3301      	adds	r3, #1
 8001054:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa22 f303 	lsr.w	r3, r2, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	f47f ae63 	bne.w	8000d2c <HAL_GPIO_Init+0x14>
  }
}
 8001066:	bf00      	nop
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	58000400 	.word	0x58000400

08001078 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001080:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <HAL_HSEM_FastTake+0x2c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3320      	adds	r3, #32
 8001086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108a:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <HAL_HSEM_FastTake+0x30>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d101      	bne.n	8001094 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	e000      	b.n	8001096 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	58026400 	.word	0x58026400
 80010a8:	80000300 	.word	0x80000300

080010ac <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80010b6:	4906      	ldr	r1, [pc, #24]	; (80010d0 <HAL_HSEM_Release+0x24>)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	58026400 	.word	0x58026400

080010d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80010dc:	4b29      	ldr	r3, [pc, #164]	; (8001184 <HAL_PWREx_ConfigSupply+0xb0>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	2b06      	cmp	r3, #6
 80010e6:	d00a      	beq.n	80010fe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80010e8:	4b26      	ldr	r3, [pc, #152]	; (8001184 <HAL_PWREx_ConfigSupply+0xb0>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d001      	beq.n	80010fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e040      	b.n	800117c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e03e      	b.n	800117c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <HAL_PWREx_ConfigSupply+0xb0>)
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001106:	491f      	ldr	r1, [pc, #124]	; (8001184 <HAL_PWREx_ConfigSupply+0xb0>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4313      	orrs	r3, r2
 800110c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800110e:	f7ff fce5 	bl	8000adc <HAL_GetTick>
 8001112:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001114:	e009      	b.n	800112a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001116:	f7ff fce1 	bl	8000adc <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001124:	d901      	bls.n	800112a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e028      	b.n	800117c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_PWREx_ConfigSupply+0xb0>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001136:	d1ee      	bne.n	8001116 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b1e      	cmp	r3, #30
 800113c:	d008      	beq.n	8001150 <HAL_PWREx_ConfigSupply+0x7c>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b2e      	cmp	r3, #46	; 0x2e
 8001142:	d005      	beq.n	8001150 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b1d      	cmp	r3, #29
 8001148:	d002      	beq.n	8001150 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b2d      	cmp	r3, #45	; 0x2d
 800114e:	d114      	bne.n	800117a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001150:	f7ff fcc4 	bl	8000adc <HAL_GetTick>
 8001154:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001156:	e009      	b.n	800116c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001158:	f7ff fcc0 	bl	8000adc <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001166:	d901      	bls.n	800116c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e007      	b.n	800117c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_PWREx_ConfigSupply+0xb0>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001178:	d1ee      	bne.n	8001158 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	58024800 	.word	0x58024800

08001188 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	; 0x30
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e3ff      	b.n	800199a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 8087 	beq.w	80012b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011a8:	4b99      	ldr	r3, [pc, #612]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011b2:	4b97      	ldr	r3, [pc, #604]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 80011b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80011b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ba:	2b10      	cmp	r3, #16
 80011bc:	d007      	beq.n	80011ce <HAL_RCC_OscConfig+0x46>
 80011be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c0:	2b18      	cmp	r3, #24
 80011c2:	d110      	bne.n	80011e6 <HAL_RCC_OscConfig+0x5e>
 80011c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d10b      	bne.n	80011e6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ce:	4b90      	ldr	r3, [pc, #576]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d06c      	beq.n	80012b4 <HAL_RCC_OscConfig+0x12c>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d168      	bne.n	80012b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e3d9      	b.n	800199a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ee:	d106      	bne.n	80011fe <HAL_RCC_OscConfig+0x76>
 80011f0:	4b87      	ldr	r3, [pc, #540]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a86      	ldr	r2, [pc, #536]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 80011f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	e02e      	b.n	800125c <HAL_RCC_OscConfig+0xd4>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10c      	bne.n	8001220 <HAL_RCC_OscConfig+0x98>
 8001206:	4b82      	ldr	r3, [pc, #520]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a81      	ldr	r2, [pc, #516]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 800120c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b7f      	ldr	r3, [pc, #508]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a7e      	ldr	r2, [pc, #504]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 8001218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e01d      	b.n	800125c <HAL_RCC_OscConfig+0xd4>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001228:	d10c      	bne.n	8001244 <HAL_RCC_OscConfig+0xbc>
 800122a:	4b79      	ldr	r3, [pc, #484]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a78      	ldr	r2, [pc, #480]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 8001230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	4b76      	ldr	r3, [pc, #472]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a75      	ldr	r2, [pc, #468]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e00b      	b.n	800125c <HAL_RCC_OscConfig+0xd4>
 8001244:	4b72      	ldr	r3, [pc, #456]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a71      	ldr	r2, [pc, #452]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 800124a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b6f      	ldr	r3, [pc, #444]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a6e      	ldr	r2, [pc, #440]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 8001256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d013      	beq.n	800128c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001264:	f7ff fc3a 	bl	8000adc <HAL_GetTick>
 8001268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fc36 	bl	8000adc <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	; 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e38d      	b.n	800199a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800127e:	4b64      	ldr	r3, [pc, #400]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0xe4>
 800128a:	e014      	b.n	80012b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128c:	f7ff fc26 	bl	8000adc <HAL_GetTick>
 8001290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff fc22 	bl	8000adc <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	; 0x64
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e379      	b.n	800199a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012a6:	4b5a      	ldr	r3, [pc, #360]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <HAL_RCC_OscConfig+0x10c>
 80012b2:	e000      	b.n	80012b6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 80ae 	beq.w	8001420 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c4:	4b52      	ldr	r3, [pc, #328]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012ce:	4b50      	ldr	r3, [pc, #320]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 80012d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d007      	beq.n	80012ea <HAL_RCC_OscConfig+0x162>
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	2b18      	cmp	r3, #24
 80012de:	d13a      	bne.n	8001356 <HAL_RCC_OscConfig+0x1ce>
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d135      	bne.n	8001356 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012ea:	4b49      	ldr	r3, [pc, #292]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <HAL_RCC_OscConfig+0x17a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e34b      	b.n	800199a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001302:	f7ff fc19 	bl	8000b38 <HAL_GetREVID>
 8001306:	4602      	mov	r2, r0
 8001308:	f241 0303 	movw	r3, #4099	; 0x1003
 800130c:	429a      	cmp	r2, r3
 800130e:	d817      	bhi.n	8001340 <HAL_RCC_OscConfig+0x1b8>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	2b40      	cmp	r3, #64	; 0x40
 8001316:	d108      	bne.n	800132a <HAL_RCC_OscConfig+0x1a2>
 8001318:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001320:	4a3b      	ldr	r2, [pc, #236]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 8001322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001326:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001328:	e07a      	b.n	8001420 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132a:	4b39      	ldr	r3, [pc, #228]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	031b      	lsls	r3, r3, #12
 8001338:	4935      	ldr	r1, [pc, #212]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 800133a:	4313      	orrs	r3, r2
 800133c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800133e:	e06f      	b.n	8001420 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001340:	4b33      	ldr	r3, [pc, #204]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	061b      	lsls	r3, r3, #24
 800134e:	4930      	ldr	r1, [pc, #192]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 8001350:	4313      	orrs	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001354:	e064      	b.n	8001420 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d045      	beq.n	80013ea <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800135e:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 0219 	bic.w	r2, r3, #25
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	4929      	ldr	r1, [pc, #164]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 800136c:	4313      	orrs	r3, r2
 800136e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fbb4 	bl	8000adc <HAL_GetTick>
 8001374:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001378:	f7ff fbb0 	bl	8000adc <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e307      	b.n	800199a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	f7ff fbcf 	bl	8000b38 <HAL_GetREVID>
 800139a:	4602      	mov	r2, r0
 800139c:	f241 0303 	movw	r3, #4099	; 0x1003
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d817      	bhi.n	80013d4 <HAL_RCC_OscConfig+0x24c>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	2b40      	cmp	r3, #64	; 0x40
 80013aa:	d108      	bne.n	80013be <HAL_RCC_OscConfig+0x236>
 80013ac:	4b18      	ldr	r3, [pc, #96]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80013b4:	4a16      	ldr	r2, [pc, #88]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 80013b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ba:	6053      	str	r3, [r2, #4]
 80013bc:	e030      	b.n	8001420 <HAL_RCC_OscConfig+0x298>
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	031b      	lsls	r3, r3, #12
 80013cc:	4910      	ldr	r1, [pc, #64]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]
 80013d2:	e025      	b.n	8001420 <HAL_RCC_OscConfig+0x298>
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	061b      	lsls	r3, r3, #24
 80013e2:	490b      	ldr	r1, [pc, #44]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
 80013e8:	e01a      	b.n	8001420 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a08      	ldr	r2, [pc, #32]	; (8001410 <HAL_RCC_OscConfig+0x288>)
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f6:	f7ff fb71 	bl	8000adc <HAL_GetTick>
 80013fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013fc:	e00a      	b.n	8001414 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013fe:	f7ff fb6d 	bl	8000adc <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d903      	bls.n	8001414 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e2c4      	b.n	800199a <HAL_RCC_OscConfig+0x812>
 8001410:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001414:	4ba4      	ldr	r3, [pc, #656]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1ee      	bne.n	80013fe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 80a9 	beq.w	8001580 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800142e:	4b9e      	ldr	r3, [pc, #632]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001436:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001438:	4b9b      	ldr	r3, [pc, #620]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b08      	cmp	r3, #8
 8001442:	d007      	beq.n	8001454 <HAL_RCC_OscConfig+0x2cc>
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	2b18      	cmp	r3, #24
 8001448:	d13a      	bne.n	80014c0 <HAL_RCC_OscConfig+0x338>
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b01      	cmp	r3, #1
 8001452:	d135      	bne.n	80014c0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001454:	4b94      	ldr	r3, [pc, #592]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145c:	2b00      	cmp	r3, #0
 800145e:	d005      	beq.n	800146c <HAL_RCC_OscConfig+0x2e4>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	2b80      	cmp	r3, #128	; 0x80
 8001466:	d001      	beq.n	800146c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e296      	b.n	800199a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800146c:	f7ff fb64 	bl	8000b38 <HAL_GetREVID>
 8001470:	4602      	mov	r2, r0
 8001472:	f241 0303 	movw	r3, #4099	; 0x1003
 8001476:	429a      	cmp	r2, r3
 8001478:	d817      	bhi.n	80014aa <HAL_RCC_OscConfig+0x322>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	2b20      	cmp	r3, #32
 8001480:	d108      	bne.n	8001494 <HAL_RCC_OscConfig+0x30c>
 8001482:	4b89      	ldr	r3, [pc, #548]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800148a:	4a87      	ldr	r2, [pc, #540]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 800148c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001490:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001492:	e075      	b.n	8001580 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001494:	4b84      	ldr	r3, [pc, #528]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	069b      	lsls	r3, r3, #26
 80014a2:	4981      	ldr	r1, [pc, #516]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014a8:	e06a      	b.n	8001580 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014aa:	4b7f      	ldr	r3, [pc, #508]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	061b      	lsls	r3, r3, #24
 80014b8:	497b      	ldr	r1, [pc, #492]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014be:	e05f      	b.n	8001580 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d042      	beq.n	800154e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80014c8:	4b77      	ldr	r3, [pc, #476]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 80014ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d4:	f7ff fb02 	bl	8000adc <HAL_GetTick>
 80014d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80014dc:	f7ff fafe 	bl	8000adc <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e255      	b.n	800199a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014ee:	4b6e      	ldr	r3, [pc, #440]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014fa:	f7ff fb1d 	bl	8000b38 <HAL_GetREVID>
 80014fe:	4602      	mov	r2, r0
 8001500:	f241 0303 	movw	r3, #4099	; 0x1003
 8001504:	429a      	cmp	r2, r3
 8001506:	d817      	bhi.n	8001538 <HAL_RCC_OscConfig+0x3b0>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	2b20      	cmp	r3, #32
 800150e:	d108      	bne.n	8001522 <HAL_RCC_OscConfig+0x39a>
 8001510:	4b65      	ldr	r3, [pc, #404]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001518:	4a63      	ldr	r2, [pc, #396]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 800151a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800151e:	6053      	str	r3, [r2, #4]
 8001520:	e02e      	b.n	8001580 <HAL_RCC_OscConfig+0x3f8>
 8001522:	4b61      	ldr	r3, [pc, #388]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	069b      	lsls	r3, r3, #26
 8001530:	495d      	ldr	r1, [pc, #372]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]
 8001536:	e023      	b.n	8001580 <HAL_RCC_OscConfig+0x3f8>
 8001538:	4b5b      	ldr	r3, [pc, #364]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	061b      	lsls	r3, r3, #24
 8001546:	4958      	ldr	r1, [pc, #352]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 8001548:	4313      	orrs	r3, r2
 800154a:	60cb      	str	r3, [r1, #12]
 800154c:	e018      	b.n	8001580 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800154e:	4b56      	ldr	r3, [pc, #344]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a55      	ldr	r2, [pc, #340]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 8001554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155a:	f7ff fabf 	bl	8000adc <HAL_GetTick>
 800155e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001562:	f7ff fabb 	bl	8000adc <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e212      	b.n	800199a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001574:	4b4c      	ldr	r3, [pc, #304]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1f0      	bne.n	8001562 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b00      	cmp	r3, #0
 800158a:	d036      	beq.n	80015fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d019      	beq.n	80015c8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001594:	4b44      	ldr	r3, [pc, #272]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 8001596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001598:	4a43      	ldr	r2, [pc, #268]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a0:	f7ff fa9c 	bl	8000adc <HAL_GetTick>
 80015a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a8:	f7ff fa98 	bl	8000adc <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1ef      	b.n	800199a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015ba:	4b3b      	ldr	r3, [pc, #236]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 80015bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x420>
 80015c6:	e018      	b.n	80015fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c8:	4b37      	ldr	r3, [pc, #220]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 80015ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015cc:	4a36      	ldr	r2, [pc, #216]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 80015ce:	f023 0301 	bic.w	r3, r3, #1
 80015d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d4:	f7ff fa82 	bl	8000adc <HAL_GetTick>
 80015d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015dc:	f7ff fa7e 	bl	8000adc <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e1d5      	b.n	800199a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015ee:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 80015f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0320 	and.w	r3, r3, #32
 8001602:	2b00      	cmp	r3, #0
 8001604:	d036      	beq.n	8001674 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d019      	beq.n	8001642 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a25      	ldr	r2, [pc, #148]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 8001614:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001618:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800161a:	f7ff fa5f 	bl	8000adc <HAL_GetTick>
 800161e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001622:	f7ff fa5b 	bl	8000adc <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e1b2      	b.n	800199a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001634:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x49a>
 8001640:	e018      	b.n	8001674 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 8001648:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800164c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800164e:	f7ff fa45 	bl	8000adc <HAL_GetTick>
 8001652:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001656:	f7ff fa41 	bl	8000adc <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e198      	b.n	800199a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_RCC_OscConfig+0x520>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f0      	bne.n	8001656 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 8085 	beq.w	800178c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_RCC_OscConfig+0x524>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a09      	ldr	r2, [pc, #36]	; (80016ac <HAL_RCC_OscConfig+0x524>)
 8001688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800168e:	f7ff fa25 	bl	8000adc <HAL_GetTick>
 8001692:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001694:	e00c      	b.n	80016b0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001696:	f7ff fa21 	bl	8000adc <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b64      	cmp	r3, #100	; 0x64
 80016a2:	d905      	bls.n	80016b0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e178      	b.n	800199a <HAL_RCC_OscConfig+0x812>
 80016a8:	58024400 	.word	0x58024400
 80016ac:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016b0:	4b96      	ldr	r3, [pc, #600]	; (800190c <HAL_RCC_OscConfig+0x784>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0ec      	beq.n	8001696 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x54a>
 80016c4:	4b92      	ldr	r3, [pc, #584]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 80016c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c8:	4a91      	ldr	r2, [pc, #580]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6713      	str	r3, [r2, #112]	; 0x70
 80016d0:	e02d      	b.n	800172e <HAL_RCC_OscConfig+0x5a6>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x56c>
 80016da:	4b8d      	ldr	r3, [pc, #564]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 80016dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016de:	4a8c      	ldr	r2, [pc, #560]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	6713      	str	r3, [r2, #112]	; 0x70
 80016e6:	4b8a      	ldr	r3, [pc, #552]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	4a89      	ldr	r2, [pc, #548]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 80016ec:	f023 0304 	bic.w	r3, r3, #4
 80016f0:	6713      	str	r3, [r2, #112]	; 0x70
 80016f2:	e01c      	b.n	800172e <HAL_RCC_OscConfig+0x5a6>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b05      	cmp	r3, #5
 80016fa:	d10c      	bne.n	8001716 <HAL_RCC_OscConfig+0x58e>
 80016fc:	4b84      	ldr	r3, [pc, #528]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001700:	4a83      	ldr	r2, [pc, #524]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 8001702:	f043 0304 	orr.w	r3, r3, #4
 8001706:	6713      	str	r3, [r2, #112]	; 0x70
 8001708:	4b81      	ldr	r3, [pc, #516]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170c:	4a80      	ldr	r2, [pc, #512]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6713      	str	r3, [r2, #112]	; 0x70
 8001714:	e00b      	b.n	800172e <HAL_RCC_OscConfig+0x5a6>
 8001716:	4b7e      	ldr	r3, [pc, #504]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 8001718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171a:	4a7d      	ldr	r2, [pc, #500]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	6713      	str	r3, [r2, #112]	; 0x70
 8001722:	4b7b      	ldr	r3, [pc, #492]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001726:	4a7a      	ldr	r2, [pc, #488]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 8001728:	f023 0304 	bic.w	r3, r3, #4
 800172c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d015      	beq.n	8001762 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001736:	f7ff f9d1 	bl	8000adc <HAL_GetTick>
 800173a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800173c:	e00a      	b.n	8001754 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173e:	f7ff f9cd 	bl	8000adc <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	f241 3288 	movw	r2, #5000	; 0x1388
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e122      	b.n	800199a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001754:	4b6e      	ldr	r3, [pc, #440]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 8001756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0ee      	beq.n	800173e <HAL_RCC_OscConfig+0x5b6>
 8001760:	e014      	b.n	800178c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001762:	f7ff f9bb 	bl	8000adc <HAL_GetTick>
 8001766:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff f9b7 	bl	8000adc <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	; 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e10c      	b.n	800199a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001780:	4b63      	ldr	r3, [pc, #396]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1ee      	bne.n	800176a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 8101 	beq.w	8001998 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001796:	4b5e      	ldr	r3, [pc, #376]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800179e:	2b18      	cmp	r3, #24
 80017a0:	f000 80bc 	beq.w	800191c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	f040 8095 	bne.w	80018d8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ae:	4b58      	ldr	r3, [pc, #352]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a57      	ldr	r2, [pc, #348]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 80017b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ba:	f7ff f98f 	bl	8000adc <HAL_GetTick>
 80017be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c2:	f7ff f98b 	bl	8000adc <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e0e2      	b.n	800199a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017d4:	4b4e      	ldr	r3, [pc, #312]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f0      	bne.n	80017c2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e0:	4b4b      	ldr	r3, [pc, #300]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 80017e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017e4:	4b4b      	ldr	r3, [pc, #300]	; (8001914 <HAL_RCC_OscConfig+0x78c>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017f0:	0112      	lsls	r2, r2, #4
 80017f2:	430a      	orrs	r2, r1
 80017f4:	4946      	ldr	r1, [pc, #280]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	628b      	str	r3, [r1, #40]	; 0x28
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	3b01      	subs	r3, #1
 8001800:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001808:	3b01      	subs	r3, #1
 800180a:	025b      	lsls	r3, r3, #9
 800180c:	b29b      	uxth	r3, r3
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001814:	3b01      	subs	r3, #1
 8001816:	041b      	lsls	r3, r3, #16
 8001818:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001822:	3b01      	subs	r3, #1
 8001824:	061b      	lsls	r3, r3, #24
 8001826:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800182a:	4939      	ldr	r1, [pc, #228]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 800182c:	4313      	orrs	r3, r2
 800182e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001830:	4b37      	ldr	r3, [pc, #220]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	4a36      	ldr	r2, [pc, #216]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 8001836:	f023 0301 	bic.w	r3, r3, #1
 800183a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800183c:	4b34      	ldr	r3, [pc, #208]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 800183e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001840:	4b35      	ldr	r3, [pc, #212]	; (8001918 <HAL_RCC_OscConfig+0x790>)
 8001842:	4013      	ands	r3, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001848:	00d2      	lsls	r2, r2, #3
 800184a:	4931      	ldr	r1, [pc, #196]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 800184c:	4313      	orrs	r3, r2
 800184e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001850:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	f023 020c 	bic.w	r2, r3, #12
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	492c      	ldr	r1, [pc, #176]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 800185e:	4313      	orrs	r3, r2
 8001860:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001862:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	f023 0202 	bic.w	r2, r3, #2
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	4928      	ldr	r1, [pc, #160]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 8001870:	4313      	orrs	r3, r2
 8001872:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001874:	4b26      	ldr	r3, [pc, #152]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	4a25      	ldr	r2, [pc, #148]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 800187a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001880:	4b23      	ldr	r3, [pc, #140]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	4a22      	ldr	r2, [pc, #136]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 8001886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800188c:	4b20      	ldr	r3, [pc, #128]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	4a1f      	ldr	r2, [pc, #124]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 8001892:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001896:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001898:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	4a1c      	ldr	r2, [pc, #112]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a19      	ldr	r2, [pc, #100]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 80018aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff f914 	bl	8000adc <HAL_GetTick>
 80018b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff f910 	bl	8000adc <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e067      	b.n	800199a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x730>
 80018d6:	e05f      	b.n	8001998 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0c      	ldr	r2, [pc, #48]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 80018de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e4:	f7ff f8fa 	bl	8000adc <HAL_GetTick>
 80018e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff f8f6 	bl	8000adc <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e04d      	b.n	800199a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <HAL_RCC_OscConfig+0x788>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x764>
 800190a:	e045      	b.n	8001998 <HAL_RCC_OscConfig+0x810>
 800190c:	58024800 	.word	0x58024800
 8001910:	58024400 	.word	0x58024400
 8001914:	fffffc0c 	.word	0xfffffc0c
 8001918:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <HAL_RCC_OscConfig+0x81c>)
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_RCC_OscConfig+0x81c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	2b01      	cmp	r3, #1
 800192e:	d031      	beq.n	8001994 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	f003 0203 	and.w	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800193a:	429a      	cmp	r2, r3
 800193c:	d12a      	bne.n	8001994 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d122      	bne.n	8001994 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800195a:	429a      	cmp	r2, r3
 800195c:	d11a      	bne.n	8001994 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	0a5b      	lsrs	r3, r3, #9
 8001962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d111      	bne.n	8001994 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	0c1b      	lsrs	r3, r3, #16
 8001974:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d108      	bne.n	8001994 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	0e1b      	lsrs	r3, r3, #24
 8001986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3730      	adds	r7, #48	; 0x30
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	58024400 	.word	0x58024400

080019a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e19c      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b8a      	ldr	r3, [pc, #552]	; (8001be8 <HAL_RCC_ClockConfig+0x240>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d910      	bls.n	80019ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b87      	ldr	r3, [pc, #540]	; (8001be8 <HAL_RCC_ClockConfig+0x240>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 020f 	bic.w	r2, r3, #15
 80019d2:	4985      	ldr	r1, [pc, #532]	; (8001be8 <HAL_RCC_ClockConfig+0x240>)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b83      	ldr	r3, [pc, #524]	; (8001be8 <HAL_RCC_ClockConfig+0x240>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e184      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d010      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	4b7b      	ldr	r3, [pc, #492]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d908      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a08:	4b78      	ldr	r3, [pc, #480]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	4975      	ldr	r1, [pc, #468]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d010      	beq.n	8001a48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	4b70      	ldr	r3, [pc, #448]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d908      	bls.n	8001a48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a36:	4b6d      	ldr	r3, [pc, #436]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	496a      	ldr	r1, [pc, #424]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d010      	beq.n	8001a76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699a      	ldr	r2, [r3, #24]
 8001a58:	4b64      	ldr	r3, [pc, #400]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d908      	bls.n	8001a76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a64:	4b61      	ldr	r3, [pc, #388]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	495e      	ldr	r1, [pc, #376]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0320 	and.w	r3, r3, #32
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d010      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69da      	ldr	r2, [r3, #28]
 8001a86:	4b59      	ldr	r3, [pc, #356]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d908      	bls.n	8001aa4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001a92:	4b56      	ldr	r3, [pc, #344]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4953      	ldr	r1, [pc, #332]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d010      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	4b4d      	ldr	r3, [pc, #308]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d908      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b4a      	ldr	r3, [pc, #296]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f023 020f 	bic.w	r2, r3, #15
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4947      	ldr	r1, [pc, #284]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d055      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ade:	4b43      	ldr	r3, [pc, #268]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	4940      	ldr	r1, [pc, #256]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001af8:	4b3c      	ldr	r3, [pc, #240]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d121      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0f6      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b10:	4b36      	ldr	r3, [pc, #216]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d115      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0ea      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d107      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d109      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0de      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b38:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0d6      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b48:	4b28      	ldr	r3, [pc, #160]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	f023 0207 	bic.w	r2, r3, #7
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4925      	ldr	r1, [pc, #148]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5a:	f7fe ffbf 	bl	8000adc <HAL_GetTick>
 8001b5e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b60:	e00a      	b.n	8001b78 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b62:	f7fe ffbb 	bl	8000adc <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e0be      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b78:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d1eb      	bne.n	8001b62 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d010      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	4b14      	ldr	r3, [pc, #80]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d208      	bcs.n	8001bb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f023 020f 	bic.w	r2, r3, #15
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	490e      	ldr	r1, [pc, #56]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_ClockConfig+0x240>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d214      	bcs.n	8001bf0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_RCC_ClockConfig+0x240>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 020f 	bic.w	r2, r3, #15
 8001bce:	4906      	ldr	r1, [pc, #24]	; (8001be8 <HAL_RCC_ClockConfig+0x240>)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <HAL_RCC_ClockConfig+0x240>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e086      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x34e>
 8001be8:	52002000 	.word	0x52002000
 8001bec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d010      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	4b3f      	ldr	r3, [pc, #252]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d208      	bcs.n	8001c1e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c0c:	4b3c      	ldr	r3, [pc, #240]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	4939      	ldr	r1, [pc, #228]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d010      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695a      	ldr	r2, [r3, #20]
 8001c2e:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d208      	bcs.n	8001c4c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c3a:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	492e      	ldr	r1, [pc, #184]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d010      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	699a      	ldr	r2, [r3, #24]
 8001c5c:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d208      	bcs.n	8001c7a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c68:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4922      	ldr	r1, [pc, #136]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d010      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69da      	ldr	r2, [r3, #28]
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d208      	bcs.n	8001ca8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4917      	ldr	r1, [pc, #92]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ca8:	f000 f834 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 8001cac:	4601      	mov	r1, r0
 8001cae:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <HAL_RCC_ClockConfig+0x35c>)
 8001cba:	5cd3      	ldrb	r3, [r2, r3]
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8001cc4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <HAL_RCC_ClockConfig+0x35c>)
 8001cd0:	5cd3      	ldrb	r3, [r2, r3]
 8001cd2:	f003 031f 	and.w	r3, r3, #31
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <HAL_RCC_ClockConfig+0x360>)
 8001cde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <HAL_RCC_ClockConfig+0x364>)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_RCC_ClockConfig+0x368>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe feac 	bl	8000a48 <HAL_InitTick>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	58024400 	.word	0x58024400
 8001d04:	08002d08 	.word	0x08002d08
 8001d08:	20000004 	.word	0x20000004
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	20000008 	.word	0x20000008

08001d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	; 0x24
 8001d18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d1a:	4baf      	ldr	r3, [pc, #700]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d22:	2b18      	cmp	r3, #24
 8001d24:	f200 814e 	bhi.w	8001fc4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8001d28:	a201      	add	r2, pc, #4	; (adr r2, 8001d30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2e:	bf00      	nop
 8001d30:	08001d95 	.word	0x08001d95
 8001d34:	08001fc5 	.word	0x08001fc5
 8001d38:	08001fc5 	.word	0x08001fc5
 8001d3c:	08001fc5 	.word	0x08001fc5
 8001d40:	08001fc5 	.word	0x08001fc5
 8001d44:	08001fc5 	.word	0x08001fc5
 8001d48:	08001fc5 	.word	0x08001fc5
 8001d4c:	08001fc5 	.word	0x08001fc5
 8001d50:	08001dbb 	.word	0x08001dbb
 8001d54:	08001fc5 	.word	0x08001fc5
 8001d58:	08001fc5 	.word	0x08001fc5
 8001d5c:	08001fc5 	.word	0x08001fc5
 8001d60:	08001fc5 	.word	0x08001fc5
 8001d64:	08001fc5 	.word	0x08001fc5
 8001d68:	08001fc5 	.word	0x08001fc5
 8001d6c:	08001fc5 	.word	0x08001fc5
 8001d70:	08001dc1 	.word	0x08001dc1
 8001d74:	08001fc5 	.word	0x08001fc5
 8001d78:	08001fc5 	.word	0x08001fc5
 8001d7c:	08001fc5 	.word	0x08001fc5
 8001d80:	08001fc5 	.word	0x08001fc5
 8001d84:	08001fc5 	.word	0x08001fc5
 8001d88:	08001fc5 	.word	0x08001fc5
 8001d8c:	08001fc5 	.word	0x08001fc5
 8001d90:	08001dc7 	.word	0x08001dc7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d94:	4b90      	ldr	r3, [pc, #576]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0320 	and.w	r3, r3, #32
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d009      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001da0:	4b8d      	ldr	r3, [pc, #564]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	08db      	lsrs	r3, r3, #3
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	4a8c      	ldr	r2, [pc, #560]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
 8001db0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001db2:	e10a      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001db4:	4b89      	ldr	r3, [pc, #548]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001db6:	61bb      	str	r3, [r7, #24]
    break;
 8001db8:	e107      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001dba:	4b89      	ldr	r3, [pc, #548]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001dbc:	61bb      	str	r3, [r7, #24]
    break;
 8001dbe:	e104      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001dc0:	4b88      	ldr	r3, [pc, #544]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8001dc2:	61bb      	str	r3, [r7, #24]
    break;
 8001dc4:	e101      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001dc6:	4b84      	ldr	r3, [pc, #528]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001dd0:	4b81      	ldr	r3, [pc, #516]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dda:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ddc:	4b7e      	ldr	r3, [pc, #504]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001de6:	4b7c      	ldr	r3, [pc, #496]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dea:	08db      	lsrs	r3, r3, #3
 8001dec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	fb02 f303 	mul.w	r3, r2, r3
 8001df6:	ee07 3a90 	vmov	s15, r3
 8001dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dfe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 80da 	beq.w	8001fbe <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d05a      	beq.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d302      	bcc.n	8001e1a <HAL_RCC_GetSysClockFreq+0x106>
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d078      	beq.n	8001f0a <HAL_RCC_GetSysClockFreq+0x1f6>
 8001e18:	e099      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e1a:	4b6f      	ldr	r3, [pc, #444]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0320 	and.w	r3, r3, #32
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d02d      	beq.n	8001e82 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e26:	4b6c      	ldr	r3, [pc, #432]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	08db      	lsrs	r3, r3, #3
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	4a6a      	ldr	r2, [pc, #424]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001e32:	fa22 f303 	lsr.w	r3, r2, r3
 8001e36:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	ee07 3a90 	vmov	s15, r3
 8001e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e50:	4b61      	ldr	r3, [pc, #388]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e60:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e64:	eddf 5a60 	vldr	s11, [pc, #384]	; 8001fe8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001e68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e7c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001e80:	e087      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	ee07 3a90 	vmov	s15, r3
 8001e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e8c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001fec <HAL_RCC_GetSysClockFreq+0x2d8>
 8001e90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e94:	4b50      	ldr	r3, [pc, #320]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e9c:	ee07 3a90 	vmov	s15, r3
 8001ea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ea4:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ea8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001fe8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001eac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001eb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ec4:	e065      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ed0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001ff0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001ed4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ed8:	4b3f      	ldr	r3, [pc, #252]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee0:	ee07 3a90 	vmov	s15, r3
 8001ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ee8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eec:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001fe8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001ef0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ef4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ef8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001efc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f08:	e043      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	ee07 3a90 	vmov	s15, r3
 8001f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f14:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001ff4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8001f18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f24:	ee07 3a90 	vmov	s15, r3
 8001f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f30:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001fe8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001f34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f4c:	e021      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	ee07 3a90 	vmov	s15, r3
 8001f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f58:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001ff0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f60:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f70:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f74:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001fe8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001f78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f90:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	0a5b      	lsrs	r3, r3, #9
 8001f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8001fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb6:	ee17 3a90 	vmov	r3, s15
 8001fba:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001fbc:	e005      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
    break;
 8001fc2:	e002      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001fc6:	61bb      	str	r3, [r7, #24]
    break;
 8001fc8:	bf00      	nop
  }

  return sysclockfreq;
 8001fca:	69bb      	ldr	r3, [r7, #24]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3724      	adds	r7, #36	; 0x24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	58024400 	.word	0x58024400
 8001fdc:	03d09000 	.word	0x03d09000
 8001fe0:	003d0900 	.word	0x003d0900
 8001fe4:	017d7840 	.word	0x017d7840
 8001fe8:	46000000 	.word	0x46000000
 8001fec:	4c742400 	.word	0x4c742400
 8001ff0:	4a742400 	.word	0x4a742400
 8001ff4:	4bbebc20 	.word	0x4bbebc20

08001ff8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e049      	b.n	800209e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe fc26 	bl	8000870 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3304      	adds	r3, #4
 8002034:	4619      	mov	r1, r3
 8002036:	4610      	mov	r0, r2
 8002038:	f000 fa18 	bl	800246c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d109      	bne.n	80020cc <HAL_TIM_PWM_Start+0x24>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	bf14      	ite	ne
 80020c4:	2301      	movne	r3, #1
 80020c6:	2300      	moveq	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	e03c      	b.n	8002146 <HAL_TIM_PWM_Start+0x9e>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d109      	bne.n	80020e6 <HAL_TIM_PWM_Start+0x3e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	bf14      	ite	ne
 80020de:	2301      	movne	r3, #1
 80020e0:	2300      	moveq	r3, #0
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	e02f      	b.n	8002146 <HAL_TIM_PWM_Start+0x9e>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d109      	bne.n	8002100 <HAL_TIM_PWM_Start+0x58>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	bf14      	ite	ne
 80020f8:	2301      	movne	r3, #1
 80020fa:	2300      	moveq	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	e022      	b.n	8002146 <HAL_TIM_PWM_Start+0x9e>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2b0c      	cmp	r3, #12
 8002104:	d109      	bne.n	800211a <HAL_TIM_PWM_Start+0x72>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b01      	cmp	r3, #1
 8002110:	bf14      	ite	ne
 8002112:	2301      	movne	r3, #1
 8002114:	2300      	moveq	r3, #0
 8002116:	b2db      	uxtb	r3, r3
 8002118:	e015      	b.n	8002146 <HAL_TIM_PWM_Start+0x9e>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b10      	cmp	r3, #16
 800211e:	d109      	bne.n	8002134 <HAL_TIM_PWM_Start+0x8c>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b01      	cmp	r3, #1
 800212a:	bf14      	ite	ne
 800212c:	2301      	movne	r3, #1
 800212e:	2300      	moveq	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	e008      	b.n	8002146 <HAL_TIM_PWM_Start+0x9e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	bf14      	ite	ne
 8002140:	2301      	movne	r3, #1
 8002142:	2300      	moveq	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e06e      	b.n	800222c <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d104      	bne.n	800215e <HAL_TIM_PWM_Start+0xb6>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2202      	movs	r2, #2
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800215c:	e023      	b.n	80021a6 <HAL_TIM_PWM_Start+0xfe>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b04      	cmp	r3, #4
 8002162:	d104      	bne.n	800216e <HAL_TIM_PWM_Start+0xc6>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800216c:	e01b      	b.n	80021a6 <HAL_TIM_PWM_Start+0xfe>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b08      	cmp	r3, #8
 8002172:	d104      	bne.n	800217e <HAL_TIM_PWM_Start+0xd6>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800217c:	e013      	b.n	80021a6 <HAL_TIM_PWM_Start+0xfe>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b0c      	cmp	r3, #12
 8002182:	d104      	bne.n	800218e <HAL_TIM_PWM_Start+0xe6>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800218c:	e00b      	b.n	80021a6 <HAL_TIM_PWM_Start+0xfe>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2b10      	cmp	r3, #16
 8002192:	d104      	bne.n	800219e <HAL_TIM_PWM_Start+0xf6>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800219c:	e003      	b.n	80021a6 <HAL_TIM_PWM_Start+0xfe>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2202      	movs	r2, #2
 80021a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2201      	movs	r2, #1
 80021ac:	6839      	ldr	r1, [r7, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fcc4 	bl	8002b3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a1e      	ldr	r2, [pc, #120]	; (8002234 <HAL_TIM_PWM_Start+0x18c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_TIM_PWM_Start+0x13e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <HAL_TIM_PWM_Start+0x190>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00e      	beq.n	80021e6 <HAL_TIM_PWM_Start+0x13e>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a1b      	ldr	r2, [pc, #108]	; (800223c <HAL_TIM_PWM_Start+0x194>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d009      	beq.n	80021e6 <HAL_TIM_PWM_Start+0x13e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a1a      	ldr	r2, [pc, #104]	; (8002240 <HAL_TIM_PWM_Start+0x198>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d004      	beq.n	80021e6 <HAL_TIM_PWM_Start+0x13e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a18      	ldr	r2, [pc, #96]	; (8002244 <HAL_TIM_PWM_Start+0x19c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <HAL_TIM_PWM_Start+0x142>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_TIM_PWM_Start+0x144>
 80021ea:	2300      	movs	r3, #0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d007      	beq.n	8002200 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <HAL_TIM_PWM_Start+0x1a0>)
 8002208:	4013      	ands	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b06      	cmp	r3, #6
 8002210:	d00b      	beq.n	800222a <HAL_TIM_PWM_Start+0x182>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002218:	d007      	beq.n	800222a <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0201 	orr.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40010000 	.word	0x40010000
 8002238:	40010400 	.word	0x40010400
 800223c:	40014000 	.word	0x40014000
 8002240:	40014400 	.word	0x40014400
 8002244:	40014800 	.word	0x40014800
 8002248:	00010007 	.word	0x00010007

0800224c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002262:	2302      	movs	r3, #2
 8002264:	e0fd      	b.n	8002462 <HAL_TIM_PWM_ConfigChannel+0x216>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b14      	cmp	r3, #20
 8002272:	f200 80f0 	bhi.w	8002456 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002276:	a201      	add	r2, pc, #4	; (adr r2, 800227c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227c:	080022d1 	.word	0x080022d1
 8002280:	08002457 	.word	0x08002457
 8002284:	08002457 	.word	0x08002457
 8002288:	08002457 	.word	0x08002457
 800228c:	08002311 	.word	0x08002311
 8002290:	08002457 	.word	0x08002457
 8002294:	08002457 	.word	0x08002457
 8002298:	08002457 	.word	0x08002457
 800229c:	08002353 	.word	0x08002353
 80022a0:	08002457 	.word	0x08002457
 80022a4:	08002457 	.word	0x08002457
 80022a8:	08002457 	.word	0x08002457
 80022ac:	08002393 	.word	0x08002393
 80022b0:	08002457 	.word	0x08002457
 80022b4:	08002457 	.word	0x08002457
 80022b8:	08002457 	.word	0x08002457
 80022bc:	080023d5 	.word	0x080023d5
 80022c0:	08002457 	.word	0x08002457
 80022c4:	08002457 	.word	0x08002457
 80022c8:	08002457 	.word	0x08002457
 80022cc:	08002415 	.word	0x08002415
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f962 	bl	80025a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699a      	ldr	r2, [r3, #24]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0208 	orr.w	r2, r2, #8
 80022ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0204 	bic.w	r2, r2, #4
 80022fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6999      	ldr	r1, [r3, #24]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	691a      	ldr	r2, [r3, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	619a      	str	r2, [r3, #24]
      break;
 800230e:	e0a3      	b.n	8002458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f9d2 	bl	80026c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800232a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800233a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6999      	ldr	r1, [r3, #24]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	021a      	lsls	r2, r3, #8
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	619a      	str	r2, [r3, #24]
      break;
 8002350:	e082      	b.n	8002458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fa3b 	bl	80027d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	69da      	ldr	r2, [r3, #28]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f042 0208 	orr.w	r2, r2, #8
 800236c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	69da      	ldr	r2, [r3, #28]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0204 	bic.w	r2, r2, #4
 800237c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69d9      	ldr	r1, [r3, #28]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	61da      	str	r2, [r3, #28]
      break;
 8002390:	e062      	b.n	8002458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	4618      	mov	r0, r3
 800239a:	f000 faa1 	bl	80028e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69da      	ldr	r2, [r3, #28]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69d9      	ldr	r1, [r3, #28]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	021a      	lsls	r2, r3, #8
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	61da      	str	r2, [r3, #28]
      break;
 80023d2:	e041      	b.n	8002458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 fae8 	bl	80029b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0208 	orr.w	r2, r2, #8
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0204 	bic.w	r2, r2, #4
 80023fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002412:	e021      	b.n	8002458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fb2a 	bl	8002a74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800242e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800243e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	021a      	lsls	r2, r3, #8
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002454:	e000      	b.n	8002458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8002456:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop

0800246c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a40      	ldr	r2, [pc, #256]	; (8002580 <TIM_Base_SetConfig+0x114>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d013      	beq.n	80024ac <TIM_Base_SetConfig+0x40>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800248a:	d00f      	beq.n	80024ac <TIM_Base_SetConfig+0x40>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a3d      	ldr	r2, [pc, #244]	; (8002584 <TIM_Base_SetConfig+0x118>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d00b      	beq.n	80024ac <TIM_Base_SetConfig+0x40>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a3c      	ldr	r2, [pc, #240]	; (8002588 <TIM_Base_SetConfig+0x11c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d007      	beq.n	80024ac <TIM_Base_SetConfig+0x40>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a3b      	ldr	r2, [pc, #236]	; (800258c <TIM_Base_SetConfig+0x120>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d003      	beq.n	80024ac <TIM_Base_SetConfig+0x40>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a3a      	ldr	r2, [pc, #232]	; (8002590 <TIM_Base_SetConfig+0x124>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d108      	bne.n	80024be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a2f      	ldr	r2, [pc, #188]	; (8002580 <TIM_Base_SetConfig+0x114>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01f      	beq.n	8002506 <TIM_Base_SetConfig+0x9a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024cc:	d01b      	beq.n	8002506 <TIM_Base_SetConfig+0x9a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a2c      	ldr	r2, [pc, #176]	; (8002584 <TIM_Base_SetConfig+0x118>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d017      	beq.n	8002506 <TIM_Base_SetConfig+0x9a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a2b      	ldr	r2, [pc, #172]	; (8002588 <TIM_Base_SetConfig+0x11c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d013      	beq.n	8002506 <TIM_Base_SetConfig+0x9a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a2a      	ldr	r2, [pc, #168]	; (800258c <TIM_Base_SetConfig+0x120>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00f      	beq.n	8002506 <TIM_Base_SetConfig+0x9a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a29      	ldr	r2, [pc, #164]	; (8002590 <TIM_Base_SetConfig+0x124>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00b      	beq.n	8002506 <TIM_Base_SetConfig+0x9a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a28      	ldr	r2, [pc, #160]	; (8002594 <TIM_Base_SetConfig+0x128>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d007      	beq.n	8002506 <TIM_Base_SetConfig+0x9a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a27      	ldr	r2, [pc, #156]	; (8002598 <TIM_Base_SetConfig+0x12c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d003      	beq.n	8002506 <TIM_Base_SetConfig+0x9a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a26      	ldr	r2, [pc, #152]	; (800259c <TIM_Base_SetConfig+0x130>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d108      	bne.n	8002518 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800250c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a10      	ldr	r2, [pc, #64]	; (8002580 <TIM_Base_SetConfig+0x114>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d00f      	beq.n	8002564 <TIM_Base_SetConfig+0xf8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a12      	ldr	r2, [pc, #72]	; (8002590 <TIM_Base_SetConfig+0x124>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00b      	beq.n	8002564 <TIM_Base_SetConfig+0xf8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a11      	ldr	r2, [pc, #68]	; (8002594 <TIM_Base_SetConfig+0x128>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d007      	beq.n	8002564 <TIM_Base_SetConfig+0xf8>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a10      	ldr	r2, [pc, #64]	; (8002598 <TIM_Base_SetConfig+0x12c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d003      	beq.n	8002564 <TIM_Base_SetConfig+0xf8>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a0f      	ldr	r2, [pc, #60]	; (800259c <TIM_Base_SetConfig+0x130>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d103      	bne.n	800256c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	615a      	str	r2, [r3, #20]
}
 8002572:	bf00      	nop
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40010000 	.word	0x40010000
 8002584:	40000400 	.word	0x40000400
 8002588:	40000800 	.word	0x40000800
 800258c:	40000c00 	.word	0x40000c00
 8002590:	40010400 	.word	0x40010400
 8002594:	40014000 	.word	0x40014000
 8002598:	40014400 	.word	0x40014400
 800259c:	40014800 	.word	0x40014800

080025a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	f023 0201 	bic.w	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4b37      	ldr	r3, [pc, #220]	; (80026a8 <TIM_OC1_SetConfig+0x108>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f023 0303 	bic.w	r3, r3, #3
 80025d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f023 0302 	bic.w	r3, r3, #2
 80025e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a2d      	ldr	r2, [pc, #180]	; (80026ac <TIM_OC1_SetConfig+0x10c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00f      	beq.n	800261c <TIM_OC1_SetConfig+0x7c>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a2c      	ldr	r2, [pc, #176]	; (80026b0 <TIM_OC1_SetConfig+0x110>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00b      	beq.n	800261c <TIM_OC1_SetConfig+0x7c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a2b      	ldr	r2, [pc, #172]	; (80026b4 <TIM_OC1_SetConfig+0x114>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d007      	beq.n	800261c <TIM_OC1_SetConfig+0x7c>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a2a      	ldr	r2, [pc, #168]	; (80026b8 <TIM_OC1_SetConfig+0x118>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d003      	beq.n	800261c <TIM_OC1_SetConfig+0x7c>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a29      	ldr	r2, [pc, #164]	; (80026bc <TIM_OC1_SetConfig+0x11c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d10c      	bne.n	8002636 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f023 0308 	bic.w	r3, r3, #8
 8002622:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	4313      	orrs	r3, r2
 800262c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a1c      	ldr	r2, [pc, #112]	; (80026ac <TIM_OC1_SetConfig+0x10c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00f      	beq.n	800265e <TIM_OC1_SetConfig+0xbe>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a1b      	ldr	r2, [pc, #108]	; (80026b0 <TIM_OC1_SetConfig+0x110>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00b      	beq.n	800265e <TIM_OC1_SetConfig+0xbe>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a1a      	ldr	r2, [pc, #104]	; (80026b4 <TIM_OC1_SetConfig+0x114>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d007      	beq.n	800265e <TIM_OC1_SetConfig+0xbe>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a19      	ldr	r2, [pc, #100]	; (80026b8 <TIM_OC1_SetConfig+0x118>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d003      	beq.n	800265e <TIM_OC1_SetConfig+0xbe>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a18      	ldr	r2, [pc, #96]	; (80026bc <TIM_OC1_SetConfig+0x11c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d111      	bne.n	8002682 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800266c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	621a      	str	r2, [r3, #32]
}
 800269c:	bf00      	nop
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	fffeff8f 	.word	0xfffeff8f
 80026ac:	40010000 	.word	0x40010000
 80026b0:	40010400 	.word	0x40010400
 80026b4:	40014000 	.word	0x40014000
 80026b8:	40014400 	.word	0x40014400
 80026bc:	40014800 	.word	0x40014800

080026c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	f023 0210 	bic.w	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4b34      	ldr	r3, [pc, #208]	; (80027bc <TIM_OC2_SetConfig+0xfc>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4313      	orrs	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f023 0320 	bic.w	r3, r3, #32
 800270a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a29      	ldr	r2, [pc, #164]	; (80027c0 <TIM_OC2_SetConfig+0x100>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d003      	beq.n	8002728 <TIM_OC2_SetConfig+0x68>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a28      	ldr	r2, [pc, #160]	; (80027c4 <TIM_OC2_SetConfig+0x104>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d10d      	bne.n	8002744 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800272e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002742:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a1e      	ldr	r2, [pc, #120]	; (80027c0 <TIM_OC2_SetConfig+0x100>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d00f      	beq.n	800276c <TIM_OC2_SetConfig+0xac>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <TIM_OC2_SetConfig+0x104>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d00b      	beq.n	800276c <TIM_OC2_SetConfig+0xac>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <TIM_OC2_SetConfig+0x108>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d007      	beq.n	800276c <TIM_OC2_SetConfig+0xac>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <TIM_OC2_SetConfig+0x10c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d003      	beq.n	800276c <TIM_OC2_SetConfig+0xac>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a1a      	ldr	r2, [pc, #104]	; (80027d0 <TIM_OC2_SetConfig+0x110>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d113      	bne.n	8002794 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002772:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800277a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	621a      	str	r2, [r3, #32]
}
 80027ae:	bf00      	nop
 80027b0:	371c      	adds	r7, #28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	feff8fff 	.word	0xfeff8fff
 80027c0:	40010000 	.word	0x40010000
 80027c4:	40010400 	.word	0x40010400
 80027c8:	40014000 	.word	0x40014000
 80027cc:	40014400 	.word	0x40014400
 80027d0:	40014800 	.word	0x40014800

080027d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 0303 	bic.w	r3, r3, #3
 800280a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800281c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	4313      	orrs	r3, r2
 8002828:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a27      	ldr	r2, [pc, #156]	; (80028cc <TIM_OC3_SetConfig+0xf8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d003      	beq.n	800283a <TIM_OC3_SetConfig+0x66>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a26      	ldr	r2, [pc, #152]	; (80028d0 <TIM_OC3_SetConfig+0xfc>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d10d      	bne.n	8002856 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002840:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	021b      	lsls	r3, r3, #8
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a1c      	ldr	r2, [pc, #112]	; (80028cc <TIM_OC3_SetConfig+0xf8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00f      	beq.n	800287e <TIM_OC3_SetConfig+0xaa>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a1b      	ldr	r2, [pc, #108]	; (80028d0 <TIM_OC3_SetConfig+0xfc>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00b      	beq.n	800287e <TIM_OC3_SetConfig+0xaa>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a1a      	ldr	r2, [pc, #104]	; (80028d4 <TIM_OC3_SetConfig+0x100>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <TIM_OC3_SetConfig+0xaa>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <TIM_OC3_SetConfig+0x104>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d003      	beq.n	800287e <TIM_OC3_SetConfig+0xaa>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a18      	ldr	r2, [pc, #96]	; (80028dc <TIM_OC3_SetConfig+0x108>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d113      	bne.n	80028a6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800288c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	621a      	str	r2, [r3, #32]
}
 80028c0:	bf00      	nop
 80028c2:	371c      	adds	r7, #28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	40010000 	.word	0x40010000
 80028d0:	40010400 	.word	0x40010400
 80028d4:	40014000 	.word	0x40014000
 80028d8:	40014400 	.word	0x40014400
 80028dc:	40014800 	.word	0x40014800

080028e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800290e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4313      	orrs	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800292a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	031b      	lsls	r3, r3, #12
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a18      	ldr	r2, [pc, #96]	; (800299c <TIM_OC4_SetConfig+0xbc>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00f      	beq.n	8002960 <TIM_OC4_SetConfig+0x80>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a17      	ldr	r2, [pc, #92]	; (80029a0 <TIM_OC4_SetConfig+0xc0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d00b      	beq.n	8002960 <TIM_OC4_SetConfig+0x80>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a16      	ldr	r2, [pc, #88]	; (80029a4 <TIM_OC4_SetConfig+0xc4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d007      	beq.n	8002960 <TIM_OC4_SetConfig+0x80>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a15      	ldr	r2, [pc, #84]	; (80029a8 <TIM_OC4_SetConfig+0xc8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d003      	beq.n	8002960 <TIM_OC4_SetConfig+0x80>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a14      	ldr	r2, [pc, #80]	; (80029ac <TIM_OC4_SetConfig+0xcc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d109      	bne.n	8002974 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002966:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	019b      	lsls	r3, r3, #6
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	621a      	str	r2, [r3, #32]
}
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40010000 	.word	0x40010000
 80029a0:	40010400 	.word	0x40010400
 80029a4:	40014000 	.word	0x40014000
 80029a8:	40014400 	.word	0x40014400
 80029ac:	40014800 	.word	0x40014800

080029b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80029f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	041b      	lsls	r3, r3, #16
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a17      	ldr	r2, [pc, #92]	; (8002a60 <TIM_OC5_SetConfig+0xb0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00f      	beq.n	8002a26 <TIM_OC5_SetConfig+0x76>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a16      	ldr	r2, [pc, #88]	; (8002a64 <TIM_OC5_SetConfig+0xb4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00b      	beq.n	8002a26 <TIM_OC5_SetConfig+0x76>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a15      	ldr	r2, [pc, #84]	; (8002a68 <TIM_OC5_SetConfig+0xb8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d007      	beq.n	8002a26 <TIM_OC5_SetConfig+0x76>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a14      	ldr	r2, [pc, #80]	; (8002a6c <TIM_OC5_SetConfig+0xbc>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d003      	beq.n	8002a26 <TIM_OC5_SetConfig+0x76>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a13      	ldr	r2, [pc, #76]	; (8002a70 <TIM_OC5_SetConfig+0xc0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d109      	bne.n	8002a3a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	621a      	str	r2, [r3, #32]
}
 8002a54:	bf00      	nop
 8002a56:	371c      	adds	r7, #28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	40010000 	.word	0x40010000
 8002a64:	40010400 	.word	0x40010400
 8002a68:	40014000 	.word	0x40014000
 8002a6c:	40014400 	.word	0x40014400
 8002a70:	40014800 	.word	0x40014800

08002a74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	021b      	lsls	r3, r3, #8
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	051b      	lsls	r3, r3, #20
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a18      	ldr	r2, [pc, #96]	; (8002b28 <TIM_OC6_SetConfig+0xb4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00f      	beq.n	8002aec <TIM_OC6_SetConfig+0x78>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a17      	ldr	r2, [pc, #92]	; (8002b2c <TIM_OC6_SetConfig+0xb8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00b      	beq.n	8002aec <TIM_OC6_SetConfig+0x78>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a16      	ldr	r2, [pc, #88]	; (8002b30 <TIM_OC6_SetConfig+0xbc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d007      	beq.n	8002aec <TIM_OC6_SetConfig+0x78>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a15      	ldr	r2, [pc, #84]	; (8002b34 <TIM_OC6_SetConfig+0xc0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d003      	beq.n	8002aec <TIM_OC6_SetConfig+0x78>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <TIM_OC6_SetConfig+0xc4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d109      	bne.n	8002b00 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002af2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	029b      	lsls	r3, r3, #10
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	621a      	str	r2, [r3, #32]
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40010000 	.word	0x40010000
 8002b2c:	40010400 	.word	0x40010400
 8002b30:	40014000 	.word	0x40014000
 8002b34:	40014400 	.word	0x40014400
 8002b38:	40014800 	.word	0x40014800

08002b3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	2201      	movs	r2, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a1a      	ldr	r2, [r3, #32]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	401a      	ands	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a1a      	ldr	r2, [r3, #32]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f003 031f 	and.w	r3, r3, #31
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	431a      	orrs	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	621a      	str	r2, [r3, #32]
}
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e068      	b.n	8002c72 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a2e      	ldr	r2, [pc, #184]	; (8002c80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d004      	beq.n	8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a2d      	ldr	r2, [pc, #180]	; (8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d108      	bne.n	8002be6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002bda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1e      	ldr	r2, [pc, #120]	; (8002c80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01d      	beq.n	8002c46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c12:	d018      	beq.n	8002c46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1b      	ldr	r2, [pc, #108]	; (8002c88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a1a      	ldr	r2, [pc, #104]	; (8002c8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00e      	beq.n	8002c46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a18      	ldr	r2, [pc, #96]	; (8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d009      	beq.n	8002c46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d004      	beq.n	8002c46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d10c      	bne.n	8002c60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40010000 	.word	0x40010000
 8002c84:	40010400 	.word	0x40010400
 8002c88:	40000400 	.word	0x40000400
 8002c8c:	40000800 	.word	0x40000800
 8002c90:	40000c00 	.word	0x40000c00
 8002c94:	40001800 	.word	0x40001800

08002c98 <__libc_init_array>:
 8002c98:	b570      	push	{r4, r5, r6, lr}
 8002c9a:	4e0d      	ldr	r6, [pc, #52]	; (8002cd0 <__libc_init_array+0x38>)
 8002c9c:	4c0d      	ldr	r4, [pc, #52]	; (8002cd4 <__libc_init_array+0x3c>)
 8002c9e:	1ba4      	subs	r4, r4, r6
 8002ca0:	10a4      	asrs	r4, r4, #2
 8002ca2:	2500      	movs	r5, #0
 8002ca4:	42a5      	cmp	r5, r4
 8002ca6:	d109      	bne.n	8002cbc <__libc_init_array+0x24>
 8002ca8:	4e0b      	ldr	r6, [pc, #44]	; (8002cd8 <__libc_init_array+0x40>)
 8002caa:	4c0c      	ldr	r4, [pc, #48]	; (8002cdc <__libc_init_array+0x44>)
 8002cac:	f000 f820 	bl	8002cf0 <_init>
 8002cb0:	1ba4      	subs	r4, r4, r6
 8002cb2:	10a4      	asrs	r4, r4, #2
 8002cb4:	2500      	movs	r5, #0
 8002cb6:	42a5      	cmp	r5, r4
 8002cb8:	d105      	bne.n	8002cc6 <__libc_init_array+0x2e>
 8002cba:	bd70      	pop	{r4, r5, r6, pc}
 8002cbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cc0:	4798      	blx	r3
 8002cc2:	3501      	adds	r5, #1
 8002cc4:	e7ee      	b.n	8002ca4 <__libc_init_array+0xc>
 8002cc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cca:	4798      	blx	r3
 8002ccc:	3501      	adds	r5, #1
 8002cce:	e7f2      	b.n	8002cb6 <__libc_init_array+0x1e>
 8002cd0:	08002d18 	.word	0x08002d18
 8002cd4:	08002d18 	.word	0x08002d18
 8002cd8:	08002d18 	.word	0x08002d18
 8002cdc:	08002d1c 	.word	0x08002d1c

08002ce0 <memset>:
 8002ce0:	4402      	add	r2, r0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d100      	bne.n	8002cea <memset+0xa>
 8002ce8:	4770      	bx	lr
 8002cea:	f803 1b01 	strb.w	r1, [r3], #1
 8002cee:	e7f9      	b.n	8002ce4 <memset+0x4>

08002cf0 <_init>:
 8002cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf2:	bf00      	nop
 8002cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf6:	bc08      	pop	{r3}
 8002cf8:	469e      	mov	lr, r3
 8002cfa:	4770      	bx	lr

08002cfc <_fini>:
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	bf00      	nop
 8002d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d02:	bc08      	pop	{r3}
 8002d04:	469e      	mov	lr, r3
 8002d06:	4770      	bx	lr
