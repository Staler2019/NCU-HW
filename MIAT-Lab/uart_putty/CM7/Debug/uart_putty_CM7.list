
uart_putty_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f28  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080061c8  080061c8  000161c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080062f0  080062f0  000162f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080062f8  080062f8  000162f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080062fc  080062fc  000162fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08006300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000013c  20000074  08006374  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001b0  08006374  000201b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015822  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002705  00000000  00000000  000358c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000bb0  00000000  00000000  00037fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ab8  00000000  00000000  00038b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000392c3  00000000  00000000  00039638  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b763  00000000  00000000  000728fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00176c1f  00000000  00000000  0007e05e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  001f4c7d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000037c0  00000000  00000000  001f4cf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080061b0 	.word	0x080061b0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	080061b0 	.word	0x080061b0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <SystemInit+0x104>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a3e      	ldr	r2, [pc, #248]	; (8000784 <SystemInit+0x104>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <SystemInit+0x104>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <SystemInit+0x104>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <SystemInit+0x108>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <SystemInit+0x108>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <SystemInit+0x10c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x10c>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <SystemInit+0x10c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <SystemInit+0x10c>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492e      	ldr	r1, [pc, #184]	; (800078c <SystemInit+0x10c>)
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x110>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemInit+0x108>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	d907      	bls.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemInit+0x108>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <SystemInit+0x108>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemInit+0x10c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemInit+0x10c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemInit+0x10c>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemInit+0x10c>)
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <SystemInit+0x114>)
 800070c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemInit+0x10c>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemInit+0x118>)
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <SystemInit+0x10c>)
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemInit+0x11c>)
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <SystemInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <SystemInit+0x10c>)
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <SystemInit+0x11c>)
 8000724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <SystemInit+0x10c>)
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <SystemInit+0x11c>)
 8000730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <SystemInit+0x10c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <SystemInit+0x10c>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <SystemInit+0x10c>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <SystemInit+0x120>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <SystemInit+0x120>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x124>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <SystemInit+0x128>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x12c>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x130>)
 800076c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000770:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x104>)
 8000774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000778:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	52002000 	.word	0x52002000
 800078c:	58024400 	.word	0x58024400
 8000790:	eaf6ed7f 	.word	0xeaf6ed7f
 8000794:	02020200 	.word	0x02020200
 8000798:	01ff0000 	.word	0x01ff0000
 800079c:	01010280 	.word	0x01010280
 80007a0:	580000c0 	.word	0x580000c0
 80007a4:	5c001000 	.word	0x5c001000
 80007a8:	ffff0000 	.word	0xffff0000
 80007ac:	51008108 	.word	0x51008108
 80007b0:	52004000 	.word	0x52004000

080007b4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

// HAL库
PUTCHAR_PROTOTYPE {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007bc:	1d39      	adds	r1, r7, #4
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	2201      	movs	r2, #1
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <__io_putchar+0x20>)
 80007c6:	f003 fa67 	bl	8003c98 <HAL_UART_Transmit>
    return ch;
 80007ca:	687b      	ldr	r3, [r7, #4]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000009c 	.word	0x2000009c

080007d8 <__io_getchar>:

GETCHAR_PROTOTYPE {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
    uint8_t ch;
    HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007e0:	f107 010f 	add.w	r1, r7, #15
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
 80007e8:	2201      	movs	r2, #1
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <__io_getchar+0x24>)
 80007ec:	f003 faea 	bl	8003dc4 <HAL_UART_Receive>
    return ch;
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000009c 	.word	0x2000009c

08000800 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b092      	sub	sp, #72	; 0x48
 8000804:	af00      	add	r7, sp, #0
    int32_t timeout;
    /* USER CODE END Boot_Mode_Sequence_0 */

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /* Wait until CPU2 boots and enters in stop mode or timeout*/
    timeout = 0xFFFF;
 8000806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080a:	647b      	str	r3, [r7, #68]	; 0x44
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 800080c:	bf00      	nop
 800080e:	4b47      	ldr	r3, [pc, #284]	; (800092c <main+0x12c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000816:	2b00      	cmp	r3, #0
 8000818:	d004      	beq.n	8000824 <main+0x24>
 800081a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	647a      	str	r2, [r7, #68]	; 0x44
 8000820:	2b00      	cmp	r3, #0
 8000822:	dcf4      	bgt.n	800080e <main+0xe>
        ;
    if (timeout < 0) {
 8000824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000826:	2b00      	cmp	r3, #0
 8000828:	da01      	bge.n	800082e <main+0x2e>
        Error_Handler();
 800082a:	f000 fa37 	bl	8000c9c <Error_Handler>
    }
    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800082e:	f000 fb95 	bl	8000f5c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000832:	f000 f889 	bl	8000948 <SystemClock_Config>
    /* USER CODE BEGIN Boot_Mode_Sequence_2 */
    /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
    HSEM notification */
    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 8000836:	4b3d      	ldr	r3, [pc, #244]	; (800092c <main+0x12c>)
 8000838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083c:	4a3b      	ldr	r2, [pc, #236]	; (800092c <main+0x12c>)
 800083e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000842:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000846:	4b39      	ldr	r3, [pc, #228]	; (800092c <main+0x12c>)
 8000848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
    /*Take HSEM */
    HAL_HSEM_FastTake(HSEM_ID_0);
 8000854:	2000      	movs	r0, #0
 8000856:	f000 feb3 	bl	80015c0 <HAL_HSEM_FastTake>
    /*Release HSEM in order to notify the CPU2(CM4)*/
    HAL_HSEM_Release(HSEM_ID_0, 0);
 800085a:	2100      	movs	r1, #0
 800085c:	2000      	movs	r0, #0
 800085e:	f000 fec9 	bl	80015f4 <HAL_HSEM_Release>
    /* wait until CPU2 wakes up from stop mode */
    timeout = 0xFFFF;
 8000862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000866:	647b      	str	r3, [r7, #68]	; 0x44
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000868:	bf00      	nop
 800086a:	4b30      	ldr	r3, [pc, #192]	; (800092c <main+0x12c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000872:	2b00      	cmp	r3, #0
 8000874:	d104      	bne.n	8000880 <main+0x80>
 8000876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000878:	1e5a      	subs	r2, r3, #1
 800087a:	647a      	str	r2, [r7, #68]	; 0x44
 800087c:	2b00      	cmp	r3, #0
 800087e:	dcf4      	bgt.n	800086a <main+0x6a>
        ;
    if (timeout < 0) {
 8000880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000882:	2b00      	cmp	r3, #0
 8000884:	da01      	bge.n	800088a <main+0x8a>
        Error_Handler();
 8000886:	f000 fa09 	bl	8000c9c <Error_Handler>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800088a:	f000 f941 	bl	8000b10 <MX_GPIO_Init>
    MX_USART3_UART_Init();
 800088e:	f000 f8f3 	bl	8000a78 <MX_USART3_UART_Init>

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    HAL_UART_Transmit(&huart3, (uint8_t *)"Hello World !\r\n", sizeof("Hello World !\r\n") - 1,
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	220f      	movs	r2, #15
 8000898:	4925      	ldr	r1, [pc, #148]	; (8000930 <main+0x130>)
 800089a:	4826      	ldr	r0, [pc, #152]	; (8000934 <main+0x134>)
 800089c:	f003 f9fc 	bl	8003c98 <HAL_UART_Transmit>
                      HAL_MAX_DELAY);
    uint32_t expected_tick = HAL_GetTick() + 1000;
 80008a0:	f000 fbe2 	bl	8001068 <HAL_GetTick>
 80008a4:	4603      	mov	r3, r0
 80008a6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80008aa:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t sec = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        //     printf("%s %s\r\n", "gecha: ", &c);
        //     printf("TIME RESET\r\n");
        // }

        // if (HAL_OK == HAL_UART_Receive(&huart3, &rb, 1, 100)) {
        if (HAL_OK == HAL_UART_Receive(&huart3, test, 1, 100)) {
 80008b0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80008b4:	2364      	movs	r3, #100	; 0x64
 80008b6:	2201      	movs	r2, #1
 80008b8:	481e      	ldr	r0, [pc, #120]	; (8000934 <main+0x134>)
 80008ba:	f003 fa83 	bl	8003dc4 <HAL_UART_Receive>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d120      	bne.n	8000906 <main+0x106>
            expected_tick = HAL_GetTick() + 1000;
 80008c4:	f000 fbd0 	bl	8001068 <HAL_GetTick>
 80008c8:	4603      	mov	r3, r0
 80008ca:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80008ce:	643b      	str	r3, [r7, #64]	; 0x40
            sec = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	63fb      	str	r3, [r7, #60]	; 0x3c
            char tmp[10];
            snprintf(tmp, "%d", test);
 80008d4:	4918      	ldr	r1, [pc, #96]	; (8000938 <main+0x138>)
 80008d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80008da:	463b      	mov	r3, r7
 80008dc:	4618      	mov	r0, r3
 80008de:	f004 fbc3 	bl	8005068 <sniprintf>
            /*nbytes = snprintf(snprintf_buf, sizeof(snprintf_buf), "TIME RESET %c !\r\n", rb);
             HAL_UART_Transmit(&huart3, (uint8_t*)snprintf_buf, nbytes, HAL_MAX_DELAY);*/
            HAL_UART_Transmit(&huart3, (uint8_t *)"gecha: ", sizeof("gecha: ") - 1, HAL_MAX_DELAY);
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
 80008e6:	2207      	movs	r2, #7
 80008e8:	4914      	ldr	r1, [pc, #80]	; (800093c <main+0x13c>)
 80008ea:	4812      	ldr	r0, [pc, #72]	; (8000934 <main+0x134>)
 80008ec:	f003 f9d4 	bl	8003c98 <HAL_UART_Transmit>
            printf(tmp);
 80008f0:	463b      	mov	r3, r7
 80008f2:	4618      	mov	r0, r3
 80008f4:	f004 fba0 	bl	8005038 <iprintf>
            //            HAL_UART_Transmit(&huart3, (uint8_t *)rb, 1, HAL_MAX_DELAY);
            HAL_UART_Transmit(&huart3, (uint8_t *)"TIME RESET\r\n", sizeof("TIME RESET\r\n") - 1,
 80008f8:	f04f 33ff 	mov.w	r3, #4294967295
 80008fc:	220c      	movs	r2, #12
 80008fe:	4910      	ldr	r1, [pc, #64]	; (8000940 <main+0x140>)
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <main+0x134>)
 8000902:	f003 f9c9 	bl	8003c98 <HAL_UART_Transmit>
                              HAL_MAX_DELAY);
        }
        if (HAL_GetTick() > expected_tick) {
 8000906:	f000 fbaf 	bl	8001068 <HAL_GetTick>
 800090a:	4602      	mov	r2, r0
 800090c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800090e:	4293      	cmp	r3, r2
 8000910:	d2ce      	bcs.n	80008b0 <main+0xb0>
            sec++;
 8000912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000914:	3301      	adds	r3, #1
 8000916:	63fb      	str	r3, [r7, #60]	; 0x3c
            // nbytes = snprintf(snprintf_buf, sizeof(snprintf_buf),
            //                   "This program runs since %lu seconds ago\r\n", sec);
            printf("This program runs since %lu seconds ago\r\n", sec);
 8000918:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800091a:	480a      	ldr	r0, [pc, #40]	; (8000944 <main+0x144>)
 800091c:	f004 fb8c 	bl	8005038 <iprintf>
            // HAL_UART_Transmit(&huart3, (uint8_t *)snprintf_buf, nbytes, HAL_MAX_DELAY);
            expected_tick += 1000;
 8000920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000922:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000926:	643b      	str	r3, [r7, #64]	; 0x40
        if (HAL_OK == HAL_UART_Receive(&huart3, test, 1, 100)) {
 8000928:	e7c2      	b.n	80008b0 <main+0xb0>
 800092a:	bf00      	nop
 800092c:	58024400 	.word	0x58024400
 8000930:	080061c8 	.word	0x080061c8
 8000934:	2000009c 	.word	0x2000009c
 8000938:	080061d8 	.word	0x080061d8
 800093c:	080061dc 	.word	0x080061dc
 8000940:	080061e4 	.word	0x080061e4
 8000944:	080061f4 	.word	0x080061f4

08000948 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b0cc      	sub	sp, #304	; 0x130
 800094c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000952:	224c      	movs	r2, #76	; 0x4c
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f004 fb66 	bl	8005028 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000960:	2220      	movs	r2, #32
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f004 fb5f 	bl	8005028 <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	4618      	mov	r0, r3
 8000970:	23bc      	movs	r3, #188	; 0xbc
 8000972:	461a      	mov	r2, r3
 8000974:	2100      	movs	r1, #0
 8000976:	f004 fb57 	bl	8005028 <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800097a:	2004      	movs	r0, #4
 800097c:	f000 fe4e 	bl	800161c <HAL_PWREx_ConfigSupply>
    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	4b3a      	ldr	r3, [pc, #232]	; (8000a70 <SystemClock_Config+0x128>)
 8000988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098a:	4a39      	ldr	r2, [pc, #228]	; (8000a70 <SystemClock_Config+0x128>)
 800098c:	f023 0301 	bic.w	r3, r3, #1
 8000990:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000992:	4b37      	ldr	r3, [pc, #220]	; (8000a70 <SystemClock_Config+0x128>)
 8000994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000996:	f003 0201 	and.w	r2, r3, #1
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	4b35      	ldr	r3, [pc, #212]	; (8000a74 <SystemClock_Config+0x12c>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009a6:	4a33      	ldr	r2, [pc, #204]	; (8000a74 <SystemClock_Config+0x12c>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6193      	str	r3, [r2, #24]
 80009ae:	4b31      	ldr	r3, [pc, #196]	; (8000a74 <SystemClock_Config+0x12c>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	681b      	ldr	r3, [r3, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80009be:	bf00      	nop
 80009c0:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <SystemClock_Config+0x12c>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009cc:	d1f8      	bne.n	80009c0 <SystemClock_Config+0x78>
    }
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ce:	2302      	movs	r3, #2
 80009d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009d4:	2301      	movs	r3, #1
 80009d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009da:	2340      	movs	r3, #64	; 0x40
 80009dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009e6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 fe70 	bl	80016d0 <HAL_RCC_OscConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0xb2>
        Error_Handler();
 80009f6:	f000 f951 	bl	8000c9c <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 80009fa:	233f      	movs	r3, #63	; 0x3f
 80009fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 |
                                  RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000a2a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f001 fa5d 	bl	8001ef0 <HAL_RCC_ClockConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0xf8>
        Error_Handler();
 8000a3c:	f000 f92e 	bl	8000c9c <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a40:	f107 0308 	add.w	r3, r7, #8
 8000a44:	2202      	movs	r2, #2
 8000a46:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a48:	f107 0308 	add.w	r3, r7, #8
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	675a      	str	r2, [r3, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 fdcf 	bl	80025f8 <HAL_RCCEx_PeriphCLKConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x11c>
        Error_Handler();
 8000a60:	f000 f91c 	bl	8000c9c <Error_Handler>
    }
}
 8000a64:	bf00      	nop
 8000a66:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	58000400 	.word	0x58000400
 8000a74:	58024800 	.word	0x58024800

08000a78 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
    /* USER CODE END USART3_Init 0 */

    /* USER CODE BEGIN USART3_Init 1 */

    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000a7e:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <MX_USART3_UART_Init+0x94>)
 8000a80:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a88:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aae:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
    huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000ac0:	4811      	ldr	r0, [pc, #68]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000ac2:	f003 f899 	bl	8003bf8 <HAL_UART_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART3_UART_Init+0x58>
        Error_Handler();
 8000acc:	f000 f8e6 	bl	8000c9c <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	480d      	ldr	r0, [pc, #52]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000ad4:	f004 f999 	bl	8004e0a <HAL_UARTEx_SetTxFifoThreshold>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART3_UART_Init+0x6a>
        Error_Handler();
 8000ade:	f000 f8dd 	bl	8000c9c <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4808      	ldr	r0, [pc, #32]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000ae6:	f004 f9ce 	bl	8004e86 <HAL_UARTEx_SetRxFifoThreshold>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_USART3_UART_Init+0x7c>
        Error_Handler();
 8000af0:	f000 f8d4 	bl	8000c9c <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000af6:	f004 f94f 	bl	8004d98 <HAL_UARTEx_DisableFifoMode>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_USART3_UART_Init+0x8c>
        Error_Handler();
 8000b00:	f000 f8cc 	bl	8000c9c <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	2000009c 	.word	0x2000009c
 8000b0c:	40004800 	.word	0x40004800

08000b10 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	; 0x30
 8000b14:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b26:	4b58      	ldr	r3, [pc, #352]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2c:	4a56      	ldr	r2, [pc, #344]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b36:	4b54      	ldr	r3, [pc, #336]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
 8000b42:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b44:	4b50      	ldr	r3, [pc, #320]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4a:	4a4f      	ldr	r2, [pc, #316]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b54:	4b4c      	ldr	r3, [pc, #304]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b49      	ldr	r3, [pc, #292]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b68:	4a47      	ldr	r2, [pc, #284]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b72:	4b45      	ldr	r3, [pc, #276]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b80:	4b41      	ldr	r3, [pc, #260]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b86:	4a40      	ldr	r2, [pc, #256]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b90:	4b3d      	ldr	r3, [pc, #244]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9e:	4b3a      	ldr	r3, [pc, #232]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba4:	4a38      	ldr	r2, [pc, #224]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000ba6:	f043 0308 	orr.w	r3, r3, #8
 8000baa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bae:	4b36      	ldr	r3, [pc, #216]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	f003 0308 	and.w	r3, r3, #8
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bbc:	4b32      	ldr	r3, [pc, #200]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc2:	4a31      	ldr	r2, [pc, #196]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bcc:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pins : PC1 PC4 PC5 */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000bda:	2332      	movs	r3, #50	; 0x32
 8000bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bea:	230b      	movs	r3, #11
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4825      	ldr	r0, [pc, #148]	; (8000c8c <MX_GPIO_Init+0x17c>)
 8000bf6:	f000 fb33 	bl	8001260 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA1 PA2 PA7 */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000bfa:	2386      	movs	r3, #134	; 0x86
 8000bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c0a:	230b      	movs	r3, #11
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	481e      	ldr	r0, [pc, #120]	; (8000c90 <MX_GPIO_Init+0x180>)
 8000c16:	f000 fb23 	bl	8001260 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB13 */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2c:	230b      	movs	r3, #11
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	4619      	mov	r1, r3
 8000c36:	4817      	ldr	r0, [pc, #92]	; (8000c94 <MX_GPIO_Init+0x184>)
 8000c38:	f000 fb12 	bl	8001260 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA8 PA11 PA12 */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12;
 8000c3c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c4e:	230a      	movs	r3, #10
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	4619      	mov	r1, r3
 8000c58:	480d      	ldr	r0, [pc, #52]	; (8000c90 <MX_GPIO_Init+0x180>)
 8000c5a:	f000 fb01 	bl	8001260 <HAL_GPIO_Init>

    /*Configure GPIO pins : PG11 PG13 */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8000c5e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c70:	230b      	movs	r3, #11
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4807      	ldr	r0, [pc, #28]	; (8000c98 <MX_GPIO_Init+0x188>)
 8000c7c:	f000 faf0 	bl	8001260 <HAL_GPIO_Init>
}
 8000c80:	bf00      	nop
 8000c82:	3730      	adds	r7, #48	; 0x30
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	58024400 	.word	0x58024400
 8000c8c:	58020800 	.word	0x58020800
 8000c90:	58020000 	.word	0x58020000
 8000c94:	58020400 	.word	0x58020400
 8000c98:	58021800 	.word	0x58021800

08000c9c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000ca2:	e7fe      	b.n	8000ca2 <Error_Handler+0x6>

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <HAL_MspInit+0x30>)
 8000cac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cb0:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x30>)
 8000cb2:	f043 0302 	orr.w	r3, r3, #2
 8000cb6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x30>)
 8000cbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cc0:	f003 0302 	and.w	r3, r3, #2
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	58024400 	.word	0x58024400

08000cd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a1a      	ldr	r2, [pc, #104]	; (8000d60 <HAL_UART_MspInit+0x88>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d12e      	bne.n	8000d58 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <HAL_UART_MspInit+0x8c>)
 8000cfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d00:	4a18      	ldr	r2, [pc, #96]	; (8000d64 <HAL_UART_MspInit+0x8c>)
 8000d02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <HAL_UART_MspInit+0x8c>)
 8000d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_UART_MspInit+0x8c>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1e:	4a11      	ldr	r2, [pc, #68]	; (8000d64 <HAL_UART_MspInit+0x8c>)
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_UART_MspInit+0x8c>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d48:	2307      	movs	r3, #7
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <HAL_UART_MspInit+0x90>)
 8000d54:	f000 fa84 	bl	8001260 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d58:	bf00      	nop
 8000d5a:	3728      	adds	r7, #40	; 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40004800 	.word	0x40004800
 8000d64:	58024400 	.word	0x58024400
 8000d68:	58020c00 	.word	0x58020c00

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f942 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	e00a      	b.n	8000de8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dd2:	f7ff fd01 	bl	80007d8 <__io_getchar>
 8000dd6:	4601      	mov	r1, r0
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	1c5a      	adds	r2, r3, #1
 8000ddc:	60ba      	str	r2, [r7, #8]
 8000dde:	b2ca      	uxtb	r2, r1
 8000de0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3301      	adds	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dbf0      	blt.n	8000dd2 <_read+0x12>
	}

return len;
 8000df0:	687b      	ldr	r3, [r7, #4]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	e009      	b.n	8000e20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	60ba      	str	r2, [r7, #8]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fccd 	bl	80007b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	dbf1      	blt.n	8000e0c <_write+0x12>
	}
	return len;
 8000e28:	687b      	ldr	r3, [r7, #4]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_close>:

int _close(int file)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
	return -1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_isatty>:

int _isatty(int file)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
	return 1;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea4:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <_sbrk+0x5c>)
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <_sbrk+0x60>)
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <_sbrk+0x64>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <_sbrk+0x68>)
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d207      	bcs.n	8000edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ecc:	f004 f882 	bl	8004fd4 <__errno>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	e009      	b.n	8000ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <_sbrk+0x64>)
 8000eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20020000 	.word	0x20020000
 8000efc:	00000400 	.word	0x00000400
 8000f00:	20000090 	.word	0x20000090
 8000f04:	200001b0 	.word	0x200001b0

08000f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f40 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f0c:	f7ff fbb8 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f12:	e003      	b.n	8000f1c <LoopCopyDataInit>

08000f14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000f16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f1a:	3104      	adds	r1, #4

08000f1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f1c:	480a      	ldr	r0, [pc, #40]	; (8000f48 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000f20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f24:	d3f6      	bcc.n	8000f14 <CopyDataInit>
  ldr  r2, =_sbss
 8000f26:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000f28:	e002      	b.n	8000f30 <LoopFillZerobss>

08000f2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f2c:	f842 3b04 	str.w	r3, [r2], #4

08000f30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000f32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f34:	d3f9      	bcc.n	8000f2a <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8000f36:	f004 f853 	bl	8004fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3a:	f7ff fc61 	bl	8000800 <main>
  bx  lr    
 8000f3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f44:	08006300 	.word	0x08006300
  ldr  r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f4c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000f50:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000f54:	200001b0 	.word	0x200001b0

08000f58 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC3_IRQHandler>
	...

08000f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f62:	2003      	movs	r0, #3
 8000f64:	f000 f94a 	bl	80011fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f68:	f001 f978 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8000f6c:	4601      	mov	r1, r0
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_Init+0x68>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	0a1b      	lsrs	r3, r3, #8
 8000f74:	f003 030f 	and.w	r3, r3, #15
 8000f78:	4a13      	ldr	r2, [pc, #76]	; (8000fc8 <HAL_Init+0x6c>)
 8000f7a:	5cd3      	ldrb	r3, [r2, r3]
 8000f7c:	f003 031f 	and.w	r3, r3, #31
 8000f80:	fa21 f303 	lsr.w	r3, r1, r3
 8000f84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_Init+0x68>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_Init+0x6c>)
 8000f90:	5cd3      	ldrb	r3, [r2, r3]
 8000f92:	f003 031f 	and.w	r3, r3, #31
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <HAL_Init+0x70>)
 8000f9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fa0:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <HAL_Init+0x74>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f814 	bl	8000fd4 <HAL_InitTick>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e002      	b.n	8000fbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb6:	f7ff fe75 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	58024400 	.word	0x58024400
 8000fc8:	08006230 	.word	0x08006230
 8000fcc:	20000004 	.word	0x20000004
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_InitTick+0x60>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e021      	b.n	800102c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <HAL_InitTick+0x64>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <HAL_InitTick+0x60>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f921 	bl	8001246 <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 f8f9 	bl	8001212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x68>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000000c 	.word	0x2000000c
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	2000000c 	.word	0x2000000c
 8001064:	200001a8 	.word	0x200001a8

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	200001a8 	.word	0x200001a8

08001080 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_GetREVID+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	0c1b      	lsrs	r3, r3, #16
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	5c001000 	.word	0x5c001000

08001098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <__NVIC_SetPriorityGrouping+0x40>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b4:	4013      	ands	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x40>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00
 80010dc:	05fa0000 	.word	0x05fa0000

080010e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <__NVIC_GetPriorityGrouping+0x18>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	f003 0307 	and.w	r3, r3, #7
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001108:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800110c:	2b00      	cmp	r3, #0
 800110e:	db0a      	blt.n	8001126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	490c      	ldr	r1, [pc, #48]	; (8001148 <__NVIC_SetPriority+0x4c>)
 8001116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800111a:	0112      	lsls	r2, r2, #4
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	440b      	add	r3, r1
 8001120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001124:	e00a      	b.n	800113c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4908      	ldr	r1, [pc, #32]	; (800114c <__NVIC_SetPriority+0x50>)
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	3b04      	subs	r3, #4
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	440b      	add	r3, r1
 800113a:	761a      	strb	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	; 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f1c3 0307 	rsb	r3, r3, #7
 800116a:	2b04      	cmp	r3, #4
 800116c:	bf28      	it	cs
 800116e:	2304      	movcs	r3, #4
 8001170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3304      	adds	r3, #4
 8001176:	2b06      	cmp	r3, #6
 8001178:	d902      	bls.n	8001180 <NVIC_EncodePriority+0x30>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3b03      	subs	r3, #3
 800117e:	e000      	b.n	8001182 <NVIC_EncodePriority+0x32>
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001198:	f04f 31ff 	mov.w	r1, #4294967295
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43d9      	mvns	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	4313      	orrs	r3, r2
         );
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3724      	adds	r7, #36	; 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c8:	d301      	bcc.n	80011ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00f      	b.n	80011ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <SysTick_Config+0x40>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d6:	210f      	movs	r1, #15
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f7ff ff8e 	bl	80010fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <SysTick_Config+0x40>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <SysTick_Config+0x40>)
 80011e8:	2207      	movs	r2, #7
 80011ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	e000e010 	.word	0xe000e010

080011fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ff47 	bl	8001098 <__NVIC_SetPriorityGrouping>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b086      	sub	sp, #24
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001220:	f7ff ff5e 	bl	80010e0 <__NVIC_GetPriorityGrouping>
 8001224:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f7ff ff90 	bl	8001150 <NVIC_EncodePriority>
 8001230:	4602      	mov	r2, r0
 8001232:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff5f 	bl	80010fc <__NVIC_SetPriority>
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffb2 	bl	80011b8 <SysTick_Config>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800126e:	4b89      	ldr	r3, [pc, #548]	; (8001494 <HAL_GPIO_Init+0x234>)
 8001270:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001272:	e194      	b.n	800159e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	2101      	movs	r1, #1
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	fa01 f303 	lsl.w	r3, r1, r3
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 8186 	beq.w	8001598 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d00b      	beq.n	80012ac <HAL_GPIO_Init+0x4c>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d007      	beq.n	80012ac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a0:	2b11      	cmp	r3, #17
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b12      	cmp	r3, #18
 80012aa:	d130      	bne.n	800130e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012e2:	2201      	movs	r2, #1
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	091b      	lsrs	r3, r3, #4
 80012f8:	f003 0201 	and.w	r2, r3, #1
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	2203      	movs	r2, #3
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0xee>
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b12      	cmp	r3, #18
 800134c:	d123      	bne.n	8001396 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	08da      	lsrs	r2, r3, #3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3208      	adds	r2, #8
 8001356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	220f      	movs	r2, #15
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	691a      	ldr	r2, [r3, #16]
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	08da      	lsrs	r2, r3, #3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3208      	adds	r2, #8
 8001390:	69b9      	ldr	r1, [r7, #24]
 8001392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0203 	and.w	r2, r3, #3
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 80e0 	beq.w	8001598 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <HAL_GPIO_Init+0x238>)
 80013da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013de:	4a2e      	ldr	r2, [pc, #184]	; (8001498 <HAL_GPIO_Init+0x238>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013e8:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <HAL_GPIO_Init+0x238>)
 80013ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013f6:	4a29      	ldr	r2, [pc, #164]	; (800149c <HAL_GPIO_Init+0x23c>)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a20      	ldr	r2, [pc, #128]	; (80014a0 <HAL_GPIO_Init+0x240>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d052      	beq.n	80014c8 <HAL_GPIO_Init+0x268>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a1f      	ldr	r2, [pc, #124]	; (80014a4 <HAL_GPIO_Init+0x244>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d031      	beq.n	800148e <HAL_GPIO_Init+0x22e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a1e      	ldr	r2, [pc, #120]	; (80014a8 <HAL_GPIO_Init+0x248>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d02b      	beq.n	800148a <HAL_GPIO_Init+0x22a>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <HAL_GPIO_Init+0x24c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d025      	beq.n	8001486 <HAL_GPIO_Init+0x226>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a1c      	ldr	r2, [pc, #112]	; (80014b0 <HAL_GPIO_Init+0x250>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d01f      	beq.n	8001482 <HAL_GPIO_Init+0x222>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <HAL_GPIO_Init+0x254>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d019      	beq.n	800147e <HAL_GPIO_Init+0x21e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a1a      	ldr	r2, [pc, #104]	; (80014b8 <HAL_GPIO_Init+0x258>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d013      	beq.n	800147a <HAL_GPIO_Init+0x21a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a19      	ldr	r2, [pc, #100]	; (80014bc <HAL_GPIO_Init+0x25c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d00d      	beq.n	8001476 <HAL_GPIO_Init+0x216>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a18      	ldr	r2, [pc, #96]	; (80014c0 <HAL_GPIO_Init+0x260>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d007      	beq.n	8001472 <HAL_GPIO_Init+0x212>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a17      	ldr	r2, [pc, #92]	; (80014c4 <HAL_GPIO_Init+0x264>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d101      	bne.n	800146e <HAL_GPIO_Init+0x20e>
 800146a:	2309      	movs	r3, #9
 800146c:	e02d      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 800146e:	230a      	movs	r3, #10
 8001470:	e02b      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 8001472:	2308      	movs	r3, #8
 8001474:	e029      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 8001476:	2307      	movs	r3, #7
 8001478:	e027      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 800147a:	2306      	movs	r3, #6
 800147c:	e025      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 800147e:	2305      	movs	r3, #5
 8001480:	e023      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 8001482:	2304      	movs	r3, #4
 8001484:	e021      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 8001486:	2303      	movs	r3, #3
 8001488:	e01f      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 800148a:	2302      	movs	r3, #2
 800148c:	e01d      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 800148e:	2301      	movs	r3, #1
 8001490:	e01b      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 8001492:	bf00      	nop
 8001494:	58000080 	.word	0x58000080
 8001498:	58024400 	.word	0x58024400
 800149c:	58000400 	.word	0x58000400
 80014a0:	58020000 	.word	0x58020000
 80014a4:	58020400 	.word	0x58020400
 80014a8:	58020800 	.word	0x58020800
 80014ac:	58020c00 	.word	0x58020c00
 80014b0:	58021000 	.word	0x58021000
 80014b4:	58021400 	.word	0x58021400
 80014b8:	58021800 	.word	0x58021800
 80014bc:	58021c00 	.word	0x58021c00
 80014c0:	58022000 	.word	0x58022000
 80014c4:	58022400 	.word	0x58022400
 80014c8:	2300      	movs	r3, #0
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	f002 0203 	and.w	r2, r2, #3
 80014d0:	0092      	lsls	r2, r2, #2
 80014d2:	4093      	lsls	r3, r2
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014da:	4938      	ldr	r1, [pc, #224]	; (80015bc <HAL_GPIO_Init+0x35c>)
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	3302      	adds	r3, #2
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800153c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800156a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	3301      	adds	r3, #1
 800159c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa22 f303 	lsr.w	r3, r2, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f47f ae63 	bne.w	8001274 <HAL_GPIO_Init+0x14>
  }
}
 80015ae:	bf00      	nop
 80015b0:	3724      	adds	r7, #36	; 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	58000400 	.word	0x58000400

080015c0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80015c8:	4a08      	ldr	r2, [pc, #32]	; (80015ec <HAL_HSEM_FastTake+0x2c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3320      	adds	r3, #32
 80015ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d2:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <HAL_HSEM_FastTake+0x30>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d101      	bne.n	80015dc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	e000      	b.n	80015de <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	58026400 	.word	0x58026400
 80015f0:	80000300 	.word	0x80000300

080015f4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80015fe:	4906      	ldr	r1, [pc, #24]	; (8001618 <HAL_HSEM_Release+0x24>)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	58026400 	.word	0x58026400

0800161c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001624:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	2b06      	cmp	r3, #6
 800162e:	d00a      	beq.n	8001646 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001630:	4b26      	ldr	r3, [pc, #152]	; (80016cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	429a      	cmp	r2, r3
 800163c:	d001      	beq.n	8001642 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e040      	b.n	80016c4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e03e      	b.n	80016c4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001646:	4b21      	ldr	r3, [pc, #132]	; (80016cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800164e:	491f      	ldr	r1, [pc, #124]	; (80016cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4313      	orrs	r3, r2
 8001654:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001656:	f7ff fd07 	bl	8001068 <HAL_GetTick>
 800165a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800165c:	e009      	b.n	8001672 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800165e:	f7ff fd03 	bl	8001068 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800166c:	d901      	bls.n	8001672 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e028      	b.n	80016c4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001672:	4b16      	ldr	r3, [pc, #88]	; (80016cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800167a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800167e:	d1ee      	bne.n	800165e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b1e      	cmp	r3, #30
 8001684:	d008      	beq.n	8001698 <HAL_PWREx_ConfigSupply+0x7c>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b2e      	cmp	r3, #46	; 0x2e
 800168a:	d005      	beq.n	8001698 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b1d      	cmp	r3, #29
 8001690:	d002      	beq.n	8001698 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b2d      	cmp	r3, #45	; 0x2d
 8001696:	d114      	bne.n	80016c2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001698:	f7ff fce6 	bl	8001068 <HAL_GetTick>
 800169c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800169e:	e009      	b.n	80016b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016a0:	f7ff fce2 	bl	8001068 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016ae:	d901      	bls.n	80016b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e007      	b.n	80016c4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_PWREx_ConfigSupply+0xb0>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c0:	d1ee      	bne.n	80016a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	58024800 	.word	0x58024800

080016d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08c      	sub	sp, #48	; 0x30
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e3ff      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 8087 	beq.w	80017fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016f0:	4b99      	ldr	r3, [pc, #612]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016fa:	4b97      	ldr	r3, [pc, #604]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001702:	2b10      	cmp	r3, #16
 8001704:	d007      	beq.n	8001716 <HAL_RCC_OscConfig+0x46>
 8001706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001708:	2b18      	cmp	r3, #24
 800170a:	d110      	bne.n	800172e <HAL_RCC_OscConfig+0x5e>
 800170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d10b      	bne.n	800172e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001716:	4b90      	ldr	r3, [pc, #576]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d06c      	beq.n	80017fc <HAL_RCC_OscConfig+0x12c>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d168      	bne.n	80017fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e3d9      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x76>
 8001738:	4b87      	ldr	r3, [pc, #540]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a86      	ldr	r2, [pc, #536]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 800173e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	e02e      	b.n	80017a4 <HAL_RCC_OscConfig+0xd4>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x98>
 800174e:	4b82      	ldr	r3, [pc, #520]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a81      	ldr	r2, [pc, #516]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 8001754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b7f      	ldr	r3, [pc, #508]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a7e      	ldr	r2, [pc, #504]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 8001760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e01d      	b.n	80017a4 <HAL_RCC_OscConfig+0xd4>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0xbc>
 8001772:	4b79      	ldr	r3, [pc, #484]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a78      	ldr	r2, [pc, #480]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b76      	ldr	r3, [pc, #472]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a75      	ldr	r2, [pc, #468]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0xd4>
 800178c:	4b72      	ldr	r3, [pc, #456]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a71      	ldr	r2, [pc, #452]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 8001792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b6f      	ldr	r3, [pc, #444]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a6e      	ldr	r2, [pc, #440]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 800179e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d013      	beq.n	80017d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff fc5c 	bl	8001068 <HAL_GetTick>
 80017b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff fc58 	bl	8001068 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e38d      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017c6:	4b64      	ldr	r3, [pc, #400]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0xe4>
 80017d2:	e014      	b.n	80017fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff fc48 	bl	8001068 <HAL_GetTick>
 80017d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff fc44 	bl	8001068 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	; 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e379      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017ee:	4b5a      	ldr	r3, [pc, #360]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x10c>
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 80ae 	beq.w	8001968 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800180c:	4b52      	ldr	r3, [pc, #328]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001814:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001816:	4b50      	ldr	r3, [pc, #320]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d007      	beq.n	8001832 <HAL_RCC_OscConfig+0x162>
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	2b18      	cmp	r3, #24
 8001826:	d13a      	bne.n	800189e <HAL_RCC_OscConfig+0x1ce>
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d135      	bne.n	800189e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001832:	4b49      	ldr	r3, [pc, #292]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	2b00      	cmp	r3, #0
 800183c:	d005      	beq.n	800184a <HAL_RCC_OscConfig+0x17a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e34b      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184a:	f7ff fc19 	bl	8001080 <HAL_GetREVID>
 800184e:	4602      	mov	r2, r0
 8001850:	f241 0303 	movw	r3, #4099	; 0x1003
 8001854:	429a      	cmp	r2, r3
 8001856:	d817      	bhi.n	8001888 <HAL_RCC_OscConfig+0x1b8>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	2b40      	cmp	r3, #64	; 0x40
 800185e:	d108      	bne.n	8001872 <HAL_RCC_OscConfig+0x1a2>
 8001860:	4b3d      	ldr	r3, [pc, #244]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001868:	4a3b      	ldr	r2, [pc, #236]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 800186a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001870:	e07a      	b.n	8001968 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4b39      	ldr	r3, [pc, #228]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	031b      	lsls	r3, r3, #12
 8001880:	4935      	ldr	r1, [pc, #212]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 8001882:	4313      	orrs	r3, r2
 8001884:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001886:	e06f      	b.n	8001968 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001888:	4b33      	ldr	r3, [pc, #204]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	061b      	lsls	r3, r3, #24
 8001896:	4930      	ldr	r1, [pc, #192]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800189c:	e064      	b.n	8001968 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d045      	beq.n	8001932 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018a6:	4b2c      	ldr	r3, [pc, #176]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 0219 	bic.w	r2, r3, #25
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	4929      	ldr	r1, [pc, #164]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff fbd6 	bl	8001068 <HAL_GetTick>
 80018bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c0:	f7ff fbd2 	bl	8001068 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e307      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018d2:	4b21      	ldr	r3, [pc, #132]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018de:	f7ff fbcf 	bl	8001080 <HAL_GetREVID>
 80018e2:	4602      	mov	r2, r0
 80018e4:	f241 0303 	movw	r3, #4099	; 0x1003
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d817      	bhi.n	800191c <HAL_RCC_OscConfig+0x24c>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	2b40      	cmp	r3, #64	; 0x40
 80018f2:	d108      	bne.n	8001906 <HAL_RCC_OscConfig+0x236>
 80018f4:	4b18      	ldr	r3, [pc, #96]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80018fc:	4a16      	ldr	r2, [pc, #88]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 80018fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001902:	6053      	str	r3, [r2, #4]
 8001904:	e030      	b.n	8001968 <HAL_RCC_OscConfig+0x298>
 8001906:	4b14      	ldr	r3, [pc, #80]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	031b      	lsls	r3, r3, #12
 8001914:	4910      	ldr	r1, [pc, #64]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 8001916:	4313      	orrs	r3, r2
 8001918:	604b      	str	r3, [r1, #4]
 800191a:	e025      	b.n	8001968 <HAL_RCC_OscConfig+0x298>
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	061b      	lsls	r3, r3, #24
 800192a:	490b      	ldr	r1, [pc, #44]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
 8001930:	e01a      	b.n	8001968 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a08      	ldr	r2, [pc, #32]	; (8001958 <HAL_RCC_OscConfig+0x288>)
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193e:	f7ff fb93 	bl	8001068 <HAL_GetTick>
 8001942:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001944:	e00a      	b.n	800195c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001946:	f7ff fb8f 	bl	8001068 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d903      	bls.n	800195c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e2c4      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
 8001958:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800195c:	4ba4      	ldr	r3, [pc, #656]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1ee      	bne.n	8001946 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0310 	and.w	r3, r3, #16
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80a9 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001976:	4b9e      	ldr	r3, [pc, #632]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800197e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001980:	4b9b      	ldr	r3, [pc, #620]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	2b08      	cmp	r3, #8
 800198a:	d007      	beq.n	800199c <HAL_RCC_OscConfig+0x2cc>
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2b18      	cmp	r3, #24
 8001990:	d13a      	bne.n	8001a08 <HAL_RCC_OscConfig+0x338>
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b01      	cmp	r3, #1
 800199a:	d135      	bne.n	8001a08 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800199c:	4b94      	ldr	r3, [pc, #592]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_OscConfig+0x2e4>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	2b80      	cmp	r3, #128	; 0x80
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e296      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019b4:	f7ff fb64 	bl	8001080 <HAL_GetREVID>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f241 0303 	movw	r3, #4099	; 0x1003
 80019be:	429a      	cmp	r2, r3
 80019c0:	d817      	bhi.n	80019f2 <HAL_RCC_OscConfig+0x322>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	2b20      	cmp	r3, #32
 80019c8:	d108      	bne.n	80019dc <HAL_RCC_OscConfig+0x30c>
 80019ca:	4b89      	ldr	r3, [pc, #548]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80019d2:	4a87      	ldr	r2, [pc, #540]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 80019d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019da:	e075      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019dc:	4b84      	ldr	r3, [pc, #528]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	069b      	lsls	r3, r3, #26
 80019ea:	4981      	ldr	r1, [pc, #516]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019f0:	e06a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019f2:	4b7f      	ldr	r3, [pc, #508]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	061b      	lsls	r3, r3, #24
 8001a00:	497b      	ldr	r1, [pc, #492]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a06:	e05f      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d042      	beq.n	8001a96 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a10:	4b77      	ldr	r3, [pc, #476]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a76      	ldr	r2, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fb24 	bl	8001068 <HAL_GetTick>
 8001a20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a24:	f7ff fb20 	bl	8001068 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e255      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a36:	4b6e      	ldr	r3, [pc, #440]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a42:	f7ff fb1d 	bl	8001080 <HAL_GetREVID>
 8001a46:	4602      	mov	r2, r0
 8001a48:	f241 0303 	movw	r3, #4099	; 0x1003
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d817      	bhi.n	8001a80 <HAL_RCC_OscConfig+0x3b0>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	2b20      	cmp	r3, #32
 8001a56:	d108      	bne.n	8001a6a <HAL_RCC_OscConfig+0x39a>
 8001a58:	4b65      	ldr	r3, [pc, #404]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a60:	4a63      	ldr	r2, [pc, #396]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001a62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a66:	6053      	str	r3, [r2, #4]
 8001a68:	e02e      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3f8>
 8001a6a:	4b61      	ldr	r3, [pc, #388]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	069b      	lsls	r3, r3, #26
 8001a78:	495d      	ldr	r1, [pc, #372]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	604b      	str	r3, [r1, #4]
 8001a7e:	e023      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3f8>
 8001a80:	4b5b      	ldr	r3, [pc, #364]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	061b      	lsls	r3, r3, #24
 8001a8e:	4958      	ldr	r1, [pc, #352]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	60cb      	str	r3, [r1, #12]
 8001a94:	e018      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a96:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a55      	ldr	r2, [pc, #340]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fae1 	bl	8001068 <HAL_GetTick>
 8001aa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001aaa:	f7ff fadd 	bl	8001068 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e212      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001abc:	4b4c      	ldr	r3, [pc, #304]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f0      	bne.n	8001aaa <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d036      	beq.n	8001b42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d019      	beq.n	8001b10 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001adc:	4b44      	ldr	r3, [pc, #272]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae0:	4a43      	ldr	r2, [pc, #268]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae8:	f7ff fabe 	bl	8001068 <HAL_GetTick>
 8001aec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001af0:	f7ff faba 	bl	8001068 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e1ef      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b02:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x420>
 8001b0e:	e018      	b.n	8001b42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b10:	4b37      	ldr	r3, [pc, #220]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b14:	4a36      	ldr	r2, [pc, #216]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001b16:	f023 0301 	bic.w	r3, r3, #1
 8001b1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1c:	f7ff faa4 	bl	8001068 <HAL_GetTick>
 8001b20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b24:	f7ff faa0 	bl	8001068 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1d5      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b36:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0320 	and.w	r3, r3, #32
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d036      	beq.n	8001bbc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d019      	beq.n	8001b8a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a25      	ldr	r2, [pc, #148]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001b5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fa81 	bl	8001068 <HAL_GetTick>
 8001b66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b6a:	f7ff fa7d 	bl	8001068 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e1b2      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b7c:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x49a>
 8001b88:	e018      	b.n	8001bbc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001b90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b96:	f7ff fa67 	bl	8001068 <HAL_GetTick>
 8001b9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b9e:	f7ff fa63 	bl	8001068 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e198      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_RCC_OscConfig+0x520>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 8085 	beq.w	8001cd4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_RCC_OscConfig+0x524>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <HAL_RCC_OscConfig+0x524>)
 8001bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001bd6:	f7ff fa47 	bl	8001068 <HAL_GetTick>
 8001bda:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bdc:	e00c      	b.n	8001bf8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001bde:	f7ff fa43 	bl	8001068 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b64      	cmp	r3, #100	; 0x64
 8001bea:	d905      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e178      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
 8001bf0:	58024400 	.word	0x58024400
 8001bf4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bf8:	4b96      	ldr	r3, [pc, #600]	; (8001e54 <HAL_RCC_OscConfig+0x784>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0ec      	beq.n	8001bde <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x54a>
 8001c0c:	4b92      	ldr	r3, [pc, #584]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c10:	4a91      	ldr	r2, [pc, #580]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6713      	str	r3, [r2, #112]	; 0x70
 8001c18:	e02d      	b.n	8001c76 <HAL_RCC_OscConfig+0x5a6>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x56c>
 8001c22:	4b8d      	ldr	r3, [pc, #564]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c26:	4a8c      	ldr	r2, [pc, #560]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c2e:	4b8a      	ldr	r3, [pc, #552]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c32:	4a89      	ldr	r2, [pc, #548]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001c34:	f023 0304 	bic.w	r3, r3, #4
 8001c38:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3a:	e01c      	b.n	8001c76 <HAL_RCC_OscConfig+0x5a6>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b05      	cmp	r3, #5
 8001c42:	d10c      	bne.n	8001c5e <HAL_RCC_OscConfig+0x58e>
 8001c44:	4b84      	ldr	r3, [pc, #528]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c48:	4a83      	ldr	r2, [pc, #524]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c50:	4b81      	ldr	r3, [pc, #516]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c54:	4a80      	ldr	r2, [pc, #512]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5c:	e00b      	b.n	8001c76 <HAL_RCC_OscConfig+0x5a6>
 8001c5e:	4b7e      	ldr	r3, [pc, #504]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c62:	4a7d      	ldr	r2, [pc, #500]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001c64:	f023 0301 	bic.w	r3, r3, #1
 8001c68:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6a:	4b7b      	ldr	r3, [pc, #492]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6e:	4a7a      	ldr	r2, [pc, #488]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001c70:	f023 0304 	bic.w	r3, r3, #4
 8001c74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d015      	beq.n	8001caa <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7e:	f7ff f9f3 	bl	8001068 <HAL_GetTick>
 8001c82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c86:	f7ff f9ef 	bl	8001068 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e122      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c9c:	4b6e      	ldr	r3, [pc, #440]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0ee      	beq.n	8001c86 <HAL_RCC_OscConfig+0x5b6>
 8001ca8:	e014      	b.n	8001cd4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001caa:	f7ff f9dd 	bl	8001068 <HAL_GetTick>
 8001cae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cb0:	e00a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb2:	f7ff f9d9 	bl	8001068 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e10c      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cc8:	4b63      	ldr	r3, [pc, #396]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1ee      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 8101 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001cde:	4b5e      	ldr	r3, [pc, #376]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ce6:	2b18      	cmp	r3, #24
 8001ce8:	f000 80bc 	beq.w	8001e64 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	f040 8095 	bne.w	8001e20 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf6:	4b58      	ldr	r3, [pc, #352]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a57      	ldr	r2, [pc, #348]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001cfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7ff f9b1 	bl	8001068 <HAL_GetTick>
 8001d06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7ff f9ad 	bl	8001068 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e0e2      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d1c:	4b4e      	ldr	r3, [pc, #312]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d28:	4b4b      	ldr	r3, [pc, #300]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001d2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d2c:	4b4b      	ldr	r3, [pc, #300]	; (8001e5c <HAL_RCC_OscConfig+0x78c>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	4946      	ldr	r1, [pc, #280]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	628b      	str	r3, [r1, #40]	; 0x28
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	3b01      	subs	r3, #1
 8001d48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d50:	3b01      	subs	r3, #1
 8001d52:	025b      	lsls	r3, r3, #9
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	041b      	lsls	r3, r3, #16
 8001d60:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001d72:	4939      	ldr	r1, [pc, #228]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001d78:	4b37      	ldr	r3, [pc, #220]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7c:	4a36      	ldr	r2, [pc, #216]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001d7e:	f023 0301 	bic.w	r3, r3, #1
 8001d82:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d84:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d88:	4b35      	ldr	r3, [pc, #212]	; (8001e60 <HAL_RCC_OscConfig+0x790>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d90:	00d2      	lsls	r2, r2, #3
 8001d92:	4931      	ldr	r1, [pc, #196]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d98:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	f023 020c 	bic.w	r2, r3, #12
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	492c      	ldr	r1, [pc, #176]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001daa:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dae:	f023 0202 	bic.w	r2, r3, #2
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4928      	ldr	r1, [pc, #160]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001dbc:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	4a25      	ldr	r2, [pc, #148]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001dc8:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	4a22      	ldr	r2, [pc, #136]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001dd4:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	4a1f      	ldr	r2, [pc, #124]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001dda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	4a1c      	ldr	r2, [pc, #112]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dec:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff f936 	bl	8001068 <HAL_GetTick>
 8001dfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e00:	f7ff f932 	bl	8001068 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e067      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x730>
 8001e1e:	e05f      	b.n	8001ee0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e20:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0c      	ldr	r2, [pc, #48]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f91c 	bl	8001068 <HAL_GetTick>
 8001e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e34:	f7ff f918 	bl	8001068 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e04d      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <HAL_RCC_OscConfig+0x788>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x764>
 8001e52:	e045      	b.n	8001ee0 <HAL_RCC_OscConfig+0x810>
 8001e54:	58024800 	.word	0x58024800
 8001e58:	58024400 	.word	0x58024400
 8001e5c:	fffffc0c 	.word	0xfffffc0c
 8001e60:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e64:	4b21      	ldr	r3, [pc, #132]	; (8001eec <HAL_RCC_OscConfig+0x81c>)
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e6a:	4b20      	ldr	r3, [pc, #128]	; (8001eec <HAL_RCC_OscConfig+0x81c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d031      	beq.n	8001edc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	f003 0203 	and.w	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d12a      	bne.n	8001edc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	091b      	lsrs	r3, r3, #4
 8001e8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d122      	bne.n	8001edc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d11a      	bne.n	8001edc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	0a5b      	lsrs	r3, r3, #9
 8001eaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d111      	bne.n	8001edc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	0c1b      	lsrs	r3, r3, #16
 8001ebc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d108      	bne.n	8001edc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	0e1b      	lsrs	r3, r3, #24
 8001ece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3730      	adds	r7, #48	; 0x30
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	58024400 	.word	0x58024400

08001ef0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e19c      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f04:	4b8a      	ldr	r3, [pc, #552]	; (8002130 <HAL_RCC_ClockConfig+0x240>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d910      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b87      	ldr	r3, [pc, #540]	; (8002130 <HAL_RCC_ClockConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 020f 	bic.w	r2, r3, #15
 8001f1a:	4985      	ldr	r1, [pc, #532]	; (8002130 <HAL_RCC_ClockConfig+0x240>)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b83      	ldr	r3, [pc, #524]	; (8002130 <HAL_RCC_ClockConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e184      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d010      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	4b7b      	ldr	r3, [pc, #492]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d908      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f50:	4b78      	ldr	r3, [pc, #480]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	4975      	ldr	r1, [pc, #468]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d010      	beq.n	8001f90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	4b70      	ldr	r3, [pc, #448]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d908      	bls.n	8001f90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f7e:	4b6d      	ldr	r3, [pc, #436]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	496a      	ldr	r1, [pc, #424]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d010      	beq.n	8001fbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699a      	ldr	r2, [r3, #24]
 8001fa0:	4b64      	ldr	r3, [pc, #400]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d908      	bls.n	8001fbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fac:	4b61      	ldr	r3, [pc, #388]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	495e      	ldr	r1, [pc, #376]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d010      	beq.n	8001fec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69da      	ldr	r2, [r3, #28]
 8001fce:	4b59      	ldr	r3, [pc, #356]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d908      	bls.n	8001fec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001fda:	4b56      	ldr	r3, [pc, #344]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4953      	ldr	r1, [pc, #332]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d010      	beq.n	800201a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	429a      	cmp	r2, r3
 8002006:	d908      	bls.n	800201a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f023 020f 	bic.w	r2, r3, #15
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4947      	ldr	r1, [pc, #284]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002016:	4313      	orrs	r3, r2
 8002018:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d055      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002026:	4b43      	ldr	r3, [pc, #268]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4940      	ldr	r1, [pc, #256]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002034:	4313      	orrs	r3, r2
 8002036:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d107      	bne.n	8002050 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002040:	4b3c      	ldr	r3, [pc, #240]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d121      	bne.n	8002090 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0f6      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d107      	bne.n	8002068 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002058:	4b36      	ldr	r3, [pc, #216]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d115      	bne.n	8002090 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0ea      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d107      	bne.n	8002080 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002070:	4b30      	ldr	r3, [pc, #192]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d109      	bne.n	8002090 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0de      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002080:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0d6      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002090:	4b28      	ldr	r3, [pc, #160]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f023 0207 	bic.w	r2, r3, #7
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4925      	ldr	r1, [pc, #148]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a2:	f7fe ffe1 	bl	8001068 <HAL_GetTick>
 80020a6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a8:	e00a      	b.n	80020c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020aa:	f7fe ffdd 	bl	8001068 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e0be      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c0:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d1eb      	bne.n	80020aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d010      	beq.n	8002100 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d208      	bcs.n	8002100 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f023 020f 	bic.w	r2, r3, #15
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	490e      	ldr	r1, [pc, #56]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_RCC_ClockConfig+0x240>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d214      	bcs.n	8002138 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <HAL_RCC_ClockConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 020f 	bic.w	r2, r3, #15
 8002116:	4906      	ldr	r1, [pc, #24]	; (8002130 <HAL_RCC_ClockConfig+0x240>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b04      	ldr	r3, [pc, #16]	; (8002130 <HAL_RCC_ClockConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e086      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
 8002130:	52002000 	.word	0x52002000
 8002134:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d010      	beq.n	8002166 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	4b3f      	ldr	r3, [pc, #252]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002150:	429a      	cmp	r2, r3
 8002152:	d208      	bcs.n	8002166 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002154:	4b3c      	ldr	r3, [pc, #240]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	4939      	ldr	r1, [pc, #228]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002162:	4313      	orrs	r3, r2
 8002164:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d010      	beq.n	8002194 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	4b34      	ldr	r3, [pc, #208]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800217e:	429a      	cmp	r2, r3
 8002180:	d208      	bcs.n	8002194 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002182:	4b31      	ldr	r3, [pc, #196]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	492e      	ldr	r1, [pc, #184]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002190:	4313      	orrs	r3, r2
 8002192:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0310 	and.w	r3, r3, #16
 800219c:	2b00      	cmp	r3, #0
 800219e:	d010      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699a      	ldr	r2, [r3, #24]
 80021a4:	4b28      	ldr	r3, [pc, #160]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d208      	bcs.n	80021c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021b0:	4b25      	ldr	r3, [pc, #148]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4922      	ldr	r1, [pc, #136]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d010      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69da      	ldr	r2, [r3, #28]
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021da:	429a      	cmp	r2, r3
 80021dc:	d208      	bcs.n	80021f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80021de:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	4917      	ldr	r1, [pc, #92]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021f0:	f000 f834 	bl	800225c <HAL_RCC_GetSysClockFreq>
 80021f4:	4601      	mov	r1, r0
 80021f6:	4b14      	ldr	r3, [pc, #80]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	4a12      	ldr	r2, [pc, #72]	; (800224c <HAL_RCC_ClockConfig+0x35c>)
 8002202:	5cd3      	ldrb	r3, [r2, r3]
 8002204:	f003 031f 	and.w	r3, r3, #31
 8002208:	fa21 f303 	lsr.w	r3, r1, r3
 800220c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	4a0d      	ldr	r2, [pc, #52]	; (800224c <HAL_RCC_ClockConfig+0x35c>)
 8002218:	5cd3      	ldrb	r3, [r2, r3]
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
 8002224:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <HAL_RCC_ClockConfig+0x360>)
 8002226:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002228:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <HAL_RCC_ClockConfig+0x364>)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800222e:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <HAL_RCC_ClockConfig+0x368>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fece 	bl	8000fd4 <HAL_InitTick>
 8002238:	4603      	mov	r3, r0
 800223a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800223c:	7bfb      	ldrb	r3, [r7, #15]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	58024400 	.word	0x58024400
 800224c:	08006230 	.word	0x08006230
 8002250:	20000004 	.word	0x20000004
 8002254:	20000000 	.word	0x20000000
 8002258:	20000008 	.word	0x20000008

0800225c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002262:	4baf      	ldr	r3, [pc, #700]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800226a:	2b18      	cmp	r3, #24
 800226c:	f200 814e 	bhi.w	800250c <HAL_RCC_GetSysClockFreq+0x2b0>
 8002270:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002276:	bf00      	nop
 8002278:	080022dd 	.word	0x080022dd
 800227c:	0800250d 	.word	0x0800250d
 8002280:	0800250d 	.word	0x0800250d
 8002284:	0800250d 	.word	0x0800250d
 8002288:	0800250d 	.word	0x0800250d
 800228c:	0800250d 	.word	0x0800250d
 8002290:	0800250d 	.word	0x0800250d
 8002294:	0800250d 	.word	0x0800250d
 8002298:	08002303 	.word	0x08002303
 800229c:	0800250d 	.word	0x0800250d
 80022a0:	0800250d 	.word	0x0800250d
 80022a4:	0800250d 	.word	0x0800250d
 80022a8:	0800250d 	.word	0x0800250d
 80022ac:	0800250d 	.word	0x0800250d
 80022b0:	0800250d 	.word	0x0800250d
 80022b4:	0800250d 	.word	0x0800250d
 80022b8:	08002309 	.word	0x08002309
 80022bc:	0800250d 	.word	0x0800250d
 80022c0:	0800250d 	.word	0x0800250d
 80022c4:	0800250d 	.word	0x0800250d
 80022c8:	0800250d 	.word	0x0800250d
 80022cc:	0800250d 	.word	0x0800250d
 80022d0:	0800250d 	.word	0x0800250d
 80022d4:	0800250d 	.word	0x0800250d
 80022d8:	0800230f 	.word	0x0800230f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022dc:	4b90      	ldr	r3, [pc, #576]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d009      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022e8:	4b8d      	ldr	r3, [pc, #564]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	08db      	lsrs	r3, r3, #3
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	4a8c      	ldr	r2, [pc, #560]	; (8002524 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
 80022f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80022fa:	e10a      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022fc:	4b89      	ldr	r3, [pc, #548]	; (8002524 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80022fe:	61bb      	str	r3, [r7, #24]
    break;
 8002300:	e107      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002302:	4b89      	ldr	r3, [pc, #548]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002304:	61bb      	str	r3, [r7, #24]
    break;
 8002306:	e104      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002308:	4b88      	ldr	r3, [pc, #544]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800230a:	61bb      	str	r3, [r7, #24]
    break;
 800230c:	e101      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800230e:	4b84      	ldr	r3, [pc, #528]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002318:	4b81      	ldr	r3, [pc, #516]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002322:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002324:	4b7e      	ldr	r3, [pc, #504]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800232e:	4b7c      	ldr	r3, [pc, #496]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002332:	08db      	lsrs	r3, r3, #3
 8002334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	fb02 f303 	mul.w	r3, r2, r3
 800233e:	ee07 3a90 	vmov	s15, r3
 8002342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002346:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80da 	beq.w	8002506 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d05a      	beq.n	800240e <HAL_RCC_GetSysClockFreq+0x1b2>
 8002358:	2b01      	cmp	r3, #1
 800235a:	d302      	bcc.n	8002362 <HAL_RCC_GetSysClockFreq+0x106>
 800235c:	2b02      	cmp	r3, #2
 800235e:	d078      	beq.n	8002452 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002360:	e099      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002362:	4b6f      	ldr	r3, [pc, #444]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	d02d      	beq.n	80023ca <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800236e:	4b6c      	ldr	r3, [pc, #432]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	08db      	lsrs	r3, r3, #3
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	4a6a      	ldr	r2, [pc, #424]	; (8002524 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800237a:	fa22 f303 	lsr.w	r3, r2, r3
 800237e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	ee07 3a90 	vmov	s15, r3
 8002386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	ee07 3a90 	vmov	s15, r3
 8002390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002398:	4b61      	ldr	r3, [pc, #388]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a0:	ee07 3a90 	vmov	s15, r3
 80023a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ac:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002530 <HAL_RCC_GetSysClockFreq+0x2d4>
 80023b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80023c8:	e087      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002534 <HAL_RCC_GetSysClockFreq+0x2d8>
 80023d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023dc:	4b50      	ldr	r3, [pc, #320]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e4:	ee07 3a90 	vmov	s15, r3
 80023e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80023f0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002530 <HAL_RCC_GetSysClockFreq+0x2d4>
 80023f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002408:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800240c:	e065      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	ee07 3a90 	vmov	s15, r3
 8002414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002418:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002538 <HAL_RCC_GetSysClockFreq+0x2dc>
 800241c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002420:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002428:	ee07 3a90 	vmov	s15, r3
 800242c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002430:	ed97 6a02 	vldr	s12, [r7, #8]
 8002434:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002530 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002438:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800243c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002450:	e043      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	ee07 3a90 	vmov	s15, r3
 8002458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800245c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800253c <HAL_RCC_GetSysClockFreq+0x2e0>
 8002460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002464:	4b2e      	ldr	r3, [pc, #184]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800246c:	ee07 3a90 	vmov	s15, r3
 8002470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002474:	ed97 6a02 	vldr	s12, [r7, #8]
 8002478:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002530 <HAL_RCC_GetSysClockFreq+0x2d4>
 800247c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800248c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002490:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002494:	e021      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002538 <HAL_RCC_GetSysClockFreq+0x2dc>
 80024a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024a8:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b0:	ee07 3a90 	vmov	s15, r3
 80024b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80024bc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002530 <HAL_RCC_GetSysClockFreq+0x2d4>
 80024c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024d8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	0a5b      	lsrs	r3, r3, #9
 80024e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024e4:	3301      	adds	r3, #1
 80024e6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	ee07 3a90 	vmov	s15, r3
 80024ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80024f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024fe:	ee17 3a90 	vmov	r3, s15
 8002502:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002504:	e005      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	61bb      	str	r3, [r7, #24]
    break;
 800250a:	e002      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800250e:	61bb      	str	r3, [r7, #24]
    break;
 8002510:	bf00      	nop
  }

  return sysclockfreq;
 8002512:	69bb      	ldr	r3, [r7, #24]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3724      	adds	r7, #36	; 0x24
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	58024400 	.word	0x58024400
 8002524:	03d09000 	.word	0x03d09000
 8002528:	003d0900 	.word	0x003d0900
 800252c:	017d7840 	.word	0x017d7840
 8002530:	46000000 	.word	0x46000000
 8002534:	4c742400 	.word	0x4c742400
 8002538:	4a742400 	.word	0x4a742400
 800253c:	4bbebc20 	.word	0x4bbebc20

08002540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002546:	f7ff fe89 	bl	800225c <HAL_RCC_GetSysClockFreq>
 800254a:	4601      	mov	r1, r0
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <HAL_RCC_GetHCLKFreq+0x50>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	4a0f      	ldr	r2, [pc, #60]	; (8002594 <HAL_RCC_GetHCLKFreq+0x54>)
 8002558:	5cd3      	ldrb	r3, [r2, r3]
 800255a:	f003 031f 	and.w	r3, r3, #31
 800255e:	fa21 f303 	lsr.w	r3, r1, r3
 8002562:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002564:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_RCC_GetHCLKFreq+0x50>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	4a09      	ldr	r2, [pc, #36]	; (8002594 <HAL_RCC_GetHCLKFreq+0x54>)
 800256e:	5cd3      	ldrb	r3, [r2, r3]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	fa22 f303 	lsr.w	r3, r2, r3
 800257a:	4a07      	ldr	r2, [pc, #28]	; (8002598 <HAL_RCC_GetHCLKFreq+0x58>)
 800257c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800257e:	4a07      	ldr	r2, [pc, #28]	; (800259c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <HAL_RCC_GetHCLKFreq+0x58>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	58024400 	.word	0x58024400
 8002594:	08006230 	.word	0x08006230
 8002598:	20000004 	.word	0x20000004
 800259c:	20000000 	.word	0x20000000

080025a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80025a4:	f7ff ffcc 	bl	8002540 <HAL_RCC_GetHCLKFreq>
 80025a8:	4601      	mov	r1, r0
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025b6:	5cd3      	ldrb	r3, [r2, r3]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	58024400 	.word	0x58024400
 80025c8:	08006230 	.word	0x08006230

080025cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80025d0:	f7ff ffb6 	bl	8002540 <HAL_RCC_GetHCLKFreq>
 80025d4:	4601      	mov	r1, r0
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025e2:	5cd3      	ldrb	r3, [r2, r3]
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	58024400 	.word	0x58024400
 80025f4:	08006230 	.word	0x08006230

080025f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002600:	2300      	movs	r3, #0
 8002602:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002604:	2300      	movs	r3, #0
 8002606:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d03d      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002618:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800261c:	d013      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800261e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002622:	d802      	bhi.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002624:	2b00      	cmp	r3, #0
 8002626:	d007      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002628:	e01f      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800262a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800262e:	d013      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002630:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002634:	d01c      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002636:	e018      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002638:	4baf      	ldr	r3, [pc, #700]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263c:	4aae      	ldr	r2, [pc, #696]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800263e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002642:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002644:	e015      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3304      	adds	r3, #4
 800264a:	2102      	movs	r1, #2
 800264c:	4618      	mov	r0, r3
 800264e:	f001 f96f 	bl	8003930 <RCCEx_PLL2_Config>
 8002652:	4603      	mov	r3, r0
 8002654:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002656:	e00c      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3324      	adds	r3, #36	; 0x24
 800265c:	2102      	movs	r1, #2
 800265e:	4618      	mov	r0, r3
 8002660:	f001 fa18 	bl	8003a94 <RCCEx_PLL3_Config>
 8002664:	4603      	mov	r3, r0
 8002666:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002668:	e003      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	75fb      	strb	r3, [r7, #23]
      break;
 800266e:	e000      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002672:	7dfb      	ldrb	r3, [r7, #23]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d109      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002678:	4b9f      	ldr	r3, [pc, #636]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800267a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800267c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002684:	499c      	ldr	r1, [pc, #624]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002686:	4313      	orrs	r3, r2
 8002688:	650b      	str	r3, [r1, #80]	; 0x50
 800268a:	e001      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d03d      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d826      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80026a4:	a201      	add	r2, pc, #4	; (adr r2, 80026ac <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80026a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026aa:	bf00      	nop
 80026ac:	080026c1 	.word	0x080026c1
 80026b0:	080026cf 	.word	0x080026cf
 80026b4:	080026e1 	.word	0x080026e1
 80026b8:	080026f9 	.word	0x080026f9
 80026bc:	080026f9 	.word	0x080026f9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026c0:	4b8d      	ldr	r3, [pc, #564]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	4a8c      	ldr	r2, [pc, #560]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026cc:	e015      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3304      	adds	r3, #4
 80026d2:	2100      	movs	r1, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f001 f92b 	bl	8003930 <RCCEx_PLL2_Config>
 80026da:	4603      	mov	r3, r0
 80026dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026de:	e00c      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3324      	adds	r3, #36	; 0x24
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f001 f9d4 	bl	8003a94 <RCCEx_PLL3_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026f0:	e003      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	75fb      	strb	r3, [r7, #23]
      break;
 80026f6:	e000      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80026f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026fa:	7dfb      	ldrb	r3, [r7, #23]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d109      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002700:	4b7d      	ldr	r3, [pc, #500]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002704:	f023 0207 	bic.w	r2, r3, #7
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270c:	497a      	ldr	r1, [pc, #488]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800270e:	4313      	orrs	r3, r2
 8002710:	650b      	str	r3, [r1, #80]	; 0x50
 8002712:	e001      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002720:	2b00      	cmp	r3, #0
 8002722:	d03e      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d01c      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800272c:	2b80      	cmp	r3, #128	; 0x80
 800272e:	d804      	bhi.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002734:	2b40      	cmp	r3, #64	; 0x40
 8002736:	d00d      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002738:	e01e      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800273a:	2bc0      	cmp	r3, #192	; 0xc0
 800273c:	d01f      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800273e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002742:	d01e      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002744:	e018      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002746:	4b6c      	ldr	r3, [pc, #432]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	4a6b      	ldr	r2, [pc, #428]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800274c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002750:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002752:	e017      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3304      	adds	r3, #4
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f001 f8e8 	bl	8003930 <RCCEx_PLL2_Config>
 8002760:	4603      	mov	r3, r0
 8002762:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002764:	e00e      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3324      	adds	r3, #36	; 0x24
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f001 f991 	bl	8003a94 <RCCEx_PLL3_Config>
 8002772:	4603      	mov	r3, r0
 8002774:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002776:	e005      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	75fb      	strb	r3, [r7, #23]
      break;
 800277c:	e002      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800277e:	bf00      	nop
 8002780:	e000      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002784:	7dfb      	ldrb	r3, [r7, #23]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800278a:	4b5b      	ldr	r3, [pc, #364]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800278c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	4958      	ldr	r1, [pc, #352]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002798:	4313      	orrs	r3, r2
 800279a:	650b      	str	r3, [r1, #80]	; 0x50
 800279c:	e001      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d044      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027b8:	d01f      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x202>
 80027ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027be:	d805      	bhi.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80027c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027c8:	d00e      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80027ca:	e01f      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x214>
 80027cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80027d0:	d01f      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80027d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027d6:	d01e      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80027d8:	e018      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027da:	4b47      	ldr	r3, [pc, #284]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	4a46      	ldr	r2, [pc, #280]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027e6:	e017      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3304      	adds	r3, #4
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f001 f89e 	bl	8003930 <RCCEx_PLL2_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80027f8:	e00e      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3324      	adds	r3, #36	; 0x24
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f001 f947 	bl	8003a94 <RCCEx_PLL3_Config>
 8002806:	4603      	mov	r3, r0
 8002808:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800280a:	e005      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	75fb      	strb	r3, [r7, #23]
      break;
 8002810:	e002      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002812:	bf00      	nop
 8002814:	e000      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002816:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002818:	7dfb      	ldrb	r3, [r7, #23]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10a      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800281e:	4b36      	ldr	r3, [pc, #216]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800282c:	4932      	ldr	r1, [pc, #200]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800282e:	4313      	orrs	r3, r2
 8002830:	658b      	str	r3, [r1, #88]	; 0x58
 8002832:	e001      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002834:	7dfb      	ldrb	r3, [r7, #23]
 8002836:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002840:	2b00      	cmp	r3, #0
 8002842:	d044      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800284a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800284e:	d01f      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002850:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002854:	d805      	bhi.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800285a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800285e:	d00e      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002860:	e01f      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002862:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002866:	d01f      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002868:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800286c:	d01e      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800286e:	e018      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002870:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	4a20      	ldr	r2, [pc, #128]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800287c:	e017      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3304      	adds	r3, #4
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f001 f853 	bl	8003930 <RCCEx_PLL2_Config>
 800288a:	4603      	mov	r3, r0
 800288c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800288e:	e00e      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3324      	adds	r3, #36	; 0x24
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f001 f8fc 	bl	8003a94 <RCCEx_PLL3_Config>
 800289c:	4603      	mov	r3, r0
 800289e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028a0:	e005      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
      break;
 80028a6:	e002      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80028a8:	bf00      	nop
 80028aa:	e000      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80028ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ae:	7dfb      	ldrb	r3, [r7, #23]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10a      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80028b4:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028c2:	490d      	ldr	r1, [pc, #52]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	658b      	str	r3, [r1, #88]	; 0x58
 80028c8:	e001      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ca:	7dfb      	ldrb	r3, [r7, #23]
 80028cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d035      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028de:	2b10      	cmp	r3, #16
 80028e0:	d00c      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x304>
 80028e2:	2b10      	cmp	r3, #16
 80028e4:	d802      	bhi.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d01b      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80028ea:	e017      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x324>
 80028ec:	2b20      	cmp	r3, #32
 80028ee:	d00c      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x312>
 80028f0:	2b30      	cmp	r3, #48	; 0x30
 80028f2:	d018      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80028f4:	e012      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x324>
 80028f6:	bf00      	nop
 80028f8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028fc:	4baf      	ldr	r3, [pc, #700]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	4aae      	ldr	r2, [pc, #696]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002906:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002908:	e00e      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3304      	adds	r3, #4
 800290e:	2102      	movs	r1, #2
 8002910:	4618      	mov	r0, r3
 8002912:	f001 f80d 	bl	8003930 <RCCEx_PLL2_Config>
 8002916:	4603      	mov	r3, r0
 8002918:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800291a:	e005      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	75fb      	strb	r3, [r7, #23]
      break;
 8002920:	e002      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002922:	bf00      	nop
 8002924:	e000      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002926:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002928:	7dfb      	ldrb	r3, [r7, #23]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800292e:	4ba3      	ldr	r3, [pc, #652]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002932:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800293a:	49a0      	ldr	r1, [pc, #640]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800293c:	4313      	orrs	r3, r2
 800293e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002940:	e001      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002942:	7dfb      	ldrb	r3, [r7, #23]
 8002944:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d042      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800295a:	d01f      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800295c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002960:	d805      	bhi.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296a:	d00e      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800296c:	e01f      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800296e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002972:	d01f      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002974:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002978:	d01e      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800297a:	e018      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800297c:	4b8f      	ldr	r3, [pc, #572]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	4a8e      	ldr	r2, [pc, #568]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002986:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002988:	e017      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3304      	adds	r3, #4
 800298e:	2100      	movs	r1, #0
 8002990:	4618      	mov	r0, r3
 8002992:	f000 ffcd 	bl	8003930 <RCCEx_PLL2_Config>
 8002996:	4603      	mov	r3, r0
 8002998:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800299a:	e00e      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3324      	adds	r3, #36	; 0x24
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f001 f876 	bl	8003a94 <RCCEx_PLL3_Config>
 80029a8:	4603      	mov	r3, r0
 80029aa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029ac:	e005      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	75fb      	strb	r3, [r7, #23]
      break;
 80029b2:	e002      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80029b4:	bf00      	nop
 80029b6:	e000      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80029b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d109      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80029c0:	4b7e      	ldr	r3, [pc, #504]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029cc:	497b      	ldr	r1, [pc, #492]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	650b      	str	r3, [r1, #80]	; 0x50
 80029d2:	e001      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d042      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029ec:	d01b      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80029ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029f2:	d805      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d022      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x446>
 80029f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fc:	d00a      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80029fe:	e01b      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002a00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a04:	d01d      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002a06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a0a:	d01c      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002a0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a10:	d01b      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002a12:	e011      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	2101      	movs	r1, #1
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 ff88 	bl	8003930 <RCCEx_PLL2_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a24:	e012      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3324      	adds	r3, #36	; 0x24
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f001 f831 	bl	8003a94 <RCCEx_PLL3_Config>
 8002a32:	4603      	mov	r3, r0
 8002a34:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a36:	e009      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a3c:	e006      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002a3e:	bf00      	nop
 8002a40:	e004      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002a42:	bf00      	nop
 8002a44:	e002      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002a46:	bf00      	nop
 8002a48:	e000      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002a4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a52:	4b5a      	ldr	r3, [pc, #360]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a56:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5e:	4957      	ldr	r1, [pc, #348]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	650b      	str	r3, [r1, #80]	; 0x50
 8002a64:	e001      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a66:	7dfb      	ldrb	r3, [r7, #23]
 8002a68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d044      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a80:	d01b      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a86:	d805      	bhi.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d022      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002a8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a90:	d00a      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002a92:	e01b      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a98:	d01d      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002a9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a9e:	d01c      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002aa0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002aa4:	d01b      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002aa6:	e011      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3304      	adds	r3, #4
 8002aac:	2101      	movs	r1, #1
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 ff3e 	bl	8003930 <RCCEx_PLL2_Config>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ab8:	e012      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3324      	adds	r3, #36	; 0x24
 8002abe:	2101      	movs	r1, #1
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 ffe7 	bl	8003a94 <RCCEx_PLL3_Config>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002aca:	e009      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	75fb      	strb	r3, [r7, #23]
      break;
 8002ad0:	e006      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e004      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e002      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002ada:	bf00      	nop
 8002adc:	e000      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002ade:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ae0:	7dfb      	ldrb	r3, [r7, #23]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ae6:	4b35      	ldr	r3, [pc, #212]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002af4:	4931      	ldr	r1, [pc, #196]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	658b      	str	r3, [r1, #88]	; 0x58
 8002afa:	e001      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002afc:	7dfb      	ldrb	r3, [r7, #23]
 8002afe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d02d      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b14:	d005      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b1a:	d009      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d013      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002b20:	e00f      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b22:	4b26      	ldr	r3, [pc, #152]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	4a25      	ldr	r2, [pc, #148]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002b2e:	e00c      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3304      	adds	r3, #4
 8002b34:	2101      	movs	r1, #1
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fefa 	bl	8003930 <RCCEx_PLL2_Config>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002b40:	e003      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	75fb      	strb	r3, [r7, #23]
      break;
 8002b46:	e000      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b4a:	7dfb      	ldrb	r3, [r7, #23]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d109      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b50:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b5c:	4917      	ldr	r1, [pc, #92]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	650b      	str	r3, [r1, #80]	; 0x50
 8002b62:	e001      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d035      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d81b      	bhi.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002b7c:	a201      	add	r2, pc, #4	; (adr r2, 8002b84 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b82:	bf00      	nop
 8002b84:	08002bc1 	.word	0x08002bc1
 8002b88:	08002b95 	.word	0x08002b95
 8002b8c:	08002ba3 	.word	0x08002ba3
 8002b90:	08002bc1 	.word	0x08002bc1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	4a08      	ldr	r2, [pc, #32]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002ba0:	e00f      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fec1 	bl	8003930 <RCCEx_PLL2_Config>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002bb2:	e006      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8002bb8:	e003      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002bba:	bf00      	nop
 8002bbc:	58024400 	.word	0x58024400
      break;
 8002bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bc2:	7dfb      	ldrb	r3, [r7, #23]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d109      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002bc8:	4bba      	ldr	r3, [pc, #744]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bcc:	f023 0203 	bic.w	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	49b7      	ldr	r1, [pc, #732]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002bda:	e001      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
 8002bde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8086 	beq.w	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bee:	4bb2      	ldr	r3, [pc, #712]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4ab1      	ldr	r2, [pc, #708]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bfa:	f7fe fa35 	bl	8001068 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c00:	e009      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c02:	f7fe fa31 	bl	8001068 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b64      	cmp	r3, #100	; 0x64
 8002c0e:	d902      	bls.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	75fb      	strb	r3, [r7, #23]
        break;
 8002c14:	e005      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c16:	4ba8      	ldr	r3, [pc, #672]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0ef      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d166      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002c28:	4ba2      	ldr	r3, [pc, #648]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c32:	4053      	eors	r3, r2
 8002c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d013      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c3c:	4b9d      	ldr	r3, [pc, #628]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c44:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c46:	4b9b      	ldr	r3, [pc, #620]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4a:	4a9a      	ldr	r2, [pc, #616]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c50:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c52:	4b98      	ldr	r3, [pc, #608]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	4a97      	ldr	r2, [pc, #604]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002c5e:	4a95      	ldr	r2, [pc, #596]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c6e:	d115      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fe f9fa 	bl	8001068 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c76:	e00b      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c78:	f7fe f9f6 	bl	8001068 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d902      	bls.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	75fb      	strb	r3, [r7, #23]
            break;
 8002c8e:	e005      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c90:	4b88      	ldr	r3, [pc, #544]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ed      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002c9c:	7dfb      	ldrb	r3, [r7, #23]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d126      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ca8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cb0:	d10d      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002cb2:	4b80      	ldr	r3, [pc, #512]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cc0:	0919      	lsrs	r1, r3, #4
 8002cc2:	4b7e      	ldr	r3, [pc, #504]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002cc4:	400b      	ands	r3, r1
 8002cc6:	497b      	ldr	r1, [pc, #492]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	610b      	str	r3, [r1, #16]
 8002ccc:	e005      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002cce:	4b79      	ldr	r3, [pc, #484]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	4a78      	ldr	r2, [pc, #480]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cd4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002cd8:	6113      	str	r3, [r2, #16]
 8002cda:	4b76      	ldr	r3, [pc, #472]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cdc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce8:	4972      	ldr	r1, [pc, #456]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	670b      	str	r3, [r1, #112]	; 0x70
 8002cee:	e004      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	75bb      	strb	r3, [r7, #22]
 8002cf4:	e001      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf6:	7dfb      	ldrb	r3, [r7, #23]
 8002cf8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d07d      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d0a:	2b28      	cmp	r3, #40	; 0x28
 8002d0c:	d866      	bhi.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002d0e:	a201      	add	r2, pc, #4	; (adr r2, 8002d14 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d14:	08002de3 	.word	0x08002de3
 8002d18:	08002ddd 	.word	0x08002ddd
 8002d1c:	08002ddd 	.word	0x08002ddd
 8002d20:	08002ddd 	.word	0x08002ddd
 8002d24:	08002ddd 	.word	0x08002ddd
 8002d28:	08002ddd 	.word	0x08002ddd
 8002d2c:	08002ddd 	.word	0x08002ddd
 8002d30:	08002ddd 	.word	0x08002ddd
 8002d34:	08002db9 	.word	0x08002db9
 8002d38:	08002ddd 	.word	0x08002ddd
 8002d3c:	08002ddd 	.word	0x08002ddd
 8002d40:	08002ddd 	.word	0x08002ddd
 8002d44:	08002ddd 	.word	0x08002ddd
 8002d48:	08002ddd 	.word	0x08002ddd
 8002d4c:	08002ddd 	.word	0x08002ddd
 8002d50:	08002ddd 	.word	0x08002ddd
 8002d54:	08002dcb 	.word	0x08002dcb
 8002d58:	08002ddd 	.word	0x08002ddd
 8002d5c:	08002ddd 	.word	0x08002ddd
 8002d60:	08002ddd 	.word	0x08002ddd
 8002d64:	08002ddd 	.word	0x08002ddd
 8002d68:	08002ddd 	.word	0x08002ddd
 8002d6c:	08002ddd 	.word	0x08002ddd
 8002d70:	08002ddd 	.word	0x08002ddd
 8002d74:	08002de3 	.word	0x08002de3
 8002d78:	08002ddd 	.word	0x08002ddd
 8002d7c:	08002ddd 	.word	0x08002ddd
 8002d80:	08002ddd 	.word	0x08002ddd
 8002d84:	08002ddd 	.word	0x08002ddd
 8002d88:	08002ddd 	.word	0x08002ddd
 8002d8c:	08002ddd 	.word	0x08002ddd
 8002d90:	08002ddd 	.word	0x08002ddd
 8002d94:	08002de3 	.word	0x08002de3
 8002d98:	08002ddd 	.word	0x08002ddd
 8002d9c:	08002ddd 	.word	0x08002ddd
 8002da0:	08002ddd 	.word	0x08002ddd
 8002da4:	08002ddd 	.word	0x08002ddd
 8002da8:	08002ddd 	.word	0x08002ddd
 8002dac:	08002ddd 	.word	0x08002ddd
 8002db0:	08002ddd 	.word	0x08002ddd
 8002db4:	08002de3 	.word	0x08002de3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3304      	adds	r3, #4
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fdb6 	bl	8003930 <RCCEx_PLL2_Config>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002dc8:	e00c      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3324      	adds	r3, #36	; 0x24
 8002dce:	2101      	movs	r1, #1
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fe5f 	bl	8003a94 <RCCEx_PLL3_Config>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002dda:	e003      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	75fb      	strb	r3, [r7, #23]
      break;
 8002de0:	e000      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8002de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002de4:	7dfb      	ldrb	r3, [r7, #23]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002dea:	4b32      	ldr	r3, [pc, #200]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002df6:	492f      	ldr	r1, [pc, #188]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	654b      	str	r3, [r1, #84]	; 0x54
 8002dfc:	e001      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
 8002e00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d037      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e12:	2b05      	cmp	r3, #5
 8002e14:	d820      	bhi.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002e16:	a201      	add	r2, pc, #4	; (adr r2, 8002e1c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1c:	08002e5f 	.word	0x08002e5f
 8002e20:	08002e35 	.word	0x08002e35
 8002e24:	08002e47 	.word	0x08002e47
 8002e28:	08002e5f 	.word	0x08002e5f
 8002e2c:	08002e5f 	.word	0x08002e5f
 8002e30:	08002e5f 	.word	0x08002e5f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3304      	adds	r3, #4
 8002e38:	2101      	movs	r1, #1
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fd78 	bl	8003930 <RCCEx_PLL2_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002e44:	e00c      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3324      	adds	r3, #36	; 0x24
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fe21 	bl	8003a94 <RCCEx_PLL3_Config>
 8002e52:	4603      	mov	r3, r0
 8002e54:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002e56:	e003      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e5c:	e000      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e60:	7dfb      	ldrb	r3, [r7, #23]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d109      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	f023 0207 	bic.w	r2, r3, #7
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e72:	4910      	ldr	r1, [pc, #64]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	654b      	str	r3, [r1, #84]	; 0x54
 8002e78:	e001      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d040      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	d827      	bhi.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002e94:	a201      	add	r2, pc, #4	; (adr r2, 8002e9c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9a:	bf00      	nop
 8002e9c:	08002eeb 	.word	0x08002eeb
 8002ea0:	08002ec1 	.word	0x08002ec1
 8002ea4:	08002ed3 	.word	0x08002ed3
 8002ea8:	08002eeb 	.word	0x08002eeb
 8002eac:	08002eeb 	.word	0x08002eeb
 8002eb0:	08002eeb 	.word	0x08002eeb
 8002eb4:	58024400 	.word	0x58024400
 8002eb8:	58024800 	.word	0x58024800
 8002ebc:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fd32 	bl	8003930 <RCCEx_PLL2_Config>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002ed0:	e00c      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3324      	adds	r3, #36	; 0x24
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fddb 	bl	8003a94 <RCCEx_PLL3_Config>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002ee2:	e003      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee8:	e000      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8002eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10a      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ef2:	4bb2      	ldr	r3, [pc, #712]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	f023 0207 	bic.w	r2, r3, #7
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	49ae      	ldr	r1, [pc, #696]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	658b      	str	r3, [r1, #88]	; 0x58
 8002f06:	e001      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d044      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f22:	d01b      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f28:	d805      	bhi.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d022      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002f34:	e01b      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3a:	d01d      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8002f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f40:	d01c      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002f42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f46:	d01b      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002f48:	e011      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fced 	bl	8003930 <RCCEx_PLL2_Config>
 8002f56:	4603      	mov	r3, r0
 8002f58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002f5a:	e012      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3324      	adds	r3, #36	; 0x24
 8002f60:	2102      	movs	r1, #2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fd96 	bl	8003a94 <RCCEx_PLL3_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002f6c:	e009      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	75fb      	strb	r3, [r7, #23]
      break;
 8002f72:	e006      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002f74:	bf00      	nop
 8002f76:	e004      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002f78:	bf00      	nop
 8002f7a:	e002      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002f7c:	bf00      	nop
 8002f7e:	e000      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f82:	7dfb      	ldrb	r3, [r7, #23]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f88:	4b8c      	ldr	r3, [pc, #560]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f96:	4989      	ldr	r1, [pc, #548]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	654b      	str	r3, [r1, #84]	; 0x54
 8002f9c:	e001      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f9e:	7dfb      	ldrb	r3, [r7, #23]
 8002fa0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d044      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fb8:	d01b      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8002fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fbe:	d805      	bhi.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d022      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8002fca:	e01b      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8002fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd0:	d01d      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002fd2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002fd6:	d01c      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8002fd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fdc:	d01b      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8002fde:	e011      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fca2 	bl	8003930 <RCCEx_PLL2_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002ff0:	e012      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3324      	adds	r3, #36	; 0x24
 8002ff6:	2102      	movs	r1, #2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fd4b 	bl	8003a94 <RCCEx_PLL3_Config>
 8002ffe:	4603      	mov	r3, r0
 8003000:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003002:	e009      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	75fb      	strb	r3, [r7, #23]
      break;
 8003008:	e006      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800300a:	bf00      	nop
 800300c:	e004      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800300e:	bf00      	nop
 8003010:	e002      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003012:	bf00      	nop
 8003014:	e000      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003018:	7dfb      	ldrb	r3, [r7, #23]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10a      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800301e:	4b67      	ldr	r3, [pc, #412]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003022:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800302c:	4963      	ldr	r1, [pc, #396]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800302e:	4313      	orrs	r3, r2
 8003030:	658b      	str	r3, [r1, #88]	; 0x58
 8003032:	e001      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003034:	7dfb      	ldrb	r3, [r7, #23]
 8003036:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003040:	2b00      	cmp	r3, #0
 8003042:	d044      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800304a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800304e:	d01b      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8003050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003054:	d805      	bhi.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8003056:	2b00      	cmp	r3, #0
 8003058:	d022      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800305a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800305e:	d00a      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003060:	e01b      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8003062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003066:	d01d      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003068:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800306c:	d01c      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800306e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003072:	d01b      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003074:	e011      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3304      	adds	r3, #4
 800307a:	2100      	movs	r1, #0
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fc57 	bl	8003930 <RCCEx_PLL2_Config>
 8003082:	4603      	mov	r3, r0
 8003084:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003086:	e012      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3324      	adds	r3, #36	; 0x24
 800308c:	2102      	movs	r1, #2
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fd00 	bl	8003a94 <RCCEx_PLL3_Config>
 8003094:	4603      	mov	r3, r0
 8003096:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003098:	e009      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	75fb      	strb	r3, [r7, #23]
      break;
 800309e:	e006      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80030a0:	bf00      	nop
 80030a2:	e004      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80030a4:	bf00      	nop
 80030a6:	e002      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80030a8:	bf00      	nop
 80030aa:	e000      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80030ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10a      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80030b4:	4b41      	ldr	r3, [pc, #260]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030c2:	493e      	ldr	r1, [pc, #248]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	658b      	str	r3, [r1, #88]	; 0x58
 80030c8:	e001      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ca:	7dfb      	ldrb	r3, [r7, #23]
 80030cc:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01a      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e4:	d10a      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3324      	adds	r3, #36	; 0x24
 80030ea:	2102      	movs	r1, #2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fcd1 	bl	8003a94 <RCCEx_PLL3_Config>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80030fc:	4b2f      	ldr	r3, [pc, #188]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80030fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003100:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800310a:	492c      	ldr	r1, [pc, #176]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800310c:	4313      	orrs	r3, r2
 800310e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003126:	d10a      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3324      	adds	r3, #36	; 0x24
 800312c:	2102      	movs	r1, #2
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fcb0 	bl	8003a94 <RCCEx_PLL3_Config>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800313e:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003142:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314c:	491b      	ldr	r1, [pc, #108]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800314e:	4313      	orrs	r3, r2
 8003150:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d032      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003168:	d00d      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800316a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800316e:	d016      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8003170:	2b00      	cmp	r3, #0
 8003172:	d111      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fbd8 	bl	8003930 <RCCEx_PLL2_Config>
 8003180:	4603      	mov	r3, r0
 8003182:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003184:	e00c      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3324      	adds	r3, #36	; 0x24
 800318a:	2102      	movs	r1, #2
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fc81 	bl	8003a94 <RCCEx_PLL3_Config>
 8003192:	4603      	mov	r3, r0
 8003194:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003196:	e003      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	75fb      	strb	r3, [r7, #23]
      break;
 800319c:	e000      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800319e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031a6:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80031a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031b4:	4901      	ldr	r1, [pc, #4]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	658b      	str	r3, [r1, #88]	; 0x58
 80031ba:	e003      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80031bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
 80031c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d02f      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031da:	d00c      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80031dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031e0:	d015      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80031e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031e6:	d10f      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031e8:	4b79      	ldr	r3, [pc, #484]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	4a78      	ldr	r2, [pc, #480]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80031ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80031f4:	e00c      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3324      	adds	r3, #36	; 0x24
 80031fa:	2101      	movs	r1, #1
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fc49 	bl	8003a94 <RCCEx_PLL3_Config>
 8003202:	4603      	mov	r3, r0
 8003204:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003206:	e003      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	75fb      	strb	r3, [r7, #23]
      break;
 800320c:	e000      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800320e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003210:	7dfb      	ldrb	r3, [r7, #23]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10a      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003216:	4b6e      	ldr	r3, [pc, #440]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003224:	496a      	ldr	r1, [pc, #424]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003226:	4313      	orrs	r3, r2
 8003228:	654b      	str	r3, [r1, #84]	; 0x54
 800322a:	e001      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322c:	7dfb      	ldrb	r3, [r7, #23]
 800322e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d029      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003248:	d007      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800324a:	e00f      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800324c:	4b60      	ldr	r3, [pc, #384]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	4a5f      	ldr	r2, [pc, #380]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003256:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003258:	e00b      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3304      	adds	r3, #4
 800325e:	2102      	movs	r1, #2
 8003260:	4618      	mov	r0, r3
 8003262:	f000 fb65 	bl	8003930 <RCCEx_PLL2_Config>
 8003266:	4603      	mov	r3, r0
 8003268:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800326a:	e002      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	75fb      	strb	r3, [r7, #23]
      break;
 8003270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003272:	7dfb      	ldrb	r3, [r7, #23]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d109      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003278:	4b55      	ldr	r3, [pc, #340]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800327a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003284:	4952      	ldr	r1, [pc, #328]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003286:	4313      	orrs	r3, r2
 8003288:	64cb      	str	r3, [r1, #76]	; 0x4c
 800328a:	e001      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3324      	adds	r3, #36	; 0x24
 80032a0:	2102      	movs	r1, #2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fbf6 	bl	8003a94 <RCCEx_PLL3_Config>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d02f      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c6:	d00c      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80032c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032cc:	d802      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d011      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80032d2:	e00d      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80032d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d8:	d00f      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80032da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032de:	d00e      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80032e0:	e006      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032e2:	4b3b      	ldr	r3, [pc, #236]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	4a3a      	ldr	r2, [pc, #232]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80032e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80032ee:	e007      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	75fb      	strb	r3, [r7, #23]
      break;
 80032f4:	e004      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80032f6:	bf00      	nop
 80032f8:	e002      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80032fa:	bf00      	nop
 80032fc:	e000      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80032fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003300:	7dfb      	ldrb	r3, [r7, #23]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d109      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003306:	4b32      	ldr	r3, [pc, #200]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003312:	492f      	ldr	r1, [pc, #188]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003314:	4313      	orrs	r3, r2
 8003316:	654b      	str	r3, [r1, #84]	; 0x54
 8003318:	e001      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331a:	7dfb      	ldrb	r3, [r7, #23]
 800331c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d008      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800332a:	4b29      	ldr	r3, [pc, #164]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800332c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	4926      	ldr	r1, [pc, #152]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003338:	4313      	orrs	r3, r2
 800333a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d009      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003348:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003356:	491e      	ldr	r1, [pc, #120]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003358:	4313      	orrs	r3, r2
 800335a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003368:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800336a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800336c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003374:	4916      	ldr	r1, [pc, #88]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003376:	4313      	orrs	r3, r2
 8003378:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00d      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003386:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	4a11      	ldr	r2, [pc, #68]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800338c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003390:	6113      	str	r3, [r2, #16]
 8003392:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800339c:	490c      	ldr	r1, [pc, #48]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	da08      	bge.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80033aa:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b6:	4906      	ldr	r1, [pc, #24]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80033bc:	7dbb      	ldrb	r3, [r7, #22]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	e000      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	58024400 	.word	0x58024400

080033d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80033d8:	f7ff f8b2 	bl	8002540 <HAL_RCC_GetHCLKFreq>
 80033dc:	4601      	mov	r1, r0
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	4a04      	ldr	r2, [pc, #16]	; (80033fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80033ea:	5cd3      	ldrb	r3, [r2, r3]
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	58024400 	.word	0x58024400
 80033fc:	08006230 	.word	0x08006230

08003400 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	; 0x24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003408:	4b9d      	ldr	r3, [pc, #628]	; (8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003412:	4b9b      	ldr	r3, [pc, #620]	; (8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	0b1b      	lsrs	r3, r3, #12
 8003418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800341c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800341e:	4b98      	ldr	r3, [pc, #608]	; (8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800342a:	4b95      	ldr	r3, [pc, #596]	; (8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	08db      	lsrs	r3, r3, #3
 8003430:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	fb02 f303 	mul.w	r3, r2, r3
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003442:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 810a 	beq.w	8003662 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d05a      	beq.n	800350a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8003454:	2b01      	cmp	r3, #1
 8003456:	d302      	bcc.n	800345e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8003458:	2b02      	cmp	r3, #2
 800345a:	d078      	beq.n	800354e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800345c:	e099      	b.n	8003592 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800345e:	4b88      	ldr	r3, [pc, #544]	; (8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	d02d      	beq.n	80034c6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800346a:	4b85      	ldr	r3, [pc, #532]	; (8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	08db      	lsrs	r3, r3, #3
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	4a83      	ldr	r2, [pc, #524]	; (8003684 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8003476:	fa22 f303 	lsr.w	r3, r2, r3
 800347a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	ee07 3a90 	vmov	s15, r3
 800348c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003494:	4b7a      	ldr	r3, [pc, #488]	; (8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349c:	ee07 3a90 	vmov	s15, r3
 80034a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80034a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80034ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80034c4:	e087      	b.n	80035d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	ee07 3a90 	vmov	s15, r3
 80034cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800368c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80034d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034d8:	4b69      	ldr	r3, [pc, #420]	; (8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e0:	ee07 3a90 	vmov	s15, r3
 80034e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80034ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80034f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003504:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003508:	e065      	b.n	80035d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	ee07 3a90 	vmov	s15, r3
 8003510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003514:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800351c:	4b58      	ldr	r3, [pc, #352]	; (8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003524:	ee07 3a90 	vmov	s15, r3
 8003528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800352c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003530:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800353c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003548:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800354c:	e043      	b.n	80035d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	ee07 3a90 	vmov	s15, r3
 8003554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003558:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003694 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800355c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003560:	4b47      	ldr	r3, [pc, #284]	; (8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003568:	ee07 3a90 	vmov	s15, r3
 800356c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003570:	ed97 6a03 	vldr	s12, [r7, #12]
 8003574:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800357c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003590:	e021      	b.n	80035d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	ee07 3a90 	vmov	s15, r3
 8003598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80035a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035a4:	4b36      	ldr	r3, [pc, #216]	; (8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ac:	ee07 3a90 	vmov	s15, r3
 80035b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80035b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80035bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035d4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80035d6:	4b2a      	ldr	r3, [pc, #168]	; (8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	0a5b      	lsrs	r3, r3, #9
 80035dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80035f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035fc:	ee17 2a90 	vmov	r2, s15
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003604:	4b1e      	ldr	r3, [pc, #120]	; (8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	0c1b      	lsrs	r3, r3, #16
 800360a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800360e:	ee07 3a90 	vmov	s15, r3
 8003612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800361a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800361e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800362a:	ee17 2a90 	vmov	r2, s15
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003632:	4b13      	ldr	r3, [pc, #76]	; (8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	0e1b      	lsrs	r3, r3, #24
 8003638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800363c:	ee07 3a90 	vmov	s15, r3
 8003640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003648:	ee37 7a87 	vadd.f32	s14, s15, s14
 800364c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003658:	ee17 2a90 	vmov	r2, s15
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003660:	e008      	b.n	8003674 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	609a      	str	r2, [r3, #8]
}
 8003674:	bf00      	nop
 8003676:	3724      	adds	r7, #36	; 0x24
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	58024400 	.word	0x58024400
 8003684:	03d09000 	.word	0x03d09000
 8003688:	46000000 	.word	0x46000000
 800368c:	4c742400 	.word	0x4c742400
 8003690:	4a742400 	.word	0x4a742400
 8003694:	4bbebc20 	.word	0x4bbebc20

08003698 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003698:	b480      	push	{r7}
 800369a:	b089      	sub	sp, #36	; 0x24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036a0:	4b9d      	ldr	r3, [pc, #628]	; (8003918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80036aa:	4b9b      	ldr	r3, [pc, #620]	; (8003918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	0d1b      	lsrs	r3, r3, #20
 80036b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80036b6:	4b98      	ldr	r3, [pc, #608]	; (8003918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80036b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ba:	0a1b      	lsrs	r3, r3, #8
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80036c2:	4b95      	ldr	r3, [pc, #596]	; (8003918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	08db      	lsrs	r3, r3, #3
 80036c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	ee07 3a90 	vmov	s15, r3
 80036d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 810a 	beq.w	80038fa <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d05a      	beq.n	80037a2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d302      	bcc.n	80036f6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d078      	beq.n	80037e6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80036f4:	e099      	b.n	800382a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036f6:	4b88      	ldr	r3, [pc, #544]	; (8003918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d02d      	beq.n	800375e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003702:	4b85      	ldr	r3, [pc, #532]	; (8003918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	08db      	lsrs	r3, r3, #3
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	4a83      	ldr	r2, [pc, #524]	; (800391c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800370e:	fa22 f303 	lsr.w	r3, r2, r3
 8003712:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	ee07 3a90 	vmov	s15, r3
 800371a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	ee07 3a90 	vmov	s15, r3
 8003724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003728:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800372c:	4b7a      	ldr	r3, [pc, #488]	; (8003918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003734:	ee07 3a90 	vmov	s15, r3
 8003738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800373c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003740:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003744:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003748:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800374c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003750:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003758:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800375c:	e087      	b.n	800386e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	ee07 3a90 	vmov	s15, r3
 8003764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003768:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003924 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800376c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003770:	4b69      	ldr	r3, [pc, #420]	; (8003918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003778:	ee07 3a90 	vmov	s15, r3
 800377c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003780:	ed97 6a03 	vldr	s12, [r7, #12]
 8003784:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003788:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800378c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003790:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003794:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037a0:	e065      	b.n	800386e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	ee07 3a90 	vmov	s15, r3
 80037a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80037b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037b4:	4b58      	ldr	r3, [pc, #352]	; (8003918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037bc:	ee07 3a90 	vmov	s15, r3
 80037c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80037c8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80037cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037e4:	e043      	b.n	800386e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	ee07 3a90 	vmov	s15, r3
 80037ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800392c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80037f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037f8:	4b47      	ldr	r3, [pc, #284]	; (8003918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003800:	ee07 3a90 	vmov	s15, r3
 8003804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003808:	ed97 6a03 	vldr	s12, [r7, #12]
 800380c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003810:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003818:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800381c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003824:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003828:	e021      	b.n	800386e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	ee07 3a90 	vmov	s15, r3
 8003830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003834:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800383c:	4b36      	ldr	r3, [pc, #216]	; (8003918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003844:	ee07 3a90 	vmov	s15, r3
 8003848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800384c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003850:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003854:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003858:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800385c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003868:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800386c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800386e:	4b2a      	ldr	r3, [pc, #168]	; (8003918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	0a5b      	lsrs	r3, r3, #9
 8003874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003878:	ee07 3a90 	vmov	s15, r3
 800387c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003880:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003884:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003888:	edd7 6a07 	vldr	s13, [r7, #28]
 800388c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003894:	ee17 2a90 	vmov	r2, s15
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800389c:	4b1e      	ldr	r3, [pc, #120]	; (8003918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	0c1b      	lsrs	r3, r3, #16
 80038a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038a6:	ee07 3a90 	vmov	s15, r3
 80038aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80038ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038c2:	ee17 2a90 	vmov	r2, s15
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80038ca:	4b13      	ldr	r3, [pc, #76]	; (8003918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	0e1b      	lsrs	r3, r3, #24
 80038d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038d4:	ee07 3a90 	vmov	s15, r3
 80038d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80038e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038f0:	ee17 2a90 	vmov	r2, s15
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80038f8:	e008      	b.n	800390c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	609a      	str	r2, [r3, #8]
}
 800390c:	bf00      	nop
 800390e:	3724      	adds	r7, #36	; 0x24
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	58024400 	.word	0x58024400
 800391c:	03d09000 	.word	0x03d09000
 8003920:	46000000 	.word	0x46000000
 8003924:	4c742400 	.word	0x4c742400
 8003928:	4a742400 	.word	0x4a742400
 800392c:	4bbebc20 	.word	0x4bbebc20

08003930 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800393e:	4b53      	ldr	r3, [pc, #332]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 8003940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	2b03      	cmp	r3, #3
 8003948:	d101      	bne.n	800394e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e099      	b.n	8003a82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800394e:	4b4f      	ldr	r3, [pc, #316]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a4e      	ldr	r2, [pc, #312]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 8003954:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800395a:	f7fd fb85 	bl	8001068 <HAL_GetTick>
 800395e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003960:	e008      	b.n	8003974 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003962:	f7fd fb81 	bl	8001068 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e086      	b.n	8003a82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003974:	4b45      	ldr	r3, [pc, #276]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f0      	bne.n	8003962 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003980:	4b42      	ldr	r3, [pc, #264]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 8003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003984:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	031b      	lsls	r3, r3, #12
 800398e:	493f      	ldr	r1, [pc, #252]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 8003990:	4313      	orrs	r3, r2
 8003992:	628b      	str	r3, [r1, #40]	; 0x28
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	3b01      	subs	r3, #1
 800399a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	025b      	lsls	r3, r3, #9
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	041b      	lsls	r3, r3, #16
 80039b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	3b01      	subs	r3, #1
 80039be:	061b      	lsls	r3, r3, #24
 80039c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039c4:	4931      	ldr	r1, [pc, #196]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80039ca:	4b30      	ldr	r3, [pc, #192]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	492d      	ldr	r1, [pc, #180]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80039dc:	4b2b      	ldr	r3, [pc, #172]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	f023 0220 	bic.w	r2, r3, #32
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	4928      	ldr	r1, [pc, #160]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80039ee:	4b27      	ldr	r3, [pc, #156]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	4a26      	ldr	r2, [pc, #152]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 80039f4:	f023 0310 	bic.w	r3, r3, #16
 80039f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80039fa:	4b24      	ldr	r3, [pc, #144]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 80039fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039fe:	4b24      	ldr	r3, [pc, #144]	; (8003a90 <RCCEx_PLL2_Config+0x160>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	69d2      	ldr	r2, [r2, #28]
 8003a06:	00d2      	lsls	r2, r2, #3
 8003a08:	4920      	ldr	r1, [pc, #128]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003a0e:	4b1f      	ldr	r3, [pc, #124]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	4a1e      	ldr	r2, [pc, #120]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 8003a14:	f043 0310 	orr.w	r3, r3, #16
 8003a18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d106      	bne.n	8003a2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003a20:	4b1a      	ldr	r3, [pc, #104]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 8003a26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a2c:	e00f      	b.n	8003a4e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d106      	bne.n	8003a42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003a34:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 8003a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a40:	e005      	b.n	8003a4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003a42:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	4a11      	ldr	r2, [pc, #68]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 8003a48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003a4e:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a0e      	ldr	r2, [pc, #56]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 8003a54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a5a:	f7fd fb05 	bl	8001068 <HAL_GetTick>
 8003a5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a60:	e008      	b.n	8003a74 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a62:	f7fd fb01 	bl	8001068 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e006      	b.n	8003a82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a74:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <RCCEx_PLL2_Config+0x15c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	58024400 	.word	0x58024400
 8003a90:	ffff0007 	.word	0xffff0007

08003a94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003aa2:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d101      	bne.n	8003ab2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e099      	b.n	8003be6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003ab2:	4b4f      	ldr	r3, [pc, #316]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a4e      	ldr	r2, [pc, #312]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003abc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003abe:	f7fd fad3 	bl	8001068 <HAL_GetTick>
 8003ac2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ac4:	e008      	b.n	8003ad8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003ac6:	f7fd facf 	bl	8001068 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e086      	b.n	8003be6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ad8:	4b45      	ldr	r3, [pc, #276]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1f0      	bne.n	8003ac6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ae4:	4b42      	ldr	r3, [pc, #264]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	051b      	lsls	r3, r3, #20
 8003af2:	493f      	ldr	r1, [pc, #252]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	628b      	str	r3, [r1, #40]	; 0x28
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	3b01      	subs	r3, #1
 8003afe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	025b      	lsls	r3, r3, #9
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	041b      	lsls	r3, r3, #16
 8003b16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	3b01      	subs	r3, #1
 8003b22:	061b      	lsls	r3, r3, #24
 8003b24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b28:	4931      	ldr	r1, [pc, #196]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003b2e:	4b30      	ldr	r3, [pc, #192]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	492d      	ldr	r1, [pc, #180]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003b40:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	4928      	ldr	r1, [pc, #160]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003b52:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	4a26      	ldr	r2, [pc, #152]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003b5e:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b62:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <RCCEx_PLL3_Config+0x160>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	69d2      	ldr	r2, [r2, #28]
 8003b6a:	00d2      	lsls	r2, r2, #3
 8003b6c:	4920      	ldr	r1, [pc, #128]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003b72:	4b1f      	ldr	r3, [pc, #124]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	4a1e      	ldr	r2, [pc, #120]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d106      	bne.n	8003b92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003b84:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	4a19      	ldr	r2, [pc, #100]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003b8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b90:	e00f      	b.n	8003bb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d106      	bne.n	8003ba6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003b98:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	4a14      	ldr	r2, [pc, #80]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003b9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ba2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ba4:	e005      	b.n	8003bb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003ba6:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	4a11      	ldr	r2, [pc, #68]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003bac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003bb2:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a0e      	ldr	r2, [pc, #56]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bbe:	f7fd fa53 	bl	8001068 <HAL_GetTick>
 8003bc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003bc4:	e008      	b.n	8003bd8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003bc6:	f7fd fa4f 	bl	8001068 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e006      	b.n	8003be6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <RCCEx_PLL3_Config+0x15c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	58024400 	.word	0x58024400
 8003bf4:	ffff0007 	.word	0xffff0007

08003bf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e042      	b.n	8003c90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d106      	bne.n	8003c22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7fd f85b 	bl	8000cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2224      	movs	r2, #36	; 0x24
 8003c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f992 	bl	8003f64 <UART_SetConfig>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e022      	b.n	8003c90 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 ff36 	bl	8004ac4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 ffbd 	bl	8004c08 <UART_CheckIdleState>
 8003c8e:	4603      	mov	r3, r0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	f040 8083 	bne.w	8003dba <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <HAL_UART_Transmit+0x28>
 8003cba:	88fb      	ldrh	r3, [r7, #6]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e07b      	b.n	8003dbc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_UART_Transmit+0x3a>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e074      	b.n	8003dbc <HAL_UART_Transmit+0x124>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2221      	movs	r2, #33	; 0x21
 8003ce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003cea:	f7fd f9bd 	bl	8001068 <HAL_GetTick>
 8003cee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	88fa      	ldrh	r2, [r7, #6]
 8003cf4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	88fa      	ldrh	r2, [r7, #6]
 8003cfc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d08:	d108      	bne.n	8003d1c <HAL_UART_Transmit+0x84>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d104      	bne.n	8003d1c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	e003      	b.n	8003d24 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8003d2c:	e02c      	b.n	8003d88 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2200      	movs	r2, #0
 8003d36:	2180      	movs	r1, #128	; 0x80
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 ffad 	bl	8004c98 <UART_WaitOnFlagUntilTimeout>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e039      	b.n	8003dbc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10b      	bne.n	8003d66 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	3302      	adds	r3, #2
 8003d62:	61bb      	str	r3, [r7, #24]
 8003d64:	e007      	b.n	8003d76 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	781a      	ldrb	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	3301      	adds	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1cc      	bne.n	8003d2e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2140      	movs	r1, #64	; 0x40
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 ff7a 	bl	8004c98 <UART_WaitOnFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e006      	b.n	8003dbc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	e000      	b.n	8003dbc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003dba:	2302      	movs	r3, #2
  }
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3720      	adds	r7, #32
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08a      	sub	sp, #40	; 0x28
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	f040 80bd 	bne.w	8003f5a <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_UART_Receive+0x28>
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0b5      	b.n	8003f5c <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_UART_Receive+0x3a>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e0ae      	b.n	8003f5c <HAL_UART_Receive+0x198>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2222      	movs	r2, #34	; 0x22
 8003e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003e16:	f7fd f927 	bl	8001068 <HAL_GetTick>
 8003e1a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	88fa      	ldrh	r2, [r7, #6]
 8003e20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	88fa      	ldrh	r2, [r7, #6]
 8003e28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e34:	d10e      	bne.n	8003e54 <HAL_UART_Receive+0x90>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d105      	bne.n	8003e4a <HAL_UART_Receive+0x86>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e48:	e02d      	b.n	8003ea6 <HAL_UART_Receive+0xe2>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	22ff      	movs	r2, #255	; 0xff
 8003e4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e52:	e028      	b.n	8003ea6 <HAL_UART_Receive+0xe2>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10d      	bne.n	8003e78 <HAL_UART_Receive+0xb4>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <HAL_UART_Receive+0xaa>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	22ff      	movs	r2, #255	; 0xff
 8003e68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e6c:	e01b      	b.n	8003ea6 <HAL_UART_Receive+0xe2>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	227f      	movs	r2, #127	; 0x7f
 8003e72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e76:	e016      	b.n	8003ea6 <HAL_UART_Receive+0xe2>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e80:	d10d      	bne.n	8003e9e <HAL_UART_Receive+0xda>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d104      	bne.n	8003e94 <HAL_UART_Receive+0xd0>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	227f      	movs	r2, #127	; 0x7f
 8003e8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e92:	e008      	b.n	8003ea6 <HAL_UART_Receive+0xe2>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	223f      	movs	r2, #63	; 0x3f
 8003e98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e9c:	e003      	b.n	8003ea6 <HAL_UART_Receive+0xe2>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003eac:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb6:	d108      	bne.n	8003eca <HAL_UART_Receive+0x106>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d104      	bne.n	8003eca <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	61bb      	str	r3, [r7, #24]
 8003ec8:	e003      	b.n	8003ed2 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003eda:	e032      	b.n	8003f42 <HAL_UART_Receive+0x17e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2120      	movs	r1, #32
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 fed6 	bl	8004c98 <UART_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e032      	b.n	8003f5c <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10c      	bne.n	8003f16 <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	8a7b      	ldrh	r3, [r7, #18]
 8003f06:	4013      	ands	r3, r2
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	3302      	adds	r3, #2
 8003f12:	61bb      	str	r3, [r7, #24]
 8003f14:	e00c      	b.n	8003f30 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	8a7b      	ldrh	r3, [r7, #18]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	4013      	ands	r3, r2
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1c6      	bne.n	8003edc <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	e000      	b.n	8003f5c <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8003f5a:	2302      	movs	r3, #2
  }
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3720      	adds	r7, #32
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f64:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003f68:	b08e      	sub	sp, #56	; 0x38
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f92:	4313      	orrs	r3, r2
 8003f94:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	4bc1      	ldr	r3, [pc, #772]	; (80042a4 <UART_SetConfig+0x340>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003fa6:	430b      	orrs	r3, r1
 8003fa8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4ab7      	ldr	r2, [pc, #732]	; (80042a8 <UART_SetConfig+0x344>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d004      	beq.n	8003fda <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	4bb2      	ldr	r3, [pc, #712]	; (80042ac <UART_SetConfig+0x348>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003fea:	430b      	orrs	r3, r1
 8003fec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	f023 010f 	bic.w	r1, r3, #15
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4aa9      	ldr	r2, [pc, #676]	; (80042b0 <UART_SetConfig+0x34c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d177      	bne.n	80040fe <UART_SetConfig+0x19a>
 800400e:	4ba9      	ldr	r3, [pc, #676]	; (80042b4 <UART_SetConfig+0x350>)
 8004010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004016:	2b28      	cmp	r3, #40	; 0x28
 8004018:	d86c      	bhi.n	80040f4 <UART_SetConfig+0x190>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <UART_SetConfig+0xbc>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	080040c5 	.word	0x080040c5
 8004024:	080040f5 	.word	0x080040f5
 8004028:	080040f5 	.word	0x080040f5
 800402c:	080040f5 	.word	0x080040f5
 8004030:	080040f5 	.word	0x080040f5
 8004034:	080040f5 	.word	0x080040f5
 8004038:	080040f5 	.word	0x080040f5
 800403c:	080040f5 	.word	0x080040f5
 8004040:	080040cd 	.word	0x080040cd
 8004044:	080040f5 	.word	0x080040f5
 8004048:	080040f5 	.word	0x080040f5
 800404c:	080040f5 	.word	0x080040f5
 8004050:	080040f5 	.word	0x080040f5
 8004054:	080040f5 	.word	0x080040f5
 8004058:	080040f5 	.word	0x080040f5
 800405c:	080040f5 	.word	0x080040f5
 8004060:	080040d5 	.word	0x080040d5
 8004064:	080040f5 	.word	0x080040f5
 8004068:	080040f5 	.word	0x080040f5
 800406c:	080040f5 	.word	0x080040f5
 8004070:	080040f5 	.word	0x080040f5
 8004074:	080040f5 	.word	0x080040f5
 8004078:	080040f5 	.word	0x080040f5
 800407c:	080040f5 	.word	0x080040f5
 8004080:	080040dd 	.word	0x080040dd
 8004084:	080040f5 	.word	0x080040f5
 8004088:	080040f5 	.word	0x080040f5
 800408c:	080040f5 	.word	0x080040f5
 8004090:	080040f5 	.word	0x080040f5
 8004094:	080040f5 	.word	0x080040f5
 8004098:	080040f5 	.word	0x080040f5
 800409c:	080040f5 	.word	0x080040f5
 80040a0:	080040e5 	.word	0x080040e5
 80040a4:	080040f5 	.word	0x080040f5
 80040a8:	080040f5 	.word	0x080040f5
 80040ac:	080040f5 	.word	0x080040f5
 80040b0:	080040f5 	.word	0x080040f5
 80040b4:	080040f5 	.word	0x080040f5
 80040b8:	080040f5 	.word	0x080040f5
 80040bc:	080040f5 	.word	0x080040f5
 80040c0:	080040ed 	.word	0x080040ed
 80040c4:	2301      	movs	r3, #1
 80040c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ca:	e233      	b.n	8004534 <UART_SetConfig+0x5d0>
 80040cc:	2304      	movs	r3, #4
 80040ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040d2:	e22f      	b.n	8004534 <UART_SetConfig+0x5d0>
 80040d4:	2308      	movs	r3, #8
 80040d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040da:	e22b      	b.n	8004534 <UART_SetConfig+0x5d0>
 80040dc:	2310      	movs	r3, #16
 80040de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040e2:	e227      	b.n	8004534 <UART_SetConfig+0x5d0>
 80040e4:	2320      	movs	r3, #32
 80040e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ea:	e223      	b.n	8004534 <UART_SetConfig+0x5d0>
 80040ec:	2340      	movs	r3, #64	; 0x40
 80040ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040f2:	e21f      	b.n	8004534 <UART_SetConfig+0x5d0>
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040fa:	bf00      	nop
 80040fc:	e21a      	b.n	8004534 <UART_SetConfig+0x5d0>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a6d      	ldr	r2, [pc, #436]	; (80042b8 <UART_SetConfig+0x354>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d132      	bne.n	800416e <UART_SetConfig+0x20a>
 8004108:	4b6a      	ldr	r3, [pc, #424]	; (80042b4 <UART_SetConfig+0x350>)
 800410a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	2b05      	cmp	r3, #5
 8004112:	d827      	bhi.n	8004164 <UART_SetConfig+0x200>
 8004114:	a201      	add	r2, pc, #4	; (adr r2, 800411c <UART_SetConfig+0x1b8>)
 8004116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411a:	bf00      	nop
 800411c:	08004135 	.word	0x08004135
 8004120:	0800413d 	.word	0x0800413d
 8004124:	08004145 	.word	0x08004145
 8004128:	0800414d 	.word	0x0800414d
 800412c:	08004155 	.word	0x08004155
 8004130:	0800415d 	.word	0x0800415d
 8004134:	2300      	movs	r3, #0
 8004136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800413a:	e1fb      	b.n	8004534 <UART_SetConfig+0x5d0>
 800413c:	2304      	movs	r3, #4
 800413e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004142:	e1f7      	b.n	8004534 <UART_SetConfig+0x5d0>
 8004144:	2308      	movs	r3, #8
 8004146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800414a:	e1f3      	b.n	8004534 <UART_SetConfig+0x5d0>
 800414c:	2310      	movs	r3, #16
 800414e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004152:	e1ef      	b.n	8004534 <UART_SetConfig+0x5d0>
 8004154:	2320      	movs	r3, #32
 8004156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800415a:	e1eb      	b.n	8004534 <UART_SetConfig+0x5d0>
 800415c:	2340      	movs	r3, #64	; 0x40
 800415e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004162:	e1e7      	b.n	8004534 <UART_SetConfig+0x5d0>
 8004164:	2380      	movs	r3, #128	; 0x80
 8004166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800416a:	bf00      	nop
 800416c:	e1e2      	b.n	8004534 <UART_SetConfig+0x5d0>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a52      	ldr	r2, [pc, #328]	; (80042bc <UART_SetConfig+0x358>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d132      	bne.n	80041de <UART_SetConfig+0x27a>
 8004178:	4b4e      	ldr	r3, [pc, #312]	; (80042b4 <UART_SetConfig+0x350>)
 800417a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	2b05      	cmp	r3, #5
 8004182:	d827      	bhi.n	80041d4 <UART_SetConfig+0x270>
 8004184:	a201      	add	r2, pc, #4	; (adr r2, 800418c <UART_SetConfig+0x228>)
 8004186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418a:	bf00      	nop
 800418c:	080041a5 	.word	0x080041a5
 8004190:	080041ad 	.word	0x080041ad
 8004194:	080041b5 	.word	0x080041b5
 8004198:	080041bd 	.word	0x080041bd
 800419c:	080041c5 	.word	0x080041c5
 80041a0:	080041cd 	.word	0x080041cd
 80041a4:	2300      	movs	r3, #0
 80041a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041aa:	e1c3      	b.n	8004534 <UART_SetConfig+0x5d0>
 80041ac:	2304      	movs	r3, #4
 80041ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041b2:	e1bf      	b.n	8004534 <UART_SetConfig+0x5d0>
 80041b4:	2308      	movs	r3, #8
 80041b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ba:	e1bb      	b.n	8004534 <UART_SetConfig+0x5d0>
 80041bc:	2310      	movs	r3, #16
 80041be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041c2:	e1b7      	b.n	8004534 <UART_SetConfig+0x5d0>
 80041c4:	2320      	movs	r3, #32
 80041c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ca:	e1b3      	b.n	8004534 <UART_SetConfig+0x5d0>
 80041cc:	2340      	movs	r3, #64	; 0x40
 80041ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041d2:	e1af      	b.n	8004534 <UART_SetConfig+0x5d0>
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041da:	bf00      	nop
 80041dc:	e1aa      	b.n	8004534 <UART_SetConfig+0x5d0>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a37      	ldr	r2, [pc, #220]	; (80042c0 <UART_SetConfig+0x35c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d132      	bne.n	800424e <UART_SetConfig+0x2ea>
 80041e8:	4b32      	ldr	r3, [pc, #200]	; (80042b4 <UART_SetConfig+0x350>)
 80041ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	2b05      	cmp	r3, #5
 80041f2:	d827      	bhi.n	8004244 <UART_SetConfig+0x2e0>
 80041f4:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <UART_SetConfig+0x298>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	08004215 	.word	0x08004215
 8004200:	0800421d 	.word	0x0800421d
 8004204:	08004225 	.word	0x08004225
 8004208:	0800422d 	.word	0x0800422d
 800420c:	08004235 	.word	0x08004235
 8004210:	0800423d 	.word	0x0800423d
 8004214:	2300      	movs	r3, #0
 8004216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800421a:	e18b      	b.n	8004534 <UART_SetConfig+0x5d0>
 800421c:	2304      	movs	r3, #4
 800421e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004222:	e187      	b.n	8004534 <UART_SetConfig+0x5d0>
 8004224:	2308      	movs	r3, #8
 8004226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800422a:	e183      	b.n	8004534 <UART_SetConfig+0x5d0>
 800422c:	2310      	movs	r3, #16
 800422e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004232:	e17f      	b.n	8004534 <UART_SetConfig+0x5d0>
 8004234:	2320      	movs	r3, #32
 8004236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800423a:	e17b      	b.n	8004534 <UART_SetConfig+0x5d0>
 800423c:	2340      	movs	r3, #64	; 0x40
 800423e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004242:	e177      	b.n	8004534 <UART_SetConfig+0x5d0>
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800424a:	bf00      	nop
 800424c:	e172      	b.n	8004534 <UART_SetConfig+0x5d0>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a1c      	ldr	r2, [pc, #112]	; (80042c4 <UART_SetConfig+0x360>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d144      	bne.n	80042e2 <UART_SetConfig+0x37e>
 8004258:	4b16      	ldr	r3, [pc, #88]	; (80042b4 <UART_SetConfig+0x350>)
 800425a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	2b05      	cmp	r3, #5
 8004262:	d839      	bhi.n	80042d8 <UART_SetConfig+0x374>
 8004264:	a201      	add	r2, pc, #4	; (adr r2, 800426c <UART_SetConfig+0x308>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	08004285 	.word	0x08004285
 8004270:	0800428d 	.word	0x0800428d
 8004274:	08004295 	.word	0x08004295
 8004278:	0800429d 	.word	0x0800429d
 800427c:	080042c9 	.word	0x080042c9
 8004280:	080042d1 	.word	0x080042d1
 8004284:	2300      	movs	r3, #0
 8004286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800428a:	e153      	b.n	8004534 <UART_SetConfig+0x5d0>
 800428c:	2304      	movs	r3, #4
 800428e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004292:	e14f      	b.n	8004534 <UART_SetConfig+0x5d0>
 8004294:	2308      	movs	r3, #8
 8004296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800429a:	e14b      	b.n	8004534 <UART_SetConfig+0x5d0>
 800429c:	2310      	movs	r3, #16
 800429e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042a2:	e147      	b.n	8004534 <UART_SetConfig+0x5d0>
 80042a4:	cfff69f3 	.word	0xcfff69f3
 80042a8:	58000c00 	.word	0x58000c00
 80042ac:	11fff4ff 	.word	0x11fff4ff
 80042b0:	40011000 	.word	0x40011000
 80042b4:	58024400 	.word	0x58024400
 80042b8:	40004400 	.word	0x40004400
 80042bc:	40004800 	.word	0x40004800
 80042c0:	40004c00 	.word	0x40004c00
 80042c4:	40005000 	.word	0x40005000
 80042c8:	2320      	movs	r3, #32
 80042ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ce:	e131      	b.n	8004534 <UART_SetConfig+0x5d0>
 80042d0:	2340      	movs	r3, #64	; 0x40
 80042d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042d6:	e12d      	b.n	8004534 <UART_SetConfig+0x5d0>
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042de:	bf00      	nop
 80042e0:	e128      	b.n	8004534 <UART_SetConfig+0x5d0>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4ab6      	ldr	r2, [pc, #728]	; (80045c0 <UART_SetConfig+0x65c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d178      	bne.n	80043de <UART_SetConfig+0x47a>
 80042ec:	4bb5      	ldr	r3, [pc, #724]	; (80045c4 <UART_SetConfig+0x660>)
 80042ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042f4:	2b28      	cmp	r3, #40	; 0x28
 80042f6:	d86d      	bhi.n	80043d4 <UART_SetConfig+0x470>
 80042f8:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <UART_SetConfig+0x39c>)
 80042fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fe:	bf00      	nop
 8004300:	080043a5 	.word	0x080043a5
 8004304:	080043d5 	.word	0x080043d5
 8004308:	080043d5 	.word	0x080043d5
 800430c:	080043d5 	.word	0x080043d5
 8004310:	080043d5 	.word	0x080043d5
 8004314:	080043d5 	.word	0x080043d5
 8004318:	080043d5 	.word	0x080043d5
 800431c:	080043d5 	.word	0x080043d5
 8004320:	080043ad 	.word	0x080043ad
 8004324:	080043d5 	.word	0x080043d5
 8004328:	080043d5 	.word	0x080043d5
 800432c:	080043d5 	.word	0x080043d5
 8004330:	080043d5 	.word	0x080043d5
 8004334:	080043d5 	.word	0x080043d5
 8004338:	080043d5 	.word	0x080043d5
 800433c:	080043d5 	.word	0x080043d5
 8004340:	080043b5 	.word	0x080043b5
 8004344:	080043d5 	.word	0x080043d5
 8004348:	080043d5 	.word	0x080043d5
 800434c:	080043d5 	.word	0x080043d5
 8004350:	080043d5 	.word	0x080043d5
 8004354:	080043d5 	.word	0x080043d5
 8004358:	080043d5 	.word	0x080043d5
 800435c:	080043d5 	.word	0x080043d5
 8004360:	080043bd 	.word	0x080043bd
 8004364:	080043d5 	.word	0x080043d5
 8004368:	080043d5 	.word	0x080043d5
 800436c:	080043d5 	.word	0x080043d5
 8004370:	080043d5 	.word	0x080043d5
 8004374:	080043d5 	.word	0x080043d5
 8004378:	080043d5 	.word	0x080043d5
 800437c:	080043d5 	.word	0x080043d5
 8004380:	080043c5 	.word	0x080043c5
 8004384:	080043d5 	.word	0x080043d5
 8004388:	080043d5 	.word	0x080043d5
 800438c:	080043d5 	.word	0x080043d5
 8004390:	080043d5 	.word	0x080043d5
 8004394:	080043d5 	.word	0x080043d5
 8004398:	080043d5 	.word	0x080043d5
 800439c:	080043d5 	.word	0x080043d5
 80043a0:	080043cd 	.word	0x080043cd
 80043a4:	2301      	movs	r3, #1
 80043a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043aa:	e0c3      	b.n	8004534 <UART_SetConfig+0x5d0>
 80043ac:	2304      	movs	r3, #4
 80043ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043b2:	e0bf      	b.n	8004534 <UART_SetConfig+0x5d0>
 80043b4:	2308      	movs	r3, #8
 80043b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ba:	e0bb      	b.n	8004534 <UART_SetConfig+0x5d0>
 80043bc:	2310      	movs	r3, #16
 80043be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043c2:	e0b7      	b.n	8004534 <UART_SetConfig+0x5d0>
 80043c4:	2320      	movs	r3, #32
 80043c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ca:	e0b3      	b.n	8004534 <UART_SetConfig+0x5d0>
 80043cc:	2340      	movs	r3, #64	; 0x40
 80043ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043d2:	e0af      	b.n	8004534 <UART_SetConfig+0x5d0>
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043da:	bf00      	nop
 80043dc:	e0aa      	b.n	8004534 <UART_SetConfig+0x5d0>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a79      	ldr	r2, [pc, #484]	; (80045c8 <UART_SetConfig+0x664>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d132      	bne.n	800444e <UART_SetConfig+0x4ea>
 80043e8:	4b76      	ldr	r3, [pc, #472]	; (80045c4 <UART_SetConfig+0x660>)
 80043ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	2b05      	cmp	r3, #5
 80043f2:	d827      	bhi.n	8004444 <UART_SetConfig+0x4e0>
 80043f4:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <UART_SetConfig+0x498>)
 80043f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fa:	bf00      	nop
 80043fc:	08004415 	.word	0x08004415
 8004400:	0800441d 	.word	0x0800441d
 8004404:	08004425 	.word	0x08004425
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004435 	.word	0x08004435
 8004410:	0800443d 	.word	0x0800443d
 8004414:	2300      	movs	r3, #0
 8004416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800441a:	e08b      	b.n	8004534 <UART_SetConfig+0x5d0>
 800441c:	2304      	movs	r3, #4
 800441e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004422:	e087      	b.n	8004534 <UART_SetConfig+0x5d0>
 8004424:	2308      	movs	r3, #8
 8004426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800442a:	e083      	b.n	8004534 <UART_SetConfig+0x5d0>
 800442c:	2310      	movs	r3, #16
 800442e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004432:	e07f      	b.n	8004534 <UART_SetConfig+0x5d0>
 8004434:	2320      	movs	r3, #32
 8004436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800443a:	e07b      	b.n	8004534 <UART_SetConfig+0x5d0>
 800443c:	2340      	movs	r3, #64	; 0x40
 800443e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004442:	e077      	b.n	8004534 <UART_SetConfig+0x5d0>
 8004444:	2380      	movs	r3, #128	; 0x80
 8004446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800444a:	bf00      	nop
 800444c:	e072      	b.n	8004534 <UART_SetConfig+0x5d0>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a5e      	ldr	r2, [pc, #376]	; (80045cc <UART_SetConfig+0x668>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d132      	bne.n	80044be <UART_SetConfig+0x55a>
 8004458:	4b5a      	ldr	r3, [pc, #360]	; (80045c4 <UART_SetConfig+0x660>)
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	2b05      	cmp	r3, #5
 8004462:	d827      	bhi.n	80044b4 <UART_SetConfig+0x550>
 8004464:	a201      	add	r2, pc, #4	; (adr r2, 800446c <UART_SetConfig+0x508>)
 8004466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446a:	bf00      	nop
 800446c:	08004485 	.word	0x08004485
 8004470:	0800448d 	.word	0x0800448d
 8004474:	08004495 	.word	0x08004495
 8004478:	0800449d 	.word	0x0800449d
 800447c:	080044a5 	.word	0x080044a5
 8004480:	080044ad 	.word	0x080044ad
 8004484:	2300      	movs	r3, #0
 8004486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800448a:	e053      	b.n	8004534 <UART_SetConfig+0x5d0>
 800448c:	2304      	movs	r3, #4
 800448e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004492:	e04f      	b.n	8004534 <UART_SetConfig+0x5d0>
 8004494:	2308      	movs	r3, #8
 8004496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800449a:	e04b      	b.n	8004534 <UART_SetConfig+0x5d0>
 800449c:	2310      	movs	r3, #16
 800449e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044a2:	e047      	b.n	8004534 <UART_SetConfig+0x5d0>
 80044a4:	2320      	movs	r3, #32
 80044a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044aa:	e043      	b.n	8004534 <UART_SetConfig+0x5d0>
 80044ac:	2340      	movs	r3, #64	; 0x40
 80044ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044b2:	e03f      	b.n	8004534 <UART_SetConfig+0x5d0>
 80044b4:	2380      	movs	r3, #128	; 0x80
 80044b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044ba:	bf00      	nop
 80044bc:	e03a      	b.n	8004534 <UART_SetConfig+0x5d0>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a43      	ldr	r2, [pc, #268]	; (80045d0 <UART_SetConfig+0x66c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d132      	bne.n	800452e <UART_SetConfig+0x5ca>
 80044c8:	4b3e      	ldr	r3, [pc, #248]	; (80045c4 <UART_SetConfig+0x660>)
 80044ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	2b05      	cmp	r3, #5
 80044d2:	d827      	bhi.n	8004524 <UART_SetConfig+0x5c0>
 80044d4:	a201      	add	r2, pc, #4	; (adr r2, 80044dc <UART_SetConfig+0x578>)
 80044d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044da:	bf00      	nop
 80044dc:	080044f5 	.word	0x080044f5
 80044e0:	080044fd 	.word	0x080044fd
 80044e4:	08004505 	.word	0x08004505
 80044e8:	0800450d 	.word	0x0800450d
 80044ec:	08004515 	.word	0x08004515
 80044f0:	0800451d 	.word	0x0800451d
 80044f4:	2302      	movs	r3, #2
 80044f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044fa:	e01b      	b.n	8004534 <UART_SetConfig+0x5d0>
 80044fc:	2304      	movs	r3, #4
 80044fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004502:	e017      	b.n	8004534 <UART_SetConfig+0x5d0>
 8004504:	2308      	movs	r3, #8
 8004506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800450a:	e013      	b.n	8004534 <UART_SetConfig+0x5d0>
 800450c:	2310      	movs	r3, #16
 800450e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004512:	e00f      	b.n	8004534 <UART_SetConfig+0x5d0>
 8004514:	2320      	movs	r3, #32
 8004516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800451a:	e00b      	b.n	8004534 <UART_SetConfig+0x5d0>
 800451c:	2340      	movs	r3, #64	; 0x40
 800451e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004522:	e007      	b.n	8004534 <UART_SetConfig+0x5d0>
 8004524:	2380      	movs	r3, #128	; 0x80
 8004526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800452a:	bf00      	nop
 800452c:	e002      	b.n	8004534 <UART_SetConfig+0x5d0>
 800452e:	2380      	movs	r3, #128	; 0x80
 8004530:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a25      	ldr	r2, [pc, #148]	; (80045d0 <UART_SetConfig+0x66c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	f040 80b8 	bne.w	80046b0 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004540:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004544:	2b08      	cmp	r3, #8
 8004546:	d019      	beq.n	800457c <UART_SetConfig+0x618>
 8004548:	2b08      	cmp	r3, #8
 800454a:	dc04      	bgt.n	8004556 <UART_SetConfig+0x5f2>
 800454c:	2b02      	cmp	r3, #2
 800454e:	d009      	beq.n	8004564 <UART_SetConfig+0x600>
 8004550:	2b04      	cmp	r3, #4
 8004552:	d00b      	beq.n	800456c <UART_SetConfig+0x608>
 8004554:	e042      	b.n	80045dc <UART_SetConfig+0x678>
 8004556:	2b20      	cmp	r3, #32
 8004558:	d02b      	beq.n	80045b2 <UART_SetConfig+0x64e>
 800455a:	2b40      	cmp	r3, #64	; 0x40
 800455c:	d02c      	beq.n	80045b8 <UART_SetConfig+0x654>
 800455e:	2b10      	cmp	r3, #16
 8004560:	d014      	beq.n	800458c <UART_SetConfig+0x628>
 8004562:	e03b      	b.n	80045dc <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004564:	f7fe ff36 	bl	80033d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8004568:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800456a:	e03d      	b.n	80045e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800456c:	f107 0314 	add.w	r3, r7, #20
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe ff45 	bl	8003400 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800457a:	e035      	b.n	80045e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800457c:	f107 0308 	add.w	r3, r7, #8
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff f889 	bl	8003698 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800458a:	e02d      	b.n	80045e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800458c:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <UART_SetConfig+0x660>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0320 	and.w	r3, r3, #32
 8004594:	2b00      	cmp	r3, #0
 8004596:	d009      	beq.n	80045ac <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004598:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <UART_SetConfig+0x660>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	08db      	lsrs	r3, r3, #3
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	4a0c      	ldr	r2, [pc, #48]	; (80045d4 <UART_SetConfig+0x670>)
 80045a4:	fa22 f303 	lsr.w	r3, r2, r3
 80045a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80045aa:	e01d      	b.n	80045e8 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80045ac:	4b09      	ldr	r3, [pc, #36]	; (80045d4 <UART_SetConfig+0x670>)
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045b0:	e01a      	b.n	80045e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80045b2:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <UART_SetConfig+0x674>)
 80045b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045b6:	e017      	b.n	80045e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045be:	e013      	b.n	80045e8 <UART_SetConfig+0x684>
 80045c0:	40011400 	.word	0x40011400
 80045c4:	58024400 	.word	0x58024400
 80045c8:	40007800 	.word	0x40007800
 80045cc:	40007c00 	.word	0x40007c00
 80045d0:	58000c00 	.word	0x58000c00
 80045d4:	03d09000 	.word	0x03d09000
 80045d8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80045e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 824d 	beq.w	8004a8a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	4aad      	ldr	r2, [pc, #692]	; (80048ac <UART_SetConfig+0x948>)
 80045f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045fa:	461a      	mov	r2, r3
 80045fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004602:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	4413      	add	r3, r2
 800460e:	6a3a      	ldr	r2, [r7, #32]
 8004610:	429a      	cmp	r2, r3
 8004612:	d305      	bcc.n	8004620 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800461a:	6a3a      	ldr	r2, [r7, #32]
 800461c:	429a      	cmp	r2, r3
 800461e:	d903      	bls.n	8004628 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004626:	e230      	b.n	8004a8a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462a:	4618      	mov	r0, r3
 800462c:	f04f 0100 	mov.w	r1, #0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	4a9d      	ldr	r2, [pc, #628]	; (80048ac <UART_SetConfig+0x948>)
 8004636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800463a:	b29b      	uxth	r3, r3
 800463c:	f04f 0400 	mov.w	r4, #0
 8004640:	461a      	mov	r2, r3
 8004642:	4623      	mov	r3, r4
 8004644:	f7fb fe9c 	bl	8000380 <__aeabi_uldivmod>
 8004648:	4603      	mov	r3, r0
 800464a:	460c      	mov	r4, r1
 800464c:	4619      	mov	r1, r3
 800464e:	4622      	mov	r2, r4
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	f04f 0400 	mov.w	r4, #0
 8004658:	0214      	lsls	r4, r2, #8
 800465a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800465e:	020b      	lsls	r3, r1, #8
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6852      	ldr	r2, [r2, #4]
 8004664:	0852      	lsrs	r2, r2, #1
 8004666:	4611      	mov	r1, r2
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	eb13 0b01 	adds.w	fp, r3, r1
 8004670:	eb44 0c02 	adc.w	ip, r4, r2
 8004674:	4658      	mov	r0, fp
 8004676:	4661      	mov	r1, ip
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f04f 0400 	mov.w	r4, #0
 8004680:	461a      	mov	r2, r3
 8004682:	4623      	mov	r3, r4
 8004684:	f7fb fe7c 	bl	8000380 <__aeabi_uldivmod>
 8004688:	4603      	mov	r3, r0
 800468a:	460c      	mov	r4, r1
 800468c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004694:	d308      	bcc.n	80046a8 <UART_SetConfig+0x744>
 8004696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800469c:	d204      	bcs.n	80046a8 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046a4:	60da      	str	r2, [r3, #12]
 80046a6:	e1f0      	b.n	8004a8a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80046ae:	e1ec      	b.n	8004a8a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b8:	f040 8100 	bne.w	80048bc <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80046bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	f200 80b7 	bhi.w	8004834 <UART_SetConfig+0x8d0>
 80046c6:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <UART_SetConfig+0x768>)
 80046c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046cc:	080047d1 	.word	0x080047d1
 80046d0:	080047d9 	.word	0x080047d9
 80046d4:	08004835 	.word	0x08004835
 80046d8:	08004835 	.word	0x08004835
 80046dc:	080047e1 	.word	0x080047e1
 80046e0:	08004835 	.word	0x08004835
 80046e4:	08004835 	.word	0x08004835
 80046e8:	08004835 	.word	0x08004835
 80046ec:	080047f1 	.word	0x080047f1
 80046f0:	08004835 	.word	0x08004835
 80046f4:	08004835 	.word	0x08004835
 80046f8:	08004835 	.word	0x08004835
 80046fc:	08004835 	.word	0x08004835
 8004700:	08004835 	.word	0x08004835
 8004704:	08004835 	.word	0x08004835
 8004708:	08004835 	.word	0x08004835
 800470c:	08004801 	.word	0x08004801
 8004710:	08004835 	.word	0x08004835
 8004714:	08004835 	.word	0x08004835
 8004718:	08004835 	.word	0x08004835
 800471c:	08004835 	.word	0x08004835
 8004720:	08004835 	.word	0x08004835
 8004724:	08004835 	.word	0x08004835
 8004728:	08004835 	.word	0x08004835
 800472c:	08004835 	.word	0x08004835
 8004730:	08004835 	.word	0x08004835
 8004734:	08004835 	.word	0x08004835
 8004738:	08004835 	.word	0x08004835
 800473c:	08004835 	.word	0x08004835
 8004740:	08004835 	.word	0x08004835
 8004744:	08004835 	.word	0x08004835
 8004748:	08004835 	.word	0x08004835
 800474c:	08004827 	.word	0x08004827
 8004750:	08004835 	.word	0x08004835
 8004754:	08004835 	.word	0x08004835
 8004758:	08004835 	.word	0x08004835
 800475c:	08004835 	.word	0x08004835
 8004760:	08004835 	.word	0x08004835
 8004764:	08004835 	.word	0x08004835
 8004768:	08004835 	.word	0x08004835
 800476c:	08004835 	.word	0x08004835
 8004770:	08004835 	.word	0x08004835
 8004774:	08004835 	.word	0x08004835
 8004778:	08004835 	.word	0x08004835
 800477c:	08004835 	.word	0x08004835
 8004780:	08004835 	.word	0x08004835
 8004784:	08004835 	.word	0x08004835
 8004788:	08004835 	.word	0x08004835
 800478c:	08004835 	.word	0x08004835
 8004790:	08004835 	.word	0x08004835
 8004794:	08004835 	.word	0x08004835
 8004798:	08004835 	.word	0x08004835
 800479c:	08004835 	.word	0x08004835
 80047a0:	08004835 	.word	0x08004835
 80047a4:	08004835 	.word	0x08004835
 80047a8:	08004835 	.word	0x08004835
 80047ac:	08004835 	.word	0x08004835
 80047b0:	08004835 	.word	0x08004835
 80047b4:	08004835 	.word	0x08004835
 80047b8:	08004835 	.word	0x08004835
 80047bc:	08004835 	.word	0x08004835
 80047c0:	08004835 	.word	0x08004835
 80047c4:	08004835 	.word	0x08004835
 80047c8:	08004835 	.word	0x08004835
 80047cc:	0800482d 	.word	0x0800482d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d0:	f7fd fee6 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 80047d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80047d6:	e033      	b.n	8004840 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047d8:	f7fd fef8 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 80047dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80047de:	e02f      	b.n	8004840 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047e0:	f107 0314 	add.w	r3, r7, #20
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fe fe0b 	bl	8003400 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047ee:	e027      	b.n	8004840 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047f0:	f107 0308 	add.w	r3, r7, #8
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fe ff4f 	bl	8003698 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047fe:	e01f      	b.n	8004840 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004800:	4b2b      	ldr	r3, [pc, #172]	; (80048b0 <UART_SetConfig+0x94c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0320 	and.w	r3, r3, #32
 8004808:	2b00      	cmp	r3, #0
 800480a:	d009      	beq.n	8004820 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800480c:	4b28      	ldr	r3, [pc, #160]	; (80048b0 <UART_SetConfig+0x94c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	08db      	lsrs	r3, r3, #3
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	4a27      	ldr	r2, [pc, #156]	; (80048b4 <UART_SetConfig+0x950>)
 8004818:	fa22 f303 	lsr.w	r3, r2, r3
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800481e:	e00f      	b.n	8004840 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8004820:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <UART_SetConfig+0x950>)
 8004822:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004824:	e00c      	b.n	8004840 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004826:	4b24      	ldr	r3, [pc, #144]	; (80048b8 <UART_SetConfig+0x954>)
 8004828:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800482a:	e009      	b.n	8004840 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800482c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004830:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004832:	e005      	b.n	8004840 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800483e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 8121 	beq.w	8004a8a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	4a17      	ldr	r2, [pc, #92]	; (80048ac <UART_SetConfig+0x948>)
 800484e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004852:	461a      	mov	r2, r3
 8004854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004856:	fbb3 f3f2 	udiv	r3, r3, r2
 800485a:	005a      	lsls	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	085b      	lsrs	r3, r3, #1
 8004862:	441a      	add	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	b29b      	uxth	r3, r3
 800486e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	2b0f      	cmp	r3, #15
 8004874:	d916      	bls.n	80048a4 <UART_SetConfig+0x940>
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800487c:	d212      	bcs.n	80048a4 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	b29b      	uxth	r3, r3
 8004882:	f023 030f 	bic.w	r3, r3, #15
 8004886:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	085b      	lsrs	r3, r3, #1
 800488c:	b29b      	uxth	r3, r3
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	b29a      	uxth	r2, r3
 8004894:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004896:	4313      	orrs	r3, r2
 8004898:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80048a0:	60da      	str	r2, [r3, #12]
 80048a2:	e0f2      	b.n	8004a8a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80048aa:	e0ee      	b.n	8004a8a <UART_SetConfig+0xb26>
 80048ac:	08006240 	.word	0x08006240
 80048b0:	58024400 	.word	0x58024400
 80048b4:	03d09000 	.word	0x03d09000
 80048b8:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80048bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	f200 80b7 	bhi.w	8004a34 <UART_SetConfig+0xad0>
 80048c6:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <UART_SetConfig+0x968>)
 80048c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048cc:	080049d1 	.word	0x080049d1
 80048d0:	080049d9 	.word	0x080049d9
 80048d4:	08004a35 	.word	0x08004a35
 80048d8:	08004a35 	.word	0x08004a35
 80048dc:	080049e1 	.word	0x080049e1
 80048e0:	08004a35 	.word	0x08004a35
 80048e4:	08004a35 	.word	0x08004a35
 80048e8:	08004a35 	.word	0x08004a35
 80048ec:	080049f1 	.word	0x080049f1
 80048f0:	08004a35 	.word	0x08004a35
 80048f4:	08004a35 	.word	0x08004a35
 80048f8:	08004a35 	.word	0x08004a35
 80048fc:	08004a35 	.word	0x08004a35
 8004900:	08004a35 	.word	0x08004a35
 8004904:	08004a35 	.word	0x08004a35
 8004908:	08004a35 	.word	0x08004a35
 800490c:	08004a01 	.word	0x08004a01
 8004910:	08004a35 	.word	0x08004a35
 8004914:	08004a35 	.word	0x08004a35
 8004918:	08004a35 	.word	0x08004a35
 800491c:	08004a35 	.word	0x08004a35
 8004920:	08004a35 	.word	0x08004a35
 8004924:	08004a35 	.word	0x08004a35
 8004928:	08004a35 	.word	0x08004a35
 800492c:	08004a35 	.word	0x08004a35
 8004930:	08004a35 	.word	0x08004a35
 8004934:	08004a35 	.word	0x08004a35
 8004938:	08004a35 	.word	0x08004a35
 800493c:	08004a35 	.word	0x08004a35
 8004940:	08004a35 	.word	0x08004a35
 8004944:	08004a35 	.word	0x08004a35
 8004948:	08004a35 	.word	0x08004a35
 800494c:	08004a27 	.word	0x08004a27
 8004950:	08004a35 	.word	0x08004a35
 8004954:	08004a35 	.word	0x08004a35
 8004958:	08004a35 	.word	0x08004a35
 800495c:	08004a35 	.word	0x08004a35
 8004960:	08004a35 	.word	0x08004a35
 8004964:	08004a35 	.word	0x08004a35
 8004968:	08004a35 	.word	0x08004a35
 800496c:	08004a35 	.word	0x08004a35
 8004970:	08004a35 	.word	0x08004a35
 8004974:	08004a35 	.word	0x08004a35
 8004978:	08004a35 	.word	0x08004a35
 800497c:	08004a35 	.word	0x08004a35
 8004980:	08004a35 	.word	0x08004a35
 8004984:	08004a35 	.word	0x08004a35
 8004988:	08004a35 	.word	0x08004a35
 800498c:	08004a35 	.word	0x08004a35
 8004990:	08004a35 	.word	0x08004a35
 8004994:	08004a35 	.word	0x08004a35
 8004998:	08004a35 	.word	0x08004a35
 800499c:	08004a35 	.word	0x08004a35
 80049a0:	08004a35 	.word	0x08004a35
 80049a4:	08004a35 	.word	0x08004a35
 80049a8:	08004a35 	.word	0x08004a35
 80049ac:	08004a35 	.word	0x08004a35
 80049b0:	08004a35 	.word	0x08004a35
 80049b4:	08004a35 	.word	0x08004a35
 80049b8:	08004a35 	.word	0x08004a35
 80049bc:	08004a35 	.word	0x08004a35
 80049c0:	08004a35 	.word	0x08004a35
 80049c4:	08004a35 	.word	0x08004a35
 80049c8:	08004a35 	.word	0x08004a35
 80049cc:	08004a2d 	.word	0x08004a2d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d0:	f7fd fde6 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 80049d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80049d6:	e033      	b.n	8004a40 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049d8:	f7fd fdf8 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 80049dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80049de:	e02f      	b.n	8004a40 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049e0:	f107 0314 	add.w	r3, r7, #20
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fe fd0b 	bl	8003400 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049ee:	e027      	b.n	8004a40 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049f0:	f107 0308 	add.w	r3, r7, #8
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fe fe4f 	bl	8003698 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049fe:	e01f      	b.n	8004a40 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a00:	4b2c      	ldr	r3, [pc, #176]	; (8004ab4 <UART_SetConfig+0xb50>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d009      	beq.n	8004a20 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a0c:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <UART_SetConfig+0xb50>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	08db      	lsrs	r3, r3, #3
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	4a28      	ldr	r2, [pc, #160]	; (8004ab8 <UART_SetConfig+0xb54>)
 8004a18:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a1e:	e00f      	b.n	8004a40 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8004a20:	4b25      	ldr	r3, [pc, #148]	; (8004ab8 <UART_SetConfig+0xb54>)
 8004a22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a24:	e00c      	b.n	8004a40 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a26:	4b25      	ldr	r3, [pc, #148]	; (8004abc <UART_SetConfig+0xb58>)
 8004a28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a2a:	e009      	b.n	8004a40 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a32:	e005      	b.n	8004a40 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004a3e:	bf00      	nop
    }

    if (pclk != 0U)
 8004a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d021      	beq.n	8004a8a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	4a1d      	ldr	r2, [pc, #116]	; (8004ac0 <UART_SetConfig+0xb5c>)
 8004a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a50:	461a      	mov	r2, r3
 8004a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a54:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	085b      	lsrs	r3, r3, #1
 8004a5e:	441a      	add	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	2b0f      	cmp	r3, #15
 8004a70:	d908      	bls.n	8004a84 <UART_SetConfig+0xb20>
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a78:	d204      	bcs.n	8004a84 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a80:	60da      	str	r2, [r3, #12]
 8004a82:	e002      	b.n	8004a8a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004aa6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3738      	adds	r7, #56	; 0x38
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004ab4:	58024400 	.word	0x58024400
 8004ab8:	03d09000 	.word	0x03d09000
 8004abc:	003d0900 	.word	0x003d0900
 8004ac0:	08006240 	.word	0x08006240

08004ac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00a      	beq.n	8004aee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01a      	beq.n	8004bda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bc2:	d10a      	bne.n	8004bda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	605a      	str	r2, [r3, #4]
  }
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004c18:	f7fc fa26 	bl	8001068 <HAL_GetTick>
 8004c1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d10e      	bne.n	8004c4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f82c 	bl	8004c98 <UART_WaitOnFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e022      	b.n	8004c90 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d10e      	bne.n	8004c76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f816 	bl	8004c98 <UART_WaitOnFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e00c      	b.n	8004c90 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca8:	e062      	b.n	8004d70 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb0:	d05e      	beq.n	8004d70 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb2:	f7fc f9d9 	bl	8001068 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d302      	bcc.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d11d      	bne.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cd6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0201 	bic.w	r2, r2, #1
 8004ce6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e045      	b.n	8004d90 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d02e      	beq.n	8004d70 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d20:	d126      	bne.n	8004d70 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d2a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d3a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0201 	bic.w	r2, r2, #1
 8004d4a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e00f      	b.n	8004d90 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	69da      	ldr	r2, [r3, #28]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d08d      	beq.n	8004caa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_UARTEx_DisableFifoMode+0x16>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e027      	b.n	8004dfe <HAL_UARTEx_DisableFifoMode+0x66>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2224      	movs	r2, #36	; 0x24
 8004dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0201 	bic.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004ddc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	e02d      	b.n	8004e7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2224      	movs	r2, #36	; 0x24
 8004e2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0201 	bic.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f850 	bl	8004f04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e02d      	b.n	8004efa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2224      	movs	r2, #36	; 0x24
 8004eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0201 	bic.w	r2, r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f812 	bl	8004f04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b089      	sub	sp, #36	; 0x24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004f0c:	4a2f      	ldr	r2, [pc, #188]	; (8004fcc <UARTEx_SetNbDataToProcess+0xc8>)
 8004f0e:	f107 0314 	add.w	r3, r7, #20
 8004f12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f16:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004f1a:	4a2d      	ldr	r2, [pc, #180]	; (8004fd0 <UARTEx_SetNbDataToProcess+0xcc>)
 8004f1c:	f107 030c 	add.w	r3, r7, #12
 8004f20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f24:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d108      	bne.n	8004f42 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f40:	e03d      	b.n	8004fbe <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f42:	2310      	movs	r3, #16
 8004f44:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f46:	2310      	movs	r3, #16
 8004f48:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	0e5b      	lsrs	r3, r3, #25
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	0f5b      	lsrs	r3, r3, #29
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004f6a:	7fbb      	ldrb	r3, [r7, #30]
 8004f6c:	7f3a      	ldrb	r2, [r7, #28]
 8004f6e:	f107 0120 	add.w	r1, r7, #32
 8004f72:	440a      	add	r2, r1
 8004f74:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004f78:	fb02 f303 	mul.w	r3, r2, r3
 8004f7c:	7f3a      	ldrb	r2, [r7, #28]
 8004f7e:	f107 0120 	add.w	r1, r7, #32
 8004f82:	440a      	add	r2, r1
 8004f84:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004f88:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004f94:	7ffb      	ldrb	r3, [r7, #31]
 8004f96:	7f7a      	ldrb	r2, [r7, #29]
 8004f98:	f107 0120 	add.w	r1, r7, #32
 8004f9c:	440a      	add	r2, r1
 8004f9e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004fa2:	fb02 f303 	mul.w	r3, r2, r3
 8004fa6:	7f7a      	ldrb	r2, [r7, #29]
 8004fa8:	f107 0120 	add.w	r1, r7, #32
 8004fac:	440a      	add	r2, r1
 8004fae:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004fb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004fbe:	bf00      	nop
 8004fc0:	3724      	adds	r7, #36	; 0x24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	08006220 	.word	0x08006220
 8004fd0:	08006228 	.word	0x08006228

08004fd4 <__errno>:
 8004fd4:	4b01      	ldr	r3, [pc, #4]	; (8004fdc <__errno+0x8>)
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	20000010 	.word	0x20000010

08004fe0 <__libc_init_array>:
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	4e0d      	ldr	r6, [pc, #52]	; (8005018 <__libc_init_array+0x38>)
 8004fe4:	4c0d      	ldr	r4, [pc, #52]	; (800501c <__libc_init_array+0x3c>)
 8004fe6:	1ba4      	subs	r4, r4, r6
 8004fe8:	10a4      	asrs	r4, r4, #2
 8004fea:	2500      	movs	r5, #0
 8004fec:	42a5      	cmp	r5, r4
 8004fee:	d109      	bne.n	8005004 <__libc_init_array+0x24>
 8004ff0:	4e0b      	ldr	r6, [pc, #44]	; (8005020 <__libc_init_array+0x40>)
 8004ff2:	4c0c      	ldr	r4, [pc, #48]	; (8005024 <__libc_init_array+0x44>)
 8004ff4:	f001 f8dc 	bl	80061b0 <_init>
 8004ff8:	1ba4      	subs	r4, r4, r6
 8004ffa:	10a4      	asrs	r4, r4, #2
 8004ffc:	2500      	movs	r5, #0
 8004ffe:	42a5      	cmp	r5, r4
 8005000:	d105      	bne.n	800500e <__libc_init_array+0x2e>
 8005002:	bd70      	pop	{r4, r5, r6, pc}
 8005004:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005008:	4798      	blx	r3
 800500a:	3501      	adds	r5, #1
 800500c:	e7ee      	b.n	8004fec <__libc_init_array+0xc>
 800500e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005012:	4798      	blx	r3
 8005014:	3501      	adds	r5, #1
 8005016:	e7f2      	b.n	8004ffe <__libc_init_array+0x1e>
 8005018:	080062f8 	.word	0x080062f8
 800501c:	080062f8 	.word	0x080062f8
 8005020:	080062f8 	.word	0x080062f8
 8005024:	080062fc 	.word	0x080062fc

08005028 <memset>:
 8005028:	4402      	add	r2, r0
 800502a:	4603      	mov	r3, r0
 800502c:	4293      	cmp	r3, r2
 800502e:	d100      	bne.n	8005032 <memset+0xa>
 8005030:	4770      	bx	lr
 8005032:	f803 1b01 	strb.w	r1, [r3], #1
 8005036:	e7f9      	b.n	800502c <memset+0x4>

08005038 <iprintf>:
 8005038:	b40f      	push	{r0, r1, r2, r3}
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <iprintf+0x2c>)
 800503c:	b513      	push	{r0, r1, r4, lr}
 800503e:	681c      	ldr	r4, [r3, #0]
 8005040:	b124      	cbz	r4, 800504c <iprintf+0x14>
 8005042:	69a3      	ldr	r3, [r4, #24]
 8005044:	b913      	cbnz	r3, 800504c <iprintf+0x14>
 8005046:	4620      	mov	r0, r4
 8005048:	f000 f882 	bl	8005150 <__sinit>
 800504c:	ab05      	add	r3, sp, #20
 800504e:	9a04      	ldr	r2, [sp, #16]
 8005050:	68a1      	ldr	r1, [r4, #8]
 8005052:	9301      	str	r3, [sp, #4]
 8005054:	4620      	mov	r0, r4
 8005056:	f000 fadb 	bl	8005610 <_vfiprintf_r>
 800505a:	b002      	add	sp, #8
 800505c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005060:	b004      	add	sp, #16
 8005062:	4770      	bx	lr
 8005064:	20000010 	.word	0x20000010

08005068 <sniprintf>:
 8005068:	b40c      	push	{r2, r3}
 800506a:	b530      	push	{r4, r5, lr}
 800506c:	4b17      	ldr	r3, [pc, #92]	; (80050cc <sniprintf+0x64>)
 800506e:	1e0c      	subs	r4, r1, #0
 8005070:	b09d      	sub	sp, #116	; 0x74
 8005072:	681d      	ldr	r5, [r3, #0]
 8005074:	da08      	bge.n	8005088 <sniprintf+0x20>
 8005076:	238b      	movs	r3, #139	; 0x8b
 8005078:	602b      	str	r3, [r5, #0]
 800507a:	f04f 30ff 	mov.w	r0, #4294967295
 800507e:	b01d      	add	sp, #116	; 0x74
 8005080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005084:	b002      	add	sp, #8
 8005086:	4770      	bx	lr
 8005088:	f44f 7302 	mov.w	r3, #520	; 0x208
 800508c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005090:	bf14      	ite	ne
 8005092:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005096:	4623      	moveq	r3, r4
 8005098:	9304      	str	r3, [sp, #16]
 800509a:	9307      	str	r3, [sp, #28]
 800509c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050a0:	9002      	str	r0, [sp, #8]
 80050a2:	9006      	str	r0, [sp, #24]
 80050a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80050a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80050aa:	ab21      	add	r3, sp, #132	; 0x84
 80050ac:	a902      	add	r1, sp, #8
 80050ae:	4628      	mov	r0, r5
 80050b0:	9301      	str	r3, [sp, #4]
 80050b2:	f000 f98b 	bl	80053cc <_svfiprintf_r>
 80050b6:	1c43      	adds	r3, r0, #1
 80050b8:	bfbc      	itt	lt
 80050ba:	238b      	movlt	r3, #139	; 0x8b
 80050bc:	602b      	strlt	r3, [r5, #0]
 80050be:	2c00      	cmp	r4, #0
 80050c0:	d0dd      	beq.n	800507e <sniprintf+0x16>
 80050c2:	9b02      	ldr	r3, [sp, #8]
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	e7d9      	b.n	800507e <sniprintf+0x16>
 80050ca:	bf00      	nop
 80050cc:	20000010 	.word	0x20000010

080050d0 <std>:
 80050d0:	2300      	movs	r3, #0
 80050d2:	b510      	push	{r4, lr}
 80050d4:	4604      	mov	r4, r0
 80050d6:	e9c0 3300 	strd	r3, r3, [r0]
 80050da:	6083      	str	r3, [r0, #8]
 80050dc:	8181      	strh	r1, [r0, #12]
 80050de:	6643      	str	r3, [r0, #100]	; 0x64
 80050e0:	81c2      	strh	r2, [r0, #14]
 80050e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050e6:	6183      	str	r3, [r0, #24]
 80050e8:	4619      	mov	r1, r3
 80050ea:	2208      	movs	r2, #8
 80050ec:	305c      	adds	r0, #92	; 0x5c
 80050ee:	f7ff ff9b 	bl	8005028 <memset>
 80050f2:	4b05      	ldr	r3, [pc, #20]	; (8005108 <std+0x38>)
 80050f4:	6263      	str	r3, [r4, #36]	; 0x24
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <std+0x3c>)
 80050f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80050fa:	4b05      	ldr	r3, [pc, #20]	; (8005110 <std+0x40>)
 80050fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050fe:	4b05      	ldr	r3, [pc, #20]	; (8005114 <std+0x44>)
 8005100:	6224      	str	r4, [r4, #32]
 8005102:	6323      	str	r3, [r4, #48]	; 0x30
 8005104:	bd10      	pop	{r4, pc}
 8005106:	bf00      	nop
 8005108:	08005b6d 	.word	0x08005b6d
 800510c:	08005b8f 	.word	0x08005b8f
 8005110:	08005bc7 	.word	0x08005bc7
 8005114:	08005beb 	.word	0x08005beb

08005118 <_cleanup_r>:
 8005118:	4901      	ldr	r1, [pc, #4]	; (8005120 <_cleanup_r+0x8>)
 800511a:	f000 b885 	b.w	8005228 <_fwalk_reent>
 800511e:	bf00      	nop
 8005120:	08005ec5 	.word	0x08005ec5

08005124 <__sfmoreglue>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	1e4a      	subs	r2, r1, #1
 8005128:	2568      	movs	r5, #104	; 0x68
 800512a:	4355      	muls	r5, r2
 800512c:	460e      	mov	r6, r1
 800512e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005132:	f000 f897 	bl	8005264 <_malloc_r>
 8005136:	4604      	mov	r4, r0
 8005138:	b140      	cbz	r0, 800514c <__sfmoreglue+0x28>
 800513a:	2100      	movs	r1, #0
 800513c:	e9c0 1600 	strd	r1, r6, [r0]
 8005140:	300c      	adds	r0, #12
 8005142:	60a0      	str	r0, [r4, #8]
 8005144:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005148:	f7ff ff6e 	bl	8005028 <memset>
 800514c:	4620      	mov	r0, r4
 800514e:	bd70      	pop	{r4, r5, r6, pc}

08005150 <__sinit>:
 8005150:	6983      	ldr	r3, [r0, #24]
 8005152:	b510      	push	{r4, lr}
 8005154:	4604      	mov	r4, r0
 8005156:	bb33      	cbnz	r3, 80051a6 <__sinit+0x56>
 8005158:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800515c:	6503      	str	r3, [r0, #80]	; 0x50
 800515e:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <__sinit+0x58>)
 8005160:	4a12      	ldr	r2, [pc, #72]	; (80051ac <__sinit+0x5c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6282      	str	r2, [r0, #40]	; 0x28
 8005166:	4298      	cmp	r0, r3
 8005168:	bf04      	itt	eq
 800516a:	2301      	moveq	r3, #1
 800516c:	6183      	streq	r3, [r0, #24]
 800516e:	f000 f81f 	bl	80051b0 <__sfp>
 8005172:	6060      	str	r0, [r4, #4]
 8005174:	4620      	mov	r0, r4
 8005176:	f000 f81b 	bl	80051b0 <__sfp>
 800517a:	60a0      	str	r0, [r4, #8]
 800517c:	4620      	mov	r0, r4
 800517e:	f000 f817 	bl	80051b0 <__sfp>
 8005182:	2200      	movs	r2, #0
 8005184:	60e0      	str	r0, [r4, #12]
 8005186:	2104      	movs	r1, #4
 8005188:	6860      	ldr	r0, [r4, #4]
 800518a:	f7ff ffa1 	bl	80050d0 <std>
 800518e:	2201      	movs	r2, #1
 8005190:	2109      	movs	r1, #9
 8005192:	68a0      	ldr	r0, [r4, #8]
 8005194:	f7ff ff9c 	bl	80050d0 <std>
 8005198:	2202      	movs	r2, #2
 800519a:	2112      	movs	r1, #18
 800519c:	68e0      	ldr	r0, [r4, #12]
 800519e:	f7ff ff97 	bl	80050d0 <std>
 80051a2:	2301      	movs	r3, #1
 80051a4:	61a3      	str	r3, [r4, #24]
 80051a6:	bd10      	pop	{r4, pc}
 80051a8:	08006258 	.word	0x08006258
 80051ac:	08005119 	.word	0x08005119

080051b0 <__sfp>:
 80051b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b2:	4b1b      	ldr	r3, [pc, #108]	; (8005220 <__sfp+0x70>)
 80051b4:	681e      	ldr	r6, [r3, #0]
 80051b6:	69b3      	ldr	r3, [r6, #24]
 80051b8:	4607      	mov	r7, r0
 80051ba:	b913      	cbnz	r3, 80051c2 <__sfp+0x12>
 80051bc:	4630      	mov	r0, r6
 80051be:	f7ff ffc7 	bl	8005150 <__sinit>
 80051c2:	3648      	adds	r6, #72	; 0x48
 80051c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	d503      	bpl.n	80051d4 <__sfp+0x24>
 80051cc:	6833      	ldr	r3, [r6, #0]
 80051ce:	b133      	cbz	r3, 80051de <__sfp+0x2e>
 80051d0:	6836      	ldr	r6, [r6, #0]
 80051d2:	e7f7      	b.n	80051c4 <__sfp+0x14>
 80051d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051d8:	b16d      	cbz	r5, 80051f6 <__sfp+0x46>
 80051da:	3468      	adds	r4, #104	; 0x68
 80051dc:	e7f4      	b.n	80051c8 <__sfp+0x18>
 80051de:	2104      	movs	r1, #4
 80051e0:	4638      	mov	r0, r7
 80051e2:	f7ff ff9f 	bl	8005124 <__sfmoreglue>
 80051e6:	6030      	str	r0, [r6, #0]
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d1f1      	bne.n	80051d0 <__sfp+0x20>
 80051ec:	230c      	movs	r3, #12
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	4604      	mov	r4, r0
 80051f2:	4620      	mov	r0, r4
 80051f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051f6:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <__sfp+0x74>)
 80051f8:	6665      	str	r5, [r4, #100]	; 0x64
 80051fa:	e9c4 5500 	strd	r5, r5, [r4]
 80051fe:	60a5      	str	r5, [r4, #8]
 8005200:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005204:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005208:	2208      	movs	r2, #8
 800520a:	4629      	mov	r1, r5
 800520c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005210:	f7ff ff0a 	bl	8005028 <memset>
 8005214:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005218:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800521c:	e7e9      	b.n	80051f2 <__sfp+0x42>
 800521e:	bf00      	nop
 8005220:	08006258 	.word	0x08006258
 8005224:	ffff0001 	.word	0xffff0001

08005228 <_fwalk_reent>:
 8005228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800522c:	4680      	mov	r8, r0
 800522e:	4689      	mov	r9, r1
 8005230:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005234:	2600      	movs	r6, #0
 8005236:	b914      	cbnz	r4, 800523e <_fwalk_reent+0x16>
 8005238:	4630      	mov	r0, r6
 800523a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800523e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005242:	3f01      	subs	r7, #1
 8005244:	d501      	bpl.n	800524a <_fwalk_reent+0x22>
 8005246:	6824      	ldr	r4, [r4, #0]
 8005248:	e7f5      	b.n	8005236 <_fwalk_reent+0xe>
 800524a:	89ab      	ldrh	r3, [r5, #12]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d907      	bls.n	8005260 <_fwalk_reent+0x38>
 8005250:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005254:	3301      	adds	r3, #1
 8005256:	d003      	beq.n	8005260 <_fwalk_reent+0x38>
 8005258:	4629      	mov	r1, r5
 800525a:	4640      	mov	r0, r8
 800525c:	47c8      	blx	r9
 800525e:	4306      	orrs	r6, r0
 8005260:	3568      	adds	r5, #104	; 0x68
 8005262:	e7ee      	b.n	8005242 <_fwalk_reent+0x1a>

08005264 <_malloc_r>:
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	1ccd      	adds	r5, r1, #3
 8005268:	f025 0503 	bic.w	r5, r5, #3
 800526c:	3508      	adds	r5, #8
 800526e:	2d0c      	cmp	r5, #12
 8005270:	bf38      	it	cc
 8005272:	250c      	movcc	r5, #12
 8005274:	2d00      	cmp	r5, #0
 8005276:	4606      	mov	r6, r0
 8005278:	db01      	blt.n	800527e <_malloc_r+0x1a>
 800527a:	42a9      	cmp	r1, r5
 800527c:	d903      	bls.n	8005286 <_malloc_r+0x22>
 800527e:	230c      	movs	r3, #12
 8005280:	6033      	str	r3, [r6, #0]
 8005282:	2000      	movs	r0, #0
 8005284:	bd70      	pop	{r4, r5, r6, pc}
 8005286:	f000 fee1 	bl	800604c <__malloc_lock>
 800528a:	4a21      	ldr	r2, [pc, #132]	; (8005310 <_malloc_r+0xac>)
 800528c:	6814      	ldr	r4, [r2, #0]
 800528e:	4621      	mov	r1, r4
 8005290:	b991      	cbnz	r1, 80052b8 <_malloc_r+0x54>
 8005292:	4c20      	ldr	r4, [pc, #128]	; (8005314 <_malloc_r+0xb0>)
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	b91b      	cbnz	r3, 80052a0 <_malloc_r+0x3c>
 8005298:	4630      	mov	r0, r6
 800529a:	f000 fc57 	bl	8005b4c <_sbrk_r>
 800529e:	6020      	str	r0, [r4, #0]
 80052a0:	4629      	mov	r1, r5
 80052a2:	4630      	mov	r0, r6
 80052a4:	f000 fc52 	bl	8005b4c <_sbrk_r>
 80052a8:	1c43      	adds	r3, r0, #1
 80052aa:	d124      	bne.n	80052f6 <_malloc_r+0x92>
 80052ac:	230c      	movs	r3, #12
 80052ae:	6033      	str	r3, [r6, #0]
 80052b0:	4630      	mov	r0, r6
 80052b2:	f000 fecc 	bl	800604e <__malloc_unlock>
 80052b6:	e7e4      	b.n	8005282 <_malloc_r+0x1e>
 80052b8:	680b      	ldr	r3, [r1, #0]
 80052ba:	1b5b      	subs	r3, r3, r5
 80052bc:	d418      	bmi.n	80052f0 <_malloc_r+0x8c>
 80052be:	2b0b      	cmp	r3, #11
 80052c0:	d90f      	bls.n	80052e2 <_malloc_r+0x7e>
 80052c2:	600b      	str	r3, [r1, #0]
 80052c4:	50cd      	str	r5, [r1, r3]
 80052c6:	18cc      	adds	r4, r1, r3
 80052c8:	4630      	mov	r0, r6
 80052ca:	f000 fec0 	bl	800604e <__malloc_unlock>
 80052ce:	f104 000b 	add.w	r0, r4, #11
 80052d2:	1d23      	adds	r3, r4, #4
 80052d4:	f020 0007 	bic.w	r0, r0, #7
 80052d8:	1ac3      	subs	r3, r0, r3
 80052da:	d0d3      	beq.n	8005284 <_malloc_r+0x20>
 80052dc:	425a      	negs	r2, r3
 80052de:	50e2      	str	r2, [r4, r3]
 80052e0:	e7d0      	b.n	8005284 <_malloc_r+0x20>
 80052e2:	428c      	cmp	r4, r1
 80052e4:	684b      	ldr	r3, [r1, #4]
 80052e6:	bf16      	itet	ne
 80052e8:	6063      	strne	r3, [r4, #4]
 80052ea:	6013      	streq	r3, [r2, #0]
 80052ec:	460c      	movne	r4, r1
 80052ee:	e7eb      	b.n	80052c8 <_malloc_r+0x64>
 80052f0:	460c      	mov	r4, r1
 80052f2:	6849      	ldr	r1, [r1, #4]
 80052f4:	e7cc      	b.n	8005290 <_malloc_r+0x2c>
 80052f6:	1cc4      	adds	r4, r0, #3
 80052f8:	f024 0403 	bic.w	r4, r4, #3
 80052fc:	42a0      	cmp	r0, r4
 80052fe:	d005      	beq.n	800530c <_malloc_r+0xa8>
 8005300:	1a21      	subs	r1, r4, r0
 8005302:	4630      	mov	r0, r6
 8005304:	f000 fc22 	bl	8005b4c <_sbrk_r>
 8005308:	3001      	adds	r0, #1
 800530a:	d0cf      	beq.n	80052ac <_malloc_r+0x48>
 800530c:	6025      	str	r5, [r4, #0]
 800530e:	e7db      	b.n	80052c8 <_malloc_r+0x64>
 8005310:	20000094 	.word	0x20000094
 8005314:	20000098 	.word	0x20000098

08005318 <__ssputs_r>:
 8005318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800531c:	688e      	ldr	r6, [r1, #8]
 800531e:	429e      	cmp	r6, r3
 8005320:	4682      	mov	sl, r0
 8005322:	460c      	mov	r4, r1
 8005324:	4690      	mov	r8, r2
 8005326:	4699      	mov	r9, r3
 8005328:	d837      	bhi.n	800539a <__ssputs_r+0x82>
 800532a:	898a      	ldrh	r2, [r1, #12]
 800532c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005330:	d031      	beq.n	8005396 <__ssputs_r+0x7e>
 8005332:	6825      	ldr	r5, [r4, #0]
 8005334:	6909      	ldr	r1, [r1, #16]
 8005336:	1a6f      	subs	r7, r5, r1
 8005338:	6965      	ldr	r5, [r4, #20]
 800533a:	2302      	movs	r3, #2
 800533c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005340:	fb95 f5f3 	sdiv	r5, r5, r3
 8005344:	f109 0301 	add.w	r3, r9, #1
 8005348:	443b      	add	r3, r7
 800534a:	429d      	cmp	r5, r3
 800534c:	bf38      	it	cc
 800534e:	461d      	movcc	r5, r3
 8005350:	0553      	lsls	r3, r2, #21
 8005352:	d530      	bpl.n	80053b6 <__ssputs_r+0x9e>
 8005354:	4629      	mov	r1, r5
 8005356:	f7ff ff85 	bl	8005264 <_malloc_r>
 800535a:	4606      	mov	r6, r0
 800535c:	b950      	cbnz	r0, 8005374 <__ssputs_r+0x5c>
 800535e:	230c      	movs	r3, #12
 8005360:	f8ca 3000 	str.w	r3, [sl]
 8005364:	89a3      	ldrh	r3, [r4, #12]
 8005366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800536a:	81a3      	strh	r3, [r4, #12]
 800536c:	f04f 30ff 	mov.w	r0, #4294967295
 8005370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005374:	463a      	mov	r2, r7
 8005376:	6921      	ldr	r1, [r4, #16]
 8005378:	f000 fe44 	bl	8006004 <memcpy>
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	6126      	str	r6, [r4, #16]
 800538a:	6165      	str	r5, [r4, #20]
 800538c:	443e      	add	r6, r7
 800538e:	1bed      	subs	r5, r5, r7
 8005390:	6026      	str	r6, [r4, #0]
 8005392:	60a5      	str	r5, [r4, #8]
 8005394:	464e      	mov	r6, r9
 8005396:	454e      	cmp	r6, r9
 8005398:	d900      	bls.n	800539c <__ssputs_r+0x84>
 800539a:	464e      	mov	r6, r9
 800539c:	4632      	mov	r2, r6
 800539e:	4641      	mov	r1, r8
 80053a0:	6820      	ldr	r0, [r4, #0]
 80053a2:	f000 fe3a 	bl	800601a <memmove>
 80053a6:	68a3      	ldr	r3, [r4, #8]
 80053a8:	1b9b      	subs	r3, r3, r6
 80053aa:	60a3      	str	r3, [r4, #8]
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	441e      	add	r6, r3
 80053b0:	6026      	str	r6, [r4, #0]
 80053b2:	2000      	movs	r0, #0
 80053b4:	e7dc      	b.n	8005370 <__ssputs_r+0x58>
 80053b6:	462a      	mov	r2, r5
 80053b8:	f000 fe98 	bl	80060ec <_realloc_r>
 80053bc:	4606      	mov	r6, r0
 80053be:	2800      	cmp	r0, #0
 80053c0:	d1e2      	bne.n	8005388 <__ssputs_r+0x70>
 80053c2:	6921      	ldr	r1, [r4, #16]
 80053c4:	4650      	mov	r0, sl
 80053c6:	f000 fe43 	bl	8006050 <_free_r>
 80053ca:	e7c8      	b.n	800535e <__ssputs_r+0x46>

080053cc <_svfiprintf_r>:
 80053cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d0:	461d      	mov	r5, r3
 80053d2:	898b      	ldrh	r3, [r1, #12]
 80053d4:	061f      	lsls	r7, r3, #24
 80053d6:	b09d      	sub	sp, #116	; 0x74
 80053d8:	4680      	mov	r8, r0
 80053da:	460c      	mov	r4, r1
 80053dc:	4616      	mov	r6, r2
 80053de:	d50f      	bpl.n	8005400 <_svfiprintf_r+0x34>
 80053e0:	690b      	ldr	r3, [r1, #16]
 80053e2:	b96b      	cbnz	r3, 8005400 <_svfiprintf_r+0x34>
 80053e4:	2140      	movs	r1, #64	; 0x40
 80053e6:	f7ff ff3d 	bl	8005264 <_malloc_r>
 80053ea:	6020      	str	r0, [r4, #0]
 80053ec:	6120      	str	r0, [r4, #16]
 80053ee:	b928      	cbnz	r0, 80053fc <_svfiprintf_r+0x30>
 80053f0:	230c      	movs	r3, #12
 80053f2:	f8c8 3000 	str.w	r3, [r8]
 80053f6:	f04f 30ff 	mov.w	r0, #4294967295
 80053fa:	e0c8      	b.n	800558e <_svfiprintf_r+0x1c2>
 80053fc:	2340      	movs	r3, #64	; 0x40
 80053fe:	6163      	str	r3, [r4, #20]
 8005400:	2300      	movs	r3, #0
 8005402:	9309      	str	r3, [sp, #36]	; 0x24
 8005404:	2320      	movs	r3, #32
 8005406:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800540a:	2330      	movs	r3, #48	; 0x30
 800540c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005410:	9503      	str	r5, [sp, #12]
 8005412:	f04f 0b01 	mov.w	fp, #1
 8005416:	4637      	mov	r7, r6
 8005418:	463d      	mov	r5, r7
 800541a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800541e:	b10b      	cbz	r3, 8005424 <_svfiprintf_r+0x58>
 8005420:	2b25      	cmp	r3, #37	; 0x25
 8005422:	d13e      	bne.n	80054a2 <_svfiprintf_r+0xd6>
 8005424:	ebb7 0a06 	subs.w	sl, r7, r6
 8005428:	d00b      	beq.n	8005442 <_svfiprintf_r+0x76>
 800542a:	4653      	mov	r3, sl
 800542c:	4632      	mov	r2, r6
 800542e:	4621      	mov	r1, r4
 8005430:	4640      	mov	r0, r8
 8005432:	f7ff ff71 	bl	8005318 <__ssputs_r>
 8005436:	3001      	adds	r0, #1
 8005438:	f000 80a4 	beq.w	8005584 <_svfiprintf_r+0x1b8>
 800543c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800543e:	4453      	add	r3, sl
 8005440:	9309      	str	r3, [sp, #36]	; 0x24
 8005442:	783b      	ldrb	r3, [r7, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 809d 	beq.w	8005584 <_svfiprintf_r+0x1b8>
 800544a:	2300      	movs	r3, #0
 800544c:	f04f 32ff 	mov.w	r2, #4294967295
 8005450:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005454:	9304      	str	r3, [sp, #16]
 8005456:	9307      	str	r3, [sp, #28]
 8005458:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800545c:	931a      	str	r3, [sp, #104]	; 0x68
 800545e:	462f      	mov	r7, r5
 8005460:	2205      	movs	r2, #5
 8005462:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005466:	4850      	ldr	r0, [pc, #320]	; (80055a8 <_svfiprintf_r+0x1dc>)
 8005468:	f7fa ff3a 	bl	80002e0 <memchr>
 800546c:	9b04      	ldr	r3, [sp, #16]
 800546e:	b9d0      	cbnz	r0, 80054a6 <_svfiprintf_r+0xda>
 8005470:	06d9      	lsls	r1, r3, #27
 8005472:	bf44      	itt	mi
 8005474:	2220      	movmi	r2, #32
 8005476:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800547a:	071a      	lsls	r2, r3, #28
 800547c:	bf44      	itt	mi
 800547e:	222b      	movmi	r2, #43	; 0x2b
 8005480:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005484:	782a      	ldrb	r2, [r5, #0]
 8005486:	2a2a      	cmp	r2, #42	; 0x2a
 8005488:	d015      	beq.n	80054b6 <_svfiprintf_r+0xea>
 800548a:	9a07      	ldr	r2, [sp, #28]
 800548c:	462f      	mov	r7, r5
 800548e:	2000      	movs	r0, #0
 8005490:	250a      	movs	r5, #10
 8005492:	4639      	mov	r1, r7
 8005494:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005498:	3b30      	subs	r3, #48	; 0x30
 800549a:	2b09      	cmp	r3, #9
 800549c:	d94d      	bls.n	800553a <_svfiprintf_r+0x16e>
 800549e:	b1b8      	cbz	r0, 80054d0 <_svfiprintf_r+0x104>
 80054a0:	e00f      	b.n	80054c2 <_svfiprintf_r+0xf6>
 80054a2:	462f      	mov	r7, r5
 80054a4:	e7b8      	b.n	8005418 <_svfiprintf_r+0x4c>
 80054a6:	4a40      	ldr	r2, [pc, #256]	; (80055a8 <_svfiprintf_r+0x1dc>)
 80054a8:	1a80      	subs	r0, r0, r2
 80054aa:	fa0b f000 	lsl.w	r0, fp, r0
 80054ae:	4318      	orrs	r0, r3
 80054b0:	9004      	str	r0, [sp, #16]
 80054b2:	463d      	mov	r5, r7
 80054b4:	e7d3      	b.n	800545e <_svfiprintf_r+0x92>
 80054b6:	9a03      	ldr	r2, [sp, #12]
 80054b8:	1d11      	adds	r1, r2, #4
 80054ba:	6812      	ldr	r2, [r2, #0]
 80054bc:	9103      	str	r1, [sp, #12]
 80054be:	2a00      	cmp	r2, #0
 80054c0:	db01      	blt.n	80054c6 <_svfiprintf_r+0xfa>
 80054c2:	9207      	str	r2, [sp, #28]
 80054c4:	e004      	b.n	80054d0 <_svfiprintf_r+0x104>
 80054c6:	4252      	negs	r2, r2
 80054c8:	f043 0302 	orr.w	r3, r3, #2
 80054cc:	9207      	str	r2, [sp, #28]
 80054ce:	9304      	str	r3, [sp, #16]
 80054d0:	783b      	ldrb	r3, [r7, #0]
 80054d2:	2b2e      	cmp	r3, #46	; 0x2e
 80054d4:	d10c      	bne.n	80054f0 <_svfiprintf_r+0x124>
 80054d6:	787b      	ldrb	r3, [r7, #1]
 80054d8:	2b2a      	cmp	r3, #42	; 0x2a
 80054da:	d133      	bne.n	8005544 <_svfiprintf_r+0x178>
 80054dc:	9b03      	ldr	r3, [sp, #12]
 80054de:	1d1a      	adds	r2, r3, #4
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	9203      	str	r2, [sp, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bfb8      	it	lt
 80054e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80054ec:	3702      	adds	r7, #2
 80054ee:	9305      	str	r3, [sp, #20]
 80054f0:	4d2e      	ldr	r5, [pc, #184]	; (80055ac <_svfiprintf_r+0x1e0>)
 80054f2:	7839      	ldrb	r1, [r7, #0]
 80054f4:	2203      	movs	r2, #3
 80054f6:	4628      	mov	r0, r5
 80054f8:	f7fa fef2 	bl	80002e0 <memchr>
 80054fc:	b138      	cbz	r0, 800550e <_svfiprintf_r+0x142>
 80054fe:	2340      	movs	r3, #64	; 0x40
 8005500:	1b40      	subs	r0, r0, r5
 8005502:	fa03 f000 	lsl.w	r0, r3, r0
 8005506:	9b04      	ldr	r3, [sp, #16]
 8005508:	4303      	orrs	r3, r0
 800550a:	3701      	adds	r7, #1
 800550c:	9304      	str	r3, [sp, #16]
 800550e:	7839      	ldrb	r1, [r7, #0]
 8005510:	4827      	ldr	r0, [pc, #156]	; (80055b0 <_svfiprintf_r+0x1e4>)
 8005512:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005516:	2206      	movs	r2, #6
 8005518:	1c7e      	adds	r6, r7, #1
 800551a:	f7fa fee1 	bl	80002e0 <memchr>
 800551e:	2800      	cmp	r0, #0
 8005520:	d038      	beq.n	8005594 <_svfiprintf_r+0x1c8>
 8005522:	4b24      	ldr	r3, [pc, #144]	; (80055b4 <_svfiprintf_r+0x1e8>)
 8005524:	bb13      	cbnz	r3, 800556c <_svfiprintf_r+0x1a0>
 8005526:	9b03      	ldr	r3, [sp, #12]
 8005528:	3307      	adds	r3, #7
 800552a:	f023 0307 	bic.w	r3, r3, #7
 800552e:	3308      	adds	r3, #8
 8005530:	9303      	str	r3, [sp, #12]
 8005532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005534:	444b      	add	r3, r9
 8005536:	9309      	str	r3, [sp, #36]	; 0x24
 8005538:	e76d      	b.n	8005416 <_svfiprintf_r+0x4a>
 800553a:	fb05 3202 	mla	r2, r5, r2, r3
 800553e:	2001      	movs	r0, #1
 8005540:	460f      	mov	r7, r1
 8005542:	e7a6      	b.n	8005492 <_svfiprintf_r+0xc6>
 8005544:	2300      	movs	r3, #0
 8005546:	3701      	adds	r7, #1
 8005548:	9305      	str	r3, [sp, #20]
 800554a:	4619      	mov	r1, r3
 800554c:	250a      	movs	r5, #10
 800554e:	4638      	mov	r0, r7
 8005550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005554:	3a30      	subs	r2, #48	; 0x30
 8005556:	2a09      	cmp	r2, #9
 8005558:	d903      	bls.n	8005562 <_svfiprintf_r+0x196>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0c8      	beq.n	80054f0 <_svfiprintf_r+0x124>
 800555e:	9105      	str	r1, [sp, #20]
 8005560:	e7c6      	b.n	80054f0 <_svfiprintf_r+0x124>
 8005562:	fb05 2101 	mla	r1, r5, r1, r2
 8005566:	2301      	movs	r3, #1
 8005568:	4607      	mov	r7, r0
 800556a:	e7f0      	b.n	800554e <_svfiprintf_r+0x182>
 800556c:	ab03      	add	r3, sp, #12
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	4622      	mov	r2, r4
 8005572:	4b11      	ldr	r3, [pc, #68]	; (80055b8 <_svfiprintf_r+0x1ec>)
 8005574:	a904      	add	r1, sp, #16
 8005576:	4640      	mov	r0, r8
 8005578:	f3af 8000 	nop.w
 800557c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005580:	4681      	mov	r9, r0
 8005582:	d1d6      	bne.n	8005532 <_svfiprintf_r+0x166>
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	065b      	lsls	r3, r3, #25
 8005588:	f53f af35 	bmi.w	80053f6 <_svfiprintf_r+0x2a>
 800558c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800558e:	b01d      	add	sp, #116	; 0x74
 8005590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005594:	ab03      	add	r3, sp, #12
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	4622      	mov	r2, r4
 800559a:	4b07      	ldr	r3, [pc, #28]	; (80055b8 <_svfiprintf_r+0x1ec>)
 800559c:	a904      	add	r1, sp, #16
 800559e:	4640      	mov	r0, r8
 80055a0:	f000 f9c2 	bl	8005928 <_printf_i>
 80055a4:	e7ea      	b.n	800557c <_svfiprintf_r+0x1b0>
 80055a6:	bf00      	nop
 80055a8:	080062bc 	.word	0x080062bc
 80055ac:	080062c2 	.word	0x080062c2
 80055b0:	080062c6 	.word	0x080062c6
 80055b4:	00000000 	.word	0x00000000
 80055b8:	08005319 	.word	0x08005319

080055bc <__sfputc_r>:
 80055bc:	6893      	ldr	r3, [r2, #8]
 80055be:	3b01      	subs	r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	b410      	push	{r4}
 80055c4:	6093      	str	r3, [r2, #8]
 80055c6:	da08      	bge.n	80055da <__sfputc_r+0x1e>
 80055c8:	6994      	ldr	r4, [r2, #24]
 80055ca:	42a3      	cmp	r3, r4
 80055cc:	db01      	blt.n	80055d2 <__sfputc_r+0x16>
 80055ce:	290a      	cmp	r1, #10
 80055d0:	d103      	bne.n	80055da <__sfputc_r+0x1e>
 80055d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055d6:	f000 bb0d 	b.w	8005bf4 <__swbuf_r>
 80055da:	6813      	ldr	r3, [r2, #0]
 80055dc:	1c58      	adds	r0, r3, #1
 80055de:	6010      	str	r0, [r2, #0]
 80055e0:	7019      	strb	r1, [r3, #0]
 80055e2:	4608      	mov	r0, r1
 80055e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <__sfputs_r>:
 80055ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ec:	4606      	mov	r6, r0
 80055ee:	460f      	mov	r7, r1
 80055f0:	4614      	mov	r4, r2
 80055f2:	18d5      	adds	r5, r2, r3
 80055f4:	42ac      	cmp	r4, r5
 80055f6:	d101      	bne.n	80055fc <__sfputs_r+0x12>
 80055f8:	2000      	movs	r0, #0
 80055fa:	e007      	b.n	800560c <__sfputs_r+0x22>
 80055fc:	463a      	mov	r2, r7
 80055fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005602:	4630      	mov	r0, r6
 8005604:	f7ff ffda 	bl	80055bc <__sfputc_r>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d1f3      	bne.n	80055f4 <__sfputs_r+0xa>
 800560c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005610 <_vfiprintf_r>:
 8005610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005614:	460c      	mov	r4, r1
 8005616:	b09d      	sub	sp, #116	; 0x74
 8005618:	4617      	mov	r7, r2
 800561a:	461d      	mov	r5, r3
 800561c:	4606      	mov	r6, r0
 800561e:	b118      	cbz	r0, 8005628 <_vfiprintf_r+0x18>
 8005620:	6983      	ldr	r3, [r0, #24]
 8005622:	b90b      	cbnz	r3, 8005628 <_vfiprintf_r+0x18>
 8005624:	f7ff fd94 	bl	8005150 <__sinit>
 8005628:	4b7c      	ldr	r3, [pc, #496]	; (800581c <_vfiprintf_r+0x20c>)
 800562a:	429c      	cmp	r4, r3
 800562c:	d158      	bne.n	80056e0 <_vfiprintf_r+0xd0>
 800562e:	6874      	ldr	r4, [r6, #4]
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	0718      	lsls	r0, r3, #28
 8005634:	d55e      	bpl.n	80056f4 <_vfiprintf_r+0xe4>
 8005636:	6923      	ldr	r3, [r4, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d05b      	beq.n	80056f4 <_vfiprintf_r+0xe4>
 800563c:	2300      	movs	r3, #0
 800563e:	9309      	str	r3, [sp, #36]	; 0x24
 8005640:	2320      	movs	r3, #32
 8005642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005646:	2330      	movs	r3, #48	; 0x30
 8005648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800564c:	9503      	str	r5, [sp, #12]
 800564e:	f04f 0b01 	mov.w	fp, #1
 8005652:	46b8      	mov	r8, r7
 8005654:	4645      	mov	r5, r8
 8005656:	f815 3b01 	ldrb.w	r3, [r5], #1
 800565a:	b10b      	cbz	r3, 8005660 <_vfiprintf_r+0x50>
 800565c:	2b25      	cmp	r3, #37	; 0x25
 800565e:	d154      	bne.n	800570a <_vfiprintf_r+0xfa>
 8005660:	ebb8 0a07 	subs.w	sl, r8, r7
 8005664:	d00b      	beq.n	800567e <_vfiprintf_r+0x6e>
 8005666:	4653      	mov	r3, sl
 8005668:	463a      	mov	r2, r7
 800566a:	4621      	mov	r1, r4
 800566c:	4630      	mov	r0, r6
 800566e:	f7ff ffbc 	bl	80055ea <__sfputs_r>
 8005672:	3001      	adds	r0, #1
 8005674:	f000 80c2 	beq.w	80057fc <_vfiprintf_r+0x1ec>
 8005678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800567a:	4453      	add	r3, sl
 800567c:	9309      	str	r3, [sp, #36]	; 0x24
 800567e:	f898 3000 	ldrb.w	r3, [r8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 80ba 	beq.w	80057fc <_vfiprintf_r+0x1ec>
 8005688:	2300      	movs	r3, #0
 800568a:	f04f 32ff 	mov.w	r2, #4294967295
 800568e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005692:	9304      	str	r3, [sp, #16]
 8005694:	9307      	str	r3, [sp, #28]
 8005696:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800569a:	931a      	str	r3, [sp, #104]	; 0x68
 800569c:	46a8      	mov	r8, r5
 800569e:	2205      	movs	r2, #5
 80056a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80056a4:	485e      	ldr	r0, [pc, #376]	; (8005820 <_vfiprintf_r+0x210>)
 80056a6:	f7fa fe1b 	bl	80002e0 <memchr>
 80056aa:	9b04      	ldr	r3, [sp, #16]
 80056ac:	bb78      	cbnz	r0, 800570e <_vfiprintf_r+0xfe>
 80056ae:	06d9      	lsls	r1, r3, #27
 80056b0:	bf44      	itt	mi
 80056b2:	2220      	movmi	r2, #32
 80056b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80056b8:	071a      	lsls	r2, r3, #28
 80056ba:	bf44      	itt	mi
 80056bc:	222b      	movmi	r2, #43	; 0x2b
 80056be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80056c2:	782a      	ldrb	r2, [r5, #0]
 80056c4:	2a2a      	cmp	r2, #42	; 0x2a
 80056c6:	d02a      	beq.n	800571e <_vfiprintf_r+0x10e>
 80056c8:	9a07      	ldr	r2, [sp, #28]
 80056ca:	46a8      	mov	r8, r5
 80056cc:	2000      	movs	r0, #0
 80056ce:	250a      	movs	r5, #10
 80056d0:	4641      	mov	r1, r8
 80056d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056d6:	3b30      	subs	r3, #48	; 0x30
 80056d8:	2b09      	cmp	r3, #9
 80056da:	d969      	bls.n	80057b0 <_vfiprintf_r+0x1a0>
 80056dc:	b360      	cbz	r0, 8005738 <_vfiprintf_r+0x128>
 80056de:	e024      	b.n	800572a <_vfiprintf_r+0x11a>
 80056e0:	4b50      	ldr	r3, [pc, #320]	; (8005824 <_vfiprintf_r+0x214>)
 80056e2:	429c      	cmp	r4, r3
 80056e4:	d101      	bne.n	80056ea <_vfiprintf_r+0xda>
 80056e6:	68b4      	ldr	r4, [r6, #8]
 80056e8:	e7a2      	b.n	8005630 <_vfiprintf_r+0x20>
 80056ea:	4b4f      	ldr	r3, [pc, #316]	; (8005828 <_vfiprintf_r+0x218>)
 80056ec:	429c      	cmp	r4, r3
 80056ee:	bf08      	it	eq
 80056f0:	68f4      	ldreq	r4, [r6, #12]
 80056f2:	e79d      	b.n	8005630 <_vfiprintf_r+0x20>
 80056f4:	4621      	mov	r1, r4
 80056f6:	4630      	mov	r0, r6
 80056f8:	f000 fae0 	bl	8005cbc <__swsetup_r>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d09d      	beq.n	800563c <_vfiprintf_r+0x2c>
 8005700:	f04f 30ff 	mov.w	r0, #4294967295
 8005704:	b01d      	add	sp, #116	; 0x74
 8005706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570a:	46a8      	mov	r8, r5
 800570c:	e7a2      	b.n	8005654 <_vfiprintf_r+0x44>
 800570e:	4a44      	ldr	r2, [pc, #272]	; (8005820 <_vfiprintf_r+0x210>)
 8005710:	1a80      	subs	r0, r0, r2
 8005712:	fa0b f000 	lsl.w	r0, fp, r0
 8005716:	4318      	orrs	r0, r3
 8005718:	9004      	str	r0, [sp, #16]
 800571a:	4645      	mov	r5, r8
 800571c:	e7be      	b.n	800569c <_vfiprintf_r+0x8c>
 800571e:	9a03      	ldr	r2, [sp, #12]
 8005720:	1d11      	adds	r1, r2, #4
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	9103      	str	r1, [sp, #12]
 8005726:	2a00      	cmp	r2, #0
 8005728:	db01      	blt.n	800572e <_vfiprintf_r+0x11e>
 800572a:	9207      	str	r2, [sp, #28]
 800572c:	e004      	b.n	8005738 <_vfiprintf_r+0x128>
 800572e:	4252      	negs	r2, r2
 8005730:	f043 0302 	orr.w	r3, r3, #2
 8005734:	9207      	str	r2, [sp, #28]
 8005736:	9304      	str	r3, [sp, #16]
 8005738:	f898 3000 	ldrb.w	r3, [r8]
 800573c:	2b2e      	cmp	r3, #46	; 0x2e
 800573e:	d10e      	bne.n	800575e <_vfiprintf_r+0x14e>
 8005740:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005744:	2b2a      	cmp	r3, #42	; 0x2a
 8005746:	d138      	bne.n	80057ba <_vfiprintf_r+0x1aa>
 8005748:	9b03      	ldr	r3, [sp, #12]
 800574a:	1d1a      	adds	r2, r3, #4
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	9203      	str	r2, [sp, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	bfb8      	it	lt
 8005754:	f04f 33ff 	movlt.w	r3, #4294967295
 8005758:	f108 0802 	add.w	r8, r8, #2
 800575c:	9305      	str	r3, [sp, #20]
 800575e:	4d33      	ldr	r5, [pc, #204]	; (800582c <_vfiprintf_r+0x21c>)
 8005760:	f898 1000 	ldrb.w	r1, [r8]
 8005764:	2203      	movs	r2, #3
 8005766:	4628      	mov	r0, r5
 8005768:	f7fa fdba 	bl	80002e0 <memchr>
 800576c:	b140      	cbz	r0, 8005780 <_vfiprintf_r+0x170>
 800576e:	2340      	movs	r3, #64	; 0x40
 8005770:	1b40      	subs	r0, r0, r5
 8005772:	fa03 f000 	lsl.w	r0, r3, r0
 8005776:	9b04      	ldr	r3, [sp, #16]
 8005778:	4303      	orrs	r3, r0
 800577a:	f108 0801 	add.w	r8, r8, #1
 800577e:	9304      	str	r3, [sp, #16]
 8005780:	f898 1000 	ldrb.w	r1, [r8]
 8005784:	482a      	ldr	r0, [pc, #168]	; (8005830 <_vfiprintf_r+0x220>)
 8005786:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800578a:	2206      	movs	r2, #6
 800578c:	f108 0701 	add.w	r7, r8, #1
 8005790:	f7fa fda6 	bl	80002e0 <memchr>
 8005794:	2800      	cmp	r0, #0
 8005796:	d037      	beq.n	8005808 <_vfiprintf_r+0x1f8>
 8005798:	4b26      	ldr	r3, [pc, #152]	; (8005834 <_vfiprintf_r+0x224>)
 800579a:	bb1b      	cbnz	r3, 80057e4 <_vfiprintf_r+0x1d4>
 800579c:	9b03      	ldr	r3, [sp, #12]
 800579e:	3307      	adds	r3, #7
 80057a0:	f023 0307 	bic.w	r3, r3, #7
 80057a4:	3308      	adds	r3, #8
 80057a6:	9303      	str	r3, [sp, #12]
 80057a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057aa:	444b      	add	r3, r9
 80057ac:	9309      	str	r3, [sp, #36]	; 0x24
 80057ae:	e750      	b.n	8005652 <_vfiprintf_r+0x42>
 80057b0:	fb05 3202 	mla	r2, r5, r2, r3
 80057b4:	2001      	movs	r0, #1
 80057b6:	4688      	mov	r8, r1
 80057b8:	e78a      	b.n	80056d0 <_vfiprintf_r+0xc0>
 80057ba:	2300      	movs	r3, #0
 80057bc:	f108 0801 	add.w	r8, r8, #1
 80057c0:	9305      	str	r3, [sp, #20]
 80057c2:	4619      	mov	r1, r3
 80057c4:	250a      	movs	r5, #10
 80057c6:	4640      	mov	r0, r8
 80057c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057cc:	3a30      	subs	r2, #48	; 0x30
 80057ce:	2a09      	cmp	r2, #9
 80057d0:	d903      	bls.n	80057da <_vfiprintf_r+0x1ca>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0c3      	beq.n	800575e <_vfiprintf_r+0x14e>
 80057d6:	9105      	str	r1, [sp, #20]
 80057d8:	e7c1      	b.n	800575e <_vfiprintf_r+0x14e>
 80057da:	fb05 2101 	mla	r1, r5, r1, r2
 80057de:	2301      	movs	r3, #1
 80057e0:	4680      	mov	r8, r0
 80057e2:	e7f0      	b.n	80057c6 <_vfiprintf_r+0x1b6>
 80057e4:	ab03      	add	r3, sp, #12
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	4622      	mov	r2, r4
 80057ea:	4b13      	ldr	r3, [pc, #76]	; (8005838 <_vfiprintf_r+0x228>)
 80057ec:	a904      	add	r1, sp, #16
 80057ee:	4630      	mov	r0, r6
 80057f0:	f3af 8000 	nop.w
 80057f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80057f8:	4681      	mov	r9, r0
 80057fa:	d1d5      	bne.n	80057a8 <_vfiprintf_r+0x198>
 80057fc:	89a3      	ldrh	r3, [r4, #12]
 80057fe:	065b      	lsls	r3, r3, #25
 8005800:	f53f af7e 	bmi.w	8005700 <_vfiprintf_r+0xf0>
 8005804:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005806:	e77d      	b.n	8005704 <_vfiprintf_r+0xf4>
 8005808:	ab03      	add	r3, sp, #12
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	4622      	mov	r2, r4
 800580e:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <_vfiprintf_r+0x228>)
 8005810:	a904      	add	r1, sp, #16
 8005812:	4630      	mov	r0, r6
 8005814:	f000 f888 	bl	8005928 <_printf_i>
 8005818:	e7ec      	b.n	80057f4 <_vfiprintf_r+0x1e4>
 800581a:	bf00      	nop
 800581c:	0800627c 	.word	0x0800627c
 8005820:	080062bc 	.word	0x080062bc
 8005824:	0800629c 	.word	0x0800629c
 8005828:	0800625c 	.word	0x0800625c
 800582c:	080062c2 	.word	0x080062c2
 8005830:	080062c6 	.word	0x080062c6
 8005834:	00000000 	.word	0x00000000
 8005838:	080055eb 	.word	0x080055eb

0800583c <_printf_common>:
 800583c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005840:	4691      	mov	r9, r2
 8005842:	461f      	mov	r7, r3
 8005844:	688a      	ldr	r2, [r1, #8]
 8005846:	690b      	ldr	r3, [r1, #16]
 8005848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800584c:	4293      	cmp	r3, r2
 800584e:	bfb8      	it	lt
 8005850:	4613      	movlt	r3, r2
 8005852:	f8c9 3000 	str.w	r3, [r9]
 8005856:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800585a:	4606      	mov	r6, r0
 800585c:	460c      	mov	r4, r1
 800585e:	b112      	cbz	r2, 8005866 <_printf_common+0x2a>
 8005860:	3301      	adds	r3, #1
 8005862:	f8c9 3000 	str.w	r3, [r9]
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	0699      	lsls	r1, r3, #26
 800586a:	bf42      	ittt	mi
 800586c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005870:	3302      	addmi	r3, #2
 8005872:	f8c9 3000 	strmi.w	r3, [r9]
 8005876:	6825      	ldr	r5, [r4, #0]
 8005878:	f015 0506 	ands.w	r5, r5, #6
 800587c:	d107      	bne.n	800588e <_printf_common+0x52>
 800587e:	f104 0a19 	add.w	sl, r4, #25
 8005882:	68e3      	ldr	r3, [r4, #12]
 8005884:	f8d9 2000 	ldr.w	r2, [r9]
 8005888:	1a9b      	subs	r3, r3, r2
 800588a:	42ab      	cmp	r3, r5
 800588c:	dc28      	bgt.n	80058e0 <_printf_common+0xa4>
 800588e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005892:	6822      	ldr	r2, [r4, #0]
 8005894:	3300      	adds	r3, #0
 8005896:	bf18      	it	ne
 8005898:	2301      	movne	r3, #1
 800589a:	0692      	lsls	r2, r2, #26
 800589c:	d42d      	bmi.n	80058fa <_printf_common+0xbe>
 800589e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058a2:	4639      	mov	r1, r7
 80058a4:	4630      	mov	r0, r6
 80058a6:	47c0      	blx	r8
 80058a8:	3001      	adds	r0, #1
 80058aa:	d020      	beq.n	80058ee <_printf_common+0xb2>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	68e5      	ldr	r5, [r4, #12]
 80058b0:	f8d9 2000 	ldr.w	r2, [r9]
 80058b4:	f003 0306 	and.w	r3, r3, #6
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	bf08      	it	eq
 80058bc:	1aad      	subeq	r5, r5, r2
 80058be:	68a3      	ldr	r3, [r4, #8]
 80058c0:	6922      	ldr	r2, [r4, #16]
 80058c2:	bf0c      	ite	eq
 80058c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058c8:	2500      	movne	r5, #0
 80058ca:	4293      	cmp	r3, r2
 80058cc:	bfc4      	itt	gt
 80058ce:	1a9b      	subgt	r3, r3, r2
 80058d0:	18ed      	addgt	r5, r5, r3
 80058d2:	f04f 0900 	mov.w	r9, #0
 80058d6:	341a      	adds	r4, #26
 80058d8:	454d      	cmp	r5, r9
 80058da:	d11a      	bne.n	8005912 <_printf_common+0xd6>
 80058dc:	2000      	movs	r0, #0
 80058de:	e008      	b.n	80058f2 <_printf_common+0xb6>
 80058e0:	2301      	movs	r3, #1
 80058e2:	4652      	mov	r2, sl
 80058e4:	4639      	mov	r1, r7
 80058e6:	4630      	mov	r0, r6
 80058e8:	47c0      	blx	r8
 80058ea:	3001      	adds	r0, #1
 80058ec:	d103      	bne.n	80058f6 <_printf_common+0xba>
 80058ee:	f04f 30ff 	mov.w	r0, #4294967295
 80058f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f6:	3501      	adds	r5, #1
 80058f8:	e7c3      	b.n	8005882 <_printf_common+0x46>
 80058fa:	18e1      	adds	r1, r4, r3
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	2030      	movs	r0, #48	; 0x30
 8005900:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005904:	4422      	add	r2, r4
 8005906:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800590a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800590e:	3302      	adds	r3, #2
 8005910:	e7c5      	b.n	800589e <_printf_common+0x62>
 8005912:	2301      	movs	r3, #1
 8005914:	4622      	mov	r2, r4
 8005916:	4639      	mov	r1, r7
 8005918:	4630      	mov	r0, r6
 800591a:	47c0      	blx	r8
 800591c:	3001      	adds	r0, #1
 800591e:	d0e6      	beq.n	80058ee <_printf_common+0xb2>
 8005920:	f109 0901 	add.w	r9, r9, #1
 8005924:	e7d8      	b.n	80058d8 <_printf_common+0x9c>
	...

08005928 <_printf_i>:
 8005928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800592c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005930:	460c      	mov	r4, r1
 8005932:	7e09      	ldrb	r1, [r1, #24]
 8005934:	b085      	sub	sp, #20
 8005936:	296e      	cmp	r1, #110	; 0x6e
 8005938:	4617      	mov	r7, r2
 800593a:	4606      	mov	r6, r0
 800593c:	4698      	mov	r8, r3
 800593e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005940:	f000 80b3 	beq.w	8005aaa <_printf_i+0x182>
 8005944:	d822      	bhi.n	800598c <_printf_i+0x64>
 8005946:	2963      	cmp	r1, #99	; 0x63
 8005948:	d036      	beq.n	80059b8 <_printf_i+0x90>
 800594a:	d80a      	bhi.n	8005962 <_printf_i+0x3a>
 800594c:	2900      	cmp	r1, #0
 800594e:	f000 80b9 	beq.w	8005ac4 <_printf_i+0x19c>
 8005952:	2958      	cmp	r1, #88	; 0x58
 8005954:	f000 8083 	beq.w	8005a5e <_printf_i+0x136>
 8005958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800595c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005960:	e032      	b.n	80059c8 <_printf_i+0xa0>
 8005962:	2964      	cmp	r1, #100	; 0x64
 8005964:	d001      	beq.n	800596a <_printf_i+0x42>
 8005966:	2969      	cmp	r1, #105	; 0x69
 8005968:	d1f6      	bne.n	8005958 <_printf_i+0x30>
 800596a:	6820      	ldr	r0, [r4, #0]
 800596c:	6813      	ldr	r3, [r2, #0]
 800596e:	0605      	lsls	r5, r0, #24
 8005970:	f103 0104 	add.w	r1, r3, #4
 8005974:	d52a      	bpl.n	80059cc <_printf_i+0xa4>
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6011      	str	r1, [r2, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	da03      	bge.n	8005986 <_printf_i+0x5e>
 800597e:	222d      	movs	r2, #45	; 0x2d
 8005980:	425b      	negs	r3, r3
 8005982:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005986:	486f      	ldr	r0, [pc, #444]	; (8005b44 <_printf_i+0x21c>)
 8005988:	220a      	movs	r2, #10
 800598a:	e039      	b.n	8005a00 <_printf_i+0xd8>
 800598c:	2973      	cmp	r1, #115	; 0x73
 800598e:	f000 809d 	beq.w	8005acc <_printf_i+0x1a4>
 8005992:	d808      	bhi.n	80059a6 <_printf_i+0x7e>
 8005994:	296f      	cmp	r1, #111	; 0x6f
 8005996:	d020      	beq.n	80059da <_printf_i+0xb2>
 8005998:	2970      	cmp	r1, #112	; 0x70
 800599a:	d1dd      	bne.n	8005958 <_printf_i+0x30>
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	f043 0320 	orr.w	r3, r3, #32
 80059a2:	6023      	str	r3, [r4, #0]
 80059a4:	e003      	b.n	80059ae <_printf_i+0x86>
 80059a6:	2975      	cmp	r1, #117	; 0x75
 80059a8:	d017      	beq.n	80059da <_printf_i+0xb2>
 80059aa:	2978      	cmp	r1, #120	; 0x78
 80059ac:	d1d4      	bne.n	8005958 <_printf_i+0x30>
 80059ae:	2378      	movs	r3, #120	; 0x78
 80059b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059b4:	4864      	ldr	r0, [pc, #400]	; (8005b48 <_printf_i+0x220>)
 80059b6:	e055      	b.n	8005a64 <_printf_i+0x13c>
 80059b8:	6813      	ldr	r3, [r2, #0]
 80059ba:	1d19      	adds	r1, r3, #4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6011      	str	r1, [r2, #0]
 80059c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059c8:	2301      	movs	r3, #1
 80059ca:	e08c      	b.n	8005ae6 <_printf_i+0x1be>
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6011      	str	r1, [r2, #0]
 80059d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059d4:	bf18      	it	ne
 80059d6:	b21b      	sxthne	r3, r3
 80059d8:	e7cf      	b.n	800597a <_printf_i+0x52>
 80059da:	6813      	ldr	r3, [r2, #0]
 80059dc:	6825      	ldr	r5, [r4, #0]
 80059de:	1d18      	adds	r0, r3, #4
 80059e0:	6010      	str	r0, [r2, #0]
 80059e2:	0628      	lsls	r0, r5, #24
 80059e4:	d501      	bpl.n	80059ea <_printf_i+0xc2>
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	e002      	b.n	80059f0 <_printf_i+0xc8>
 80059ea:	0668      	lsls	r0, r5, #25
 80059ec:	d5fb      	bpl.n	80059e6 <_printf_i+0xbe>
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	4854      	ldr	r0, [pc, #336]	; (8005b44 <_printf_i+0x21c>)
 80059f2:	296f      	cmp	r1, #111	; 0x6f
 80059f4:	bf14      	ite	ne
 80059f6:	220a      	movne	r2, #10
 80059f8:	2208      	moveq	r2, #8
 80059fa:	2100      	movs	r1, #0
 80059fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a00:	6865      	ldr	r5, [r4, #4]
 8005a02:	60a5      	str	r5, [r4, #8]
 8005a04:	2d00      	cmp	r5, #0
 8005a06:	f2c0 8095 	blt.w	8005b34 <_printf_i+0x20c>
 8005a0a:	6821      	ldr	r1, [r4, #0]
 8005a0c:	f021 0104 	bic.w	r1, r1, #4
 8005a10:	6021      	str	r1, [r4, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d13d      	bne.n	8005a92 <_printf_i+0x16a>
 8005a16:	2d00      	cmp	r5, #0
 8005a18:	f040 808e 	bne.w	8005b38 <_printf_i+0x210>
 8005a1c:	4665      	mov	r5, ip
 8005a1e:	2a08      	cmp	r2, #8
 8005a20:	d10b      	bne.n	8005a3a <_printf_i+0x112>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	07db      	lsls	r3, r3, #31
 8005a26:	d508      	bpl.n	8005a3a <_printf_i+0x112>
 8005a28:	6923      	ldr	r3, [r4, #16]
 8005a2a:	6862      	ldr	r2, [r4, #4]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	bfde      	ittt	le
 8005a30:	2330      	movle	r3, #48	; 0x30
 8005a32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a3a:	ebac 0305 	sub.w	r3, ip, r5
 8005a3e:	6123      	str	r3, [r4, #16]
 8005a40:	f8cd 8000 	str.w	r8, [sp]
 8005a44:	463b      	mov	r3, r7
 8005a46:	aa03      	add	r2, sp, #12
 8005a48:	4621      	mov	r1, r4
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	f7ff fef6 	bl	800583c <_printf_common>
 8005a50:	3001      	adds	r0, #1
 8005a52:	d14d      	bne.n	8005af0 <_printf_i+0x1c8>
 8005a54:	f04f 30ff 	mov.w	r0, #4294967295
 8005a58:	b005      	add	sp, #20
 8005a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a5e:	4839      	ldr	r0, [pc, #228]	; (8005b44 <_printf_i+0x21c>)
 8005a60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005a64:	6813      	ldr	r3, [r2, #0]
 8005a66:	6821      	ldr	r1, [r4, #0]
 8005a68:	1d1d      	adds	r5, r3, #4
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6015      	str	r5, [r2, #0]
 8005a6e:	060a      	lsls	r2, r1, #24
 8005a70:	d50b      	bpl.n	8005a8a <_printf_i+0x162>
 8005a72:	07ca      	lsls	r2, r1, #31
 8005a74:	bf44      	itt	mi
 8005a76:	f041 0120 	orrmi.w	r1, r1, #32
 8005a7a:	6021      	strmi	r1, [r4, #0]
 8005a7c:	b91b      	cbnz	r3, 8005a86 <_printf_i+0x15e>
 8005a7e:	6822      	ldr	r2, [r4, #0]
 8005a80:	f022 0220 	bic.w	r2, r2, #32
 8005a84:	6022      	str	r2, [r4, #0]
 8005a86:	2210      	movs	r2, #16
 8005a88:	e7b7      	b.n	80059fa <_printf_i+0xd2>
 8005a8a:	064d      	lsls	r5, r1, #25
 8005a8c:	bf48      	it	mi
 8005a8e:	b29b      	uxthmi	r3, r3
 8005a90:	e7ef      	b.n	8005a72 <_printf_i+0x14a>
 8005a92:	4665      	mov	r5, ip
 8005a94:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a98:	fb02 3311 	mls	r3, r2, r1, r3
 8005a9c:	5cc3      	ldrb	r3, [r0, r3]
 8005a9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	2900      	cmp	r1, #0
 8005aa6:	d1f5      	bne.n	8005a94 <_printf_i+0x16c>
 8005aa8:	e7b9      	b.n	8005a1e <_printf_i+0xf6>
 8005aaa:	6813      	ldr	r3, [r2, #0]
 8005aac:	6825      	ldr	r5, [r4, #0]
 8005aae:	6961      	ldr	r1, [r4, #20]
 8005ab0:	1d18      	adds	r0, r3, #4
 8005ab2:	6010      	str	r0, [r2, #0]
 8005ab4:	0628      	lsls	r0, r5, #24
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	d501      	bpl.n	8005abe <_printf_i+0x196>
 8005aba:	6019      	str	r1, [r3, #0]
 8005abc:	e002      	b.n	8005ac4 <_printf_i+0x19c>
 8005abe:	066a      	lsls	r2, r5, #25
 8005ac0:	d5fb      	bpl.n	8005aba <_printf_i+0x192>
 8005ac2:	8019      	strh	r1, [r3, #0]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	6123      	str	r3, [r4, #16]
 8005ac8:	4665      	mov	r5, ip
 8005aca:	e7b9      	b.n	8005a40 <_printf_i+0x118>
 8005acc:	6813      	ldr	r3, [r2, #0]
 8005ace:	1d19      	adds	r1, r3, #4
 8005ad0:	6011      	str	r1, [r2, #0]
 8005ad2:	681d      	ldr	r5, [r3, #0]
 8005ad4:	6862      	ldr	r2, [r4, #4]
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	4628      	mov	r0, r5
 8005ada:	f7fa fc01 	bl	80002e0 <memchr>
 8005ade:	b108      	cbz	r0, 8005ae4 <_printf_i+0x1bc>
 8005ae0:	1b40      	subs	r0, r0, r5
 8005ae2:	6060      	str	r0, [r4, #4]
 8005ae4:	6863      	ldr	r3, [r4, #4]
 8005ae6:	6123      	str	r3, [r4, #16]
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aee:	e7a7      	b.n	8005a40 <_printf_i+0x118>
 8005af0:	6923      	ldr	r3, [r4, #16]
 8005af2:	462a      	mov	r2, r5
 8005af4:	4639      	mov	r1, r7
 8005af6:	4630      	mov	r0, r6
 8005af8:	47c0      	blx	r8
 8005afa:	3001      	adds	r0, #1
 8005afc:	d0aa      	beq.n	8005a54 <_printf_i+0x12c>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	079b      	lsls	r3, r3, #30
 8005b02:	d413      	bmi.n	8005b2c <_printf_i+0x204>
 8005b04:	68e0      	ldr	r0, [r4, #12]
 8005b06:	9b03      	ldr	r3, [sp, #12]
 8005b08:	4298      	cmp	r0, r3
 8005b0a:	bfb8      	it	lt
 8005b0c:	4618      	movlt	r0, r3
 8005b0e:	e7a3      	b.n	8005a58 <_printf_i+0x130>
 8005b10:	2301      	movs	r3, #1
 8005b12:	464a      	mov	r2, r9
 8005b14:	4639      	mov	r1, r7
 8005b16:	4630      	mov	r0, r6
 8005b18:	47c0      	blx	r8
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	d09a      	beq.n	8005a54 <_printf_i+0x12c>
 8005b1e:	3501      	adds	r5, #1
 8005b20:	68e3      	ldr	r3, [r4, #12]
 8005b22:	9a03      	ldr	r2, [sp, #12]
 8005b24:	1a9b      	subs	r3, r3, r2
 8005b26:	42ab      	cmp	r3, r5
 8005b28:	dcf2      	bgt.n	8005b10 <_printf_i+0x1e8>
 8005b2a:	e7eb      	b.n	8005b04 <_printf_i+0x1dc>
 8005b2c:	2500      	movs	r5, #0
 8005b2e:	f104 0919 	add.w	r9, r4, #25
 8005b32:	e7f5      	b.n	8005b20 <_printf_i+0x1f8>
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1ac      	bne.n	8005a92 <_printf_i+0x16a>
 8005b38:	7803      	ldrb	r3, [r0, #0]
 8005b3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b42:	e76c      	b.n	8005a1e <_printf_i+0xf6>
 8005b44:	080062cd 	.word	0x080062cd
 8005b48:	080062de 	.word	0x080062de

08005b4c <_sbrk_r>:
 8005b4c:	b538      	push	{r3, r4, r5, lr}
 8005b4e:	4c06      	ldr	r4, [pc, #24]	; (8005b68 <_sbrk_r+0x1c>)
 8005b50:	2300      	movs	r3, #0
 8005b52:	4605      	mov	r5, r0
 8005b54:	4608      	mov	r0, r1
 8005b56:	6023      	str	r3, [r4, #0]
 8005b58:	f7fb f9a0 	bl	8000e9c <_sbrk>
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	d102      	bne.n	8005b66 <_sbrk_r+0x1a>
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	b103      	cbz	r3, 8005b66 <_sbrk_r+0x1a>
 8005b64:	602b      	str	r3, [r5, #0]
 8005b66:	bd38      	pop	{r3, r4, r5, pc}
 8005b68:	200001ac 	.word	0x200001ac

08005b6c <__sread>:
 8005b6c:	b510      	push	{r4, lr}
 8005b6e:	460c      	mov	r4, r1
 8005b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b74:	f000 fae0 	bl	8006138 <_read_r>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	bfab      	itete	ge
 8005b7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8005b80:	181b      	addge	r3, r3, r0
 8005b82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b86:	bfac      	ite	ge
 8005b88:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b8a:	81a3      	strhlt	r3, [r4, #12]
 8005b8c:	bd10      	pop	{r4, pc}

08005b8e <__swrite>:
 8005b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b92:	461f      	mov	r7, r3
 8005b94:	898b      	ldrh	r3, [r1, #12]
 8005b96:	05db      	lsls	r3, r3, #23
 8005b98:	4605      	mov	r5, r0
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	4616      	mov	r6, r2
 8005b9e:	d505      	bpl.n	8005bac <__swrite+0x1e>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba8:	f000 f9b6 	bl	8005f18 <_lseek_r>
 8005bac:	89a3      	ldrh	r3, [r4, #12]
 8005bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bb6:	81a3      	strh	r3, [r4, #12]
 8005bb8:	4632      	mov	r2, r6
 8005bba:	463b      	mov	r3, r7
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc2:	f000 b869 	b.w	8005c98 <_write_r>

08005bc6 <__sseek>:
 8005bc6:	b510      	push	{r4, lr}
 8005bc8:	460c      	mov	r4, r1
 8005bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bce:	f000 f9a3 	bl	8005f18 <_lseek_r>
 8005bd2:	1c43      	adds	r3, r0, #1
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	bf15      	itete	ne
 8005bd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005be2:	81a3      	strheq	r3, [r4, #12]
 8005be4:	bf18      	it	ne
 8005be6:	81a3      	strhne	r3, [r4, #12]
 8005be8:	bd10      	pop	{r4, pc}

08005bea <__sclose>:
 8005bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bee:	f000 b8d3 	b.w	8005d98 <_close_r>
	...

08005bf4 <__swbuf_r>:
 8005bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf6:	460e      	mov	r6, r1
 8005bf8:	4614      	mov	r4, r2
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	b118      	cbz	r0, 8005c06 <__swbuf_r+0x12>
 8005bfe:	6983      	ldr	r3, [r0, #24]
 8005c00:	b90b      	cbnz	r3, 8005c06 <__swbuf_r+0x12>
 8005c02:	f7ff faa5 	bl	8005150 <__sinit>
 8005c06:	4b21      	ldr	r3, [pc, #132]	; (8005c8c <__swbuf_r+0x98>)
 8005c08:	429c      	cmp	r4, r3
 8005c0a:	d12a      	bne.n	8005c62 <__swbuf_r+0x6e>
 8005c0c:	686c      	ldr	r4, [r5, #4]
 8005c0e:	69a3      	ldr	r3, [r4, #24]
 8005c10:	60a3      	str	r3, [r4, #8]
 8005c12:	89a3      	ldrh	r3, [r4, #12]
 8005c14:	071a      	lsls	r2, r3, #28
 8005c16:	d52e      	bpl.n	8005c76 <__swbuf_r+0x82>
 8005c18:	6923      	ldr	r3, [r4, #16]
 8005c1a:	b363      	cbz	r3, 8005c76 <__swbuf_r+0x82>
 8005c1c:	6923      	ldr	r3, [r4, #16]
 8005c1e:	6820      	ldr	r0, [r4, #0]
 8005c20:	1ac0      	subs	r0, r0, r3
 8005c22:	6963      	ldr	r3, [r4, #20]
 8005c24:	b2f6      	uxtb	r6, r6
 8005c26:	4283      	cmp	r3, r0
 8005c28:	4637      	mov	r7, r6
 8005c2a:	dc04      	bgt.n	8005c36 <__swbuf_r+0x42>
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	4628      	mov	r0, r5
 8005c30:	f000 f948 	bl	8005ec4 <_fflush_r>
 8005c34:	bb28      	cbnz	r0, 8005c82 <__swbuf_r+0x8e>
 8005c36:	68a3      	ldr	r3, [r4, #8]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	60a3      	str	r3, [r4, #8]
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	1c5a      	adds	r2, r3, #1
 8005c40:	6022      	str	r2, [r4, #0]
 8005c42:	701e      	strb	r6, [r3, #0]
 8005c44:	6963      	ldr	r3, [r4, #20]
 8005c46:	3001      	adds	r0, #1
 8005c48:	4283      	cmp	r3, r0
 8005c4a:	d004      	beq.n	8005c56 <__swbuf_r+0x62>
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	07db      	lsls	r3, r3, #31
 8005c50:	d519      	bpl.n	8005c86 <__swbuf_r+0x92>
 8005c52:	2e0a      	cmp	r6, #10
 8005c54:	d117      	bne.n	8005c86 <__swbuf_r+0x92>
 8005c56:	4621      	mov	r1, r4
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f000 f933 	bl	8005ec4 <_fflush_r>
 8005c5e:	b190      	cbz	r0, 8005c86 <__swbuf_r+0x92>
 8005c60:	e00f      	b.n	8005c82 <__swbuf_r+0x8e>
 8005c62:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <__swbuf_r+0x9c>)
 8005c64:	429c      	cmp	r4, r3
 8005c66:	d101      	bne.n	8005c6c <__swbuf_r+0x78>
 8005c68:	68ac      	ldr	r4, [r5, #8]
 8005c6a:	e7d0      	b.n	8005c0e <__swbuf_r+0x1a>
 8005c6c:	4b09      	ldr	r3, [pc, #36]	; (8005c94 <__swbuf_r+0xa0>)
 8005c6e:	429c      	cmp	r4, r3
 8005c70:	bf08      	it	eq
 8005c72:	68ec      	ldreq	r4, [r5, #12]
 8005c74:	e7cb      	b.n	8005c0e <__swbuf_r+0x1a>
 8005c76:	4621      	mov	r1, r4
 8005c78:	4628      	mov	r0, r5
 8005c7a:	f000 f81f 	bl	8005cbc <__swsetup_r>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d0cc      	beq.n	8005c1c <__swbuf_r+0x28>
 8005c82:	f04f 37ff 	mov.w	r7, #4294967295
 8005c86:	4638      	mov	r0, r7
 8005c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	0800627c 	.word	0x0800627c
 8005c90:	0800629c 	.word	0x0800629c
 8005c94:	0800625c 	.word	0x0800625c

08005c98 <_write_r>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	4c07      	ldr	r4, [pc, #28]	; (8005cb8 <_write_r+0x20>)
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	4608      	mov	r0, r1
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	6022      	str	r2, [r4, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f7fb f8a7 	bl	8000dfa <_write>
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	d102      	bne.n	8005cb6 <_write_r+0x1e>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	b103      	cbz	r3, 8005cb6 <_write_r+0x1e>
 8005cb4:	602b      	str	r3, [r5, #0]
 8005cb6:	bd38      	pop	{r3, r4, r5, pc}
 8005cb8:	200001ac 	.word	0x200001ac

08005cbc <__swsetup_r>:
 8005cbc:	4b32      	ldr	r3, [pc, #200]	; (8005d88 <__swsetup_r+0xcc>)
 8005cbe:	b570      	push	{r4, r5, r6, lr}
 8005cc0:	681d      	ldr	r5, [r3, #0]
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	b125      	cbz	r5, 8005cd2 <__swsetup_r+0x16>
 8005cc8:	69ab      	ldr	r3, [r5, #24]
 8005cca:	b913      	cbnz	r3, 8005cd2 <__swsetup_r+0x16>
 8005ccc:	4628      	mov	r0, r5
 8005cce:	f7ff fa3f 	bl	8005150 <__sinit>
 8005cd2:	4b2e      	ldr	r3, [pc, #184]	; (8005d8c <__swsetup_r+0xd0>)
 8005cd4:	429c      	cmp	r4, r3
 8005cd6:	d10f      	bne.n	8005cf8 <__swsetup_r+0x3c>
 8005cd8:	686c      	ldr	r4, [r5, #4]
 8005cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	0715      	lsls	r5, r2, #28
 8005ce2:	d42c      	bmi.n	8005d3e <__swsetup_r+0x82>
 8005ce4:	06d0      	lsls	r0, r2, #27
 8005ce6:	d411      	bmi.n	8005d0c <__swsetup_r+0x50>
 8005ce8:	2209      	movs	r2, #9
 8005cea:	6032      	str	r2, [r6, #0]
 8005cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cf0:	81a3      	strh	r3, [r4, #12]
 8005cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf6:	e03e      	b.n	8005d76 <__swsetup_r+0xba>
 8005cf8:	4b25      	ldr	r3, [pc, #148]	; (8005d90 <__swsetup_r+0xd4>)
 8005cfa:	429c      	cmp	r4, r3
 8005cfc:	d101      	bne.n	8005d02 <__swsetup_r+0x46>
 8005cfe:	68ac      	ldr	r4, [r5, #8]
 8005d00:	e7eb      	b.n	8005cda <__swsetup_r+0x1e>
 8005d02:	4b24      	ldr	r3, [pc, #144]	; (8005d94 <__swsetup_r+0xd8>)
 8005d04:	429c      	cmp	r4, r3
 8005d06:	bf08      	it	eq
 8005d08:	68ec      	ldreq	r4, [r5, #12]
 8005d0a:	e7e6      	b.n	8005cda <__swsetup_r+0x1e>
 8005d0c:	0751      	lsls	r1, r2, #29
 8005d0e:	d512      	bpl.n	8005d36 <__swsetup_r+0x7a>
 8005d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d12:	b141      	cbz	r1, 8005d26 <__swsetup_r+0x6a>
 8005d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d18:	4299      	cmp	r1, r3
 8005d1a:	d002      	beq.n	8005d22 <__swsetup_r+0x66>
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	f000 f997 	bl	8006050 <_free_r>
 8005d22:	2300      	movs	r3, #0
 8005d24:	6363      	str	r3, [r4, #52]	; 0x34
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d2c:	81a3      	strh	r3, [r4, #12]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	6063      	str	r3, [r4, #4]
 8005d32:	6923      	ldr	r3, [r4, #16]
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	89a3      	ldrh	r3, [r4, #12]
 8005d38:	f043 0308 	orr.w	r3, r3, #8
 8005d3c:	81a3      	strh	r3, [r4, #12]
 8005d3e:	6923      	ldr	r3, [r4, #16]
 8005d40:	b94b      	cbnz	r3, 8005d56 <__swsetup_r+0x9a>
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d4c:	d003      	beq.n	8005d56 <__swsetup_r+0x9a>
 8005d4e:	4621      	mov	r1, r4
 8005d50:	4630      	mov	r0, r6
 8005d52:	f000 f917 	bl	8005f84 <__smakebuf_r>
 8005d56:	89a2      	ldrh	r2, [r4, #12]
 8005d58:	f012 0301 	ands.w	r3, r2, #1
 8005d5c:	d00c      	beq.n	8005d78 <__swsetup_r+0xbc>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60a3      	str	r3, [r4, #8]
 8005d62:	6963      	ldr	r3, [r4, #20]
 8005d64:	425b      	negs	r3, r3
 8005d66:	61a3      	str	r3, [r4, #24]
 8005d68:	6923      	ldr	r3, [r4, #16]
 8005d6a:	b953      	cbnz	r3, 8005d82 <__swsetup_r+0xc6>
 8005d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d70:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005d74:	d1ba      	bne.n	8005cec <__swsetup_r+0x30>
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	0792      	lsls	r2, r2, #30
 8005d7a:	bf58      	it	pl
 8005d7c:	6963      	ldrpl	r3, [r4, #20]
 8005d7e:	60a3      	str	r3, [r4, #8]
 8005d80:	e7f2      	b.n	8005d68 <__swsetup_r+0xac>
 8005d82:	2000      	movs	r0, #0
 8005d84:	e7f7      	b.n	8005d76 <__swsetup_r+0xba>
 8005d86:	bf00      	nop
 8005d88:	20000010 	.word	0x20000010
 8005d8c:	0800627c 	.word	0x0800627c
 8005d90:	0800629c 	.word	0x0800629c
 8005d94:	0800625c 	.word	0x0800625c

08005d98 <_close_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4c06      	ldr	r4, [pc, #24]	; (8005db4 <_close_r+0x1c>)
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4605      	mov	r5, r0
 8005da0:	4608      	mov	r0, r1
 8005da2:	6023      	str	r3, [r4, #0]
 8005da4:	f7fb f845 	bl	8000e32 <_close>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_close_r+0x1a>
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_close_r+0x1a>
 8005db0:	602b      	str	r3, [r5, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	200001ac 	.word	0x200001ac

08005db8 <__sflush_r>:
 8005db8:	898a      	ldrh	r2, [r1, #12]
 8005dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	0710      	lsls	r0, r2, #28
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	d458      	bmi.n	8005e78 <__sflush_r+0xc0>
 8005dc6:	684b      	ldr	r3, [r1, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	dc05      	bgt.n	8005dd8 <__sflush_r+0x20>
 8005dcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	dc02      	bgt.n	8005dd8 <__sflush_r+0x20>
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dda:	2e00      	cmp	r6, #0
 8005ddc:	d0f9      	beq.n	8005dd2 <__sflush_r+0x1a>
 8005dde:	2300      	movs	r3, #0
 8005de0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005de4:	682f      	ldr	r7, [r5, #0]
 8005de6:	6a21      	ldr	r1, [r4, #32]
 8005de8:	602b      	str	r3, [r5, #0]
 8005dea:	d032      	beq.n	8005e52 <__sflush_r+0x9a>
 8005dec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005dee:	89a3      	ldrh	r3, [r4, #12]
 8005df0:	075a      	lsls	r2, r3, #29
 8005df2:	d505      	bpl.n	8005e00 <__sflush_r+0x48>
 8005df4:	6863      	ldr	r3, [r4, #4]
 8005df6:	1ac0      	subs	r0, r0, r3
 8005df8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005dfa:	b10b      	cbz	r3, 8005e00 <__sflush_r+0x48>
 8005dfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005dfe:	1ac0      	subs	r0, r0, r3
 8005e00:	2300      	movs	r3, #0
 8005e02:	4602      	mov	r2, r0
 8005e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e06:	6a21      	ldr	r1, [r4, #32]
 8005e08:	4628      	mov	r0, r5
 8005e0a:	47b0      	blx	r6
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	89a3      	ldrh	r3, [r4, #12]
 8005e10:	d106      	bne.n	8005e20 <__sflush_r+0x68>
 8005e12:	6829      	ldr	r1, [r5, #0]
 8005e14:	291d      	cmp	r1, #29
 8005e16:	d848      	bhi.n	8005eaa <__sflush_r+0xf2>
 8005e18:	4a29      	ldr	r2, [pc, #164]	; (8005ec0 <__sflush_r+0x108>)
 8005e1a:	40ca      	lsrs	r2, r1
 8005e1c:	07d6      	lsls	r6, r2, #31
 8005e1e:	d544      	bpl.n	8005eaa <__sflush_r+0xf2>
 8005e20:	2200      	movs	r2, #0
 8005e22:	6062      	str	r2, [r4, #4]
 8005e24:	04d9      	lsls	r1, r3, #19
 8005e26:	6922      	ldr	r2, [r4, #16]
 8005e28:	6022      	str	r2, [r4, #0]
 8005e2a:	d504      	bpl.n	8005e36 <__sflush_r+0x7e>
 8005e2c:	1c42      	adds	r2, r0, #1
 8005e2e:	d101      	bne.n	8005e34 <__sflush_r+0x7c>
 8005e30:	682b      	ldr	r3, [r5, #0]
 8005e32:	b903      	cbnz	r3, 8005e36 <__sflush_r+0x7e>
 8005e34:	6560      	str	r0, [r4, #84]	; 0x54
 8005e36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e38:	602f      	str	r7, [r5, #0]
 8005e3a:	2900      	cmp	r1, #0
 8005e3c:	d0c9      	beq.n	8005dd2 <__sflush_r+0x1a>
 8005e3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e42:	4299      	cmp	r1, r3
 8005e44:	d002      	beq.n	8005e4c <__sflush_r+0x94>
 8005e46:	4628      	mov	r0, r5
 8005e48:	f000 f902 	bl	8006050 <_free_r>
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	6360      	str	r0, [r4, #52]	; 0x34
 8005e50:	e7c0      	b.n	8005dd4 <__sflush_r+0x1c>
 8005e52:	2301      	movs	r3, #1
 8005e54:	4628      	mov	r0, r5
 8005e56:	47b0      	blx	r6
 8005e58:	1c41      	adds	r1, r0, #1
 8005e5a:	d1c8      	bne.n	8005dee <__sflush_r+0x36>
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0c5      	beq.n	8005dee <__sflush_r+0x36>
 8005e62:	2b1d      	cmp	r3, #29
 8005e64:	d001      	beq.n	8005e6a <__sflush_r+0xb2>
 8005e66:	2b16      	cmp	r3, #22
 8005e68:	d101      	bne.n	8005e6e <__sflush_r+0xb6>
 8005e6a:	602f      	str	r7, [r5, #0]
 8005e6c:	e7b1      	b.n	8005dd2 <__sflush_r+0x1a>
 8005e6e:	89a3      	ldrh	r3, [r4, #12]
 8005e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e74:	81a3      	strh	r3, [r4, #12]
 8005e76:	e7ad      	b.n	8005dd4 <__sflush_r+0x1c>
 8005e78:	690f      	ldr	r7, [r1, #16]
 8005e7a:	2f00      	cmp	r7, #0
 8005e7c:	d0a9      	beq.n	8005dd2 <__sflush_r+0x1a>
 8005e7e:	0793      	lsls	r3, r2, #30
 8005e80:	680e      	ldr	r6, [r1, #0]
 8005e82:	bf08      	it	eq
 8005e84:	694b      	ldreq	r3, [r1, #20]
 8005e86:	600f      	str	r7, [r1, #0]
 8005e88:	bf18      	it	ne
 8005e8a:	2300      	movne	r3, #0
 8005e8c:	eba6 0807 	sub.w	r8, r6, r7
 8005e90:	608b      	str	r3, [r1, #8]
 8005e92:	f1b8 0f00 	cmp.w	r8, #0
 8005e96:	dd9c      	ble.n	8005dd2 <__sflush_r+0x1a>
 8005e98:	4643      	mov	r3, r8
 8005e9a:	463a      	mov	r2, r7
 8005e9c:	6a21      	ldr	r1, [r4, #32]
 8005e9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	47b0      	blx	r6
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	dc06      	bgt.n	8005eb6 <__sflush_r+0xfe>
 8005ea8:	89a3      	ldrh	r3, [r4, #12]
 8005eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eae:	81a3      	strh	r3, [r4, #12]
 8005eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb4:	e78e      	b.n	8005dd4 <__sflush_r+0x1c>
 8005eb6:	4407      	add	r7, r0
 8005eb8:	eba8 0800 	sub.w	r8, r8, r0
 8005ebc:	e7e9      	b.n	8005e92 <__sflush_r+0xda>
 8005ebe:	bf00      	nop
 8005ec0:	20400001 	.word	0x20400001

08005ec4 <_fflush_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	690b      	ldr	r3, [r1, #16]
 8005ec8:	4605      	mov	r5, r0
 8005eca:	460c      	mov	r4, r1
 8005ecc:	b1db      	cbz	r3, 8005f06 <_fflush_r+0x42>
 8005ece:	b118      	cbz	r0, 8005ed8 <_fflush_r+0x14>
 8005ed0:	6983      	ldr	r3, [r0, #24]
 8005ed2:	b90b      	cbnz	r3, 8005ed8 <_fflush_r+0x14>
 8005ed4:	f7ff f93c 	bl	8005150 <__sinit>
 8005ed8:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <_fflush_r+0x48>)
 8005eda:	429c      	cmp	r4, r3
 8005edc:	d109      	bne.n	8005ef2 <_fflush_r+0x2e>
 8005ede:	686c      	ldr	r4, [r5, #4]
 8005ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ee4:	b17b      	cbz	r3, 8005f06 <_fflush_r+0x42>
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	4628      	mov	r0, r5
 8005eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eee:	f7ff bf63 	b.w	8005db8 <__sflush_r>
 8005ef2:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <_fflush_r+0x4c>)
 8005ef4:	429c      	cmp	r4, r3
 8005ef6:	d101      	bne.n	8005efc <_fflush_r+0x38>
 8005ef8:	68ac      	ldr	r4, [r5, #8]
 8005efa:	e7f1      	b.n	8005ee0 <_fflush_r+0x1c>
 8005efc:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <_fflush_r+0x50>)
 8005efe:	429c      	cmp	r4, r3
 8005f00:	bf08      	it	eq
 8005f02:	68ec      	ldreq	r4, [r5, #12]
 8005f04:	e7ec      	b.n	8005ee0 <_fflush_r+0x1c>
 8005f06:	2000      	movs	r0, #0
 8005f08:	bd38      	pop	{r3, r4, r5, pc}
 8005f0a:	bf00      	nop
 8005f0c:	0800627c 	.word	0x0800627c
 8005f10:	0800629c 	.word	0x0800629c
 8005f14:	0800625c 	.word	0x0800625c

08005f18 <_lseek_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	4c07      	ldr	r4, [pc, #28]	; (8005f38 <_lseek_r+0x20>)
 8005f1c:	4605      	mov	r5, r0
 8005f1e:	4608      	mov	r0, r1
 8005f20:	4611      	mov	r1, r2
 8005f22:	2200      	movs	r2, #0
 8005f24:	6022      	str	r2, [r4, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	f7fa ffaa 	bl	8000e80 <_lseek>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d102      	bne.n	8005f36 <_lseek_r+0x1e>
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	b103      	cbz	r3, 8005f36 <_lseek_r+0x1e>
 8005f34:	602b      	str	r3, [r5, #0]
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
 8005f38:	200001ac 	.word	0x200001ac

08005f3c <__swhatbuf_r>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	460e      	mov	r6, r1
 8005f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f44:	2900      	cmp	r1, #0
 8005f46:	b096      	sub	sp, #88	; 0x58
 8005f48:	4614      	mov	r4, r2
 8005f4a:	461d      	mov	r5, r3
 8005f4c:	da07      	bge.n	8005f5e <__swhatbuf_r+0x22>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	602b      	str	r3, [r5, #0]
 8005f52:	89b3      	ldrh	r3, [r6, #12]
 8005f54:	061a      	lsls	r2, r3, #24
 8005f56:	d410      	bmi.n	8005f7a <__swhatbuf_r+0x3e>
 8005f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f5c:	e00e      	b.n	8005f7c <__swhatbuf_r+0x40>
 8005f5e:	466a      	mov	r2, sp
 8005f60:	f000 f8fc 	bl	800615c <_fstat_r>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	dbf2      	blt.n	8005f4e <__swhatbuf_r+0x12>
 8005f68:	9a01      	ldr	r2, [sp, #4]
 8005f6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f72:	425a      	negs	r2, r3
 8005f74:	415a      	adcs	r2, r3
 8005f76:	602a      	str	r2, [r5, #0]
 8005f78:	e7ee      	b.n	8005f58 <__swhatbuf_r+0x1c>
 8005f7a:	2340      	movs	r3, #64	; 0x40
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	6023      	str	r3, [r4, #0]
 8005f80:	b016      	add	sp, #88	; 0x58
 8005f82:	bd70      	pop	{r4, r5, r6, pc}

08005f84 <__smakebuf_r>:
 8005f84:	898b      	ldrh	r3, [r1, #12]
 8005f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f88:	079d      	lsls	r5, r3, #30
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	d507      	bpl.n	8005fa0 <__smakebuf_r+0x1c>
 8005f90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	6123      	str	r3, [r4, #16]
 8005f98:	2301      	movs	r3, #1
 8005f9a:	6163      	str	r3, [r4, #20]
 8005f9c:	b002      	add	sp, #8
 8005f9e:	bd70      	pop	{r4, r5, r6, pc}
 8005fa0:	ab01      	add	r3, sp, #4
 8005fa2:	466a      	mov	r2, sp
 8005fa4:	f7ff ffca 	bl	8005f3c <__swhatbuf_r>
 8005fa8:	9900      	ldr	r1, [sp, #0]
 8005faa:	4605      	mov	r5, r0
 8005fac:	4630      	mov	r0, r6
 8005fae:	f7ff f959 	bl	8005264 <_malloc_r>
 8005fb2:	b948      	cbnz	r0, 8005fc8 <__smakebuf_r+0x44>
 8005fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb8:	059a      	lsls	r2, r3, #22
 8005fba:	d4ef      	bmi.n	8005f9c <__smakebuf_r+0x18>
 8005fbc:	f023 0303 	bic.w	r3, r3, #3
 8005fc0:	f043 0302 	orr.w	r3, r3, #2
 8005fc4:	81a3      	strh	r3, [r4, #12]
 8005fc6:	e7e3      	b.n	8005f90 <__smakebuf_r+0xc>
 8005fc8:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <__smakebuf_r+0x7c>)
 8005fca:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fcc:	89a3      	ldrh	r3, [r4, #12]
 8005fce:	6020      	str	r0, [r4, #0]
 8005fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd4:	81a3      	strh	r3, [r4, #12]
 8005fd6:	9b00      	ldr	r3, [sp, #0]
 8005fd8:	6163      	str	r3, [r4, #20]
 8005fda:	9b01      	ldr	r3, [sp, #4]
 8005fdc:	6120      	str	r0, [r4, #16]
 8005fde:	b15b      	cbz	r3, 8005ff8 <__smakebuf_r+0x74>
 8005fe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f000 f8cb 	bl	8006180 <_isatty_r>
 8005fea:	b128      	cbz	r0, 8005ff8 <__smakebuf_r+0x74>
 8005fec:	89a3      	ldrh	r3, [r4, #12]
 8005fee:	f023 0303 	bic.w	r3, r3, #3
 8005ff2:	f043 0301 	orr.w	r3, r3, #1
 8005ff6:	81a3      	strh	r3, [r4, #12]
 8005ff8:	89a3      	ldrh	r3, [r4, #12]
 8005ffa:	431d      	orrs	r5, r3
 8005ffc:	81a5      	strh	r5, [r4, #12]
 8005ffe:	e7cd      	b.n	8005f9c <__smakebuf_r+0x18>
 8006000:	08005119 	.word	0x08005119

08006004 <memcpy>:
 8006004:	b510      	push	{r4, lr}
 8006006:	1e43      	subs	r3, r0, #1
 8006008:	440a      	add	r2, r1
 800600a:	4291      	cmp	r1, r2
 800600c:	d100      	bne.n	8006010 <memcpy+0xc>
 800600e:	bd10      	pop	{r4, pc}
 8006010:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006014:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006018:	e7f7      	b.n	800600a <memcpy+0x6>

0800601a <memmove>:
 800601a:	4288      	cmp	r0, r1
 800601c:	b510      	push	{r4, lr}
 800601e:	eb01 0302 	add.w	r3, r1, r2
 8006022:	d807      	bhi.n	8006034 <memmove+0x1a>
 8006024:	1e42      	subs	r2, r0, #1
 8006026:	4299      	cmp	r1, r3
 8006028:	d00a      	beq.n	8006040 <memmove+0x26>
 800602a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800602e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006032:	e7f8      	b.n	8006026 <memmove+0xc>
 8006034:	4283      	cmp	r3, r0
 8006036:	d9f5      	bls.n	8006024 <memmove+0xa>
 8006038:	1881      	adds	r1, r0, r2
 800603a:	1ad2      	subs	r2, r2, r3
 800603c:	42d3      	cmn	r3, r2
 800603e:	d100      	bne.n	8006042 <memmove+0x28>
 8006040:	bd10      	pop	{r4, pc}
 8006042:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006046:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800604a:	e7f7      	b.n	800603c <memmove+0x22>

0800604c <__malloc_lock>:
 800604c:	4770      	bx	lr

0800604e <__malloc_unlock>:
 800604e:	4770      	bx	lr

08006050 <_free_r>:
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	4605      	mov	r5, r0
 8006054:	2900      	cmp	r1, #0
 8006056:	d045      	beq.n	80060e4 <_free_r+0x94>
 8006058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800605c:	1f0c      	subs	r4, r1, #4
 800605e:	2b00      	cmp	r3, #0
 8006060:	bfb8      	it	lt
 8006062:	18e4      	addlt	r4, r4, r3
 8006064:	f7ff fff2 	bl	800604c <__malloc_lock>
 8006068:	4a1f      	ldr	r2, [pc, #124]	; (80060e8 <_free_r+0x98>)
 800606a:	6813      	ldr	r3, [r2, #0]
 800606c:	4610      	mov	r0, r2
 800606e:	b933      	cbnz	r3, 800607e <_free_r+0x2e>
 8006070:	6063      	str	r3, [r4, #4]
 8006072:	6014      	str	r4, [r2, #0]
 8006074:	4628      	mov	r0, r5
 8006076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800607a:	f7ff bfe8 	b.w	800604e <__malloc_unlock>
 800607e:	42a3      	cmp	r3, r4
 8006080:	d90c      	bls.n	800609c <_free_r+0x4c>
 8006082:	6821      	ldr	r1, [r4, #0]
 8006084:	1862      	adds	r2, r4, r1
 8006086:	4293      	cmp	r3, r2
 8006088:	bf04      	itt	eq
 800608a:	681a      	ldreq	r2, [r3, #0]
 800608c:	685b      	ldreq	r3, [r3, #4]
 800608e:	6063      	str	r3, [r4, #4]
 8006090:	bf04      	itt	eq
 8006092:	1852      	addeq	r2, r2, r1
 8006094:	6022      	streq	r2, [r4, #0]
 8006096:	6004      	str	r4, [r0, #0]
 8006098:	e7ec      	b.n	8006074 <_free_r+0x24>
 800609a:	4613      	mov	r3, r2
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	b10a      	cbz	r2, 80060a4 <_free_r+0x54>
 80060a0:	42a2      	cmp	r2, r4
 80060a2:	d9fa      	bls.n	800609a <_free_r+0x4a>
 80060a4:	6819      	ldr	r1, [r3, #0]
 80060a6:	1858      	adds	r0, r3, r1
 80060a8:	42a0      	cmp	r0, r4
 80060aa:	d10b      	bne.n	80060c4 <_free_r+0x74>
 80060ac:	6820      	ldr	r0, [r4, #0]
 80060ae:	4401      	add	r1, r0
 80060b0:	1858      	adds	r0, r3, r1
 80060b2:	4282      	cmp	r2, r0
 80060b4:	6019      	str	r1, [r3, #0]
 80060b6:	d1dd      	bne.n	8006074 <_free_r+0x24>
 80060b8:	6810      	ldr	r0, [r2, #0]
 80060ba:	6852      	ldr	r2, [r2, #4]
 80060bc:	605a      	str	r2, [r3, #4]
 80060be:	4401      	add	r1, r0
 80060c0:	6019      	str	r1, [r3, #0]
 80060c2:	e7d7      	b.n	8006074 <_free_r+0x24>
 80060c4:	d902      	bls.n	80060cc <_free_r+0x7c>
 80060c6:	230c      	movs	r3, #12
 80060c8:	602b      	str	r3, [r5, #0]
 80060ca:	e7d3      	b.n	8006074 <_free_r+0x24>
 80060cc:	6820      	ldr	r0, [r4, #0]
 80060ce:	1821      	adds	r1, r4, r0
 80060d0:	428a      	cmp	r2, r1
 80060d2:	bf04      	itt	eq
 80060d4:	6811      	ldreq	r1, [r2, #0]
 80060d6:	6852      	ldreq	r2, [r2, #4]
 80060d8:	6062      	str	r2, [r4, #4]
 80060da:	bf04      	itt	eq
 80060dc:	1809      	addeq	r1, r1, r0
 80060de:	6021      	streq	r1, [r4, #0]
 80060e0:	605c      	str	r4, [r3, #4]
 80060e2:	e7c7      	b.n	8006074 <_free_r+0x24>
 80060e4:	bd38      	pop	{r3, r4, r5, pc}
 80060e6:	bf00      	nop
 80060e8:	20000094 	.word	0x20000094

080060ec <_realloc_r>:
 80060ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ee:	4607      	mov	r7, r0
 80060f0:	4614      	mov	r4, r2
 80060f2:	460e      	mov	r6, r1
 80060f4:	b921      	cbnz	r1, 8006100 <_realloc_r+0x14>
 80060f6:	4611      	mov	r1, r2
 80060f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80060fc:	f7ff b8b2 	b.w	8005264 <_malloc_r>
 8006100:	b922      	cbnz	r2, 800610c <_realloc_r+0x20>
 8006102:	f7ff ffa5 	bl	8006050 <_free_r>
 8006106:	4625      	mov	r5, r4
 8006108:	4628      	mov	r0, r5
 800610a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800610c:	f000 f848 	bl	80061a0 <_malloc_usable_size_r>
 8006110:	42a0      	cmp	r0, r4
 8006112:	d20f      	bcs.n	8006134 <_realloc_r+0x48>
 8006114:	4621      	mov	r1, r4
 8006116:	4638      	mov	r0, r7
 8006118:	f7ff f8a4 	bl	8005264 <_malloc_r>
 800611c:	4605      	mov	r5, r0
 800611e:	2800      	cmp	r0, #0
 8006120:	d0f2      	beq.n	8006108 <_realloc_r+0x1c>
 8006122:	4631      	mov	r1, r6
 8006124:	4622      	mov	r2, r4
 8006126:	f7ff ff6d 	bl	8006004 <memcpy>
 800612a:	4631      	mov	r1, r6
 800612c:	4638      	mov	r0, r7
 800612e:	f7ff ff8f 	bl	8006050 <_free_r>
 8006132:	e7e9      	b.n	8006108 <_realloc_r+0x1c>
 8006134:	4635      	mov	r5, r6
 8006136:	e7e7      	b.n	8006108 <_realloc_r+0x1c>

08006138 <_read_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4c07      	ldr	r4, [pc, #28]	; (8006158 <_read_r+0x20>)
 800613c:	4605      	mov	r5, r0
 800613e:	4608      	mov	r0, r1
 8006140:	4611      	mov	r1, r2
 8006142:	2200      	movs	r2, #0
 8006144:	6022      	str	r2, [r4, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	f7fa fe3a 	bl	8000dc0 <_read>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	d102      	bne.n	8006156 <_read_r+0x1e>
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	b103      	cbz	r3, 8006156 <_read_r+0x1e>
 8006154:	602b      	str	r3, [r5, #0]
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	200001ac 	.word	0x200001ac

0800615c <_fstat_r>:
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	4c07      	ldr	r4, [pc, #28]	; (800617c <_fstat_r+0x20>)
 8006160:	2300      	movs	r3, #0
 8006162:	4605      	mov	r5, r0
 8006164:	4608      	mov	r0, r1
 8006166:	4611      	mov	r1, r2
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	f7fa fe6e 	bl	8000e4a <_fstat>
 800616e:	1c43      	adds	r3, r0, #1
 8006170:	d102      	bne.n	8006178 <_fstat_r+0x1c>
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	b103      	cbz	r3, 8006178 <_fstat_r+0x1c>
 8006176:	602b      	str	r3, [r5, #0]
 8006178:	bd38      	pop	{r3, r4, r5, pc}
 800617a:	bf00      	nop
 800617c:	200001ac 	.word	0x200001ac

08006180 <_isatty_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4c06      	ldr	r4, [pc, #24]	; (800619c <_isatty_r+0x1c>)
 8006184:	2300      	movs	r3, #0
 8006186:	4605      	mov	r5, r0
 8006188:	4608      	mov	r0, r1
 800618a:	6023      	str	r3, [r4, #0]
 800618c:	f7fa fe6d 	bl	8000e6a <_isatty>
 8006190:	1c43      	adds	r3, r0, #1
 8006192:	d102      	bne.n	800619a <_isatty_r+0x1a>
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	b103      	cbz	r3, 800619a <_isatty_r+0x1a>
 8006198:	602b      	str	r3, [r5, #0]
 800619a:	bd38      	pop	{r3, r4, r5, pc}
 800619c:	200001ac 	.word	0x200001ac

080061a0 <_malloc_usable_size_r>:
 80061a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061a4:	1f18      	subs	r0, r3, #4
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	bfbc      	itt	lt
 80061aa:	580b      	ldrlt	r3, [r1, r0]
 80061ac:	18c0      	addlt	r0, r0, r3
 80061ae:	4770      	bx	lr

080061b0 <_init>:
 80061b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b2:	bf00      	nop
 80061b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b6:	bc08      	pop	{r3}
 80061b8:	469e      	mov	lr, r3
 80061ba:	4770      	bx	lr

080061bc <_fini>:
 80061bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061be:	bf00      	nop
 80061c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c2:	bc08      	pop	{r3}
 80061c4:	469e      	mov	lr, r3
 80061c6:	4770      	bx	lr
