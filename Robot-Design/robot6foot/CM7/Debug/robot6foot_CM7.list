
robot6foot_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d4c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  08004fe4  08004fe4  00014fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800564c  0800564c  0001564c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005658  08005658  00015658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800565c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000bc  20000074  080056d0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000130  080056d0  00020130  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014d50  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000024b5  00000000  00000000  00034df2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b40  00000000  00000000  000372a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a58  00000000  00000000  00037de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00038181  00000000  00000000  00038840  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000aee2  00000000  00000000  000709c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00174d62  00000000  00000000  0007b8a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  001f0605  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002eec  00000000  00000000  001f0680  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000074 	.word	0x20000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004fcc 	.word	0x08004fcc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000078 	.word	0x20000078
 80002d4:	08004fcc 	.word	0x08004fcc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <SystemInit+0x104>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a3e      	ldr	r2, [pc, #248]	; (80006dc <SystemInit+0x104>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005ec:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <SystemInit+0x104>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4a3a      	ldr	r2, [pc, #232]	; (80006dc <SystemInit+0x104>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <SystemInit+0x108>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 030f 	and.w	r3, r3, #15
 8000600:	2b06      	cmp	r3, #6
 8000602:	d807      	bhi.n	8000614 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <SystemInit+0x108>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f023 030f 	bic.w	r3, r3, #15
 800060c:	4a34      	ldr	r2, [pc, #208]	; (80006e0 <SystemInit+0x108>)
 800060e:	f043 0307 	orr.w	r3, r3, #7
 8000612:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000614:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <SystemInit+0x10c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <SystemInit+0x10c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000620:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <SystemInit+0x10c>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000626:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <SystemInit+0x10c>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	492e      	ldr	r1, [pc, #184]	; (80006e4 <SystemInit+0x10c>)
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <SystemInit+0x110>)
 800062e:	4013      	ands	r3, r2
 8000630:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <SystemInit+0x108>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	2b07      	cmp	r3, #7
 800063c:	d907      	bls.n	800064e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemInit+0x108>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f023 030f 	bic.w	r3, r3, #15
 8000646:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <SystemInit+0x108>)
 8000648:	f043 0307 	orr.w	r3, r3, #7
 800064c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemInit+0x10c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemInit+0x10c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemInit+0x10c>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <SystemInit+0x10c>)
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <SystemInit+0x114>)
 8000664:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemInit+0x10c>)
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemInit+0x118>)
 800066a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <SystemInit+0x10c>)
 800066e:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemInit+0x11c>)
 8000670:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <SystemInit+0x10c>)
 8000674:	2200      	movs	r2, #0
 8000676:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <SystemInit+0x10c>)
 800067a:	4a1e      	ldr	r2, [pc, #120]	; (80006f4 <SystemInit+0x11c>)
 800067c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemInit+0x10c>)
 8000680:	2200      	movs	r2, #0
 8000682:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <SystemInit+0x10c>)
 8000686:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <SystemInit+0x11c>)
 8000688:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <SystemInit+0x10c>)
 800068c:	2200      	movs	r2, #0
 800068e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <SystemInit+0x10c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <SystemInit+0x10c>)
 8000696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <SystemInit+0x10c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <SystemInit+0x120>)
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <SystemInit+0x120>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemInit+0x124>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <SystemInit+0x128>)
 80006b4:	4013      	ands	r3, r2
 80006b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ba:	d202      	bcs.n	80006c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <SystemInit+0x12c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x130>)
 80006c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <SystemInit+0x104>)
 80006cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	52002000 	.word	0x52002000
 80006e4:	58024400 	.word	0x58024400
 80006e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006ec:	02020200 	.word	0x02020200
 80006f0:	01ff0000 	.word	0x01ff0000
 80006f4:	01010280 	.word	0x01010280
 80006f8:	580000c0 	.word	0x580000c0
 80006fc:	5c001000 	.word	0x5c001000
 8000700:	ffff0000 	.word	0xffff0000
 8000704:	51008108 	.word	0x51008108
 8000708:	52004000 	.word	0x52004000

0800070c <robotInit>:
void robotInit(UART_HandleTypeDef* huart,uint32_t arrive_time)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b0aa      	sub	sp, #168	; 0xa8
 8000710:	af02      	add	r7, sp, #8
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	uint32_t servo_amount = 18;
 8000716:	2312      	movs	r3, #18
 8000718:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	uint32_t servo_list[18] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18};
 800071c:	4a0f      	ldr	r2, [pc, #60]	; (800075c <robotInit+0x50>)
 800071e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000722:	4611      	mov	r1, r2
 8000724:	2248      	movs	r2, #72	; 0x48
 8000726:	4618      	mov	r0, r3
 8000728:	f004 fbd0 	bl	8004ecc <memcpy>
	uint32_t servo_pwm_list[18] = {1500,1000,500,1500,1000,500,1500,1000,500,1500,2000,2500,1500,2000,2500,1400,2000,2500};
 800072c:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <robotInit+0x54>)
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	4611      	mov	r1, r2
 8000734:	2248      	movs	r2, #72	; 0x48
 8000736:	4618      	mov	r0, r3
 8000738:	f004 fbc8 	bl	8004ecc <memcpy>
	robot_control_cmd(huart,servo_amount,arrive_time,servo_list,servo_pwm_list);
 800073c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	4613      	mov	r3, r2
 8000748:	683a      	ldr	r2, [r7, #0]
 800074a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f000 f808 	bl	8000764 <robot_control_cmd>
}
 8000754:	bf00      	nop
 8000756:	37a0      	adds	r7, #160	; 0xa0
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	08004fe4 	.word	0x08004fe4
 8000760:	0800502c 	.word	0x0800502c

08000764 <robot_control_cmd>:

int robot_control_cmd(UART_HandleTypeDef* huart,uint32_t servo_amount,uint32_t arrive_time,uint32_t* servo_list,uint32_t* servo_pwm_list)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	603b      	str	r3, [r7, #0]
	uint32_t length = servo_amount * 3 + 5;
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	4613      	mov	r3, r2
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	4413      	add	r3, r2
 800077a:	3305      	adds	r3, #5
 800077c:	617b      	str	r3, [r7, #20]
	uint8_t *cmd_data = (uint8_t *)malloc(sizeof(uint8_t)*(length+2));
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	3302      	adds	r3, #2
 8000782:	4618      	mov	r0, r3
 8000784:	f004 fb9a 	bl	8004ebc <malloc>
 8000788:	4603      	mov	r3, r0
 800078a:	613b      	str	r3, [r7, #16]
	cmd_data[0] = 0x55;
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	2255      	movs	r2, #85	; 0x55
 8000790:	701a      	strb	r2, [r3, #0]
	cmd_data[1] = 0x55;
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	3301      	adds	r3, #1
 8000796:	2255      	movs	r2, #85	; 0x55
 8000798:	701a      	strb	r2, [r3, #0]
	cmd_data[2] = length;
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	3302      	adds	r3, #2
 800079e:	697a      	ldr	r2, [r7, #20]
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	701a      	strb	r2, [r3, #0]
	cmd_data[3] = 0x03;
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	3303      	adds	r3, #3
 80007a8:	2203      	movs	r2, #3
 80007aa:	701a      	strb	r2, [r3, #0]
	cmd_data[4] = servo_amount;
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	3304      	adds	r3, #4
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	701a      	strb	r2, [r3, #0]
	cmd_data[5] = (arrive_time<<8 & 0xffff) >>8;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	0a1a      	lsrs	r2, r3, #8
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	3305      	adds	r3, #5
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	701a      	strb	r2, [r3, #0]
	cmd_data[6] = (arrive_time & 0xffff)>>8;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	0a1a      	lsrs	r2, r3, #8
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	3306      	adds	r3, #6
 80007cc:	b2d2      	uxtb	r2, r2
 80007ce:	701a      	strb	r2, [r3, #0]
	uint32_t i=0,k=7;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
 80007d4:	2307      	movs	r3, #7
 80007d6:	61bb      	str	r3, [r7, #24]
	while(k < length+2)
 80007d8:	e02c      	b.n	8000834 <robot_control_cmd+0xd0>
	{
		cmd_data[k] = servo_list[i];
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	4413      	add	r3, r2
 80007e2:	6819      	ldr	r1, [r3, #0]
 80007e4:	693a      	ldr	r2, [r7, #16]
 80007e6:	69bb      	ldr	r3, [r7, #24]
 80007e8:	4413      	add	r3, r2
 80007ea:	b2ca      	uxtb	r2, r1
 80007ec:	701a      	strb	r2, [r3, #0]
		k++;
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	3301      	adds	r3, #1
 80007f2:	61bb      	str	r3, [r7, #24]
		cmd_data[k] = (servo_pwm_list[i]<<8 & 0xffff) >>8;
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007fa:	4413      	add	r3, r2
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	0a19      	lsrs	r1, r3, #8
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	4413      	add	r3, r2
 8000808:	b2ca      	uxtb	r2, r1
 800080a:	701a      	strb	r2, [r3, #0]
		k++;
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	3301      	adds	r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
		cmd_data[k] = servo_pwm_list[i]>>8;
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000818:	4413      	add	r3, r2
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	0a19      	lsrs	r1, r3, #8
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	4413      	add	r3, r2
 8000824:	b2ca      	uxtb	r2, r1
 8000826:	701a      	strb	r2, [r3, #0]
		k++;
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	3301      	adds	r3, #1
 800082c:	61bb      	str	r3, [r7, #24]
		i++;
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3301      	adds	r3, #1
 8000832:	61fb      	str	r3, [r7, #28]
	while(k < length+2)
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	3302      	adds	r3, #2
 8000838:	69ba      	ldr	r2, [r7, #24]
 800083a:	429a      	cmp	r2, r3
 800083c:	d3cd      	bcc.n	80007da <robot_control_cmd+0x76>
	}
	HAL_UART_Transmit(huart, cmd_data, length+2 , HAL_MAX_DELAY);
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	b29b      	uxth	r3, r3
 8000842:	3302      	adds	r3, #2
 8000844:	b29a      	uxth	r2, r3
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	6939      	ldr	r1, [r7, #16]
 800084c:	68f8      	ldr	r0, [r7, #12]
 800084e:	f003 fa3d 	bl	8003ccc <HAL_UART_Transmit>
	HAL_Delay(arrive_time);
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f000 fc0c 	bl	8001070 <HAL_Delay>
	return 1;
 8000858:	2301      	movs	r3, #1
}
 800085a:	4618      	mov	r0, r3
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <robotWaveHands>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int robotWaveHands(UART_HandleTypeDef *huart)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b0bc      	sub	sp, #240	; 0xf0
 8000868:	af02      	add	r7, sp, #8
 800086a:	6078      	str	r0, [r7, #4]
    uint32_t servo_amount = 18;
 800086c:	2312      	movs	r3, #18
 800086e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    uint32_t servo_list[18] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18};
 8000872:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <robotWaveHands+0x7c>)
 8000874:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000878:	4611      	mov	r1, r2
 800087a:	2248      	movs	r2, #72	; 0x48
 800087c:	4618      	mov	r0, r3
 800087e:	f004 fb25 	bl	8004ecc <memcpy>

    // uint32_t servo_pwm_list_1[6] = {1500,500,1500,1501,2500,1500}; // hands up
    uint32_t servo_pwm_list_2[18] = {1500, 1000, 500,  500,  500,  2100, 1500, 1000, 500,
 8000882:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <robotWaveHands+0x80>)
 8000884:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000888:	4611      	mov	r1, r2
 800088a:	2248      	movs	r2, #72	; 0x48
 800088c:	4618      	mov	r0, r3
 800088e:	f004 fb1d 	bl	8004ecc <memcpy>
                                     1500, 2000, 2500, 2500, 2500, 900,  1400, 2000, 2500}; // hands forward
    uint32_t servo_pwm_list_3[18] = {1500, 1000, 500,  500,  800,  2300, 1500, 1000, 500,
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <robotWaveHands+0x84>)
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4611      	mov	r1, r2
 800089a:	2248      	movs	r2, #72	; 0x48
 800089c:	4618      	mov	r0, r3
 800089e:	f004 fb15 	bl	8004ecc <memcpy>
    //                                  1500, 2000, 2500, 1700, 2500, 1500, 1400, 2000, 2500};
    // uint32_t servo_pwm_list_5[6] = {1500,1100, 650,1501,1900,2350};
    // uint32_t servo_pwm_list_6[6] = {1500,1100, 650,1501,2300,2250};

    // robot_control_cmd(huart,servo_amount,300,servo_list,servo_pwm_list_1);
    robot_control_cmd(huart, servo_amount, 300, servo_list, servo_pwm_list_2);
 80008a2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80008a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	4613      	mov	r3, r2
 80008ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80008b2:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff ff54 	bl	8000764 <robot_control_cmd>
    robot_control_cmd(huart, servo_amount, 300, servo_list, servo_pwm_list_3);
 80008bc:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	4613      	mov	r3, r2
 80008c8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80008cc:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff ff47 	bl	8000764 <robot_control_cmd>
    // robot_control_cmd(huart, servo_amount, 300, servo_list, servo_pwm_list_4);
    // robot_control_cmd(huart,servo_amount,300,servo_list,servo_pwm_list_5);
    // robot_control_cmd(huart,servo_amount,300,servo_list,servo_pwm_list_6);
    return 1;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	37e8      	adds	r7, #232	; 0xe8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	08004fe4 	.word	0x08004fe4
 80008e4:	08005584 	.word	0x08005584
 80008e8:	080055cc 	.word	0x080055cc

080008ec <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
    int32_t timeout;
    /* USER CODE END Boot_Mode_Sequence_0 */

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /* Wait until CPU2 boots and enters in stop mode or timeout*/
    timeout = 0xFFFF;
 80008f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f6:	60fb      	str	r3, [r7, #12]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 80008f8:	bf00      	nop
 80008fa:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <main+0xb8>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000902:	2b00      	cmp	r3, #0
 8000904:	d004      	beq.n	8000910 <main+0x24>
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	1e5a      	subs	r2, r3, #1
 800090a:	60fa      	str	r2, [r7, #12]
 800090c:	2b00      	cmp	r3, #0
 800090e:	dcf4      	bgt.n	80008fa <main+0xe>
        ;
    if (timeout < 0) {
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	da01      	bge.n	800091a <main+0x2e>
        Error_Handler();
 8000916:	f000 fa07 	bl	8000d28 <Error_Handler>
    }
    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800091a:	f000 fb17 	bl	8000f4c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800091e:	f000 f845 	bl	80009ac <SystemClock_Config>
    /* USER CODE BEGIN Boot_Mode_Sequence_2 */
    /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
    HSEM notification */
    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <main+0xb8>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000928:	4a1e      	ldr	r2, [pc, #120]	; (80009a4 <main+0xb8>)
 800092a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <main+0xb8>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
    /*Take HSEM */
    HAL_HSEM_FastTake(HSEM_ID_0);
 8000940:	2000      	movs	r0, #0
 8000942:	f000 fe57 	bl	80015f4 <HAL_HSEM_FastTake>
    /*Release HSEM in order to notify the CPU2(CM4)*/
    HAL_HSEM_Release(HSEM_ID_0, 0);
 8000946:	2100      	movs	r1, #0
 8000948:	2000      	movs	r0, #0
 800094a:	f000 fe6d 	bl	8001628 <HAL_HSEM_Release>
    /* wait until CPU2 wakes up from stop mode */
    timeout = 0xFFFF;
 800094e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000952:	60fb      	str	r3, [r7, #12]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000954:	bf00      	nop
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <main+0xb8>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800095e:	2b00      	cmp	r3, #0
 8000960:	d104      	bne.n	800096c <main+0x80>
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	1e5a      	subs	r2, r3, #1
 8000966:	60fa      	str	r2, [r7, #12]
 8000968:	2b00      	cmp	r3, #0
 800096a:	dcf4      	bgt.n	8000956 <main+0x6a>
        ;
    if (timeout < 0) {
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2b00      	cmp	r3, #0
 8000970:	da01      	bge.n	8000976 <main+0x8a>
        Error_Handler();
 8000972:	f000 f9d9 	bl	8000d28 <Error_Handler>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000976:	f000 f8fd 	bl	8000b74 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 800097a:	f000 f8af 	bl	8000adc <MX_USART2_UART_Init>
    /* USER CODE BEGIN 2 */
    robotInit(&huart2, 2000);
 800097e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000982:	4809      	ldr	r0, [pc, #36]	; (80009a8 <main+0xbc>)
 8000984:	f7ff fec2 	bl	800070c <robotInit>
        //     robotTransverseLeft(&huart2);

        // for (i = 0; i < 2; i++)
        //     robotTransverseRight(&huart2);

        for (i = 0; i < 5; i++)
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	e005      	b.n	800099a <main+0xae>
            robotWaveHands(&huart2);
 800098e:	4806      	ldr	r0, [pc, #24]	; (80009a8 <main+0xbc>)
 8000990:	f7ff ff68 	bl	8000864 <robotWaveHands>
        for (i = 0; i < 5; i++)
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	3301      	adds	r3, #1
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	2b04      	cmp	r3, #4
 800099e:	d9f6      	bls.n	800098e <main+0xa2>
 80009a0:	e7f2      	b.n	8000988 <main+0x9c>
 80009a2:	bf00      	nop
 80009a4:	58024400 	.word	0x58024400
 80009a8:	2000009c 	.word	0x2000009c

080009ac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b0cc      	sub	sp, #304	; 0x130
 80009b0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009b6:	224c      	movs	r2, #76	; 0x4c
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f004 fa91 	bl	8004ee2 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009c4:	2220      	movs	r2, #32
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f004 fa8a 	bl	8004ee2 <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	4618      	mov	r0, r3
 80009d4:	23bc      	movs	r3, #188	; 0xbc
 80009d6:	461a      	mov	r2, r3
 80009d8:	2100      	movs	r1, #0
 80009da:	f004 fa82 	bl	8004ee2 <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009de:	2004      	movs	r0, #4
 80009e0:	f000 fe36 	bl	8001650 <HAL_PWREx_ConfigSupply>
    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	4b3a      	ldr	r3, [pc, #232]	; (8000ad4 <SystemClock_Config+0x128>)
 80009ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ee:	4a39      	ldr	r2, [pc, #228]	; (8000ad4 <SystemClock_Config+0x128>)
 80009f0:	f023 0301 	bic.w	r3, r3, #1
 80009f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009f6:	4b37      	ldr	r3, [pc, #220]	; (8000ad4 <SystemClock_Config+0x128>)
 80009f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009fa:	f003 0201 	and.w	r2, r3, #1
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	4b35      	ldr	r3, [pc, #212]	; (8000ad8 <SystemClock_Config+0x12c>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a0a:	4a33      	ldr	r2, [pc, #204]	; (8000ad8 <SystemClock_Config+0x12c>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6193      	str	r3, [r2, #24]
 8000a12:	4b31      	ldr	r3, [pc, #196]	; (8000ad8 <SystemClock_Config+0x12c>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	681b      	ldr	r3, [r3, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000a22:	bf00      	nop
 8000a24:	4b2c      	ldr	r3, [pc, #176]	; (8000ad8 <SystemClock_Config+0x12c>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a30:	d1f8      	bne.n	8000a24 <SystemClock_Config+0x78>
    }
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a32:	2302      	movs	r3, #2
 8000a34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3e:	2340      	movs	r3, #64	; 0x40
 8000a40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a4a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fe58 	bl	8001704 <HAL_RCC_OscConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0xb2>
        Error_Handler();
 8000a5a:	f000 f965 	bl	8000d28 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 8000a5e:	233f      	movs	r3, #63	; 0x3f
 8000a60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000a8e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fa45 	bl	8001f24 <HAL_RCC_ClockConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0xf8>
        Error_Handler();
 8000aa0:	f000 f942 	bl	8000d28 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	675a      	str	r2, [r3, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000ab4:	f107 0308 	add.w	r3, r7, #8
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 fdb7 	bl	800262c <HAL_RCCEx_PeriphCLKConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x11c>
        Error_Handler();
 8000ac4:	f000 f930 	bl	8000d28 <Error_Handler>
    }
}
 8000ac8:	bf00      	nop
 8000aca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	58000400 	.word	0x58000400
 8000ad8:	58024800 	.word	0x58024800

08000adc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000ae2:	4a23      	ldr	r2, [pc, #140]	; (8000b70 <MX_USART2_UART_Init+0x94>)
 8000ae4:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 9600;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000ae8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000aec:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
    huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000b24:	4811      	ldr	r0, [pc, #68]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b26:	f003 f881 	bl	8003c2c <HAL_UART_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART2_UART_Init+0x58>
        Error_Handler();
 8000b30:	f000 f8fa 	bl	8000d28 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000b34:	2100      	movs	r1, #0
 8000b36:	480d      	ldr	r0, [pc, #52]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b38:	f004 f8b1 	bl	8004c9e <HAL_UARTEx_SetTxFifoThreshold>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART2_UART_Init+0x6a>
        Error_Handler();
 8000b42:	f000 f8f1 	bl	8000d28 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000b46:	2100      	movs	r1, #0
 8000b48:	4808      	ldr	r0, [pc, #32]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b4a:	f004 f8e6 	bl	8004d1a <HAL_UARTEx_SetRxFifoThreshold>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_USART2_UART_Init+0x7c>
        Error_Handler();
 8000b54:	f000 f8e8 	bl	8000d28 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b5a:	f004 f867 	bl	8004c2c <HAL_UARTEx_DisableFifoMode>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_USART2_UART_Init+0x8c>
        Error_Handler();
 8000b64:	f000 f8e0 	bl	8000d28 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000009c 	.word	0x2000009c
 8000b70:	40004400 	.word	0x40004400

08000b74 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08c      	sub	sp, #48	; 0x30
 8000b78:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	4b61      	ldr	r3, [pc, #388]	; (8000d10 <MX_GPIO_Init+0x19c>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b90:	4a5f      	ldr	r2, [pc, #380]	; (8000d10 <MX_GPIO_Init+0x19c>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9a:	4b5d      	ldr	r3, [pc, #372]	; (8000d10 <MX_GPIO_Init+0x19c>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	61bb      	str	r3, [r7, #24]
 8000ba6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba8:	4b59      	ldr	r3, [pc, #356]	; (8000d10 <MX_GPIO_Init+0x19c>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bae:	4a58      	ldr	r2, [pc, #352]	; (8000d10 <MX_GPIO_Init+0x19c>)
 8000bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb8:	4b55      	ldr	r3, [pc, #340]	; (8000d10 <MX_GPIO_Init+0x19c>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b52      	ldr	r3, [pc, #328]	; (8000d10 <MX_GPIO_Init+0x19c>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	4a50      	ldr	r2, [pc, #320]	; (8000d10 <MX_GPIO_Init+0x19c>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd6:	4b4e      	ldr	r3, [pc, #312]	; (8000d10 <MX_GPIO_Init+0x19c>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be4:	4b4a      	ldr	r3, [pc, #296]	; (8000d10 <MX_GPIO_Init+0x19c>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	4a49      	ldr	r2, [pc, #292]	; (8000d10 <MX_GPIO_Init+0x19c>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf4:	4b46      	ldr	r3, [pc, #280]	; (8000d10 <MX_GPIO_Init+0x19c>)
 8000bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	4b43      	ldr	r3, [pc, #268]	; (8000d10 <MX_GPIO_Init+0x19c>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	4a41      	ldr	r2, [pc, #260]	; (8000d10 <MX_GPIO_Init+0x19c>)
 8000c0a:	f043 0308 	orr.w	r3, r3, #8
 8000c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c12:	4b3f      	ldr	r3, [pc, #252]	; (8000d10 <MX_GPIO_Init+0x19c>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	f003 0308 	and.w	r3, r3, #8
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c20:	4b3b      	ldr	r3, [pc, #236]	; (8000d10 <MX_GPIO_Init+0x19c>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	4a3a      	ldr	r2, [pc, #232]	; (8000d10 <MX_GPIO_Init+0x19c>)
 8000c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c30:	4b37      	ldr	r3, [pc, #220]	; (8000d10 <MX_GPIO_Init+0x19c>)
 8000c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pins : PC1 PC4 PC5 */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000c3e:	2332      	movs	r3, #50	; 0x32
 8000c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4e:	230b      	movs	r3, #11
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	4619      	mov	r1, r3
 8000c58:	482e      	ldr	r0, [pc, #184]	; (8000d14 <MX_GPIO_Init+0x1a0>)
 8000c5a:	f000 fb1b 	bl	8001294 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA1 PA2 PA7 */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000c5e:	2386      	movs	r3, #134	; 0x86
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6e:	230b      	movs	r3, #11
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	4827      	ldr	r0, [pc, #156]	; (8000d18 <MX_GPIO_Init+0x1a4>)
 8000c7a:	f000 fb0b 	bl	8001294 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB13 */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c90:	230b      	movs	r3, #11
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4820      	ldr	r0, [pc, #128]	; (8000d1c <MX_GPIO_Init+0x1a8>)
 8000c9c:	f000 fafa 	bl	8001294 <HAL_GPIO_Init>

    /*Configure GPIO pins : PD8 PD9 */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000ca0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4818      	ldr	r0, [pc, #96]	; (8000d20 <MX_GPIO_Init+0x1ac>)
 8000cbe:	f000 fae9 	bl	8001294 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA8 PA11 PA12 */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12;
 8000cc2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480e      	ldr	r0, [pc, #56]	; (8000d18 <MX_GPIO_Init+0x1a4>)
 8000ce0:	f000 fad8 	bl	8001294 <HAL_GPIO_Init>

    /*Configure GPIO pins : PG11 PG13 */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8000ce4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf6:	230b      	movs	r3, #11
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4808      	ldr	r0, [pc, #32]	; (8000d24 <MX_GPIO_Init+0x1b0>)
 8000d02:	f000 fac7 	bl	8001294 <HAL_GPIO_Init>
}
 8000d06:	bf00      	nop
 8000d08:	3730      	adds	r7, #48	; 0x30
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	58024400 	.word	0x58024400
 8000d14:	58020800 	.word	0x58020800
 8000d18:	58020000 	.word	0x58020000
 8000d1c:	58020400 	.word	0x58020400
 8000d20:	58020c00 	.word	0x58020c00
 8000d24:	58021800 	.word	0x58021800

08000d28 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000d2e:	e7fe      	b.n	8000d2e <Error_Handler+0x6>

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_MspInit+0x30>)
 8000d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d3c:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_MspInit+0x30>)
 8000d3e:	f043 0302 	orr.w	r3, r3, #2
 8000d42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_MspInit+0x30>)
 8000d48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	58024400 	.word	0x58024400

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a29      	ldr	r2, [pc, #164]	; (8000e28 <HAL_UART_MspInit+0xc4>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d14c      	bne.n	8000e20 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d86:	4b29      	ldr	r3, [pc, #164]	; (8000e2c <HAL_UART_MspInit+0xc8>)
 8000d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d8c:	4a27      	ldr	r2, [pc, #156]	; (8000e2c <HAL_UART_MspInit+0xc8>)
 8000d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d96:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <HAL_UART_MspInit+0xc8>)
 8000d98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <HAL_UART_MspInit+0xc8>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	4a20      	ldr	r2, [pc, #128]	; (8000e2c <HAL_UART_MspInit+0xc8>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_UART_MspInit+0xc8>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <HAL_UART_MspInit+0xc8>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <HAL_UART_MspInit+0xc8>)
 8000dca:	f043 0308 	orr.w	r3, r3, #8
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <HAL_UART_MspInit+0xc8>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	f003 0308 	and.w	r3, r3, #8
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000de0:	2308      	movs	r3, #8
 8000de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df0:	2307      	movs	r3, #7
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480d      	ldr	r0, [pc, #52]	; (8000e30 <HAL_UART_MspInit+0xcc>)
 8000dfc:	f000 fa4a 	bl	8001294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e00:	2320      	movs	r3, #32
 8000e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e10:	2307      	movs	r3, #7
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4806      	ldr	r0, [pc, #24]	; (8000e34 <HAL_UART_MspInit+0xd0>)
 8000e1c:	f000 fa3a 	bl	8001294 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e20:	bf00      	nop
 8000e22:	3728      	adds	r7, #40	; 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40004400 	.word	0x40004400
 8000e2c:	58024400 	.word	0x58024400
 8000e30:	58020000 	.word	0x58020000
 8000e34:	58020c00 	.word	0x58020c00

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <NMI_Handler+0x4>

08000e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <HardFault_Handler+0x4>

08000e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <MemManage_Handler+0x4>

08000e4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e84:	f000 f8d4 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f003 ffd4 	bl	8004e68 <__errno>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	230c      	movs	r3, #12
 8000ec4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	20000090 	.word	0x20000090
 8000ef4:	20000130 	.word	0x20000130

08000ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f30 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000efc:	f7ff fb6c 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f02:	e003      	b.n	8000f0c <LoopCopyDataInit>

08000f04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000f06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f0a:	3104      	adds	r1, #4

08000f0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f0c:	480a      	ldr	r0, [pc, #40]	; (8000f38 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000f10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f14:	d3f6      	bcc.n	8000f04 <CopyDataInit>
  ldr  r2, =_sbss
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000f18:	e002      	b.n	8000f20 <LoopFillZerobss>

08000f1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f1c:	f842 3b04 	str.w	r3, [r2], #4

08000f20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000f22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f24:	d3f9      	bcc.n	8000f1a <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8000f26:	f003 ffa5 	bl	8004e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2a:	f7ff fcdf 	bl	80008ec <main>
  bx  lr    
 8000f2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f34:	0800565c 	.word	0x0800565c
  ldr  r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f3c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000f40:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000f44:	20000130 	.word	0x20000130

08000f48 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC3_IRQHandler>
	...

08000f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f52:	2003      	movs	r0, #3
 8000f54:	f000 f96c 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f58:	f001 f99a 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8000f5c:	4601      	mov	r1, r0
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_Init+0x68>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	f003 030f 	and.w	r3, r3, #15
 8000f68:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <HAL_Init+0x6c>)
 8000f6a:	5cd3      	ldrb	r3, [r2, r3]
 8000f6c:	f003 031f 	and.w	r3, r3, #31
 8000f70:	fa21 f303 	lsr.w	r3, r1, r3
 8000f74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <HAL_Init+0x68>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <HAL_Init+0x6c>)
 8000f80:	5cd3      	ldrb	r3, [r2, r3]
 8000f82:	f003 031f 	and.w	r3, r3, #31
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	fa22 f303 	lsr.w	r3, r2, r3
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <HAL_Init+0x70>)
 8000f8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f90:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <HAL_Init+0x74>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f814 	bl	8000fc4 <HAL_InitTick>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e002      	b.n	8000fac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa6:	f7ff fec3 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	58024400 	.word	0x58024400
 8000fb8:	08005624 	.word	0x08005624
 8000fbc:	20000004 	.word	0x20000004
 8000fc0:	20000000 	.word	0x20000000

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_InitTick+0x60>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e021      	b.n	800101c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <HAL_InitTick+0x64>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_InitTick+0x60>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f943 	bl	800127a <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00e      	b.n	800101c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d80a      	bhi.n	800101a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f000 f91b 	bl	8001246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4a06      	ldr	r2, [pc, #24]	; (800102c <HAL_InitTick+0x68>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	2000000c 	.word	0x2000000c
 8001028:	20000000 	.word	0x20000000
 800102c:	20000008 	.word	0x20000008

08001030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x20>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x24>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <HAL_IncTick+0x24>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	2000000c 	.word	0x2000000c
 8001054:	20000128 	.word	0x20000128

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000128 	.word	0x20000128

08001070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff ffee 	bl	8001058 <HAL_GetTick>
 800107c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001088:	d005      	beq.n	8001096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_Delay+0x40>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001096:	bf00      	nop
 8001098:	f7ff ffde 	bl	8001058 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d8f7      	bhi.n	8001098 <HAL_Delay+0x28>
  {
  }
}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000000c 	.word	0x2000000c

080010b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GetREVID+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0c1b      	lsrs	r3, r3, #16
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	5c001000 	.word	0x5c001000

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <__NVIC_SetPriorityGrouping+0x40>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <__NVIC_SetPriorityGrouping+0x40>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	05fa0000 	.word	0x05fa0000

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	; (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
         );
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff8e 	bl	8001130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff47 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001254:	f7ff ff5e 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001258:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	6978      	ldr	r0, [r7, #20]
 8001260:	f7ff ff90 	bl	8001184 <NVIC_EncodePriority>
 8001264:	4602      	mov	r2, r0
 8001266:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff5f 	bl	8001130 <__NVIC_SetPriority>
}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ffb2 	bl	80011ec <SysTick_Config>
 8001288:	4603      	mov	r3, r0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012a2:	4b89      	ldr	r3, [pc, #548]	; (80014c8 <HAL_GPIO_Init+0x234>)
 80012a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012a6:	e194      	b.n	80015d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	2101      	movs	r1, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8186 	beq.w	80015cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d00b      	beq.n	80012e0 <HAL_GPIO_Init+0x4c>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d007      	beq.n	80012e0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012d4:	2b11      	cmp	r3, #17
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b12      	cmp	r3, #18
 80012de:	d130      	bne.n	8001342 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001316:	2201      	movs	r2, #1
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	f003 0201 	and.w	r2, r3, #1
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0xee>
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b12      	cmp	r3, #18
 8001380:	d123      	bne.n	80013ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	08da      	lsrs	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3208      	adds	r2, #8
 800138a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	220f      	movs	r2, #15
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	691a      	ldr	r2, [r3, #16]
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	08da      	lsrs	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3208      	adds	r2, #8
 80013c4:	69b9      	ldr	r1, [r7, #24]
 80013c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	2203      	movs	r2, #3
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 0203 	and.w	r2, r3, #3
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 80e0 	beq.w	80015cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140c:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <HAL_GPIO_Init+0x238>)
 800140e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001412:	4a2e      	ldr	r2, [pc, #184]	; (80014cc <HAL_GPIO_Init+0x238>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800141c:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <HAL_GPIO_Init+0x238>)
 800141e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800142a:	4a29      	ldr	r2, [pc, #164]	; (80014d0 <HAL_GPIO_Init+0x23c>)
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	3302      	adds	r3, #2
 8001432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	220f      	movs	r2, #15
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a20      	ldr	r2, [pc, #128]	; (80014d4 <HAL_GPIO_Init+0x240>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d052      	beq.n	80014fc <HAL_GPIO_Init+0x268>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a1f      	ldr	r2, [pc, #124]	; (80014d8 <HAL_GPIO_Init+0x244>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d031      	beq.n	80014c2 <HAL_GPIO_Init+0x22e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a1e      	ldr	r2, [pc, #120]	; (80014dc <HAL_GPIO_Init+0x248>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d02b      	beq.n	80014be <HAL_GPIO_Init+0x22a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a1d      	ldr	r2, [pc, #116]	; (80014e0 <HAL_GPIO_Init+0x24c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d025      	beq.n	80014ba <HAL_GPIO_Init+0x226>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a1c      	ldr	r2, [pc, #112]	; (80014e4 <HAL_GPIO_Init+0x250>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d01f      	beq.n	80014b6 <HAL_GPIO_Init+0x222>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <HAL_GPIO_Init+0x254>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d019      	beq.n	80014b2 <HAL_GPIO_Init+0x21e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a1a      	ldr	r2, [pc, #104]	; (80014ec <HAL_GPIO_Init+0x258>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d013      	beq.n	80014ae <HAL_GPIO_Init+0x21a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a19      	ldr	r2, [pc, #100]	; (80014f0 <HAL_GPIO_Init+0x25c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d00d      	beq.n	80014aa <HAL_GPIO_Init+0x216>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a18      	ldr	r2, [pc, #96]	; (80014f4 <HAL_GPIO_Init+0x260>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d007      	beq.n	80014a6 <HAL_GPIO_Init+0x212>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a17      	ldr	r2, [pc, #92]	; (80014f8 <HAL_GPIO_Init+0x264>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d101      	bne.n	80014a2 <HAL_GPIO_Init+0x20e>
 800149e:	2309      	movs	r3, #9
 80014a0:	e02d      	b.n	80014fe <HAL_GPIO_Init+0x26a>
 80014a2:	230a      	movs	r3, #10
 80014a4:	e02b      	b.n	80014fe <HAL_GPIO_Init+0x26a>
 80014a6:	2308      	movs	r3, #8
 80014a8:	e029      	b.n	80014fe <HAL_GPIO_Init+0x26a>
 80014aa:	2307      	movs	r3, #7
 80014ac:	e027      	b.n	80014fe <HAL_GPIO_Init+0x26a>
 80014ae:	2306      	movs	r3, #6
 80014b0:	e025      	b.n	80014fe <HAL_GPIO_Init+0x26a>
 80014b2:	2305      	movs	r3, #5
 80014b4:	e023      	b.n	80014fe <HAL_GPIO_Init+0x26a>
 80014b6:	2304      	movs	r3, #4
 80014b8:	e021      	b.n	80014fe <HAL_GPIO_Init+0x26a>
 80014ba:	2303      	movs	r3, #3
 80014bc:	e01f      	b.n	80014fe <HAL_GPIO_Init+0x26a>
 80014be:	2302      	movs	r3, #2
 80014c0:	e01d      	b.n	80014fe <HAL_GPIO_Init+0x26a>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e01b      	b.n	80014fe <HAL_GPIO_Init+0x26a>
 80014c6:	bf00      	nop
 80014c8:	58000080 	.word	0x58000080
 80014cc:	58024400 	.word	0x58024400
 80014d0:	58000400 	.word	0x58000400
 80014d4:	58020000 	.word	0x58020000
 80014d8:	58020400 	.word	0x58020400
 80014dc:	58020800 	.word	0x58020800
 80014e0:	58020c00 	.word	0x58020c00
 80014e4:	58021000 	.word	0x58021000
 80014e8:	58021400 	.word	0x58021400
 80014ec:	58021800 	.word	0x58021800
 80014f0:	58021c00 	.word	0x58021c00
 80014f4:	58022000 	.word	0x58022000
 80014f8:	58022400 	.word	0x58022400
 80014fc:	2300      	movs	r3, #0
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	f002 0203 	and.w	r2, r2, #3
 8001504:	0092      	lsls	r2, r2, #2
 8001506:	4093      	lsls	r3, r2
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800150e:	4938      	ldr	r1, [pc, #224]	; (80015f0 <HAL_GPIO_Init+0x35c>)
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	089b      	lsrs	r3, r3, #2
 8001514:	3302      	adds	r3, #2
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800159e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	3301      	adds	r3, #1
 80015d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa22 f303 	lsr.w	r3, r2, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f47f ae63 	bne.w	80012a8 <HAL_GPIO_Init+0x14>
  }
}
 80015e2:	bf00      	nop
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	58000400 	.word	0x58000400

080015f4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80015fc:	4a08      	ldr	r2, [pc, #32]	; (8001620 <HAL_HSEM_FastTake+0x2c>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3320      	adds	r3, #32
 8001602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001606:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_HSEM_FastTake+0x30>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d101      	bne.n	8001610 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	e000      	b.n	8001612 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	58026400 	.word	0x58026400
 8001624:	80000300 	.word	0x80000300

08001628 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001632:	4906      	ldr	r1, [pc, #24]	; (800164c <HAL_HSEM_Release+0x24>)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	58026400 	.word	0x58026400

08001650 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001658:	4b29      	ldr	r3, [pc, #164]	; (8001700 <HAL_PWREx_ConfigSupply+0xb0>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	2b06      	cmp	r3, #6
 8001662:	d00a      	beq.n	800167a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001664:	4b26      	ldr	r3, [pc, #152]	; (8001700 <HAL_PWREx_ConfigSupply+0xb0>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	429a      	cmp	r2, r3
 8001670:	d001      	beq.n	8001676 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e040      	b.n	80016f8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e03e      	b.n	80016f8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <HAL_PWREx_ConfigSupply+0xb0>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001682:	491f      	ldr	r1, [pc, #124]	; (8001700 <HAL_PWREx_ConfigSupply+0xb0>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4313      	orrs	r3, r2
 8001688:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800168a:	f7ff fce5 	bl	8001058 <HAL_GetTick>
 800168e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001690:	e009      	b.n	80016a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001692:	f7ff fce1 	bl	8001058 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016a0:	d901      	bls.n	80016a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e028      	b.n	80016f8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <HAL_PWREx_ConfigSupply+0xb0>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016b2:	d1ee      	bne.n	8001692 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b1e      	cmp	r3, #30
 80016b8:	d008      	beq.n	80016cc <HAL_PWREx_ConfigSupply+0x7c>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b2e      	cmp	r3, #46	; 0x2e
 80016be:	d005      	beq.n	80016cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b1d      	cmp	r3, #29
 80016c4:	d002      	beq.n	80016cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b2d      	cmp	r3, #45	; 0x2d
 80016ca:	d114      	bne.n	80016f6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80016cc:	f7ff fcc4 	bl	8001058 <HAL_GetTick>
 80016d0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016d2:	e009      	b.n	80016e8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016d4:	f7ff fcc0 	bl	8001058 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016e2:	d901      	bls.n	80016e8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e007      	b.n	80016f8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_PWREx_ConfigSupply+0xb0>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f4:	d1ee      	bne.n	80016d4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	58024800 	.word	0x58024800

08001704 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	; 0x30
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e3ff      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 8087 	beq.w	8001832 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001724:	4b99      	ldr	r3, [pc, #612]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800172e:	4b97      	ldr	r3, [pc, #604]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001736:	2b10      	cmp	r3, #16
 8001738:	d007      	beq.n	800174a <HAL_RCC_OscConfig+0x46>
 800173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173c:	2b18      	cmp	r3, #24
 800173e:	d110      	bne.n	8001762 <HAL_RCC_OscConfig+0x5e>
 8001740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d10b      	bne.n	8001762 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174a:	4b90      	ldr	r3, [pc, #576]	; (800198c <HAL_RCC_OscConfig+0x288>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d06c      	beq.n	8001830 <HAL_RCC_OscConfig+0x12c>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d168      	bne.n	8001830 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e3d9      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176a:	d106      	bne.n	800177a <HAL_RCC_OscConfig+0x76>
 800176c:	4b87      	ldr	r3, [pc, #540]	; (800198c <HAL_RCC_OscConfig+0x288>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a86      	ldr	r2, [pc, #536]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	e02e      	b.n	80017d8 <HAL_RCC_OscConfig+0xd4>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x98>
 8001782:	4b82      	ldr	r3, [pc, #520]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a81      	ldr	r2, [pc, #516]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b7f      	ldr	r3, [pc, #508]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a7e      	ldr	r2, [pc, #504]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e01d      	b.n	80017d8 <HAL_RCC_OscConfig+0xd4>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0xbc>
 80017a6:	4b79      	ldr	r3, [pc, #484]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a78      	ldr	r2, [pc, #480]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b76      	ldr	r3, [pc, #472]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a75      	ldr	r2, [pc, #468]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0xd4>
 80017c0:	4b72      	ldr	r3, [pc, #456]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a71      	ldr	r2, [pc, #452]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b6f      	ldr	r3, [pc, #444]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a6e      	ldr	r2, [pc, #440]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d013      	beq.n	8001808 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fc3a 	bl	8001058 <HAL_GetTick>
 80017e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fc36 	bl	8001058 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e38d      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017fa:	4b64      	ldr	r3, [pc, #400]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0xe4>
 8001806:	e014      	b.n	8001832 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fc26 	bl	8001058 <HAL_GetTick>
 800180c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001810:	f7ff fc22 	bl	8001058 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b64      	cmp	r3, #100	; 0x64
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e379      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001822:	4b5a      	ldr	r3, [pc, #360]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x10c>
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80ae 	beq.w	800199c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001840:	4b52      	ldr	r3, [pc, #328]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001848:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800184a:	4b50      	ldr	r3, [pc, #320]	; (800198c <HAL_RCC_OscConfig+0x288>)
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d007      	beq.n	8001866 <HAL_RCC_OscConfig+0x162>
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	2b18      	cmp	r3, #24
 800185a:	d13a      	bne.n	80018d2 <HAL_RCC_OscConfig+0x1ce>
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d135      	bne.n	80018d2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001866:	4b49      	ldr	r3, [pc, #292]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <HAL_RCC_OscConfig+0x17a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e34b      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187e:	f7ff fc19 	bl	80010b4 <HAL_GetREVID>
 8001882:	4602      	mov	r2, r0
 8001884:	f241 0303 	movw	r3, #4099	; 0x1003
 8001888:	429a      	cmp	r2, r3
 800188a:	d817      	bhi.n	80018bc <HAL_RCC_OscConfig+0x1b8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	2b40      	cmp	r3, #64	; 0x40
 8001892:	d108      	bne.n	80018a6 <HAL_RCC_OscConfig+0x1a2>
 8001894:	4b3d      	ldr	r3, [pc, #244]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800189c:	4a3b      	ldr	r2, [pc, #236]	; (800198c <HAL_RCC_OscConfig+0x288>)
 800189e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018a4:	e07a      	b.n	800199c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a6:	4b39      	ldr	r3, [pc, #228]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	031b      	lsls	r3, r3, #12
 80018b4:	4935      	ldr	r1, [pc, #212]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ba:	e06f      	b.n	800199c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018bc:	4b33      	ldr	r3, [pc, #204]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	061b      	lsls	r3, r3, #24
 80018ca:	4930      	ldr	r1, [pc, #192]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d0:	e064      	b.n	800199c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d045      	beq.n	8001966 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018da:	4b2c      	ldr	r3, [pc, #176]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 0219 	bic.w	r2, r3, #25
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	4929      	ldr	r1, [pc, #164]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff fbb4 	bl	8001058 <HAL_GetTick>
 80018f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f4:	f7ff fbb0 	bl	8001058 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e307      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001912:	f7ff fbcf 	bl	80010b4 <HAL_GetREVID>
 8001916:	4602      	mov	r2, r0
 8001918:	f241 0303 	movw	r3, #4099	; 0x1003
 800191c:	429a      	cmp	r2, r3
 800191e:	d817      	bhi.n	8001950 <HAL_RCC_OscConfig+0x24c>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	2b40      	cmp	r3, #64	; 0x40
 8001926:	d108      	bne.n	800193a <HAL_RCC_OscConfig+0x236>
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_RCC_OscConfig+0x288>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001930:	4a16      	ldr	r2, [pc, #88]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001936:	6053      	str	r3, [r2, #4]
 8001938:	e030      	b.n	800199c <HAL_RCC_OscConfig+0x298>
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <HAL_RCC_OscConfig+0x288>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	031b      	lsls	r3, r3, #12
 8001948:	4910      	ldr	r1, [pc, #64]	; (800198c <HAL_RCC_OscConfig+0x288>)
 800194a:	4313      	orrs	r3, r2
 800194c:	604b      	str	r3, [r1, #4]
 800194e:	e025      	b.n	800199c <HAL_RCC_OscConfig+0x298>
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	061b      	lsls	r3, r3, #24
 800195e:	490b      	ldr	r1, [pc, #44]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
 8001964:	e01a      	b.n	800199c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a08      	ldr	r2, [pc, #32]	; (800198c <HAL_RCC_OscConfig+0x288>)
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001972:	f7ff fb71 	bl	8001058 <HAL_GetTick>
 8001976:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001978:	e00a      	b.n	8001990 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800197a:	f7ff fb6d 	bl	8001058 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d903      	bls.n	8001990 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e2c4      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
 800198c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001990:	4ba4      	ldr	r3, [pc, #656]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1ee      	bne.n	800197a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0310 	and.w	r3, r3, #16
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80a9 	beq.w	8001afc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019aa:	4b9e      	ldr	r3, [pc, #632]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019b4:	4b9b      	ldr	r3, [pc, #620]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d007      	beq.n	80019d0 <HAL_RCC_OscConfig+0x2cc>
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2b18      	cmp	r3, #24
 80019c4:	d13a      	bne.n	8001a3c <HAL_RCC_OscConfig+0x338>
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d135      	bne.n	8001a3c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019d0:	4b94      	ldr	r3, [pc, #592]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_OscConfig+0x2e4>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	2b80      	cmp	r3, #128	; 0x80
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e296      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019e8:	f7ff fb64 	bl	80010b4 <HAL_GetREVID>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f241 0303 	movw	r3, #4099	; 0x1003
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d817      	bhi.n	8001a26 <HAL_RCC_OscConfig+0x322>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	2b20      	cmp	r3, #32
 80019fc:	d108      	bne.n	8001a10 <HAL_RCC_OscConfig+0x30c>
 80019fe:	4b89      	ldr	r3, [pc, #548]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a06:	4a87      	ldr	r2, [pc, #540]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a0c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a0e:	e075      	b.n	8001afc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a10:	4b84      	ldr	r3, [pc, #528]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	069b      	lsls	r3, r3, #26
 8001a1e:	4981      	ldr	r1, [pc, #516]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a24:	e06a      	b.n	8001afc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a26:	4b7f      	ldr	r3, [pc, #508]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	061b      	lsls	r3, r3, #24
 8001a34:	497b      	ldr	r1, [pc, #492]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a3a:	e05f      	b.n	8001afc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d042      	beq.n	8001aca <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a44:	4b77      	ldr	r3, [pc, #476]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a76      	ldr	r2, [pc, #472]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff fb02 	bl	8001058 <HAL_GetTick>
 8001a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a58:	f7ff fafe 	bl	8001058 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e255      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a6a:	4b6e      	ldr	r3, [pc, #440]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a76:	f7ff fb1d 	bl	80010b4 <HAL_GetREVID>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d817      	bhi.n	8001ab4 <HAL_RCC_OscConfig+0x3b0>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	2b20      	cmp	r3, #32
 8001a8a:	d108      	bne.n	8001a9e <HAL_RCC_OscConfig+0x39a>
 8001a8c:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a94:	4a63      	ldr	r2, [pc, #396]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a9a:	6053      	str	r3, [r2, #4]
 8001a9c:	e02e      	b.n	8001afc <HAL_RCC_OscConfig+0x3f8>
 8001a9e:	4b61      	ldr	r3, [pc, #388]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	069b      	lsls	r3, r3, #26
 8001aac:	495d      	ldr	r1, [pc, #372]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
 8001ab2:	e023      	b.n	8001afc <HAL_RCC_OscConfig+0x3f8>
 8001ab4:	4b5b      	ldr	r3, [pc, #364]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	061b      	lsls	r3, r3, #24
 8001ac2:	4958      	ldr	r1, [pc, #352]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60cb      	str	r3, [r1, #12]
 8001ac8:	e018      	b.n	8001afc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001aca:	4b56      	ldr	r3, [pc, #344]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a55      	ldr	r2, [pc, #340]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff fabf 	bl	8001058 <HAL_GetTick>
 8001ada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001ade:	f7ff fabb 	bl	8001058 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e212      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001af0:	4b4c      	ldr	r3, [pc, #304]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f0      	bne.n	8001ade <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d036      	beq.n	8001b76 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d019      	beq.n	8001b44 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b10:	4b44      	ldr	r3, [pc, #272]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b14:	4a43      	ldr	r2, [pc, #268]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fa9c 	bl	8001058 <HAL_GetTick>
 8001b20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b24:	f7ff fa98 	bl	8001058 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1ef      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b36:	4b3b      	ldr	r3, [pc, #236]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x420>
 8001b42:	e018      	b.n	8001b76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b44:	4b37      	ldr	r3, [pc, #220]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b48:	4a36      	ldr	r2, [pc, #216]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b50:	f7ff fa82 	bl	8001058 <HAL_GetTick>
 8001b54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b58:	f7ff fa7e 	bl	8001058 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e1d5      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b6a:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0320 	and.w	r3, r3, #32
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d036      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d019      	beq.n	8001bbe <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b8a:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a25      	ldr	r2, [pc, #148]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001b90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b96:	f7ff fa5f 	bl	8001058 <HAL_GetTick>
 8001b9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b9e:	f7ff fa5b 	bl	8001058 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e1b2      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x49a>
 8001bbc:	e018      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bbe:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a18      	ldr	r2, [pc, #96]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001bc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bc8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bca:	f7ff fa45 	bl	8001058 <HAL_GetTick>
 8001bce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001bd2:	f7ff fa41 	bl	8001058 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e198      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001be4:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f0      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 8085 	beq.w	8001d08 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_RCC_OscConfig+0x524>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <HAL_RCC_OscConfig+0x524>)
 8001c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c0a:	f7ff fa25 	bl	8001058 <HAL_GetTick>
 8001c0e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c10:	e00c      	b.n	8001c2c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c12:	f7ff fa21 	bl	8001058 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b64      	cmp	r3, #100	; 0x64
 8001c1e:	d905      	bls.n	8001c2c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e178      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
 8001c24:	58024400 	.word	0x58024400
 8001c28:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c2c:	4b96      	ldr	r3, [pc, #600]	; (8001e88 <HAL_RCC_OscConfig+0x784>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0ec      	beq.n	8001c12 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d106      	bne.n	8001c4e <HAL_RCC_OscConfig+0x54a>
 8001c40:	4b92      	ldr	r3, [pc, #584]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c44:	4a91      	ldr	r2, [pc, #580]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4c:	e02d      	b.n	8001caa <HAL_RCC_OscConfig+0x5a6>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x56c>
 8001c56:	4b8d      	ldr	r3, [pc, #564]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5a:	4a8c      	ldr	r2, [pc, #560]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	6713      	str	r3, [r2, #112]	; 0x70
 8001c62:	4b8a      	ldr	r3, [pc, #552]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c66:	4a89      	ldr	r2, [pc, #548]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c68:	f023 0304 	bic.w	r3, r3, #4
 8001c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6e:	e01c      	b.n	8001caa <HAL_RCC_OscConfig+0x5a6>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d10c      	bne.n	8001c92 <HAL_RCC_OscConfig+0x58e>
 8001c78:	4b84      	ldr	r3, [pc, #528]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7c:	4a83      	ldr	r2, [pc, #524]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	6713      	str	r3, [r2, #112]	; 0x70
 8001c84:	4b81      	ldr	r3, [pc, #516]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c88:	4a80      	ldr	r2, [pc, #512]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c90:	e00b      	b.n	8001caa <HAL_RCC_OscConfig+0x5a6>
 8001c92:	4b7e      	ldr	r3, [pc, #504]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c96:	4a7d      	ldr	r2, [pc, #500]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9e:	4b7b      	ldr	r3, [pc, #492]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca2:	4a7a      	ldr	r2, [pc, #488]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001ca4:	f023 0304 	bic.w	r3, r3, #4
 8001ca8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d015      	beq.n	8001cde <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb2:	f7ff f9d1 	bl	8001058 <HAL_GetTick>
 8001cb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7ff f9cd 	bl	8001058 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e122      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cd0:	4b6e      	ldr	r3, [pc, #440]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0ee      	beq.n	8001cba <HAL_RCC_OscConfig+0x5b6>
 8001cdc:	e014      	b.n	8001d08 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cde:	f7ff f9bb 	bl	8001058 <HAL_GetTick>
 8001ce2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7ff f9b7 	bl	8001058 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e10c      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cfc:	4b63      	ldr	r3, [pc, #396]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1ee      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 8101 	beq.w	8001f14 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d12:	4b5e      	ldr	r3, [pc, #376]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d1a:	2b18      	cmp	r3, #24
 8001d1c:	f000 80bc 	beq.w	8001e98 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	f040 8095 	bne.w	8001e54 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b58      	ldr	r3, [pc, #352]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a57      	ldr	r2, [pc, #348]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001d30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7ff f98f 	bl	8001058 <HAL_GetTick>
 8001d3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7ff f98b 	bl	8001058 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e0e2      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d50:	4b4e      	ldr	r3, [pc, #312]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5c:	4b4b      	ldr	r3, [pc, #300]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001d5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d60:	4b4b      	ldr	r3, [pc, #300]	; (8001e90 <HAL_RCC_OscConfig+0x78c>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	4946      	ldr	r1, [pc, #280]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	628b      	str	r3, [r1, #40]	; 0x28
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d84:	3b01      	subs	r3, #1
 8001d86:	025b      	lsls	r3, r3, #9
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d90:	3b01      	subs	r3, #1
 8001d92:	041b      	lsls	r3, r3, #16
 8001d94:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	061b      	lsls	r3, r3, #24
 8001da2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001da6:	4939      	ldr	r1, [pc, #228]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001dac:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	4a36      	ldr	r2, [pc, #216]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001db8:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dbc:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <HAL_RCC_OscConfig+0x790>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dc4:	00d2      	lsls	r2, r2, #3
 8001dc6:	4931      	ldr	r1, [pc, #196]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001dcc:	4b2f      	ldr	r3, [pc, #188]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	f023 020c 	bic.w	r2, r3, #12
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	492c      	ldr	r1, [pc, #176]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001dde:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	f023 0202 	bic.w	r2, r3, #2
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	4928      	ldr	r1, [pc, #160]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001df0:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	4a25      	ldr	r2, [pc, #148]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001dfc:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	4a22      	ldr	r2, [pc, #136]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e08:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	4a1f      	ldr	r2, [pc, #124]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f914 	bl	8001058 <HAL_GetTick>
 8001e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e34:	f7ff f910 	bl	8001058 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e067      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x730>
 8001e52:	e05f      	b.n	8001f14 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e54:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7ff f8fa 	bl	8001058 <HAL_GetTick>
 8001e64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e68:	f7ff f8f6 	bl	8001058 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e04d      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e7a:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x764>
 8001e86:	e045      	b.n	8001f14 <HAL_RCC_OscConfig+0x810>
 8001e88:	58024800 	.word	0x58024800
 8001e8c:	58024400 	.word	0x58024400
 8001e90:	fffffc0c 	.word	0xfffffc0c
 8001e94:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e98:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <HAL_RCC_OscConfig+0x81c>)
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <HAL_RCC_OscConfig+0x81c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d031      	beq.n	8001f10 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	f003 0203 	and.w	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d12a      	bne.n	8001f10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d122      	bne.n	8001f10 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d11a      	bne.n	8001f10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	0a5b      	lsrs	r3, r3, #9
 8001ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d111      	bne.n	8001f10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	0c1b      	lsrs	r3, r3, #16
 8001ef0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d108      	bne.n	8001f10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	0e1b      	lsrs	r3, r3, #24
 8001f02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3730      	adds	r7, #48	; 0x30
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	58024400 	.word	0x58024400

08001f24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e19c      	b.n	8002272 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f38:	4b8a      	ldr	r3, [pc, #552]	; (8002164 <HAL_RCC_ClockConfig+0x240>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d910      	bls.n	8001f68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f46:	4b87      	ldr	r3, [pc, #540]	; (8002164 <HAL_RCC_ClockConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 020f 	bic.w	r2, r3, #15
 8001f4e:	4985      	ldr	r1, [pc, #532]	; (8002164 <HAL_RCC_ClockConfig+0x240>)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b83      	ldr	r3, [pc, #524]	; (8002164 <HAL_RCC_ClockConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e184      	b.n	8002272 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d010      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	4b7b      	ldr	r3, [pc, #492]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d908      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f84:	4b78      	ldr	r3, [pc, #480]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	4975      	ldr	r1, [pc, #468]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d010      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695a      	ldr	r2, [r3, #20]
 8001fa6:	4b70      	ldr	r3, [pc, #448]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d908      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fb2:	4b6d      	ldr	r3, [pc, #436]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	496a      	ldr	r1, [pc, #424]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d010      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699a      	ldr	r2, [r3, #24]
 8001fd4:	4b64      	ldr	r3, [pc, #400]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d908      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fe0:	4b61      	ldr	r3, [pc, #388]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	495e      	ldr	r1, [pc, #376]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0320 	and.w	r3, r3, #32
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d010      	beq.n	8002020 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69da      	ldr	r2, [r3, #28]
 8002002:	4b59      	ldr	r3, [pc, #356]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800200a:	429a      	cmp	r2, r3
 800200c:	d908      	bls.n	8002020 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800200e:	4b56      	ldr	r3, [pc, #344]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	4953      	ldr	r1, [pc, #332]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 800201c:	4313      	orrs	r3, r2
 800201e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d010      	beq.n	800204e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	4b4d      	ldr	r3, [pc, #308]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	429a      	cmp	r2, r3
 800203a:	d908      	bls.n	800204e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800203c:	4b4a      	ldr	r3, [pc, #296]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f023 020f 	bic.w	r2, r3, #15
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4947      	ldr	r1, [pc, #284]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 800204a:	4313      	orrs	r3, r2
 800204c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d055      	beq.n	8002106 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800205a:	4b43      	ldr	r3, [pc, #268]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	4940      	ldr	r1, [pc, #256]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8002068:	4313      	orrs	r3, r2
 800206a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b02      	cmp	r3, #2
 8002072:	d107      	bne.n	8002084 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002074:	4b3c      	ldr	r3, [pc, #240]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d121      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0f6      	b.n	8002272 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d107      	bne.n	800209c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800208c:	4b36      	ldr	r3, [pc, #216]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d115      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0ea      	b.n	8002272 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d107      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020a4:	4b30      	ldr	r3, [pc, #192]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d109      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0de      	b.n	8002272 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020b4:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0d6      	b.n	8002272 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020c4:	4b28      	ldr	r3, [pc, #160]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	f023 0207 	bic.w	r2, r3, #7
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4925      	ldr	r1, [pc, #148]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d6:	f7fe ffbf 	bl	8001058 <HAL_GetTick>
 80020da:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020dc:	e00a      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020de:	f7fe ffbb 	bl	8001058 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e0be      	b.n	8002272 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f4:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	429a      	cmp	r2, r3
 8002104:	d1eb      	bne.n	80020de <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d010      	beq.n	8002134 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	429a      	cmp	r2, r3
 8002120:	d208      	bcs.n	8002134 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f023 020f 	bic.w	r2, r3, #15
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	490e      	ldr	r1, [pc, #56]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8002130:	4313      	orrs	r3, r2
 8002132:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_ClockConfig+0x240>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d214      	bcs.n	800216c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_RCC_ClockConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 020f 	bic.w	r2, r3, #15
 800214a:	4906      	ldr	r1, [pc, #24]	; (8002164 <HAL_RCC_ClockConfig+0x240>)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_RCC_ClockConfig+0x240>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e086      	b.n	8002272 <HAL_RCC_ClockConfig+0x34e>
 8002164:	52002000 	.word	0x52002000
 8002168:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d010      	beq.n	800219a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	4b3f      	ldr	r3, [pc, #252]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002184:	429a      	cmp	r2, r3
 8002186:	d208      	bcs.n	800219a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002188:	4b3c      	ldr	r3, [pc, #240]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	4939      	ldr	r1, [pc, #228]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 8002196:	4313      	orrs	r3, r2
 8002198:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d010      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	4b34      	ldr	r3, [pc, #208]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d208      	bcs.n	80021c8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021b6:	4b31      	ldr	r3, [pc, #196]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	492e      	ldr	r1, [pc, #184]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d010      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699a      	ldr	r2, [r3, #24]
 80021d8:	4b28      	ldr	r3, [pc, #160]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d208      	bcs.n	80021f6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4922      	ldr	r1, [pc, #136]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d010      	beq.n	8002224 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69da      	ldr	r2, [r3, #28]
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800220e:	429a      	cmp	r2, r3
 8002210:	d208      	bcs.n	8002224 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002212:	4b1a      	ldr	r3, [pc, #104]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	4917      	ldr	r1, [pc, #92]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 8002220:	4313      	orrs	r3, r2
 8002222:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002224:	f000 f834 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8002228:	4601      	mov	r1, r0
 800222a:	4b14      	ldr	r3, [pc, #80]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	4a12      	ldr	r2, [pc, #72]	; (8002280 <HAL_RCC_ClockConfig+0x35c>)
 8002236:	5cd3      	ldrb	r3, [r2, r3]
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	fa21 f303 	lsr.w	r3, r1, r3
 8002240:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	4a0d      	ldr	r2, [pc, #52]	; (8002280 <HAL_RCC_ClockConfig+0x35c>)
 800224c:	5cd3      	ldrb	r3, [r2, r3]
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
 8002258:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <HAL_RCC_ClockConfig+0x360>)
 800225a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800225c:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <HAL_RCC_ClockConfig+0x364>)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002262:	4b0a      	ldr	r3, [pc, #40]	; (800228c <HAL_RCC_ClockConfig+0x368>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe feac 	bl	8000fc4 <HAL_InitTick>
 800226c:	4603      	mov	r3, r0
 800226e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	58024400 	.word	0x58024400
 8002280:	08005624 	.word	0x08005624
 8002284:	20000004 	.word	0x20000004
 8002288:	20000000 	.word	0x20000000
 800228c:	20000008 	.word	0x20000008

08002290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002296:	4baf      	ldr	r3, [pc, #700]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800229e:	2b18      	cmp	r3, #24
 80022a0:	f200 814e 	bhi.w	8002540 <HAL_RCC_GetSysClockFreq+0x2b0>
 80022a4:	a201      	add	r2, pc, #4	; (adr r2, 80022ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80022a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022aa:	bf00      	nop
 80022ac:	08002311 	.word	0x08002311
 80022b0:	08002541 	.word	0x08002541
 80022b4:	08002541 	.word	0x08002541
 80022b8:	08002541 	.word	0x08002541
 80022bc:	08002541 	.word	0x08002541
 80022c0:	08002541 	.word	0x08002541
 80022c4:	08002541 	.word	0x08002541
 80022c8:	08002541 	.word	0x08002541
 80022cc:	08002337 	.word	0x08002337
 80022d0:	08002541 	.word	0x08002541
 80022d4:	08002541 	.word	0x08002541
 80022d8:	08002541 	.word	0x08002541
 80022dc:	08002541 	.word	0x08002541
 80022e0:	08002541 	.word	0x08002541
 80022e4:	08002541 	.word	0x08002541
 80022e8:	08002541 	.word	0x08002541
 80022ec:	0800233d 	.word	0x0800233d
 80022f0:	08002541 	.word	0x08002541
 80022f4:	08002541 	.word	0x08002541
 80022f8:	08002541 	.word	0x08002541
 80022fc:	08002541 	.word	0x08002541
 8002300:	08002541 	.word	0x08002541
 8002304:	08002541 	.word	0x08002541
 8002308:	08002541 	.word	0x08002541
 800230c:	08002343 	.word	0x08002343
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002310:	4b90      	ldr	r3, [pc, #576]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b00      	cmp	r3, #0
 800231a:	d009      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800231c:	4b8d      	ldr	r3, [pc, #564]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	08db      	lsrs	r3, r3, #3
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	4a8c      	ldr	r2, [pc, #560]	; (8002558 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
 800232c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800232e:	e10a      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002330:	4b89      	ldr	r3, [pc, #548]	; (8002558 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002332:	61bb      	str	r3, [r7, #24]
    break;
 8002334:	e107      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002336:	4b89      	ldr	r3, [pc, #548]	; (800255c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002338:	61bb      	str	r3, [r7, #24]
    break;
 800233a:	e104      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800233c:	4b88      	ldr	r3, [pc, #544]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800233e:	61bb      	str	r3, [r7, #24]
    break;
 8002340:	e101      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002342:	4b84      	ldr	r3, [pc, #528]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800234c:	4b81      	ldr	r3, [pc, #516]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002356:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002358:	4b7e      	ldr	r3, [pc, #504]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002362:	4b7c      	ldr	r3, [pc, #496]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002366:	08db      	lsrs	r3, r3, #3
 8002368:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	ee07 3a90 	vmov	s15, r3
 8002376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800237a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80da 	beq.w	800253a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d05a      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0x1b2>
 800238c:	2b01      	cmp	r3, #1
 800238e:	d302      	bcc.n	8002396 <HAL_RCC_GetSysClockFreq+0x106>
 8002390:	2b02      	cmp	r3, #2
 8002392:	d078      	beq.n	8002486 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002394:	e099      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002396:	4b6f      	ldr	r3, [pc, #444]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d02d      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023a2:	4b6c      	ldr	r3, [pc, #432]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	08db      	lsrs	r3, r3, #3
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	4a6a      	ldr	r2, [pc, #424]	; (8002558 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80023ae:	fa22 f303 	lsr.w	r3, r2, r3
 80023b2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	ee07 3a90 	vmov	s15, r3
 80023ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	ee07 3a90 	vmov	s15, r3
 80023c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023cc:	4b61      	ldr	r3, [pc, #388]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d4:	ee07 3a90 	vmov	s15, r3
 80023d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80023e0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002564 <HAL_RCC_GetSysClockFreq+0x2d4>
 80023e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80023fc:	e087      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002408:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002568 <HAL_RCC_GetSysClockFreq+0x2d8>
 800240c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002410:	4b50      	ldr	r3, [pc, #320]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002418:	ee07 3a90 	vmov	s15, r3
 800241c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002420:	ed97 6a02 	vldr	s12, [r7, #8]
 8002424:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002564 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002428:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800242c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002434:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002440:	e065      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	ee07 3a90 	vmov	s15, r3
 8002448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800256c <HAL_RCC_GetSysClockFreq+0x2dc>
 8002450:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002454:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800245c:	ee07 3a90 	vmov	s15, r3
 8002460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002464:	ed97 6a02 	vldr	s12, [r7, #8]
 8002468:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002564 <HAL_RCC_GetSysClockFreq+0x2d4>
 800246c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002470:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002474:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002478:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800247c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002480:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002484:	e043      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	ee07 3a90 	vmov	s15, r3
 800248c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002490:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002570 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002494:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002498:	4b2e      	ldr	r3, [pc, #184]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a0:	ee07 3a90 	vmov	s15, r3
 80024a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80024ac:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002564 <HAL_RCC_GetSysClockFreq+0x2d4>
 80024b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024c8:	e021      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	ee07 3a90 	vmov	s15, r3
 80024d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800256c <HAL_RCC_GetSysClockFreq+0x2dc>
 80024d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024dc:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80024f0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002564 <HAL_RCC_GetSysClockFreq+0x2d4>
 80024f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002500:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002508:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800250c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800250e:	4b11      	ldr	r3, [pc, #68]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	0a5b      	lsrs	r3, r3, #9
 8002514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002518:	3301      	adds	r3, #1
 800251a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002526:	edd7 6a07 	vldr	s13, [r7, #28]
 800252a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800252e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002532:	ee17 3a90 	vmov	r3, s15
 8002536:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002538:	e005      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
    break;
 800253e:	e002      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002542:	61bb      	str	r3, [r7, #24]
    break;
 8002544:	bf00      	nop
  }

  return sysclockfreq;
 8002546:	69bb      	ldr	r3, [r7, #24]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3724      	adds	r7, #36	; 0x24
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	58024400 	.word	0x58024400
 8002558:	03d09000 	.word	0x03d09000
 800255c:	003d0900 	.word	0x003d0900
 8002560:	017d7840 	.word	0x017d7840
 8002564:	46000000 	.word	0x46000000
 8002568:	4c742400 	.word	0x4c742400
 800256c:	4a742400 	.word	0x4a742400
 8002570:	4bbebc20 	.word	0x4bbebc20

08002574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800257a:	f7ff fe89 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 800257e:	4601      	mov	r1, r0
 8002580:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	4a0f      	ldr	r2, [pc, #60]	; (80025c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800258c:	5cd3      	ldrb	r3, [r2, r3]
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	fa21 f303 	lsr.w	r3, r1, r3
 8002596:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	4a09      	ldr	r2, [pc, #36]	; (80025c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80025a2:	5cd3      	ldrb	r3, [r2, r3]
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	fa22 f303 	lsr.w	r3, r2, r3
 80025ae:	4a07      	ldr	r2, [pc, #28]	; (80025cc <HAL_RCC_GetHCLKFreq+0x58>)
 80025b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025b2:	4a07      	ldr	r2, [pc, #28]	; (80025d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <HAL_RCC_GetHCLKFreq+0x58>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	58024400 	.word	0x58024400
 80025c8:	08005624 	.word	0x08005624
 80025cc:	20000004 	.word	0x20000004
 80025d0:	20000000 	.word	0x20000000

080025d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80025d8:	f7ff ffcc 	bl	8002574 <HAL_RCC_GetHCLKFreq>
 80025dc:	4601      	mov	r1, r0
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	4a04      	ldr	r2, [pc, #16]	; (80025fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80025ea:	5cd3      	ldrb	r3, [r2, r3]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	58024400 	.word	0x58024400
 80025fc:	08005624 	.word	0x08005624

08002600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002604:	f7ff ffb6 	bl	8002574 <HAL_RCC_GetHCLKFreq>
 8002608:	4601      	mov	r1, r0
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <HAL_RCC_GetPCLK2Freq+0x24>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4a04      	ldr	r2, [pc, #16]	; (8002628 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002616:	5cd3      	ldrb	r3, [r2, r3]
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	58024400 	.word	0x58024400
 8002628:	08005624 	.word	0x08005624

0800262c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002634:	2300      	movs	r3, #0
 8002636:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002638:	2300      	movs	r3, #0
 800263a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d03d      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800264c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002650:	d013      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002656:	d802      	bhi.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800265c:	e01f      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800265e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002662:	d013      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002664:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002668:	d01c      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800266a:	e018      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800266c:	4baf      	ldr	r3, [pc, #700]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4aae      	ldr	r2, [pc, #696]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002676:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002678:	e015      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3304      	adds	r3, #4
 800267e:	2102      	movs	r1, #2
 8002680:	4618      	mov	r0, r3
 8002682:	f001 f96f 	bl	8003964 <RCCEx_PLL2_Config>
 8002686:	4603      	mov	r3, r0
 8002688:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800268a:	e00c      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3324      	adds	r3, #36	; 0x24
 8002690:	2102      	movs	r1, #2
 8002692:	4618      	mov	r0, r3
 8002694:	f001 fa18 	bl	8003ac8 <RCCEx_PLL3_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800269c:	e003      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	75fb      	strb	r3, [r7, #23]
      break;
 80026a2:	e000      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80026a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026a6:	7dfb      	ldrb	r3, [r7, #23]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d109      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80026ac:	4b9f      	ldr	r3, [pc, #636]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026b8:	499c      	ldr	r1, [pc, #624]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	650b      	str	r3, [r1, #80]	; 0x50
 80026be:	e001      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d03d      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d826      	bhi.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80026d8:	a201      	add	r2, pc, #4	; (adr r2, 80026e0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80026da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026de:	bf00      	nop
 80026e0:	080026f5 	.word	0x080026f5
 80026e4:	08002703 	.word	0x08002703
 80026e8:	08002715 	.word	0x08002715
 80026ec:	0800272d 	.word	0x0800272d
 80026f0:	0800272d 	.word	0x0800272d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026f4:	4b8d      	ldr	r3, [pc, #564]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	4a8c      	ldr	r2, [pc, #560]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002700:	e015      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3304      	adds	r3, #4
 8002706:	2100      	movs	r1, #0
 8002708:	4618      	mov	r0, r3
 800270a:	f001 f92b 	bl	8003964 <RCCEx_PLL2_Config>
 800270e:	4603      	mov	r3, r0
 8002710:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002712:	e00c      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3324      	adds	r3, #36	; 0x24
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f001 f9d4 	bl	8003ac8 <RCCEx_PLL3_Config>
 8002720:	4603      	mov	r3, r0
 8002722:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002724:	e003      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	75fb      	strb	r3, [r7, #23]
      break;
 800272a:	e000      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800272c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800272e:	7dfb      	ldrb	r3, [r7, #23]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002734:	4b7d      	ldr	r3, [pc, #500]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002738:	f023 0207 	bic.w	r2, r3, #7
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002740:	497a      	ldr	r1, [pc, #488]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002742:	4313      	orrs	r3, r2
 8002744:	650b      	str	r3, [r1, #80]	; 0x50
 8002746:	e001      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002748:	7dfb      	ldrb	r3, [r7, #23]
 800274a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002754:	2b00      	cmp	r3, #0
 8002756:	d03e      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	2b80      	cmp	r3, #128	; 0x80
 800275e:	d01c      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002760:	2b80      	cmp	r3, #128	; 0x80
 8002762:	d804      	bhi.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002768:	2b40      	cmp	r3, #64	; 0x40
 800276a:	d00d      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800276c:	e01e      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x180>
 800276e:	2bc0      	cmp	r3, #192	; 0xc0
 8002770:	d01f      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002776:	d01e      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002778:	e018      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800277a:	4b6c      	ldr	r3, [pc, #432]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277e:	4a6b      	ldr	r2, [pc, #428]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002784:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002786:	e017      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3304      	adds	r3, #4
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f001 f8e8 	bl	8003964 <RCCEx_PLL2_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002798:	e00e      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3324      	adds	r3, #36	; 0x24
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f001 f991 	bl	8003ac8 <RCCEx_PLL3_Config>
 80027a6:	4603      	mov	r3, r0
 80027a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80027aa:	e005      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	75fb      	strb	r3, [r7, #23]
      break;
 80027b0:	e002      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80027b2:	bf00      	nop
 80027b4:	e000      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80027b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80027be:	4b5b      	ldr	r3, [pc, #364]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	4958      	ldr	r1, [pc, #352]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	650b      	str	r3, [r1, #80]	; 0x50
 80027d0:	e001      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
 80027d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d044      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ec:	d01f      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80027ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027f2:	d805      	bhi.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80027f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027fc:	d00e      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80027fe:	e01f      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002800:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002804:	d01f      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002806:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800280a:	d01e      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800280c:	e018      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800280e:	4b47      	ldr	r3, [pc, #284]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	4a46      	ldr	r2, [pc, #280]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002818:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800281a:	e017      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3304      	adds	r3, #4
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f001 f89e 	bl	8003964 <RCCEx_PLL2_Config>
 8002828:	4603      	mov	r3, r0
 800282a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800282c:	e00e      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3324      	adds	r3, #36	; 0x24
 8002832:	2100      	movs	r1, #0
 8002834:	4618      	mov	r0, r3
 8002836:	f001 f947 	bl	8003ac8 <RCCEx_PLL3_Config>
 800283a:	4603      	mov	r3, r0
 800283c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800283e:	e005      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	75fb      	strb	r3, [r7, #23]
      break;
 8002844:	e002      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002846:	bf00      	nop
 8002848:	e000      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800284a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800284c:	7dfb      	ldrb	r3, [r7, #23]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10a      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002852:	4b36      	ldr	r3, [pc, #216]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002860:	4932      	ldr	r1, [pc, #200]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002862:	4313      	orrs	r3, r2
 8002864:	658b      	str	r3, [r1, #88]	; 0x58
 8002866:	e001      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002868:	7dfb      	ldrb	r3, [r7, #23]
 800286a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002874:	2b00      	cmp	r3, #0
 8002876:	d044      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800287e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002882:	d01f      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002888:	d805      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800288e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002892:	d00e      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002894:	e01f      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002896:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800289a:	d01f      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800289c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028a0:	d01e      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80028a2:	e018      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a4:	4b21      	ldr	r3, [pc, #132]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	4a20      	ldr	r2, [pc, #128]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028b0:	e017      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f001 f853 	bl	8003964 <RCCEx_PLL2_Config>
 80028be:	4603      	mov	r3, r0
 80028c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80028c2:	e00e      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3324      	adds	r3, #36	; 0x24
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f001 f8fc 	bl	8003ac8 <RCCEx_PLL3_Config>
 80028d0:	4603      	mov	r3, r0
 80028d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028d4:	e005      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	75fb      	strb	r3, [r7, #23]
      break;
 80028da:	e002      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80028dc:	bf00      	nop
 80028de:	e000      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80028e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10a      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028f6:	490d      	ldr	r1, [pc, #52]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	658b      	str	r3, [r1, #88]	; 0x58
 80028fc:	e001      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028fe:	7dfb      	ldrb	r3, [r7, #23]
 8002900:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d035      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002912:	2b10      	cmp	r3, #16
 8002914:	d00c      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002916:	2b10      	cmp	r3, #16
 8002918:	d802      	bhi.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01b      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800291e:	e017      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002920:	2b20      	cmp	r3, #32
 8002922:	d00c      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002924:	2b30      	cmp	r3, #48	; 0x30
 8002926:	d018      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002928:	e012      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800292a:	bf00      	nop
 800292c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002930:	4baf      	ldr	r3, [pc, #700]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	4aae      	ldr	r2, [pc, #696]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800293c:	e00e      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3304      	adds	r3, #4
 8002942:	2102      	movs	r1, #2
 8002944:	4618      	mov	r0, r3
 8002946:	f001 f80d 	bl	8003964 <RCCEx_PLL2_Config>
 800294a:	4603      	mov	r3, r0
 800294c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800294e:	e005      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	75fb      	strb	r3, [r7, #23]
      break;
 8002954:	e002      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002956:	bf00      	nop
 8002958:	e000      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800295a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800295c:	7dfb      	ldrb	r3, [r7, #23]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002962:	4ba3      	ldr	r3, [pc, #652]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002966:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296e:	49a0      	ldr	r1, [pc, #640]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002970:	4313      	orrs	r3, r2
 8002972:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002974:	e001      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002976:	7dfb      	ldrb	r3, [r7, #23]
 8002978:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d042      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800298e:	d01f      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002994:	d805      	bhi.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800299a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800299e:	d00e      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x392>
 80029a0:	e01f      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80029a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029a6:	d01f      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80029a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ac:	d01e      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80029ae:	e018      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029b0:	4b8f      	ldr	r3, [pc, #572]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	4a8e      	ldr	r2, [pc, #568]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029bc:	e017      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 ffcd 	bl	8003964 <RCCEx_PLL2_Config>
 80029ca:	4603      	mov	r3, r0
 80029cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029ce:	e00e      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3324      	adds	r3, #36	; 0x24
 80029d4:	2100      	movs	r1, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f001 f876 	bl	8003ac8 <RCCEx_PLL3_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029e0:	e005      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	75fb      	strb	r3, [r7, #23]
      break;
 80029e6:	e002      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80029e8:	bf00      	nop
 80029ea:	e000      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80029ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d109      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80029f4:	4b7e      	ldr	r3, [pc, #504]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	497b      	ldr	r1, [pc, #492]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	650b      	str	r3, [r1, #80]	; 0x50
 8002a06:	e001      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
 8002a0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d042      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a20:	d01b      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a26:	d805      	bhi.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d022      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002a32:	e01b      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002a34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a38:	d01d      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002a3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a3e:	d01c      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002a40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a44:	d01b      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002a46:	e011      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 ff88 	bl	8003964 <RCCEx_PLL2_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a58:	e012      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3324      	adds	r3, #36	; 0x24
 8002a5e:	2101      	movs	r1, #1
 8002a60:	4618      	mov	r0, r3
 8002a62:	f001 f831 	bl	8003ac8 <RCCEx_PLL3_Config>
 8002a66:	4603      	mov	r3, r0
 8002a68:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a6a:	e009      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a70:	e006      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002a72:	bf00      	nop
 8002a74:	e004      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002a76:	bf00      	nop
 8002a78:	e002      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002a7a:	bf00      	nop
 8002a7c:	e000      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a86:	4b5a      	ldr	r3, [pc, #360]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a92:	4957      	ldr	r1, [pc, #348]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	650b      	str	r3, [r1, #80]	; 0x50
 8002a98:	e001      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
 8002a9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d044      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ab4:	d01b      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aba:	d805      	bhi.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d022      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002ac0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ac4:	d00a      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002ac6:	e01b      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002acc:	d01d      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ad2:	d01c      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002ad4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ad8:	d01b      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002ada:	e011      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3304      	adds	r3, #4
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 ff3e 	bl	8003964 <RCCEx_PLL2_Config>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002aec:	e012      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3324      	adds	r3, #36	; 0x24
 8002af2:	2101      	movs	r1, #1
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 ffe7 	bl	8003ac8 <RCCEx_PLL3_Config>
 8002afa:	4603      	mov	r3, r0
 8002afc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002afe:	e009      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	75fb      	strb	r3, [r7, #23]
      break;
 8002b04:	e006      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b06:	bf00      	nop
 8002b08:	e004      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e002      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b0e:	bf00      	nop
 8002b10:	e000      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10a      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b1a:	4b35      	ldr	r3, [pc, #212]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b28:	4931      	ldr	r1, [pc, #196]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	658b      	str	r3, [r1, #88]	; 0x58
 8002b2e:	e001      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
 8002b32:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d02d      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b48:	d005      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b4e:	d009      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d013      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002b54:	e00f      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b56:	4b26      	ldr	r3, [pc, #152]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5a:	4a25      	ldr	r2, [pc, #148]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002b62:	e00c      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3304      	adds	r3, #4
 8002b68:	2101      	movs	r1, #1
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fefa 	bl	8003964 <RCCEx_PLL2_Config>
 8002b70:	4603      	mov	r3, r0
 8002b72:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002b74:	e003      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	75fb      	strb	r3, [r7, #23]
      break;
 8002b7a:	e000      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002b7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d109      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b84:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b88:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b90:	4917      	ldr	r1, [pc, #92]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	650b      	str	r3, [r1, #80]	; 0x50
 8002b96:	e001      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b98:	7dfb      	ldrb	r3, [r7, #23]
 8002b9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d035      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d81b      	bhi.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002bb0:	a201      	add	r2, pc, #4	; (adr r2, 8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb6:	bf00      	nop
 8002bb8:	08002bf5 	.word	0x08002bf5
 8002bbc:	08002bc9 	.word	0x08002bc9
 8002bc0:	08002bd7 	.word	0x08002bd7
 8002bc4:	08002bf5 	.word	0x08002bf5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc8:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002bd4:	e00f      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	2102      	movs	r1, #2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fec1 	bl	8003964 <RCCEx_PLL2_Config>
 8002be2:	4603      	mov	r3, r0
 8002be4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002be6:	e006      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	75fb      	strb	r3, [r7, #23]
      break;
 8002bec:	e003      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002bee:	bf00      	nop
 8002bf0:	58024400 	.word	0x58024400
      break;
 8002bf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d109      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002bfc:	4bba      	ldr	r3, [pc, #744]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c00:	f023 0203 	bic.w	r2, r3, #3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c08:	49b7      	ldr	r1, [pc, #732]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c0e:	e001      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8086 	beq.w	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c22:	4bb2      	ldr	r3, [pc, #712]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4ab1      	ldr	r2, [pc, #708]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c2e:	f7fe fa13 	bl	8001058 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c34:	e009      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c36:	f7fe fa0f 	bl	8001058 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b64      	cmp	r3, #100	; 0x64
 8002c42:	d902      	bls.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	75fb      	strb	r3, [r7, #23]
        break;
 8002c48:	e005      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c4a:	4ba8      	ldr	r3, [pc, #672]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0ef      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d166      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002c5c:	4ba2      	ldr	r3, [pc, #648]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c66:	4053      	eors	r3, r2
 8002c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d013      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c70:	4b9d      	ldr	r3, [pc, #628]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c78:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c7a:	4b9b      	ldr	r3, [pc, #620]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	4a9a      	ldr	r2, [pc, #616]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c84:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c86:	4b98      	ldr	r3, [pc, #608]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	4a97      	ldr	r2, [pc, #604]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c90:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002c92:	4a95      	ldr	r2, [pc, #596]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca2:	d115      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fe f9d8 	bl	8001058 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002caa:	e00b      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cac:	f7fe f9d4 	bl	8001058 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d902      	bls.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	75fb      	strb	r3, [r7, #23]
            break;
 8002cc2:	e005      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cc4:	4b88      	ldr	r3, [pc, #544]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0ed      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d126      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ce4:	d10d      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002ce6:	4b80      	ldr	r3, [pc, #512]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cf4:	0919      	lsrs	r1, r3, #4
 8002cf6:	4b7e      	ldr	r3, [pc, #504]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002cf8:	400b      	ands	r3, r1
 8002cfa:	497b      	ldr	r1, [pc, #492]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	610b      	str	r3, [r1, #16]
 8002d00:	e005      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002d02:	4b79      	ldr	r3, [pc, #484]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	4a78      	ldr	r2, [pc, #480]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d0c:	6113      	str	r3, [r2, #16]
 8002d0e:	4b76      	ldr	r3, [pc, #472]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1c:	4972      	ldr	r1, [pc, #456]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	670b      	str	r3, [r1, #112]	; 0x70
 8002d22:	e004      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
 8002d26:	75bb      	strb	r3, [r7, #22]
 8002d28:	e001      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d07d      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d3e:	2b28      	cmp	r3, #40	; 0x28
 8002d40:	d866      	bhi.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002d42:	a201      	add	r2, pc, #4	; (adr r2, 8002d48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d48:	08002e17 	.word	0x08002e17
 8002d4c:	08002e11 	.word	0x08002e11
 8002d50:	08002e11 	.word	0x08002e11
 8002d54:	08002e11 	.word	0x08002e11
 8002d58:	08002e11 	.word	0x08002e11
 8002d5c:	08002e11 	.word	0x08002e11
 8002d60:	08002e11 	.word	0x08002e11
 8002d64:	08002e11 	.word	0x08002e11
 8002d68:	08002ded 	.word	0x08002ded
 8002d6c:	08002e11 	.word	0x08002e11
 8002d70:	08002e11 	.word	0x08002e11
 8002d74:	08002e11 	.word	0x08002e11
 8002d78:	08002e11 	.word	0x08002e11
 8002d7c:	08002e11 	.word	0x08002e11
 8002d80:	08002e11 	.word	0x08002e11
 8002d84:	08002e11 	.word	0x08002e11
 8002d88:	08002dff 	.word	0x08002dff
 8002d8c:	08002e11 	.word	0x08002e11
 8002d90:	08002e11 	.word	0x08002e11
 8002d94:	08002e11 	.word	0x08002e11
 8002d98:	08002e11 	.word	0x08002e11
 8002d9c:	08002e11 	.word	0x08002e11
 8002da0:	08002e11 	.word	0x08002e11
 8002da4:	08002e11 	.word	0x08002e11
 8002da8:	08002e17 	.word	0x08002e17
 8002dac:	08002e11 	.word	0x08002e11
 8002db0:	08002e11 	.word	0x08002e11
 8002db4:	08002e11 	.word	0x08002e11
 8002db8:	08002e11 	.word	0x08002e11
 8002dbc:	08002e11 	.word	0x08002e11
 8002dc0:	08002e11 	.word	0x08002e11
 8002dc4:	08002e11 	.word	0x08002e11
 8002dc8:	08002e17 	.word	0x08002e17
 8002dcc:	08002e11 	.word	0x08002e11
 8002dd0:	08002e11 	.word	0x08002e11
 8002dd4:	08002e11 	.word	0x08002e11
 8002dd8:	08002e11 	.word	0x08002e11
 8002ddc:	08002e11 	.word	0x08002e11
 8002de0:	08002e11 	.word	0x08002e11
 8002de4:	08002e11 	.word	0x08002e11
 8002de8:	08002e17 	.word	0x08002e17
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3304      	adds	r3, #4
 8002df0:	2101      	movs	r1, #1
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fdb6 	bl	8003964 <RCCEx_PLL2_Config>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002dfc:	e00c      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3324      	adds	r3, #36	; 0x24
 8002e02:	2101      	movs	r1, #1
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fe5f 	bl	8003ac8 <RCCEx_PLL3_Config>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e0e:	e003      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	75fb      	strb	r3, [r7, #23]
      break;
 8002e14:	e000      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8002e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e18:	7dfb      	ldrb	r3, [r7, #23]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e1e:	4b32      	ldr	r3, [pc, #200]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e22:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e2a:	492f      	ldr	r1, [pc, #188]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	654b      	str	r3, [r1, #84]	; 0x54
 8002e30:	e001      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
 8002e34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d037      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	d820      	bhi.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002e4a:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e50:	08002e93 	.word	0x08002e93
 8002e54:	08002e69 	.word	0x08002e69
 8002e58:	08002e7b 	.word	0x08002e7b
 8002e5c:	08002e93 	.word	0x08002e93
 8002e60:	08002e93 	.word	0x08002e93
 8002e64:	08002e93 	.word	0x08002e93
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fd78 	bl	8003964 <RCCEx_PLL2_Config>
 8002e74:	4603      	mov	r3, r0
 8002e76:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002e78:	e00c      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3324      	adds	r3, #36	; 0x24
 8002e7e:	2101      	movs	r1, #1
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 fe21 	bl	8003ac8 <RCCEx_PLL3_Config>
 8002e86:	4603      	mov	r3, r0
 8002e88:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002e8a:	e003      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e90:	e000      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9e:	f023 0207 	bic.w	r2, r3, #7
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea6:	4910      	ldr	r1, [pc, #64]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	654b      	str	r3, [r1, #84]	; 0x54
 8002eac:	e001      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
 8002eb0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d040      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	d827      	bhi.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002ec8:	a201      	add	r2, pc, #4	; (adr r2, 8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ece:	bf00      	nop
 8002ed0:	08002f1f 	.word	0x08002f1f
 8002ed4:	08002ef5 	.word	0x08002ef5
 8002ed8:	08002f07 	.word	0x08002f07
 8002edc:	08002f1f 	.word	0x08002f1f
 8002ee0:	08002f1f 	.word	0x08002f1f
 8002ee4:	08002f1f 	.word	0x08002f1f
 8002ee8:	58024400 	.word	0x58024400
 8002eec:	58024800 	.word	0x58024800
 8002ef0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	2101      	movs	r1, #1
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fd32 	bl	8003964 <RCCEx_PLL2_Config>
 8002f00:	4603      	mov	r3, r0
 8002f02:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f04:	e00c      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3324      	adds	r3, #36	; 0x24
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fddb 	bl	8003ac8 <RCCEx_PLL3_Config>
 8002f12:	4603      	mov	r3, r0
 8002f14:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f16:	e003      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f1c:	e000      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8002f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f20:	7dfb      	ldrb	r3, [r7, #23]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10a      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f26:	4bb2      	ldr	r3, [pc, #712]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	f023 0207 	bic.w	r2, r3, #7
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f34:	49ae      	ldr	r1, [pc, #696]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	658b      	str	r3, [r1, #88]	; 0x58
 8002f3a:	e001      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f3c:	7dfb      	ldrb	r3, [r7, #23]
 8002f3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d044      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f56:	d01b      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f5c:	d805      	bhi.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d022      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f66:	d00a      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002f68:	e01b      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6e:	d01d      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x980>
 8002f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f74:	d01c      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002f76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f7a:	d01b      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002f7c:	e011      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3304      	adds	r3, #4
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 fced 	bl	8003964 <RCCEx_PLL2_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002f8e:	e012      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3324      	adds	r3, #36	; 0x24
 8002f94:	2102      	movs	r1, #2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fd96 	bl	8003ac8 <RCCEx_PLL3_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002fa0:	e009      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa6:	e006      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002fa8:	bf00      	nop
 8002faa:	e004      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002fac:	bf00      	nop
 8002fae:	e002      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002fb0:	bf00      	nop
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fb6:	7dfb      	ldrb	r3, [r7, #23]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10a      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fbc:	4b8c      	ldr	r3, [pc, #560]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fca:	4989      	ldr	r1, [pc, #548]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	654b      	str	r3, [r1, #84]	; 0x54
 8002fd0:	e001      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd2:	7dfb      	ldrb	r3, [r7, #23]
 8002fd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d044      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fec:	d01b      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8002fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff2:	d805      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d022      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffc:	d00a      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8002ffe:	e01b      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003004:	d01d      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003006:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800300a:	d01c      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800300c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003010:	d01b      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8003012:	e011      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	2100      	movs	r1, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fca2 	bl	8003964 <RCCEx_PLL2_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003024:	e012      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3324      	adds	r3, #36	; 0x24
 800302a:	2102      	movs	r1, #2
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fd4b 	bl	8003ac8 <RCCEx_PLL3_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003036:	e009      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	75fb      	strb	r3, [r7, #23]
      break;
 800303c:	e006      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800303e:	bf00      	nop
 8003040:	e004      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003042:	bf00      	nop
 8003044:	e002      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003046:	bf00      	nop
 8003048:	e000      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800304a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10a      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003052:	4b67      	ldr	r3, [pc, #412]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003056:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003060:	4963      	ldr	r1, [pc, #396]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003062:	4313      	orrs	r3, r2
 8003064:	658b      	str	r3, [r1, #88]	; 0x58
 8003066:	e001      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003068:	7dfb      	ldrb	r3, [r7, #23]
 800306a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003074:	2b00      	cmp	r3, #0
 8003076:	d044      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800307e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003082:	d01b      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8003084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003088:	d805      	bhi.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d022      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800308e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003092:	d00a      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003094:	e01b      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8003096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800309a:	d01d      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800309c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030a0:	d01c      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80030a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030a6:	d01b      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80030a8:	e011      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3304      	adds	r3, #4
 80030ae:	2100      	movs	r1, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fc57 	bl	8003964 <RCCEx_PLL2_Config>
 80030b6:	4603      	mov	r3, r0
 80030b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80030ba:	e012      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3324      	adds	r3, #36	; 0x24
 80030c0:	2102      	movs	r1, #2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fd00 	bl	8003ac8 <RCCEx_PLL3_Config>
 80030c8:	4603      	mov	r3, r0
 80030ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80030cc:	e009      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	75fb      	strb	r3, [r7, #23]
      break;
 80030d2:	e006      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80030d4:	bf00      	nop
 80030d6:	e004      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80030d8:	bf00      	nop
 80030da:	e002      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80030dc:	bf00      	nop
 80030de:	e000      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80030e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030e2:	7dfb      	ldrb	r3, [r7, #23]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80030e8:	4b41      	ldr	r3, [pc, #260]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030f6:	493e      	ldr	r1, [pc, #248]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	658b      	str	r3, [r1, #88]	; 0x58
 80030fc:	e001      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
 8003100:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01a      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003118:	d10a      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3324      	adds	r3, #36	; 0x24
 800311e:	2102      	movs	r1, #2
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fcd1 	bl	8003ac8 <RCCEx_PLL3_Config>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003130:	4b2f      	ldr	r3, [pc, #188]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800313e:	492c      	ldr	r1, [pc, #176]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003140:	4313      	orrs	r3, r2
 8003142:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01a      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800315a:	d10a      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3324      	adds	r3, #36	; 0x24
 8003160:	2102      	movs	r1, #2
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fcb0 	bl	8003ac8 <RCCEx_PLL3_Config>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003172:	4b1f      	ldr	r3, [pc, #124]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003180:	491b      	ldr	r1, [pc, #108]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003182:	4313      	orrs	r3, r2
 8003184:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d032      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319c:	d00d      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800319e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031a2:	d016      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d111      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3304      	adds	r3, #4
 80031ac:	2100      	movs	r1, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fbd8 	bl	8003964 <RCCEx_PLL2_Config>
 80031b4:	4603      	mov	r3, r0
 80031b6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80031b8:	e00c      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3324      	adds	r3, #36	; 0x24
 80031be:	2102      	movs	r1, #2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fc81 	bl	8003ac8 <RCCEx_PLL3_Config>
 80031c6:	4603      	mov	r3, r0
 80031c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80031ca:	e003      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	75fb      	strb	r3, [r7, #23]
      break;
 80031d0:	e000      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80031d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031d4:	7dfb      	ldrb	r3, [r7, #23]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10c      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80031dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031e8:	4901      	ldr	r1, [pc, #4]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	658b      	str	r3, [r1, #88]	; 0x58
 80031ee:	e003      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80031f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f4:	7dfb      	ldrb	r3, [r7, #23]
 80031f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d02f      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800320a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800320e:	d00c      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003210:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003214:	d015      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8003216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800321a:	d10f      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800321c:	4b79      	ldr	r3, [pc, #484]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	4a78      	ldr	r2, [pc, #480]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003226:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003228:	e00c      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3324      	adds	r3, #36	; 0x24
 800322e:	2101      	movs	r1, #1
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fc49 	bl	8003ac8 <RCCEx_PLL3_Config>
 8003236:	4603      	mov	r3, r0
 8003238:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800323a:	e003      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	75fb      	strb	r3, [r7, #23]
      break;
 8003240:	e000      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8003242:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10a      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800324a:	4b6e      	ldr	r3, [pc, #440]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800324c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003258:	496a      	ldr	r1, [pc, #424]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800325a:	4313      	orrs	r3, r2
 800325c:	654b      	str	r3, [r1, #84]	; 0x54
 800325e:	e001      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d029      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327c:	d007      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800327e:	e00f      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003280:	4b60      	ldr	r3, [pc, #384]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	4a5f      	ldr	r2, [pc, #380]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800328a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800328c:	e00b      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3304      	adds	r3, #4
 8003292:	2102      	movs	r1, #2
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fb65 	bl	8003964 <RCCEx_PLL2_Config>
 800329a:	4603      	mov	r3, r0
 800329c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800329e:	e002      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	75fb      	strb	r3, [r7, #23]
      break;
 80032a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d109      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80032ac:	4b55      	ldr	r3, [pc, #340]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80032ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b8:	4952      	ldr	r1, [pc, #328]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80032be:	e001      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c0:	7dfb      	ldrb	r3, [r7, #23]
 80032c2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3324      	adds	r3, #36	; 0x24
 80032d4:	2102      	movs	r1, #2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fbf6 	bl	8003ac8 <RCCEx_PLL3_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d02f      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032fa:	d00c      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80032fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003300:	d802      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d011      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8003306:	e00d      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8003308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330c:	d00f      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800330e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003312:	d00e      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8003314:	e006      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003316:	4b3b      	ldr	r3, [pc, #236]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	4a3a      	ldr	r2, [pc, #232]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800331c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003320:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003322:	e007      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	75fb      	strb	r3, [r7, #23]
      break;
 8003328:	e004      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800332a:	bf00      	nop
 800332c:	e002      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800332e:	bf00      	nop
 8003330:	e000      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800333a:	4b32      	ldr	r3, [pc, #200]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003346:	492f      	ldr	r1, [pc, #188]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003348:	4313      	orrs	r3, r2
 800334a:	654b      	str	r3, [r1, #84]	; 0x54
 800334c:	e001      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800334e:	7dfb      	ldrb	r3, [r7, #23]
 8003350:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d008      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800335e:	4b29      	ldr	r3, [pc, #164]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003362:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	4926      	ldr	r1, [pc, #152]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800336c:	4313      	orrs	r3, r2
 800336e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d009      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800337c:	4b21      	ldr	r3, [pc, #132]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800338a:	491e      	ldr	r1, [pc, #120]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800338c:	4313      	orrs	r3, r2
 800338e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800339c:	4b19      	ldr	r3, [pc, #100]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800339e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033a8:	4916      	ldr	r1, [pc, #88]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033ba:	4b12      	ldr	r3, [pc, #72]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	4a11      	ldr	r2, [pc, #68]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033c4:	6113      	str	r3, [r2, #16]
 80033c6:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80033d0:	490c      	ldr	r1, [pc, #48]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	da08      	bge.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ea:	4906      	ldr	r1, [pc, #24]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80033f0:	7dbb      	ldrb	r3, [r7, #22]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e000      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	58024400 	.word	0x58024400

08003408 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800340c:	f7ff f8b2 	bl	8002574 <HAL_RCC_GetHCLKFreq>
 8003410:	4601      	mov	r1, r0
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	4a04      	ldr	r2, [pc, #16]	; (8003430 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800341e:	5cd3      	ldrb	r3, [r2, r3]
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	58024400 	.word	0x58024400
 8003430:	08005624 	.word	0x08005624

08003434 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003434:	b480      	push	{r7}
 8003436:	b089      	sub	sp, #36	; 0x24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800343c:	4b9d      	ldr	r3, [pc, #628]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003446:	4b9b      	ldr	r3, [pc, #620]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	0b1b      	lsrs	r3, r3, #12
 800344c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003450:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003452:	4b98      	ldr	r3, [pc, #608]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003456:	091b      	lsrs	r3, r3, #4
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800345e:	4b95      	ldr	r3, [pc, #596]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	08db      	lsrs	r3, r3, #3
 8003464:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	fb02 f303 	mul.w	r3, r2, r3
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003476:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 810a 	beq.w	8003696 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d05a      	beq.n	800353e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8003488:	2b01      	cmp	r3, #1
 800348a:	d302      	bcc.n	8003492 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800348c:	2b02      	cmp	r3, #2
 800348e:	d078      	beq.n	8003582 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8003490:	e099      	b.n	80035c6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003492:	4b88      	ldr	r3, [pc, #544]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d02d      	beq.n	80034fa <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800349e:	4b85      	ldr	r3, [pc, #532]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	08db      	lsrs	r3, r3, #3
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	4a83      	ldr	r2, [pc, #524]	; (80036b8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80034aa:	fa22 f303 	lsr.w	r3, r2, r3
 80034ae:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	ee07 3a90 	vmov	s15, r3
 80034c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034c8:	4b7a      	ldr	r3, [pc, #488]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d0:	ee07 3a90 	vmov	s15, r3
 80034d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80034dc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80036bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80034e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80034f8:	e087      	b.n	800360a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	ee07 3a90 	vmov	s15, r3
 8003500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003504:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80036c0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8003508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800350c:	4b69      	ldr	r3, [pc, #420]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800350e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003514:	ee07 3a90 	vmov	s15, r3
 8003518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800351c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003520:	eddf 5a66 	vldr	s11, [pc, #408]	; 80036bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003524:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003528:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800352c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003538:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800353c:	e065      	b.n	800360a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	ee07 3a90 	vmov	s15, r3
 8003544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003548:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80036c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800354c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003550:	4b58      	ldr	r3, [pc, #352]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003558:	ee07 3a90 	vmov	s15, r3
 800355c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003560:	ed97 6a03 	vldr	s12, [r7, #12]
 8003564:	eddf 5a55 	vldr	s11, [pc, #340]	; 80036bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003568:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800356c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003570:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003574:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800357c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003580:	e043      	b.n	800360a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	ee07 3a90 	vmov	s15, r3
 8003588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800358c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80036c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003594:	4b47      	ldr	r3, [pc, #284]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359c:	ee07 3a90 	vmov	s15, r3
 80035a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80035a8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80036bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80035ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035c4:	e021      	b.n	800360a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	ee07 3a90 	vmov	s15, r3
 80035cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80036c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80035d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035d8:	4b36      	ldr	r3, [pc, #216]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80035ec:	eddf 5a33 	vldr	s11, [pc, #204]	; 80036bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80035f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003604:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003608:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800360a:	4b2a      	ldr	r3, [pc, #168]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	0a5b      	lsrs	r3, r3, #9
 8003610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003614:	ee07 3a90 	vmov	s15, r3
 8003618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003620:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003624:	edd7 6a07 	vldr	s13, [r7, #28]
 8003628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800362c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003630:	ee17 2a90 	vmov	r2, s15
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003638:	4b1e      	ldr	r3, [pc, #120]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	0c1b      	lsrs	r3, r3, #16
 800363e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800364e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003652:	edd7 6a07 	vldr	s13, [r7, #28]
 8003656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800365a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800365e:	ee17 2a90 	vmov	r2, s15
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003666:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	0e1b      	lsrs	r3, r3, #24
 800366c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003670:	ee07 3a90 	vmov	s15, r3
 8003674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003678:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800367c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003680:	edd7 6a07 	vldr	s13, [r7, #28]
 8003684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800368c:	ee17 2a90 	vmov	r2, s15
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003694:	e008      	b.n	80036a8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	609a      	str	r2, [r3, #8]
}
 80036a8:	bf00      	nop
 80036aa:	3724      	adds	r7, #36	; 0x24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	58024400 	.word	0x58024400
 80036b8:	03d09000 	.word	0x03d09000
 80036bc:	46000000 	.word	0x46000000
 80036c0:	4c742400 	.word	0x4c742400
 80036c4:	4a742400 	.word	0x4a742400
 80036c8:	4bbebc20 	.word	0x4bbebc20

080036cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b089      	sub	sp, #36	; 0x24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036d4:	4b9d      	ldr	r3, [pc, #628]	; (800394c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80036de:	4b9b      	ldr	r3, [pc, #620]	; (800394c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	0d1b      	lsrs	r3, r3, #20
 80036e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80036ea:	4b98      	ldr	r3, [pc, #608]	; (800394c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80036f6:	4b95      	ldr	r3, [pc, #596]	; (800394c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	08db      	lsrs	r3, r3, #3
 80036fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	fb02 f303 	mul.w	r3, r2, r3
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 810a 	beq.w	800392e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d05a      	beq.n	80037d6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8003720:	2b01      	cmp	r3, #1
 8003722:	d302      	bcc.n	800372a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8003724:	2b02      	cmp	r3, #2
 8003726:	d078      	beq.n	800381a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8003728:	e099      	b.n	800385e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800372a:	4b88      	ldr	r3, [pc, #544]	; (800394c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d02d      	beq.n	8003792 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003736:	4b85      	ldr	r3, [pc, #532]	; (800394c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	08db      	lsrs	r3, r3, #3
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	4a83      	ldr	r2, [pc, #524]	; (8003950 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8003742:	fa22 f303 	lsr.w	r3, r2, r3
 8003746:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	ee07 3a90 	vmov	s15, r3
 800374e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	ee07 3a90 	vmov	s15, r3
 8003758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800375c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003760:	4b7a      	ldr	r3, [pc, #488]	; (800394c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003768:	ee07 3a90 	vmov	s15, r3
 800376c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003770:	ed97 6a03 	vldr	s12, [r7, #12]
 8003774:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003954 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003778:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800377c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003780:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003784:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003790:	e087      	b.n	80038a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	ee07 3a90 	vmov	s15, r3
 8003798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003958 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80037a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037a4:	4b69      	ldr	r3, [pc, #420]	; (800394c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ac:	ee07 3a90 	vmov	s15, r3
 80037b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80037b8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003954 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80037bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037d4:	e065      	b.n	80038a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	ee07 3a90 	vmov	s15, r3
 80037dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800395c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80037e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037e8:	4b58      	ldr	r3, [pc, #352]	; (800394c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f0:	ee07 3a90 	vmov	s15, r3
 80037f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80037fc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003954 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003800:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003804:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003808:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800380c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003814:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003818:	e043      	b.n	80038a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	ee07 3a90 	vmov	s15, r3
 8003820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003824:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003960 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8003828:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800382c:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003834:	ee07 3a90 	vmov	s15, r3
 8003838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800383c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003840:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003954 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003844:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003848:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800384c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003850:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003858:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800385c:	e021      	b.n	80038a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	ee07 3a90 	vmov	s15, r3
 8003864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003868:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800395c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800386c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003870:	4b36      	ldr	r3, [pc, #216]	; (800394c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003878:	ee07 3a90 	vmov	s15, r3
 800387c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003880:	ed97 6a03 	vldr	s12, [r7, #12]
 8003884:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003954 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003888:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800388c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003890:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003894:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038a0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80038a2:	4b2a      	ldr	r3, [pc, #168]	; (800394c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	0a5b      	lsrs	r3, r3, #9
 80038a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ac:	ee07 3a90 	vmov	s15, r3
 80038b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80038c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038c8:	ee17 2a90 	vmov	r2, s15
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80038d0:	4b1e      	ldr	r3, [pc, #120]	; (800394c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80038ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038f6:	ee17 2a90 	vmov	r2, s15
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80038fe:	4b13      	ldr	r3, [pc, #76]	; (800394c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	0e1b      	lsrs	r3, r3, #24
 8003904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003908:	ee07 3a90 	vmov	s15, r3
 800390c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003910:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003914:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003918:	edd7 6a07 	vldr	s13, [r7, #28]
 800391c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003924:	ee17 2a90 	vmov	r2, s15
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800392c:	e008      	b.n	8003940 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	609a      	str	r2, [r3, #8]
}
 8003940:	bf00      	nop
 8003942:	3724      	adds	r7, #36	; 0x24
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	58024400 	.word	0x58024400
 8003950:	03d09000 	.word	0x03d09000
 8003954:	46000000 	.word	0x46000000
 8003958:	4c742400 	.word	0x4c742400
 800395c:	4a742400 	.word	0x4a742400
 8003960:	4bbebc20 	.word	0x4bbebc20

08003964 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003972:	4b53      	ldr	r3, [pc, #332]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	2b03      	cmp	r3, #3
 800397c:	d101      	bne.n	8003982 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e099      	b.n	8003ab6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003982:	4b4f      	ldr	r3, [pc, #316]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a4e      	ldr	r2, [pc, #312]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003988:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800398c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398e:	f7fd fb63 	bl	8001058 <HAL_GetTick>
 8003992:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003994:	e008      	b.n	80039a8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003996:	f7fd fb5f 	bl	8001058 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e086      	b.n	8003ab6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80039a8:	4b45      	ldr	r3, [pc, #276]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1f0      	bne.n	8003996 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80039b4:	4b42      	ldr	r3, [pc, #264]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	031b      	lsls	r3, r3, #12
 80039c2:	493f      	ldr	r1, [pc, #252]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	628b      	str	r3, [r1, #40]	; 0x28
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	025b      	lsls	r3, r3, #9
 80039da:	b29b      	uxth	r3, r3
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	041b      	lsls	r3, r3, #16
 80039e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	061b      	lsls	r3, r3, #24
 80039f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039f8:	4931      	ldr	r1, [pc, #196]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80039fe:	4b30      	ldr	r3, [pc, #192]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	492d      	ldr	r1, [pc, #180]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003a10:	4b2b      	ldr	r3, [pc, #172]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	f023 0220 	bic.w	r2, r3, #32
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	4928      	ldr	r1, [pc, #160]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003a22:	4b27      	ldr	r3, [pc, #156]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	4a26      	ldr	r2, [pc, #152]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003a28:	f023 0310 	bic.w	r3, r3, #16
 8003a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003a2e:	4b24      	ldr	r3, [pc, #144]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003a30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a32:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <RCCEx_PLL2_Config+0x160>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	69d2      	ldr	r2, [r2, #28]
 8003a3a:	00d2      	lsls	r2, r2, #3
 8003a3c:	4920      	ldr	r1, [pc, #128]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003a42:	4b1f      	ldr	r3, [pc, #124]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	4a1e      	ldr	r2, [pc, #120]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003a48:	f043 0310 	orr.w	r3, r3, #16
 8003a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d106      	bne.n	8003a62 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003a54:	4b1a      	ldr	r3, [pc, #104]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	4a19      	ldr	r2, [pc, #100]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003a5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a60:	e00f      	b.n	8003a82 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d106      	bne.n	8003a76 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003a68:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	4a14      	ldr	r2, [pc, #80]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a74:	e005      	b.n	8003a82 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003a76:	4b12      	ldr	r3, [pc, #72]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	4a11      	ldr	r2, [pc, #68]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003a7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003a82:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a0e      	ldr	r2, [pc, #56]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003a88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a8e:	f7fd fae3 	bl	8001058 <HAL_GetTick>
 8003a92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a94:	e008      	b.n	8003aa8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a96:	f7fd fadf 	bl	8001058 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e006      	b.n	8003ab6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <RCCEx_PLL2_Config+0x15c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	58024400 	.word	0x58024400
 8003ac4:	ffff0007 	.word	0xffff0007

08003ac8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ad6:	4b53      	ldr	r3, [pc, #332]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d101      	bne.n	8003ae6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e099      	b.n	8003c1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003ae6:	4b4f      	ldr	r3, [pc, #316]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a4e      	ldr	r2, [pc, #312]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af2:	f7fd fab1 	bl	8001058 <HAL_GetTick>
 8003af6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003af8:	e008      	b.n	8003b0c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003afa:	f7fd faad 	bl	8001058 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e086      	b.n	8003c1a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b0c:	4b45      	ldr	r3, [pc, #276]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f0      	bne.n	8003afa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003b18:	4b42      	ldr	r3, [pc, #264]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	051b      	lsls	r3, r3, #20
 8003b26:	493f      	ldr	r1, [pc, #252]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	628b      	str	r3, [r1, #40]	; 0x28
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	025b      	lsls	r3, r3, #9
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	041b      	lsls	r3, r3, #16
 8003b4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	061b      	lsls	r3, r3, #24
 8003b58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b5c:	4931      	ldr	r1, [pc, #196]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003b62:	4b30      	ldr	r3, [pc, #192]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	492d      	ldr	r1, [pc, #180]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003b74:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	4928      	ldr	r1, [pc, #160]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003b86:	4b27      	ldr	r3, [pc, #156]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	4a26      	ldr	r2, [pc, #152]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003b92:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b96:	4b24      	ldr	r3, [pc, #144]	; (8003c28 <RCCEx_PLL3_Config+0x160>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	69d2      	ldr	r2, [r2, #28]
 8003b9e:	00d2      	lsls	r2, r2, #3
 8003ba0:	4920      	ldr	r1, [pc, #128]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003ba6:	4b1f      	ldr	r3, [pc, #124]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	4a1e      	ldr	r2, [pc, #120]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d106      	bne.n	8003bc6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003bb8:	4b1a      	ldr	r3, [pc, #104]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	4a19      	ldr	r2, [pc, #100]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003bbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bc4:	e00f      	b.n	8003be6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d106      	bne.n	8003bda <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003bcc:	4b15      	ldr	r3, [pc, #84]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	4a14      	ldr	r2, [pc, #80]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003bd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bd8:	e005      	b.n	8003be6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003bda:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	4a11      	ldr	r2, [pc, #68]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003be0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003be4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003be6:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a0e      	ldr	r2, [pc, #56]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf2:	f7fd fa31 	bl	8001058 <HAL_GetTick>
 8003bf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003bf8:	e008      	b.n	8003c0c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003bfa:	f7fd fa2d 	bl	8001058 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e006      	b.n	8003c1a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <RCCEx_PLL3_Config+0x15c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	58024400 	.word	0x58024400
 8003c28:	ffff0007 	.word	0xffff0007

08003c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e042      	b.n	8003cc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d106      	bne.n	8003c56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7fd f887 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2224      	movs	r2, #36	; 0x24
 8003c5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0201 	bic.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f8c2 	bl	8003df8 <UART_SetConfig>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e022      	b.n	8003cc4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fe66 	bl	8004958 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003caa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 feed 	bl	8004a9c <UART_CheckIdleState>
 8003cc2:	4603      	mov	r3, r0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	f040 8083 	bne.w	8003dee <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_UART_Transmit+0x28>
 8003cee:	88fb      	ldrh	r3, [r7, #6]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e07b      	b.n	8003df0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <HAL_UART_Transmit+0x3a>
 8003d02:	2302      	movs	r3, #2
 8003d04:	e074      	b.n	8003df0 <HAL_UART_Transmit+0x124>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2221      	movs	r2, #33	; 0x21
 8003d1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003d1e:	f7fd f99b 	bl	8001058 <HAL_GetTick>
 8003d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	88fa      	ldrh	r2, [r7, #6]
 8003d28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	88fa      	ldrh	r2, [r7, #6]
 8003d30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d3c:	d108      	bne.n	8003d50 <HAL_UART_Transmit+0x84>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d104      	bne.n	8003d50 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	61bb      	str	r3, [r7, #24]
 8003d4e:	e003      	b.n	8003d58 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8003d60:	e02c      	b.n	8003dbc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2180      	movs	r1, #128	; 0x80
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 fedd 	bl	8004b2c <UART_WaitOnFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e039      	b.n	8003df0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10b      	bne.n	8003d9a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d90:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	3302      	adds	r3, #2
 8003d96:	61bb      	str	r3, [r7, #24]
 8003d98:	e007      	b.n	8003daa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	781a      	ldrb	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	3301      	adds	r3, #1
 8003da8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1cc      	bne.n	8003d62 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2140      	movs	r1, #64	; 0x40
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 feaa 	bl	8004b2c <UART_WaitOnFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e006      	b.n	8003df0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e000      	b.n	8003df0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003dee:	2302      	movs	r3, #2
  }
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3720      	adds	r7, #32
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003df8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003dfc:	b08e      	sub	sp, #56	; 0x38
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e26:	4313      	orrs	r3, r2
 8003e28:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4bc1      	ldr	r3, [pc, #772]	; (8004138 <UART_SetConfig+0x340>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e3a:	430b      	orrs	r3, r1
 8003e3c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4ab7      	ldr	r2, [pc, #732]	; (800413c <UART_SetConfig+0x344>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d004      	beq.n	8003e6e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	4bb2      	ldr	r3, [pc, #712]	; (8004140 <UART_SetConfig+0x348>)
 8003e76:	4013      	ands	r3, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e7e:	430b      	orrs	r3, r1
 8003e80:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	f023 010f 	bic.w	r1, r3, #15
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4aa9      	ldr	r2, [pc, #676]	; (8004144 <UART_SetConfig+0x34c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d177      	bne.n	8003f92 <UART_SetConfig+0x19a>
 8003ea2:	4ba9      	ldr	r3, [pc, #676]	; (8004148 <UART_SetConfig+0x350>)
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eaa:	2b28      	cmp	r3, #40	; 0x28
 8003eac:	d86c      	bhi.n	8003f88 <UART_SetConfig+0x190>
 8003eae:	a201      	add	r2, pc, #4	; (adr r2, 8003eb4 <UART_SetConfig+0xbc>)
 8003eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb4:	08003f59 	.word	0x08003f59
 8003eb8:	08003f89 	.word	0x08003f89
 8003ebc:	08003f89 	.word	0x08003f89
 8003ec0:	08003f89 	.word	0x08003f89
 8003ec4:	08003f89 	.word	0x08003f89
 8003ec8:	08003f89 	.word	0x08003f89
 8003ecc:	08003f89 	.word	0x08003f89
 8003ed0:	08003f89 	.word	0x08003f89
 8003ed4:	08003f61 	.word	0x08003f61
 8003ed8:	08003f89 	.word	0x08003f89
 8003edc:	08003f89 	.word	0x08003f89
 8003ee0:	08003f89 	.word	0x08003f89
 8003ee4:	08003f89 	.word	0x08003f89
 8003ee8:	08003f89 	.word	0x08003f89
 8003eec:	08003f89 	.word	0x08003f89
 8003ef0:	08003f89 	.word	0x08003f89
 8003ef4:	08003f69 	.word	0x08003f69
 8003ef8:	08003f89 	.word	0x08003f89
 8003efc:	08003f89 	.word	0x08003f89
 8003f00:	08003f89 	.word	0x08003f89
 8003f04:	08003f89 	.word	0x08003f89
 8003f08:	08003f89 	.word	0x08003f89
 8003f0c:	08003f89 	.word	0x08003f89
 8003f10:	08003f89 	.word	0x08003f89
 8003f14:	08003f71 	.word	0x08003f71
 8003f18:	08003f89 	.word	0x08003f89
 8003f1c:	08003f89 	.word	0x08003f89
 8003f20:	08003f89 	.word	0x08003f89
 8003f24:	08003f89 	.word	0x08003f89
 8003f28:	08003f89 	.word	0x08003f89
 8003f2c:	08003f89 	.word	0x08003f89
 8003f30:	08003f89 	.word	0x08003f89
 8003f34:	08003f79 	.word	0x08003f79
 8003f38:	08003f89 	.word	0x08003f89
 8003f3c:	08003f89 	.word	0x08003f89
 8003f40:	08003f89 	.word	0x08003f89
 8003f44:	08003f89 	.word	0x08003f89
 8003f48:	08003f89 	.word	0x08003f89
 8003f4c:	08003f89 	.word	0x08003f89
 8003f50:	08003f89 	.word	0x08003f89
 8003f54:	08003f81 	.word	0x08003f81
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f5e:	e233      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8003f60:	2304      	movs	r3, #4
 8003f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f66:	e22f      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8003f68:	2308      	movs	r3, #8
 8003f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f6e:	e22b      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8003f70:	2310      	movs	r3, #16
 8003f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f76:	e227      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8003f78:	2320      	movs	r3, #32
 8003f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f7e:	e223      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8003f80:	2340      	movs	r3, #64	; 0x40
 8003f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f86:	e21f      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8003f88:	2380      	movs	r3, #128	; 0x80
 8003f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f8e:	bf00      	nop
 8003f90:	e21a      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a6d      	ldr	r2, [pc, #436]	; (800414c <UART_SetConfig+0x354>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d132      	bne.n	8004002 <UART_SetConfig+0x20a>
 8003f9c:	4b6a      	ldr	r3, [pc, #424]	; (8004148 <UART_SetConfig+0x350>)
 8003f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	2b05      	cmp	r3, #5
 8003fa6:	d827      	bhi.n	8003ff8 <UART_SetConfig+0x200>
 8003fa8:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <UART_SetConfig+0x1b8>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003fc9 	.word	0x08003fc9
 8003fb4:	08003fd1 	.word	0x08003fd1
 8003fb8:	08003fd9 	.word	0x08003fd9
 8003fbc:	08003fe1 	.word	0x08003fe1
 8003fc0:	08003fe9 	.word	0x08003fe9
 8003fc4:	08003ff1 	.word	0x08003ff1
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fce:	e1fb      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fd6:	e1f7      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8003fd8:	2308      	movs	r3, #8
 8003fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fde:	e1f3      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8003fe0:	2310      	movs	r3, #16
 8003fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fe6:	e1ef      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8003fe8:	2320      	movs	r3, #32
 8003fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fee:	e1eb      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8003ff0:	2340      	movs	r3, #64	; 0x40
 8003ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ff6:	e1e7      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ffe:	bf00      	nop
 8004000:	e1e2      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a52      	ldr	r2, [pc, #328]	; (8004150 <UART_SetConfig+0x358>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d132      	bne.n	8004072 <UART_SetConfig+0x27a>
 800400c:	4b4e      	ldr	r3, [pc, #312]	; (8004148 <UART_SetConfig+0x350>)
 800400e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	2b05      	cmp	r3, #5
 8004016:	d827      	bhi.n	8004068 <UART_SetConfig+0x270>
 8004018:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <UART_SetConfig+0x228>)
 800401a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401e:	bf00      	nop
 8004020:	08004039 	.word	0x08004039
 8004024:	08004041 	.word	0x08004041
 8004028:	08004049 	.word	0x08004049
 800402c:	08004051 	.word	0x08004051
 8004030:	08004059 	.word	0x08004059
 8004034:	08004061 	.word	0x08004061
 8004038:	2300      	movs	r3, #0
 800403a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800403e:	e1c3      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004040:	2304      	movs	r3, #4
 8004042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004046:	e1bf      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004048:	2308      	movs	r3, #8
 800404a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800404e:	e1bb      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004050:	2310      	movs	r3, #16
 8004052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004056:	e1b7      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004058:	2320      	movs	r3, #32
 800405a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800405e:	e1b3      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004060:	2340      	movs	r3, #64	; 0x40
 8004062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004066:	e1af      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800406e:	bf00      	nop
 8004070:	e1aa      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a37      	ldr	r2, [pc, #220]	; (8004154 <UART_SetConfig+0x35c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d132      	bne.n	80040e2 <UART_SetConfig+0x2ea>
 800407c:	4b32      	ldr	r3, [pc, #200]	; (8004148 <UART_SetConfig+0x350>)
 800407e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	2b05      	cmp	r3, #5
 8004086:	d827      	bhi.n	80040d8 <UART_SetConfig+0x2e0>
 8004088:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <UART_SetConfig+0x298>)
 800408a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408e:	bf00      	nop
 8004090:	080040a9 	.word	0x080040a9
 8004094:	080040b1 	.word	0x080040b1
 8004098:	080040b9 	.word	0x080040b9
 800409c:	080040c1 	.word	0x080040c1
 80040a0:	080040c9 	.word	0x080040c9
 80040a4:	080040d1 	.word	0x080040d1
 80040a8:	2300      	movs	r3, #0
 80040aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ae:	e18b      	b.n	80043c8 <UART_SetConfig+0x5d0>
 80040b0:	2304      	movs	r3, #4
 80040b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040b6:	e187      	b.n	80043c8 <UART_SetConfig+0x5d0>
 80040b8:	2308      	movs	r3, #8
 80040ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040be:	e183      	b.n	80043c8 <UART_SetConfig+0x5d0>
 80040c0:	2310      	movs	r3, #16
 80040c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040c6:	e17f      	b.n	80043c8 <UART_SetConfig+0x5d0>
 80040c8:	2320      	movs	r3, #32
 80040ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ce:	e17b      	b.n	80043c8 <UART_SetConfig+0x5d0>
 80040d0:	2340      	movs	r3, #64	; 0x40
 80040d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040d6:	e177      	b.n	80043c8 <UART_SetConfig+0x5d0>
 80040d8:	2380      	movs	r3, #128	; 0x80
 80040da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040de:	bf00      	nop
 80040e0:	e172      	b.n	80043c8 <UART_SetConfig+0x5d0>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a1c      	ldr	r2, [pc, #112]	; (8004158 <UART_SetConfig+0x360>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d144      	bne.n	8004176 <UART_SetConfig+0x37e>
 80040ec:	4b16      	ldr	r3, [pc, #88]	; (8004148 <UART_SetConfig+0x350>)
 80040ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	2b05      	cmp	r3, #5
 80040f6:	d839      	bhi.n	800416c <UART_SetConfig+0x374>
 80040f8:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <UART_SetConfig+0x308>)
 80040fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fe:	bf00      	nop
 8004100:	08004119 	.word	0x08004119
 8004104:	08004121 	.word	0x08004121
 8004108:	08004129 	.word	0x08004129
 800410c:	08004131 	.word	0x08004131
 8004110:	0800415d 	.word	0x0800415d
 8004114:	08004165 	.word	0x08004165
 8004118:	2300      	movs	r3, #0
 800411a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800411e:	e153      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004120:	2304      	movs	r3, #4
 8004122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004126:	e14f      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004128:	2308      	movs	r3, #8
 800412a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800412e:	e14b      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004130:	2310      	movs	r3, #16
 8004132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004136:	e147      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004138:	cfff69f3 	.word	0xcfff69f3
 800413c:	58000c00 	.word	0x58000c00
 8004140:	11fff4ff 	.word	0x11fff4ff
 8004144:	40011000 	.word	0x40011000
 8004148:	58024400 	.word	0x58024400
 800414c:	40004400 	.word	0x40004400
 8004150:	40004800 	.word	0x40004800
 8004154:	40004c00 	.word	0x40004c00
 8004158:	40005000 	.word	0x40005000
 800415c:	2320      	movs	r3, #32
 800415e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004162:	e131      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004164:	2340      	movs	r3, #64	; 0x40
 8004166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800416a:	e12d      	b.n	80043c8 <UART_SetConfig+0x5d0>
 800416c:	2380      	movs	r3, #128	; 0x80
 800416e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004172:	bf00      	nop
 8004174:	e128      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4ab6      	ldr	r2, [pc, #728]	; (8004454 <UART_SetConfig+0x65c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d178      	bne.n	8004272 <UART_SetConfig+0x47a>
 8004180:	4bb5      	ldr	r3, [pc, #724]	; (8004458 <UART_SetConfig+0x660>)
 8004182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004184:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004188:	2b28      	cmp	r3, #40	; 0x28
 800418a:	d86d      	bhi.n	8004268 <UART_SetConfig+0x470>
 800418c:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <UART_SetConfig+0x39c>)
 800418e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004192:	bf00      	nop
 8004194:	08004239 	.word	0x08004239
 8004198:	08004269 	.word	0x08004269
 800419c:	08004269 	.word	0x08004269
 80041a0:	08004269 	.word	0x08004269
 80041a4:	08004269 	.word	0x08004269
 80041a8:	08004269 	.word	0x08004269
 80041ac:	08004269 	.word	0x08004269
 80041b0:	08004269 	.word	0x08004269
 80041b4:	08004241 	.word	0x08004241
 80041b8:	08004269 	.word	0x08004269
 80041bc:	08004269 	.word	0x08004269
 80041c0:	08004269 	.word	0x08004269
 80041c4:	08004269 	.word	0x08004269
 80041c8:	08004269 	.word	0x08004269
 80041cc:	08004269 	.word	0x08004269
 80041d0:	08004269 	.word	0x08004269
 80041d4:	08004249 	.word	0x08004249
 80041d8:	08004269 	.word	0x08004269
 80041dc:	08004269 	.word	0x08004269
 80041e0:	08004269 	.word	0x08004269
 80041e4:	08004269 	.word	0x08004269
 80041e8:	08004269 	.word	0x08004269
 80041ec:	08004269 	.word	0x08004269
 80041f0:	08004269 	.word	0x08004269
 80041f4:	08004251 	.word	0x08004251
 80041f8:	08004269 	.word	0x08004269
 80041fc:	08004269 	.word	0x08004269
 8004200:	08004269 	.word	0x08004269
 8004204:	08004269 	.word	0x08004269
 8004208:	08004269 	.word	0x08004269
 800420c:	08004269 	.word	0x08004269
 8004210:	08004269 	.word	0x08004269
 8004214:	08004259 	.word	0x08004259
 8004218:	08004269 	.word	0x08004269
 800421c:	08004269 	.word	0x08004269
 8004220:	08004269 	.word	0x08004269
 8004224:	08004269 	.word	0x08004269
 8004228:	08004269 	.word	0x08004269
 800422c:	08004269 	.word	0x08004269
 8004230:	08004269 	.word	0x08004269
 8004234:	08004261 	.word	0x08004261
 8004238:	2301      	movs	r3, #1
 800423a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800423e:	e0c3      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004240:	2304      	movs	r3, #4
 8004242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004246:	e0bf      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004248:	2308      	movs	r3, #8
 800424a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800424e:	e0bb      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004250:	2310      	movs	r3, #16
 8004252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004256:	e0b7      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004258:	2320      	movs	r3, #32
 800425a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800425e:	e0b3      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004260:	2340      	movs	r3, #64	; 0x40
 8004262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004266:	e0af      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800426e:	bf00      	nop
 8004270:	e0aa      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a79      	ldr	r2, [pc, #484]	; (800445c <UART_SetConfig+0x664>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d132      	bne.n	80042e2 <UART_SetConfig+0x4ea>
 800427c:	4b76      	ldr	r3, [pc, #472]	; (8004458 <UART_SetConfig+0x660>)
 800427e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	2b05      	cmp	r3, #5
 8004286:	d827      	bhi.n	80042d8 <UART_SetConfig+0x4e0>
 8004288:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <UART_SetConfig+0x498>)
 800428a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428e:	bf00      	nop
 8004290:	080042a9 	.word	0x080042a9
 8004294:	080042b1 	.word	0x080042b1
 8004298:	080042b9 	.word	0x080042b9
 800429c:	080042c1 	.word	0x080042c1
 80042a0:	080042c9 	.word	0x080042c9
 80042a4:	080042d1 	.word	0x080042d1
 80042a8:	2300      	movs	r3, #0
 80042aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ae:	e08b      	b.n	80043c8 <UART_SetConfig+0x5d0>
 80042b0:	2304      	movs	r3, #4
 80042b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042b6:	e087      	b.n	80043c8 <UART_SetConfig+0x5d0>
 80042b8:	2308      	movs	r3, #8
 80042ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042be:	e083      	b.n	80043c8 <UART_SetConfig+0x5d0>
 80042c0:	2310      	movs	r3, #16
 80042c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042c6:	e07f      	b.n	80043c8 <UART_SetConfig+0x5d0>
 80042c8:	2320      	movs	r3, #32
 80042ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ce:	e07b      	b.n	80043c8 <UART_SetConfig+0x5d0>
 80042d0:	2340      	movs	r3, #64	; 0x40
 80042d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042d6:	e077      	b.n	80043c8 <UART_SetConfig+0x5d0>
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042de:	bf00      	nop
 80042e0:	e072      	b.n	80043c8 <UART_SetConfig+0x5d0>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a5e      	ldr	r2, [pc, #376]	; (8004460 <UART_SetConfig+0x668>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d132      	bne.n	8004352 <UART_SetConfig+0x55a>
 80042ec:	4b5a      	ldr	r3, [pc, #360]	; (8004458 <UART_SetConfig+0x660>)
 80042ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	2b05      	cmp	r3, #5
 80042f6:	d827      	bhi.n	8004348 <UART_SetConfig+0x550>
 80042f8:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <UART_SetConfig+0x508>)
 80042fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fe:	bf00      	nop
 8004300:	08004319 	.word	0x08004319
 8004304:	08004321 	.word	0x08004321
 8004308:	08004329 	.word	0x08004329
 800430c:	08004331 	.word	0x08004331
 8004310:	08004339 	.word	0x08004339
 8004314:	08004341 	.word	0x08004341
 8004318:	2300      	movs	r3, #0
 800431a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800431e:	e053      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004320:	2304      	movs	r3, #4
 8004322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004326:	e04f      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004328:	2308      	movs	r3, #8
 800432a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800432e:	e04b      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004330:	2310      	movs	r3, #16
 8004332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004336:	e047      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004338:	2320      	movs	r3, #32
 800433a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800433e:	e043      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004340:	2340      	movs	r3, #64	; 0x40
 8004342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004346:	e03f      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004348:	2380      	movs	r3, #128	; 0x80
 800434a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800434e:	bf00      	nop
 8004350:	e03a      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a43      	ldr	r2, [pc, #268]	; (8004464 <UART_SetConfig+0x66c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d132      	bne.n	80043c2 <UART_SetConfig+0x5ca>
 800435c:	4b3e      	ldr	r3, [pc, #248]	; (8004458 <UART_SetConfig+0x660>)
 800435e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	2b05      	cmp	r3, #5
 8004366:	d827      	bhi.n	80043b8 <UART_SetConfig+0x5c0>
 8004368:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <UART_SetConfig+0x578>)
 800436a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436e:	bf00      	nop
 8004370:	08004389 	.word	0x08004389
 8004374:	08004391 	.word	0x08004391
 8004378:	08004399 	.word	0x08004399
 800437c:	080043a1 	.word	0x080043a1
 8004380:	080043a9 	.word	0x080043a9
 8004384:	080043b1 	.word	0x080043b1
 8004388:	2302      	movs	r3, #2
 800438a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800438e:	e01b      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004390:	2304      	movs	r3, #4
 8004392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004396:	e017      	b.n	80043c8 <UART_SetConfig+0x5d0>
 8004398:	2308      	movs	r3, #8
 800439a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800439e:	e013      	b.n	80043c8 <UART_SetConfig+0x5d0>
 80043a0:	2310      	movs	r3, #16
 80043a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043a6:	e00f      	b.n	80043c8 <UART_SetConfig+0x5d0>
 80043a8:	2320      	movs	r3, #32
 80043aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ae:	e00b      	b.n	80043c8 <UART_SetConfig+0x5d0>
 80043b0:	2340      	movs	r3, #64	; 0x40
 80043b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043b6:	e007      	b.n	80043c8 <UART_SetConfig+0x5d0>
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043be:	bf00      	nop
 80043c0:	e002      	b.n	80043c8 <UART_SetConfig+0x5d0>
 80043c2:	2380      	movs	r3, #128	; 0x80
 80043c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a25      	ldr	r2, [pc, #148]	; (8004464 <UART_SetConfig+0x66c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	f040 80b8 	bne.w	8004544 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d019      	beq.n	8004410 <UART_SetConfig+0x618>
 80043dc:	2b08      	cmp	r3, #8
 80043de:	dc04      	bgt.n	80043ea <UART_SetConfig+0x5f2>
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d009      	beq.n	80043f8 <UART_SetConfig+0x600>
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d00b      	beq.n	8004400 <UART_SetConfig+0x608>
 80043e8:	e042      	b.n	8004470 <UART_SetConfig+0x678>
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	d02b      	beq.n	8004446 <UART_SetConfig+0x64e>
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	d02c      	beq.n	800444c <UART_SetConfig+0x654>
 80043f2:	2b10      	cmp	r3, #16
 80043f4:	d014      	beq.n	8004420 <UART_SetConfig+0x628>
 80043f6:	e03b      	b.n	8004470 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80043f8:	f7ff f806 	bl	8003408 <HAL_RCCEx_GetD3PCLK1Freq>
 80043fc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80043fe:	e03d      	b.n	800447c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004400:	f107 0314 	add.w	r3, r7, #20
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff f815 	bl	8003434 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800440e:	e035      	b.n	800447c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004410:	f107 0308 	add.w	r3, r7, #8
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff f959 	bl	80036cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800441e:	e02d      	b.n	800447c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004420:	4b0d      	ldr	r3, [pc, #52]	; (8004458 <UART_SetConfig+0x660>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800442c:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <UART_SetConfig+0x660>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	08db      	lsrs	r3, r3, #3
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	4a0c      	ldr	r2, [pc, #48]	; (8004468 <UART_SetConfig+0x670>)
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800443e:	e01d      	b.n	800447c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8004440:	4b09      	ldr	r3, [pc, #36]	; (8004468 <UART_SetConfig+0x670>)
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004444:	e01a      	b.n	800447c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004446:	4b09      	ldr	r3, [pc, #36]	; (800446c <UART_SetConfig+0x674>)
 8004448:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800444a:	e017      	b.n	800447c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800444c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004450:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004452:	e013      	b.n	800447c <UART_SetConfig+0x684>
 8004454:	40011400 	.word	0x40011400
 8004458:	58024400 	.word	0x58024400
 800445c:	40007800 	.word	0x40007800
 8004460:	40007c00 	.word	0x40007c00
 8004464:	58000c00 	.word	0x58000c00
 8004468:	03d09000 	.word	0x03d09000
 800446c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800447a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800447c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 824d 	beq.w	800491e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	4aad      	ldr	r2, [pc, #692]	; (8004740 <UART_SetConfig+0x948>)
 800448a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800448e:	461a      	mov	r2, r3
 8004490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004492:	fbb3 f3f2 	udiv	r3, r3, r2
 8004496:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	4613      	mov	r3, r2
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	4413      	add	r3, r2
 80044a2:	6a3a      	ldr	r2, [r7, #32]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d305      	bcc.n	80044b4 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044ae:	6a3a      	ldr	r2, [r7, #32]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d903      	bls.n	80044bc <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80044ba:	e230      	b.n	800491e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044be:	4618      	mov	r0, r3
 80044c0:	f04f 0100 	mov.w	r1, #0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	4a9d      	ldr	r2, [pc, #628]	; (8004740 <UART_SetConfig+0x948>)
 80044ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	f04f 0400 	mov.w	r4, #0
 80044d4:	461a      	mov	r2, r3
 80044d6:	4623      	mov	r3, r4
 80044d8:	f7fb fefe 	bl	80002d8 <__aeabi_uldivmod>
 80044dc:	4603      	mov	r3, r0
 80044de:	460c      	mov	r4, r1
 80044e0:	4619      	mov	r1, r3
 80044e2:	4622      	mov	r2, r4
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	f04f 0400 	mov.w	r4, #0
 80044ec:	0214      	lsls	r4, r2, #8
 80044ee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80044f2:	020b      	lsls	r3, r1, #8
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6852      	ldr	r2, [r2, #4]
 80044f8:	0852      	lsrs	r2, r2, #1
 80044fa:	4611      	mov	r1, r2
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	eb13 0b01 	adds.w	fp, r3, r1
 8004504:	eb44 0c02 	adc.w	ip, r4, r2
 8004508:	4658      	mov	r0, fp
 800450a:	4661      	mov	r1, ip
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f04f 0400 	mov.w	r4, #0
 8004514:	461a      	mov	r2, r3
 8004516:	4623      	mov	r3, r4
 8004518:	f7fb fede 	bl	80002d8 <__aeabi_uldivmod>
 800451c:	4603      	mov	r3, r0
 800451e:	460c      	mov	r4, r1
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004528:	d308      	bcc.n	800453c <UART_SetConfig+0x744>
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004530:	d204      	bcs.n	800453c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004538:	60da      	str	r2, [r3, #12]
 800453a:	e1f0      	b.n	800491e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004542:	e1ec      	b.n	800491e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800454c:	f040 8100 	bne.w	8004750 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8004550:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004554:	2b40      	cmp	r3, #64	; 0x40
 8004556:	f200 80b7 	bhi.w	80046c8 <UART_SetConfig+0x8d0>
 800455a:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <UART_SetConfig+0x768>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	08004665 	.word	0x08004665
 8004564:	0800466d 	.word	0x0800466d
 8004568:	080046c9 	.word	0x080046c9
 800456c:	080046c9 	.word	0x080046c9
 8004570:	08004675 	.word	0x08004675
 8004574:	080046c9 	.word	0x080046c9
 8004578:	080046c9 	.word	0x080046c9
 800457c:	080046c9 	.word	0x080046c9
 8004580:	08004685 	.word	0x08004685
 8004584:	080046c9 	.word	0x080046c9
 8004588:	080046c9 	.word	0x080046c9
 800458c:	080046c9 	.word	0x080046c9
 8004590:	080046c9 	.word	0x080046c9
 8004594:	080046c9 	.word	0x080046c9
 8004598:	080046c9 	.word	0x080046c9
 800459c:	080046c9 	.word	0x080046c9
 80045a0:	08004695 	.word	0x08004695
 80045a4:	080046c9 	.word	0x080046c9
 80045a8:	080046c9 	.word	0x080046c9
 80045ac:	080046c9 	.word	0x080046c9
 80045b0:	080046c9 	.word	0x080046c9
 80045b4:	080046c9 	.word	0x080046c9
 80045b8:	080046c9 	.word	0x080046c9
 80045bc:	080046c9 	.word	0x080046c9
 80045c0:	080046c9 	.word	0x080046c9
 80045c4:	080046c9 	.word	0x080046c9
 80045c8:	080046c9 	.word	0x080046c9
 80045cc:	080046c9 	.word	0x080046c9
 80045d0:	080046c9 	.word	0x080046c9
 80045d4:	080046c9 	.word	0x080046c9
 80045d8:	080046c9 	.word	0x080046c9
 80045dc:	080046c9 	.word	0x080046c9
 80045e0:	080046bb 	.word	0x080046bb
 80045e4:	080046c9 	.word	0x080046c9
 80045e8:	080046c9 	.word	0x080046c9
 80045ec:	080046c9 	.word	0x080046c9
 80045f0:	080046c9 	.word	0x080046c9
 80045f4:	080046c9 	.word	0x080046c9
 80045f8:	080046c9 	.word	0x080046c9
 80045fc:	080046c9 	.word	0x080046c9
 8004600:	080046c9 	.word	0x080046c9
 8004604:	080046c9 	.word	0x080046c9
 8004608:	080046c9 	.word	0x080046c9
 800460c:	080046c9 	.word	0x080046c9
 8004610:	080046c9 	.word	0x080046c9
 8004614:	080046c9 	.word	0x080046c9
 8004618:	080046c9 	.word	0x080046c9
 800461c:	080046c9 	.word	0x080046c9
 8004620:	080046c9 	.word	0x080046c9
 8004624:	080046c9 	.word	0x080046c9
 8004628:	080046c9 	.word	0x080046c9
 800462c:	080046c9 	.word	0x080046c9
 8004630:	080046c9 	.word	0x080046c9
 8004634:	080046c9 	.word	0x080046c9
 8004638:	080046c9 	.word	0x080046c9
 800463c:	080046c9 	.word	0x080046c9
 8004640:	080046c9 	.word	0x080046c9
 8004644:	080046c9 	.word	0x080046c9
 8004648:	080046c9 	.word	0x080046c9
 800464c:	080046c9 	.word	0x080046c9
 8004650:	080046c9 	.word	0x080046c9
 8004654:	080046c9 	.word	0x080046c9
 8004658:	080046c9 	.word	0x080046c9
 800465c:	080046c9 	.word	0x080046c9
 8004660:	080046c1 	.word	0x080046c1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004664:	f7fd ffb6 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 8004668:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800466a:	e033      	b.n	80046d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800466c:	f7fd ffc8 	bl	8002600 <HAL_RCC_GetPCLK2Freq>
 8004670:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004672:	e02f      	b.n	80046d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004674:	f107 0314 	add.w	r3, r7, #20
 8004678:	4618      	mov	r0, r3
 800467a:	f7fe fedb 	bl	8003434 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004682:	e027      	b.n	80046d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004684:	f107 0308 	add.w	r3, r7, #8
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff f81f 	bl	80036cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004692:	e01f      	b.n	80046d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004694:	4b2b      	ldr	r3, [pc, #172]	; (8004744 <UART_SetConfig+0x94c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d009      	beq.n	80046b4 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80046a0:	4b28      	ldr	r3, [pc, #160]	; (8004744 <UART_SetConfig+0x94c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	08db      	lsrs	r3, r3, #3
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	4a27      	ldr	r2, [pc, #156]	; (8004748 <UART_SetConfig+0x950>)
 80046ac:	fa22 f303 	lsr.w	r3, r2, r3
 80046b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80046b2:	e00f      	b.n	80046d4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80046b4:	4b24      	ldr	r3, [pc, #144]	; (8004748 <UART_SetConfig+0x950>)
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046b8:	e00c      	b.n	80046d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80046ba:	4b24      	ldr	r3, [pc, #144]	; (800474c <UART_SetConfig+0x954>)
 80046bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046be:	e009      	b.n	80046d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046c6:	e005      	b.n	80046d4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80046d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 8121 	beq.w	800491e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	4a17      	ldr	r2, [pc, #92]	; (8004740 <UART_SetConfig+0x948>)
 80046e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046e6:	461a      	mov	r2, r3
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80046ee:	005a      	lsls	r2, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	085b      	lsrs	r3, r3, #1
 80046f6:	441a      	add	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	b29b      	uxth	r3, r3
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	2b0f      	cmp	r3, #15
 8004708:	d916      	bls.n	8004738 <UART_SetConfig+0x940>
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004710:	d212      	bcs.n	8004738 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	b29b      	uxth	r3, r3
 8004716:	f023 030f 	bic.w	r3, r3, #15
 800471a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	085b      	lsrs	r3, r3, #1
 8004720:	b29b      	uxth	r3, r3
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	b29a      	uxth	r2, r3
 8004728:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800472a:	4313      	orrs	r3, r2
 800472c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004734:	60da      	str	r2, [r3, #12]
 8004736:	e0f2      	b.n	800491e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800473e:	e0ee      	b.n	800491e <UART_SetConfig+0xb26>
 8004740:	08005634 	.word	0x08005634
 8004744:	58024400 	.word	0x58024400
 8004748:	03d09000 	.word	0x03d09000
 800474c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8004750:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004754:	2b40      	cmp	r3, #64	; 0x40
 8004756:	f200 80b7 	bhi.w	80048c8 <UART_SetConfig+0xad0>
 800475a:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <UART_SetConfig+0x968>)
 800475c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004760:	08004865 	.word	0x08004865
 8004764:	0800486d 	.word	0x0800486d
 8004768:	080048c9 	.word	0x080048c9
 800476c:	080048c9 	.word	0x080048c9
 8004770:	08004875 	.word	0x08004875
 8004774:	080048c9 	.word	0x080048c9
 8004778:	080048c9 	.word	0x080048c9
 800477c:	080048c9 	.word	0x080048c9
 8004780:	08004885 	.word	0x08004885
 8004784:	080048c9 	.word	0x080048c9
 8004788:	080048c9 	.word	0x080048c9
 800478c:	080048c9 	.word	0x080048c9
 8004790:	080048c9 	.word	0x080048c9
 8004794:	080048c9 	.word	0x080048c9
 8004798:	080048c9 	.word	0x080048c9
 800479c:	080048c9 	.word	0x080048c9
 80047a0:	08004895 	.word	0x08004895
 80047a4:	080048c9 	.word	0x080048c9
 80047a8:	080048c9 	.word	0x080048c9
 80047ac:	080048c9 	.word	0x080048c9
 80047b0:	080048c9 	.word	0x080048c9
 80047b4:	080048c9 	.word	0x080048c9
 80047b8:	080048c9 	.word	0x080048c9
 80047bc:	080048c9 	.word	0x080048c9
 80047c0:	080048c9 	.word	0x080048c9
 80047c4:	080048c9 	.word	0x080048c9
 80047c8:	080048c9 	.word	0x080048c9
 80047cc:	080048c9 	.word	0x080048c9
 80047d0:	080048c9 	.word	0x080048c9
 80047d4:	080048c9 	.word	0x080048c9
 80047d8:	080048c9 	.word	0x080048c9
 80047dc:	080048c9 	.word	0x080048c9
 80047e0:	080048bb 	.word	0x080048bb
 80047e4:	080048c9 	.word	0x080048c9
 80047e8:	080048c9 	.word	0x080048c9
 80047ec:	080048c9 	.word	0x080048c9
 80047f0:	080048c9 	.word	0x080048c9
 80047f4:	080048c9 	.word	0x080048c9
 80047f8:	080048c9 	.word	0x080048c9
 80047fc:	080048c9 	.word	0x080048c9
 8004800:	080048c9 	.word	0x080048c9
 8004804:	080048c9 	.word	0x080048c9
 8004808:	080048c9 	.word	0x080048c9
 800480c:	080048c9 	.word	0x080048c9
 8004810:	080048c9 	.word	0x080048c9
 8004814:	080048c9 	.word	0x080048c9
 8004818:	080048c9 	.word	0x080048c9
 800481c:	080048c9 	.word	0x080048c9
 8004820:	080048c9 	.word	0x080048c9
 8004824:	080048c9 	.word	0x080048c9
 8004828:	080048c9 	.word	0x080048c9
 800482c:	080048c9 	.word	0x080048c9
 8004830:	080048c9 	.word	0x080048c9
 8004834:	080048c9 	.word	0x080048c9
 8004838:	080048c9 	.word	0x080048c9
 800483c:	080048c9 	.word	0x080048c9
 8004840:	080048c9 	.word	0x080048c9
 8004844:	080048c9 	.word	0x080048c9
 8004848:	080048c9 	.word	0x080048c9
 800484c:	080048c9 	.word	0x080048c9
 8004850:	080048c9 	.word	0x080048c9
 8004854:	080048c9 	.word	0x080048c9
 8004858:	080048c9 	.word	0x080048c9
 800485c:	080048c9 	.word	0x080048c9
 8004860:	080048c1 	.word	0x080048c1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004864:	f7fd feb6 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 8004868:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800486a:	e033      	b.n	80048d4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800486c:	f7fd fec8 	bl	8002600 <HAL_RCC_GetPCLK2Freq>
 8004870:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004872:	e02f      	b.n	80048d4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004874:	f107 0314 	add.w	r3, r7, #20
 8004878:	4618      	mov	r0, r3
 800487a:	f7fe fddb 	bl	8003434 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004882:	e027      	b.n	80048d4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004884:	f107 0308 	add.w	r3, r7, #8
 8004888:	4618      	mov	r0, r3
 800488a:	f7fe ff1f 	bl	80036cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004892:	e01f      	b.n	80048d4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004894:	4b2c      	ldr	r3, [pc, #176]	; (8004948 <UART_SetConfig+0xb50>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b00      	cmp	r3, #0
 800489e:	d009      	beq.n	80048b4 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80048a0:	4b29      	ldr	r3, [pc, #164]	; (8004948 <UART_SetConfig+0xb50>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	08db      	lsrs	r3, r3, #3
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	4a28      	ldr	r2, [pc, #160]	; (800494c <UART_SetConfig+0xb54>)
 80048ac:	fa22 f303 	lsr.w	r3, r2, r3
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80048b2:	e00f      	b.n	80048d4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80048b4:	4b25      	ldr	r3, [pc, #148]	; (800494c <UART_SetConfig+0xb54>)
 80048b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048b8:	e00c      	b.n	80048d4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80048ba:	4b25      	ldr	r3, [pc, #148]	; (8004950 <UART_SetConfig+0xb58>)
 80048bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048be:	e009      	b.n	80048d4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048c6:	e005      	b.n	80048d4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80048d2:	bf00      	nop
    }

    if (pclk != 0U)
 80048d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d021      	beq.n	800491e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <UART_SetConfig+0xb5c>)
 80048e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048e4:	461a      	mov	r2, r3
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	085b      	lsrs	r3, r3, #1
 80048f2:	441a      	add	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	2b0f      	cmp	r3, #15
 8004904:	d908      	bls.n	8004918 <UART_SetConfig+0xb20>
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490c:	d204      	bcs.n	8004918 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004914:	60da      	str	r2, [r3, #12]
 8004916:	e002      	b.n	800491e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800493a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800493e:	4618      	mov	r0, r3
 8004940:	3738      	adds	r7, #56	; 0x38
 8004942:	46bd      	mov	sp, r7
 8004944:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004948:	58024400 	.word	0x58024400
 800494c:	03d09000 	.word	0x03d09000
 8004950:	003d0900 	.word	0x003d0900
 8004954:	08005634 	.word	0x08005634

08004958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	f003 0310 	and.w	r3, r3, #16
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01a      	beq.n	8004a6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a56:	d10a      	bne.n	8004a6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	605a      	str	r2, [r3, #4]
  }
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004aac:	f7fc fad4 	bl	8001058 <HAL_GetTick>
 8004ab0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d10e      	bne.n	8004ade <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f82c 	bl	8004b2c <UART_WaitOnFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e022      	b.n	8004b24 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d10e      	bne.n	8004b0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f816 	bl	8004b2c <UART_WaitOnFlagUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e00c      	b.n	8004b24 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b3c:	e062      	b.n	8004c04 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b44:	d05e      	beq.n	8004c04 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b46:	f7fc fa87 	bl	8001058 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d302      	bcc.n	8004b5c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d11d      	bne.n	8004b98 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b6a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0201 	bic.w	r2, r2, #1
 8004b7a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e045      	b.n	8004c24 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d02e      	beq.n	8004c04 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bb4:	d126      	bne.n	8004c04 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bbe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bce:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0201 	bic.w	r2, r2, #1
 8004bde:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e00f      	b.n	8004c24 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69da      	ldr	r2, [r3, #28]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	bf0c      	ite	eq
 8004c14:	2301      	moveq	r3, #1
 8004c16:	2300      	movne	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	79fb      	ldrb	r3, [r7, #7]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d08d      	beq.n	8004b3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <HAL_UARTEx_DisableFifoMode+0x16>
 8004c3e:	2302      	movs	r3, #2
 8004c40:	e027      	b.n	8004c92 <HAL_UARTEx_DisableFifoMode+0x66>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2224      	movs	r2, #36	; 0x24
 8004c4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0201 	bic.w	r2, r2, #1
 8004c68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e02d      	b.n	8004d12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2224      	movs	r2, #36	; 0x24
 8004cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0201 	bic.w	r2, r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f850 	bl	8004d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e02d      	b.n	8004d8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2224      	movs	r2, #36	; 0x24
 8004d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0201 	bic.w	r2, r2, #1
 8004d58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f812 	bl	8004d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b089      	sub	sp, #36	; 0x24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004da0:	4a2f      	ldr	r2, [pc, #188]	; (8004e60 <UARTEx_SetNbDataToProcess+0xc8>)
 8004da2:	f107 0314 	add.w	r3, r7, #20
 8004da6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004daa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004dae:	4a2d      	ldr	r2, [pc, #180]	; (8004e64 <UARTEx_SetNbDataToProcess+0xcc>)
 8004db0:	f107 030c 	add.w	r3, r7, #12
 8004db4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004db8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d108      	bne.n	8004dd6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004dd4:	e03d      	b.n	8004e52 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004dd6:	2310      	movs	r3, #16
 8004dd8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004dda:	2310      	movs	r3, #16
 8004ddc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	0e5b      	lsrs	r3, r3, #25
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	0f5b      	lsrs	r3, r3, #29
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004dfe:	7fbb      	ldrb	r3, [r7, #30]
 8004e00:	7f3a      	ldrb	r2, [r7, #28]
 8004e02:	f107 0120 	add.w	r1, r7, #32
 8004e06:	440a      	add	r2, r1
 8004e08:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004e0c:	fb02 f303 	mul.w	r3, r2, r3
 8004e10:	7f3a      	ldrb	r2, [r7, #28]
 8004e12:	f107 0120 	add.w	r1, r7, #32
 8004e16:	440a      	add	r2, r1
 8004e18:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004e1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004e28:	7ffb      	ldrb	r3, [r7, #31]
 8004e2a:	7f7a      	ldrb	r2, [r7, #29]
 8004e2c:	f107 0120 	add.w	r1, r7, #32
 8004e30:	440a      	add	r2, r1
 8004e32:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004e36:	fb02 f303 	mul.w	r3, r2, r3
 8004e3a:	7f7a      	ldrb	r2, [r7, #29]
 8004e3c:	f107 0120 	add.w	r1, r7, #32
 8004e40:	440a      	add	r2, r1
 8004e42:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004e46:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004e52:	bf00      	nop
 8004e54:	3724      	adds	r7, #36	; 0x24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	08005614 	.word	0x08005614
 8004e64:	0800561c 	.word	0x0800561c

08004e68 <__errno>:
 8004e68:	4b01      	ldr	r3, [pc, #4]	; (8004e70 <__errno+0x8>)
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	20000010 	.word	0x20000010

08004e74 <__libc_init_array>:
 8004e74:	b570      	push	{r4, r5, r6, lr}
 8004e76:	4e0d      	ldr	r6, [pc, #52]	; (8004eac <__libc_init_array+0x38>)
 8004e78:	4c0d      	ldr	r4, [pc, #52]	; (8004eb0 <__libc_init_array+0x3c>)
 8004e7a:	1ba4      	subs	r4, r4, r6
 8004e7c:	10a4      	asrs	r4, r4, #2
 8004e7e:	2500      	movs	r5, #0
 8004e80:	42a5      	cmp	r5, r4
 8004e82:	d109      	bne.n	8004e98 <__libc_init_array+0x24>
 8004e84:	4e0b      	ldr	r6, [pc, #44]	; (8004eb4 <__libc_init_array+0x40>)
 8004e86:	4c0c      	ldr	r4, [pc, #48]	; (8004eb8 <__libc_init_array+0x44>)
 8004e88:	f000 f8a0 	bl	8004fcc <_init>
 8004e8c:	1ba4      	subs	r4, r4, r6
 8004e8e:	10a4      	asrs	r4, r4, #2
 8004e90:	2500      	movs	r5, #0
 8004e92:	42a5      	cmp	r5, r4
 8004e94:	d105      	bne.n	8004ea2 <__libc_init_array+0x2e>
 8004e96:	bd70      	pop	{r4, r5, r6, pc}
 8004e98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e9c:	4798      	blx	r3
 8004e9e:	3501      	adds	r5, #1
 8004ea0:	e7ee      	b.n	8004e80 <__libc_init_array+0xc>
 8004ea2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ea6:	4798      	blx	r3
 8004ea8:	3501      	adds	r5, #1
 8004eaa:	e7f2      	b.n	8004e92 <__libc_init_array+0x1e>
 8004eac:	08005654 	.word	0x08005654
 8004eb0:	08005654 	.word	0x08005654
 8004eb4:	08005654 	.word	0x08005654
 8004eb8:	08005658 	.word	0x08005658

08004ebc <malloc>:
 8004ebc:	4b02      	ldr	r3, [pc, #8]	; (8004ec8 <malloc+0xc>)
 8004ebe:	4601      	mov	r1, r0
 8004ec0:	6818      	ldr	r0, [r3, #0]
 8004ec2:	f000 b817 	b.w	8004ef4 <_malloc_r>
 8004ec6:	bf00      	nop
 8004ec8:	20000010 	.word	0x20000010

08004ecc <memcpy>:
 8004ecc:	b510      	push	{r4, lr}
 8004ece:	1e43      	subs	r3, r0, #1
 8004ed0:	440a      	add	r2, r1
 8004ed2:	4291      	cmp	r1, r2
 8004ed4:	d100      	bne.n	8004ed8 <memcpy+0xc>
 8004ed6:	bd10      	pop	{r4, pc}
 8004ed8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004edc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ee0:	e7f7      	b.n	8004ed2 <memcpy+0x6>

08004ee2 <memset>:
 8004ee2:	4402      	add	r2, r0
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d100      	bne.n	8004eec <memset+0xa>
 8004eea:	4770      	bx	lr
 8004eec:	f803 1b01 	strb.w	r1, [r3], #1
 8004ef0:	e7f9      	b.n	8004ee6 <memset+0x4>
	...

08004ef4 <_malloc_r>:
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	1ccd      	adds	r5, r1, #3
 8004ef8:	f025 0503 	bic.w	r5, r5, #3
 8004efc:	3508      	adds	r5, #8
 8004efe:	2d0c      	cmp	r5, #12
 8004f00:	bf38      	it	cc
 8004f02:	250c      	movcc	r5, #12
 8004f04:	2d00      	cmp	r5, #0
 8004f06:	4606      	mov	r6, r0
 8004f08:	db01      	blt.n	8004f0e <_malloc_r+0x1a>
 8004f0a:	42a9      	cmp	r1, r5
 8004f0c:	d903      	bls.n	8004f16 <_malloc_r+0x22>
 8004f0e:	230c      	movs	r3, #12
 8004f10:	6033      	str	r3, [r6, #0]
 8004f12:	2000      	movs	r0, #0
 8004f14:	bd70      	pop	{r4, r5, r6, pc}
 8004f16:	f000 f857 	bl	8004fc8 <__malloc_lock>
 8004f1a:	4a21      	ldr	r2, [pc, #132]	; (8004fa0 <_malloc_r+0xac>)
 8004f1c:	6814      	ldr	r4, [r2, #0]
 8004f1e:	4621      	mov	r1, r4
 8004f20:	b991      	cbnz	r1, 8004f48 <_malloc_r+0x54>
 8004f22:	4c20      	ldr	r4, [pc, #128]	; (8004fa4 <_malloc_r+0xb0>)
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	b91b      	cbnz	r3, 8004f30 <_malloc_r+0x3c>
 8004f28:	4630      	mov	r0, r6
 8004f2a:	f000 f83d 	bl	8004fa8 <_sbrk_r>
 8004f2e:	6020      	str	r0, [r4, #0]
 8004f30:	4629      	mov	r1, r5
 8004f32:	4630      	mov	r0, r6
 8004f34:	f000 f838 	bl	8004fa8 <_sbrk_r>
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	d124      	bne.n	8004f86 <_malloc_r+0x92>
 8004f3c:	230c      	movs	r3, #12
 8004f3e:	6033      	str	r3, [r6, #0]
 8004f40:	4630      	mov	r0, r6
 8004f42:	f000 f842 	bl	8004fca <__malloc_unlock>
 8004f46:	e7e4      	b.n	8004f12 <_malloc_r+0x1e>
 8004f48:	680b      	ldr	r3, [r1, #0]
 8004f4a:	1b5b      	subs	r3, r3, r5
 8004f4c:	d418      	bmi.n	8004f80 <_malloc_r+0x8c>
 8004f4e:	2b0b      	cmp	r3, #11
 8004f50:	d90f      	bls.n	8004f72 <_malloc_r+0x7e>
 8004f52:	600b      	str	r3, [r1, #0]
 8004f54:	50cd      	str	r5, [r1, r3]
 8004f56:	18cc      	adds	r4, r1, r3
 8004f58:	4630      	mov	r0, r6
 8004f5a:	f000 f836 	bl	8004fca <__malloc_unlock>
 8004f5e:	f104 000b 	add.w	r0, r4, #11
 8004f62:	1d23      	adds	r3, r4, #4
 8004f64:	f020 0007 	bic.w	r0, r0, #7
 8004f68:	1ac3      	subs	r3, r0, r3
 8004f6a:	d0d3      	beq.n	8004f14 <_malloc_r+0x20>
 8004f6c:	425a      	negs	r2, r3
 8004f6e:	50e2      	str	r2, [r4, r3]
 8004f70:	e7d0      	b.n	8004f14 <_malloc_r+0x20>
 8004f72:	428c      	cmp	r4, r1
 8004f74:	684b      	ldr	r3, [r1, #4]
 8004f76:	bf16      	itet	ne
 8004f78:	6063      	strne	r3, [r4, #4]
 8004f7a:	6013      	streq	r3, [r2, #0]
 8004f7c:	460c      	movne	r4, r1
 8004f7e:	e7eb      	b.n	8004f58 <_malloc_r+0x64>
 8004f80:	460c      	mov	r4, r1
 8004f82:	6849      	ldr	r1, [r1, #4]
 8004f84:	e7cc      	b.n	8004f20 <_malloc_r+0x2c>
 8004f86:	1cc4      	adds	r4, r0, #3
 8004f88:	f024 0403 	bic.w	r4, r4, #3
 8004f8c:	42a0      	cmp	r0, r4
 8004f8e:	d005      	beq.n	8004f9c <_malloc_r+0xa8>
 8004f90:	1a21      	subs	r1, r4, r0
 8004f92:	4630      	mov	r0, r6
 8004f94:	f000 f808 	bl	8004fa8 <_sbrk_r>
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d0cf      	beq.n	8004f3c <_malloc_r+0x48>
 8004f9c:	6025      	str	r5, [r4, #0]
 8004f9e:	e7db      	b.n	8004f58 <_malloc_r+0x64>
 8004fa0:	20000094 	.word	0x20000094
 8004fa4:	20000098 	.word	0x20000098

08004fa8 <_sbrk_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4c06      	ldr	r4, [pc, #24]	; (8004fc4 <_sbrk_r+0x1c>)
 8004fac:	2300      	movs	r3, #0
 8004fae:	4605      	mov	r5, r0
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	6023      	str	r3, [r4, #0]
 8004fb4:	f7fb ff6a 	bl	8000e8c <_sbrk>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_sbrk_r+0x1a>
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_sbrk_r+0x1a>
 8004fc0:	602b      	str	r3, [r5, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	2000012c 	.word	0x2000012c

08004fc8 <__malloc_lock>:
 8004fc8:	4770      	bx	lr

08004fca <__malloc_unlock>:
 8004fca:	4770      	bx	lr

08004fcc <_init>:
 8004fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fce:	bf00      	nop
 8004fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd2:	bc08      	pop	{r3}
 8004fd4:	469e      	mov	lr, r3
 8004fd6:	4770      	bx	lr

08004fd8 <_fini>:
 8004fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fda:	bf00      	nop
 8004fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fde:	bc08      	pop	{r3}
 8004fe0:	469e      	mov	lr, r3
 8004fe2:	4770      	bx	lr
