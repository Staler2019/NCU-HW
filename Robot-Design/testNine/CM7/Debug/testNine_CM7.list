
testNine_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b074  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  0800b318  0800b318  0001b318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bb28  0800bb28  0001bb28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bb30  0800bb30  0001bb30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bb34  0800bb34  0001bb34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  0800bb38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d8  200001e4  0800bd1c  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200003bc  0800bd1c  000203bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021fbd  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003523  00000000  00000000  000421cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001528  00000000  00000000  000456f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000013e0  00000000  00000000  00046c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b12a  00000000  00000000  00048000  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00012f35  00000000  00000000  0008312a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00184c03  00000000  00000000  0009605f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0021ac62  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000069e4  00000000  00000000  0021ace0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e4 	.word	0x200001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b2fc 	.word	0x0800b2fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001e8 	.word	0x200001e8
 80002dc:	0800b2fc 	.word	0x0800b2fc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b3f      	ldr	r3, [pc, #252]	; (8000794 <SystemInit+0x104>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a3e      	ldr	r2, [pc, #248]	; (8000794 <SystemInit+0x104>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a4:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <SystemInit+0x104>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a3a      	ldr	r2, [pc, #232]	; (8000794 <SystemInit+0x104>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b0:	4b39      	ldr	r3, [pc, #228]	; (8000798 <SystemInit+0x108>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f003 030f 	and.w	r3, r3, #15
 80006b8:	2b06      	cmp	r3, #6
 80006ba:	d807      	bhi.n	80006cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006bc:	4b36      	ldr	r3, [pc, #216]	; (8000798 <SystemInit+0x108>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f023 030f 	bic.w	r3, r3, #15
 80006c4:	4a34      	ldr	r2, [pc, #208]	; (8000798 <SystemInit+0x108>)
 80006c6:	f043 0307 	orr.w	r3, r3, #7
 80006ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006cc:	4b33      	ldr	r3, [pc, #204]	; (800079c <SystemInit+0x10c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a32      	ldr	r2, [pc, #200]	; (800079c <SystemInit+0x10c>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d8:	4b30      	ldr	r3, [pc, #192]	; (800079c <SystemInit+0x10c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006de:	4b2f      	ldr	r3, [pc, #188]	; (800079c <SystemInit+0x10c>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	492e      	ldr	r1, [pc, #184]	; (800079c <SystemInit+0x10c>)
 80006e4:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <SystemInit+0x110>)
 80006e6:	4013      	ands	r3, r2
 80006e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <SystemInit+0x108>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f003 030f 	and.w	r3, r3, #15
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	d907      	bls.n	8000706 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <SystemInit+0x108>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f023 030f 	bic.w	r3, r3, #15
 80006fe:	4a26      	ldr	r2, [pc, #152]	; (8000798 <SystemInit+0x108>)
 8000700:	f043 0307 	orr.w	r3, r3, #7
 8000704:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <SystemInit+0x10c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemInit+0x10c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <SystemInit+0x10c>)
 800071a:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <SystemInit+0x114>)
 800071c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemInit+0x10c>)
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemInit+0x118>)
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <SystemInit+0x10c>)
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemInit+0x11c>)
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <SystemInit+0x10c>)
 8000732:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <SystemInit+0x11c>)
 8000734:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <SystemInit+0x10c>)
 8000738:	2200      	movs	r2, #0
 800073a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <SystemInit+0x10c>)
 800073e:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <SystemInit+0x11c>)
 8000740:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <SystemInit+0x10c>)
 8000744:	2200      	movs	r2, #0
 8000746:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <SystemInit+0x10c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a13      	ldr	r2, [pc, #76]	; (800079c <SystemInit+0x10c>)
 800074e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000752:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0x10c>)
 8000756:	2200      	movs	r2, #0
 8000758:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <SystemInit+0x120>)
 800075c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075e:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <SystemInit+0x120>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <SystemInit+0x124>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SystemInit+0x128>)
 800076c:	4013      	ands	r3, r2
 800076e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000772:	d202      	bcs.n	800077a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <SystemInit+0x12c>)
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <SystemInit+0x130>)
 800077c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000780:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SystemInit+0x104>)
 8000784:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000788:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	52002000 	.word	0x52002000
 800079c:	58024400 	.word	0x58024400
 80007a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a4:	02020200 	.word	0x02020200
 80007a8:	01ff0000 	.word	0x01ff0000
 80007ac:	01010280 	.word	0x01010280
 80007b0:	580000c0 	.word	0x580000c0
 80007b4:	5c001000 	.word	0x5c001000
 80007b8:	ffff0000 	.word	0xffff0000
 80007bc:	51008108 	.word	0x51008108
 80007c0:	52004000 	.word	0x52004000

080007c4 <MPU_9255_new>:
/* Private function prototypes -----------------------------------------------*/
/* Private user code ---------------------------------------------------------*/
/* External variables --------------------------------------------------------*/
void MPU_9255_delay(uint32_t ms) __attribute__((weak)) ;

MPU_9255_t* MPU_9255_new(int addr, uint8_t smplrt_div, uint8_t mmode, uint8_t afs, uint8_t gfs, uint8_t mfs, MPU_9255_i2cTransiver_t reader, MPU_9255_i2cTransiver_t writer){
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	4608      	mov	r0, r1
 80007ce:	4611      	mov	r1, r2
 80007d0:	461a      	mov	r2, r3
 80007d2:	4603      	mov	r3, r0
 80007d4:	70fb      	strb	r3, [r7, #3]
 80007d6:	460b      	mov	r3, r1
 80007d8:	70bb      	strb	r3, [r7, #2]
 80007da:	4613      	mov	r3, r2
 80007dc:	707b      	strb	r3, [r7, #1]
  MPU_9255_t* nmpu = (MPU_9255_t *)malloc(sizeof(MPU_9255_t));
 80007de:	f44f 7090 	mov.w	r0, #288	; 0x120
 80007e2:	f007 fb43 	bl	8007e6c <malloc>
 80007e6:	4603      	mov	r3, r0
 80007e8:	60fb      	str	r3, [r7, #12]
  nmpu->addr = addr;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
  nmpu->Smplrt_div = smplrt_div;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	78fa      	ldrb	r2, [r7, #3]
 80007f8:	721a      	strb	r2, [r3, #8]
  nmpu->Mscale = mmode;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	78ba      	ldrb	r2, [r7, #2]
 80007fe:	719a      	strb	r2, [r3, #6]
  nmpu->Ascale = afs;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	787a      	ldrb	r2, [r7, #1]
 8000804:	711a      	strb	r2, [r3, #4]
  nmpu->Gscale = gfs;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	f897 2020 	ldrb.w	r2, [r7, #32]
 800080c:	715a      	strb	r2, [r3, #5]
  nmpu->Mscale = mfs;
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000814:	719a      	strb	r2, [r3, #6]
  nmpu->writer = writer;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800081a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  nmpu->reader = reader;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000822:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  
  nmpu->q[0] = 1.0f;
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	f04f 0300 	mov.w	r3, #0
 800082c:	4c1f      	ldr	r4, [pc, #124]	; (80008ac <MPU_9255_new+0xe8>)
 800082e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
  nmpu->q[1] = 0.0f;
 8000832:	68fa      	ldr	r2, [r7, #12]
 8000834:	f04f 0300 	mov.w	r3, #0
 8000838:	f04f 0400 	mov.w	r4, #0
 800083c:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
  nmpu->q[2] = 0.0f;
 8000840:	68fa      	ldr	r2, [r7, #12]
 8000842:	f04f 0300 	mov.w	r3, #0
 8000846:	f04f 0400 	mov.w	r4, #0
 800084a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
  nmpu->q[3] = 0.0f;
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	f04f 0300 	mov.w	r3, #0
 8000854:	f04f 0400 	mov.w	r4, #0
 8000858:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0

  nmpu->eInt[0] = 0.0f;
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	f04f 0300 	mov.w	r3, #0
 8000862:	f04f 0400 	mov.w	r4, #0
 8000866:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
  nmpu->SEq_1 = 1.0f;
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	f04f 0300 	mov.w	r3, #0
 8000870:	4c0e      	ldr	r4, [pc, #56]	; (80008ac <MPU_9255_new+0xe8>)
 8000872:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
  nmpu->SEq_2 = 0.0f;
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	f04f 0300 	mov.w	r3, #0
 800087c:	f04f 0400 	mov.w	r4, #0
 8000880:	e9c2 343e 	strd	r3, r4, [r2, #248]	; 0xf8
  nmpu->SEq_3 = 0.0f;
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	f04f 0300 	mov.w	r3, #0
 800088a:	f04f 0400 	mov.w	r4, #0
 800088e:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
  nmpu->SEq_4 = 0.0f;
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	f04f 0300 	mov.w	r3, #0
 8000898:	f04f 0400 	mov.w	r4, #0
 800089c:	e9c2 3442 	strd	r3, r4, [r2, #264]	; 0x108
  return nmpu;
 80008a0:	68fb      	ldr	r3, [r7, #12]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd90      	pop	{r4, r7, pc}
 80008aa:	bf00      	nop
 80008ac:	3ff00000 	.word	0x3ff00000

080008b0 <writeByte>:

void MPU_9255_delay(uint32_t ms) {
  asm("nop");
}

void writeByte(MPU_9255_t *hmpu, uint8_t address, uint8_t subAddress, uint8_t data){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	4608      	mov	r0, r1
 80008ba:	4611      	mov	r1, r2
 80008bc:	461a      	mov	r2, r3
 80008be:	4603      	mov	r3, r0
 80008c0:	70fb      	strb	r3, [r7, #3]
 80008c2:	460b      	mov	r3, r1
 80008c4:	70bb      	strb	r3, [r7, #2]
 80008c6:	4613      	mov	r3, r2
 80008c8:	707b      	strb	r3, [r7, #1]
  uint8_t pData[2];
  pData[0] = subAddress;
 80008ca:	78bb      	ldrb	r3, [r7, #2]
 80008cc:	733b      	strb	r3, [r7, #12]
  pData[1] = data;
 80008ce:	787b      	ldrb	r3, [r7, #1]
 80008d0:	737b      	strb	r3, [r7, #13]
  hmpu->writer(address, pData, 2);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80008d8:	78fa      	ldrb	r2, [r7, #3]
 80008da:	b290      	uxth	r0, r2
 80008dc:	f107 010c 	add.w	r1, r7, #12
 80008e0:	2202      	movs	r2, #2
 80008e2:	4798      	blx	r3
}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <readByte>:

char readByte(MPU_9255_t *hmpu, uint8_t address, uint8_t subAddress)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	70fb      	strb	r3, [r7, #3]
 80008f8:	4613      	mov	r3, r2
 80008fa:	70bb      	strb	r3, [r7, #2]
    uint8_t data[1]; // `data` will store the register data     
    uint8_t data_write[1];
    data_write[0] = subAddress;
 80008fc:	78bb      	ldrb	r3, [r7, #2]
 80008fe:	723b      	strb	r3, [r7, #8]
    hmpu->writer(address, data_write, 1); // no stop
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8000906:	78fa      	ldrb	r2, [r7, #3]
 8000908:	b290      	uxth	r0, r2
 800090a:	f107 0108 	add.w	r1, r7, #8
 800090e:	2201      	movs	r2, #1
 8000910:	4798      	blx	r3
    hmpu->reader(address, data, 1); 
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000918:	78fa      	ldrb	r2, [r7, #3]
 800091a:	b290      	uxth	r0, r2
 800091c:	f107 010c 	add.w	r1, r7, #12
 8000920:	2201      	movs	r2, #1
 8000922:	4798      	blx	r3
    return data[0]; 
 8000924:	7b3b      	ldrb	r3, [r7, #12]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <readBytes>:

void readBytes(MPU_9255_t *hmpu, uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{     
 800092e:	b580      	push	{r7, lr}
 8000930:	b088      	sub	sp, #32
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	4608      	mov	r0, r1
 8000938:	4611      	mov	r1, r2
 800093a:	461a      	mov	r2, r3
 800093c:	4603      	mov	r3, r0
 800093e:	70fb      	strb	r3, [r7, #3]
 8000940:	460b      	mov	r3, r1
 8000942:	70bb      	strb	r3, [r7, #2]
 8000944:	4613      	mov	r3, r2
 8000946:	707b      	strb	r3, [r7, #1]
    uint8_t data[14];
    uint8_t data_write[1];
    data_write[0] = subAddress;
 8000948:	78bb      	ldrb	r3, [r7, #2]
 800094a:	723b      	strb	r3, [r7, #8]
    hmpu->writer(address, data_write, 1); // no stop
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8000952:	78fa      	ldrb	r2, [r7, #3]
 8000954:	b290      	uxth	r0, r2
 8000956:	f107 0108 	add.w	r1, r7, #8
 800095a:	2201      	movs	r2, #1
 800095c:	4798      	blx	r3
    hmpu->reader(address, data, count); 
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000964:	78fa      	ldrb	r2, [r7, #3]
 8000966:	b290      	uxth	r0, r2
 8000968:	787a      	ldrb	r2, [r7, #1]
 800096a:	b292      	uxth	r2, r2
 800096c:	f107 010c 	add.w	r1, r7, #12
 8000970:	4798      	blx	r3
    for(int ii = 0; ii < count; ii++) {
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
 8000976:	e00b      	b.n	8000990 <readBytes+0x62>
      dest[ii] = data[ii];
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800097c:	4413      	add	r3, r2
 800097e:	f107 010c 	add.w	r1, r7, #12
 8000982:	69fa      	ldr	r2, [r7, #28]
 8000984:	440a      	add	r2, r1
 8000986:	7812      	ldrb	r2, [r2, #0]
 8000988:	701a      	strb	r2, [r3, #0]
    for(int ii = 0; ii < count; ii++) {
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3301      	adds	r3, #1
 800098e:	61fb      	str	r3, [r7, #28]
 8000990:	787b      	ldrb	r3, [r7, #1]
 8000992:	69fa      	ldr	r2, [r7, #28]
 8000994:	429a      	cmp	r2, r3
 8000996:	dbef      	blt.n	8000978 <readBytes+0x4a>
    }
} 
 8000998:	bf00      	nop
 800099a:	3720      	adds	r7, #32
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <MPU_9255_whoami>:
 

uint8_t MPU_9255_whoami(MPU_9255_t *hmpu){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  return readByte(hmpu, hmpu->addr, WHO_AM_I_MPU9255); 
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80009ae:	2275      	movs	r2, #117	; 0x75
 80009b0:	4619      	mov	r1, r3
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff ff9a 	bl	80008ec <readByte>
 80009b8:	4603      	mov	r3, r0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	0000      	movs	r0, r0
 80009c4:	0000      	movs	r0, r0
	...

080009c8 <getMres>:
double getEulerAngleSampleRate(MPU_9255_t *hmpu){
  return hmpu->sample_rate;
}


void getMres(MPU_9255_t *hmpu) {
 80009c8:	b490      	push	{r4, r7}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  switch (hmpu->Mscale)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	799b      	ldrb	r3, [r3, #6]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <getMres+0x16>
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d007      	beq.n	80009ec <getMres+0x24>
  case MFS_16BITS:
      //-32768~32767 * 10.0*4219.0/32760.0=> -42200~42200
      hmpu->mRes = 10.0*4219.0/32760.0; // Proper scale to return milliGauss
      break;
  }
}
 80009dc:	e00d      	b.n	80009fa <getMres+0x32>
      hmpu->mRes = 10.0*4219.0/8190.0; // Proper scale to return milliGauss
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	a409      	add	r4, pc, #36	; (adr r4, 8000a08 <getMres+0x40>)
 80009e2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80009e6:	e9c2 3408 	strd	r3, r4, [r2, #32]
      break;
 80009ea:	e006      	b.n	80009fa <getMres+0x32>
      hmpu->mRes = 10.0*4219.0/32760.0; // Proper scale to return milliGauss
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	a408      	add	r4, pc, #32	; (adr r4, 8000a10 <getMres+0x48>)
 80009f0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80009f4:	e9c2 3408 	strd	r3, r4, [r2, #32]
      break;
 80009f8:	bf00      	nop
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc90      	pop	{r4, r7}
 8000a02:	4770      	bx	lr
 8000a04:	f3af 8000 	nop.w
 8000a08:	b09b09b1 	.word	0xb09b09b1
 8000a0c:	40149b09 	.word	0x40149b09
 8000a10:	b09b09b1 	.word	0xb09b09b1
 8000a14:	3ff49b09 	.word	0x3ff49b09

08000a18 <getGres>:


void getGres(MPU_9255_t *hmpu) {
 8000a18:	b490      	push	{r4, r7}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  switch (hmpu->Gscale)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	795b      	ldrb	r3, [r3, #5]
 8000a24:	2b03      	cmp	r3, #3
 8000a26:	d827      	bhi.n	8000a78 <getGres+0x60>
 8000a28:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <getGres+0x18>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a41 	.word	0x08000a41
 8000a34:	08000a4f 	.word	0x08000a4f
 8000a38:	08000a5d 	.word	0x08000a5d
 8000a3c:	08000a6b 	.word	0x08000a6b
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11). 
    // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
    hmpu->gRes = 250.0/32768.0;
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	f04f 0300 	mov.w	r3, #0
 8000a46:	4c0f      	ldr	r4, [pc, #60]	; (8000a84 <getGres+0x6c>)
 8000a48:	e9c2 3406 	strd	r3, r4, [r2, #24]
    break;
 8000a4c:	e014      	b.n	8000a78 <getGres+0x60>
    case GFS_500DPS:
    hmpu->gRes = 500.0/32768.0;
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	f04f 0300 	mov.w	r3, #0
 8000a54:	4c0c      	ldr	r4, [pc, #48]	; (8000a88 <getGres+0x70>)
 8000a56:	e9c2 3406 	strd	r3, r4, [r2, #24]
    break;
 8000a5a:	e00d      	b.n	8000a78 <getGres+0x60>
    case GFS_1000DPS:
    hmpu->gRes = 1000.0/32768.0;
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	4c0a      	ldr	r4, [pc, #40]	; (8000a8c <getGres+0x74>)
 8000a64:	e9c2 3406 	strd	r3, r4, [r2, #24]
    break;
 8000a68:	e006      	b.n	8000a78 <getGres+0x60>
    case GFS_2000DPS:
    hmpu->gRes = 2000.0/32768.0;
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	f04f 0300 	mov.w	r3, #0
 8000a70:	4c07      	ldr	r4, [pc, #28]	; (8000a90 <getGres+0x78>)
 8000a72:	e9c2 3406 	strd	r3, r4, [r2, #24]
    break;
 8000a76:	bf00      	nop
  }
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc90      	pop	{r4, r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	3f7f4000 	.word	0x3f7f4000
 8000a88:	3f8f4000 	.word	0x3f8f4000
 8000a8c:	3f9f4000 	.word	0x3f9f4000
 8000a90:	3faf4000 	.word	0x3faf4000

08000a94 <getAres>:


void getAres(MPU_9255_t *hmpu) {
 8000a94:	b490      	push	{r4, r7}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  switch (hmpu->Ascale)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	791b      	ldrb	r3, [r3, #4]
 8000aa0:	2b03      	cmp	r3, #3
 8000aa2:	d828      	bhi.n	8000af6 <getAres+0x62>
 8000aa4:	a201      	add	r2, pc, #4	; (adr r2, 8000aac <getAres+0x18>)
 8000aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aaa:	bf00      	nop
 8000aac:	08000abd 	.word	0x08000abd
 8000ab0:	08000acb 	.word	0x08000acb
 8000ab4:	08000ad9 	.word	0x08000ad9
 8000ab8:	08000ae7 	.word	0x08000ae7
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11). 
    // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
  case AFS_2G:
    hmpu->aRes = 2.0/32768.0;
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	f04f 0300 	mov.w	r3, #0
 8000ac2:	4c0f      	ldr	r4, [pc, #60]	; (8000b00 <getAres+0x6c>)
 8000ac4:	e9c2 3404 	strd	r3, r4, [r2, #16]
    break;
 8000ac8:	e015      	b.n	8000af6 <getAres+0x62>
  case AFS_4G:
    hmpu->aRes = 4.0/32768.0;
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	f04f 0300 	mov.w	r3, #0
 8000ad0:	4c0c      	ldr	r4, [pc, #48]	; (8000b04 <getAres+0x70>)
 8000ad2:	e9c2 3404 	strd	r3, r4, [r2, #16]
    break;
 8000ad6:	e00e      	b.n	8000af6 <getAres+0x62>
  case AFS_8G:
    hmpu->aRes = 8.0/32768.0;
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	f04f 0300 	mov.w	r3, #0
 8000ade:	4c0a      	ldr	r4, [pc, #40]	; (8000b08 <getAres+0x74>)
 8000ae0:	e9c2 3404 	strd	r3, r4, [r2, #16]
    break;
 8000ae4:	e007      	b.n	8000af6 <getAres+0x62>
  case AFS_16G:
    hmpu->aRes = 16.0/32768.0;
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	f04f 0300 	mov.w	r3, #0
 8000aec:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
 8000af0:	e9c2 3404 	strd	r3, r4, [r2, #16]
    break;
 8000af4:	bf00      	nop
  }
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc90      	pop	{r4, r7}
 8000afe:	4770      	bx	lr
 8000b00:	3f100000 	.word	0x3f100000
 8000b04:	3f200000 	.word	0x3f200000
 8000b08:	3f300000 	.word	0x3f300000
 8000b0c:	00000000 	.word	0x00000000

08000b10 <getRes>:


void getRes(MPU_9255_t *hmpu){
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

  getAres(hmpu); // Get accelerometer sensitivity
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ffbb 	bl	8000a94 <getAres>
  getGres(hmpu); // Get gyro sensitivity
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ff7a 	bl	8000a18 <getGres>
  getMres(hmpu); // Get magnetometer sensitivity
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ff4f 	bl	80009c8 <getMres>
  //pc.printf("Accelerometer sensitivity is %f LSB/g \n\r", 1.0f/aRes);
  //pc.printf("Gyroscope sensitivity is %f LSB/deg/s \n\r", 1.0f/gRes);
  //pc.printf("Magnetometer sensitivity is %f LSB/G \n\r", 1.0f/mRes);
  hmpu->magbias[0] = +470.;  // User environmental x-axis correction in milliGauss, should be automatically calculated
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	a40c      	add	r4, pc, #48	; (adr r4, 8000b60 <getRes+0x50>)
 8000b2e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000b32:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
  hmpu->magbias[1] = +120.;  // User environmental y-axis correction in milliGauss
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	4c06      	ldr	r4, [pc, #24]	; (8000b58 <getRes+0x48>)
 8000b3e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
  hmpu->magbias[2] = +125.;  // User environmental z-axis correction in milliGauss
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	4c04      	ldr	r4, [pc, #16]	; (8000b5c <getRes+0x4c>)
 8000b4a:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
  
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd90      	pop	{r4, r7, pc}
 8000b56:	bf00      	nop
 8000b58:	405e0000 	.word	0x405e0000
 8000b5c:	405f4000 	.word	0x405f4000
 8000b60:	00000000 	.word	0x00000000
 8000b64:	407d6000 	.word	0x407d6000

08000b68 <MPU_9255_readAccelData>:

void MPU_9255_readAccelData(MPU_9255_t *hmpu, double *ax, double *ay, double *az)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af02      	add	r7, sp, #8
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
 8000b74:	603b      	str	r3, [r7, #0]
  int16_t accelCount[3];  // Stores the 16-bit signed accelerometer sensor output
  uint8_t rawData[6];  // x/y/z accel register data stored here
  readBytes(hmpu, hmpu->addr, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	2306      	movs	r3, #6
 8000b84:	223b      	movs	r2, #59	; 0x3b
 8000b86:	68f8      	ldr	r0, [r7, #12]
 8000b88:	f7ff fed1 	bl	800092e <readBytes>
  accelCount[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8000b8c:	7c3b      	ldrb	r3, [r7, #16]
 8000b8e:	021b      	lsls	r3, r3, #8
 8000b90:	b21a      	sxth	r2, r3
 8000b92:	7c7b      	ldrb	r3, [r7, #17]
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b21b      	sxth	r3, r3
 8000b9a:	833b      	strh	r3, [r7, #24]
  accelCount[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
 8000b9c:	7cbb      	ldrb	r3, [r7, #18]
 8000b9e:	021b      	lsls	r3, r3, #8
 8000ba0:	b21a      	sxth	r2, r3
 8000ba2:	7cfb      	ldrb	r3, [r7, #19]
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	b21b      	sxth	r3, r3
 8000baa:	837b      	strh	r3, [r7, #26]
  accelCount[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
 8000bac:	7d3b      	ldrb	r3, [r7, #20]
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	b21a      	sxth	r2, r3
 8000bb2:	7d7b      	ldrb	r3, [r7, #21]
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	b21b      	sxth	r3, r3
 8000bba:	83bb      	strh	r3, [r7, #28]
  
  // Now we'll calculate the accleration value into actual g's
  *ax = (double)accelCount[0]* hmpu->aRes - hmpu->accelBias[0];  // get actual g value, this depends on scale being set
 8000bbc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000bc0:	ee07 3a90 	vmov	s15, r3
 8000bc4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	ed93 7b04 	vldr	d7, [r3, #16]
 8000bce:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8000bd8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	ed83 7b00 	vstr	d7, [r3]
  *ay = (double)accelCount[1]* hmpu->aRes - hmpu->accelBias[1];  
 8000be2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000be6:	ee07 3a90 	vmov	s15, r3
 8000bea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	ed93 7b04 	vldr	d7, [r3, #16]
 8000bf4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8000bfe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	ed83 7b00 	vstr	d7, [r3]
  *az = (double)accelCount[2]* hmpu->aRes - hmpu->accelBias[2];  
 8000c08:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000c0c:	ee07 3a90 	vmov	s15, r3
 8000c10:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	ed93 7b04 	vldr	d7, [r3, #16]
 8000c1a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8000c24:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	ed83 7b00 	vstr	d7, [r3]
      
}
 8000c2e:	bf00      	nop
 8000c30:	3720      	adds	r7, #32
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <MPU_9255_readGyroData>:

void MPU_9255_readGyroData(MPU_9255_t *hmpu, double *gx, double *gy, double *gz)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b08a      	sub	sp, #40	; 0x28
 8000c3a:	af02      	add	r7, sp, #8
 8000c3c:	60f8      	str	r0, [r7, #12]
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	603b      	str	r3, [r7, #0]
  int16_t gyroCount[3]; // Stores the 16-bit signed gyro sensor output
  uint8_t rawData[6];   // x/y/z gyro register data stored here
  readBytes(hmpu,hmpu->addr, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	2306      	movs	r3, #6
 8000c52:	2243      	movs	r2, #67	; 0x43
 8000c54:	68f8      	ldr	r0, [r7, #12]
 8000c56:	f7ff fe6a 	bl	800092e <readBytes>
  gyroCount[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8000c5a:	7c3b      	ldrb	r3, [r7, #16]
 8000c5c:	021b      	lsls	r3, r3, #8
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	7c7b      	ldrb	r3, [r7, #17]
 8000c62:	b21b      	sxth	r3, r3
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b21b      	sxth	r3, r3
 8000c68:	833b      	strh	r3, [r7, #24]
  gyroCount[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
 8000c6a:	7cbb      	ldrb	r3, [r7, #18]
 8000c6c:	021b      	lsls	r3, r3, #8
 8000c6e:	b21a      	sxth	r2, r3
 8000c70:	7cfb      	ldrb	r3, [r7, #19]
 8000c72:	b21b      	sxth	r3, r3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	b21b      	sxth	r3, r3
 8000c78:	837b      	strh	r3, [r7, #26]
  gyroCount[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
 8000c7a:	7d3b      	ldrb	r3, [r7, #20]
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	b21a      	sxth	r2, r3
 8000c80:	7d7b      	ldrb	r3, [r7, #21]
 8000c82:	b21b      	sxth	r3, r3
 8000c84:	4313      	orrs	r3, r2
 8000c86:	b21b      	sxth	r3, r3
 8000c88:	83bb      	strh	r3, [r7, #28]
  // Calculate the gyro value into actual degrees per second
  *gx = (double)gyroCount[0]* hmpu->gRes - hmpu->gyroBias[0];  // get actual gyro value, this depends on scale being set
 8000c8a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000c8e:	ee07 3a90 	vmov	s15, r3
 8000c92:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	ed93 7b06 	vldr	d7, [r3, #24]
 8000c9c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000ca6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	ed83 7b00 	vstr	d7, [r3]
  *gy = (double)gyroCount[1]* hmpu->gRes - hmpu->gyroBias[1];  
 8000cb0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000cb4:	ee07 3a90 	vmov	s15, r3
 8000cb8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	ed93 7b06 	vldr	d7, [r3, #24]
 8000cc2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8000ccc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	ed83 7b00 	vstr	d7, [r3]
  *gz = (double)gyroCount[2]* hmpu->gRes - hmpu->gyroBias[2];   
 8000cd6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000cda:	ee07 3a90 	vmov	s15, r3
 8000cde:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	ed93 7b06 	vldr	d7, [r3, #24]
 8000ce8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8000cf2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	ed83 7b00 	vstr	d7, [r3]
}
 8000cfc:	bf00      	nop
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <MPU_9255_readMagData>:

void MPU_9255_readMagData(MPU_9255_t *hmpu, double *mx, double *my, double *mz)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af02      	add	r7, sp, #8
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]
  int16_t magCount[3]; // Stores the 16-bit signed magnetometer sensor output
  uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
  writeByte(hmpu,AK8963_ADDRESS, AK8963_CNTL, 0x01); // 2021.4.28 Modified by Anonymous
 8000d12:	2301      	movs	r3, #1
 8000d14:	220a      	movs	r2, #10
 8000d16:	2118      	movs	r1, #24
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f7ff fdc9 	bl	80008b0 <writeByte>
  if(readByte(hmpu, AK8963_ADDRESS, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
 8000d1e:	2202      	movs	r2, #2
 8000d20:	2118      	movs	r1, #24
 8000d22:	68f8      	ldr	r0, [r7, #12]
 8000d24:	f7ff fde2 	bl	80008ec <readByte>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d06f      	beq.n	8000e12 <MPU_9255_readMagData+0x10e>
    readBytes(hmpu, AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);  // Read the six raw data and ST2 registers sequentially into data array
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2307      	movs	r3, #7
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	2118      	movs	r1, #24
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f7ff fdf5 	bl	800092e <readBytes>
    uint8_t c = rawData[6]; // End data read by reading ST2 register
 8000d44:	7dbb      	ldrb	r3, [r7, #22]
 8000d46:	77fb      	strb	r3, [r7, #31]
    if(!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
 8000d48:	7ffb      	ldrb	r3, [r7, #31]
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d15f      	bne.n	8000e12 <MPU_9255_readMagData+0x10e>
      magCount[0] = (int16_t)(((int16_t)rawData[1] << 8) | rawData[0]);  // Turn the MSB and LSB into a signed 16-bit value
 8000d52:	7c7b      	ldrb	r3, [r7, #17]
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	b21a      	sxth	r2, r3
 8000d58:	7c3b      	ldrb	r3, [r7, #16]
 8000d5a:	b21b      	sxth	r3, r3
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b21b      	sxth	r3, r3
 8000d60:	833b      	strh	r3, [r7, #24]
      magCount[1] = (int16_t)(((int16_t)rawData[3] << 8) | rawData[2]) ;  // Data stored as little Endian
 8000d62:	7cfb      	ldrb	r3, [r7, #19]
 8000d64:	021b      	lsls	r3, r3, #8
 8000d66:	b21a      	sxth	r2, r3
 8000d68:	7cbb      	ldrb	r3, [r7, #18]
 8000d6a:	b21b      	sxth	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b21b      	sxth	r3, r3
 8000d70:	837b      	strh	r3, [r7, #26]
      magCount[2] = (int16_t)(((int16_t)rawData[5] << 8) | rawData[4]) ; 
 8000d72:	7d7b      	ldrb	r3, [r7, #21]
 8000d74:	021b      	lsls	r3, r3, #8
 8000d76:	b21a      	sxth	r2, r3
 8000d78:	7d3b      	ldrb	r3, [r7, #20]
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	83bb      	strh	r3, [r7, #28]
      // Calculate the magnetometer values in milliGauss
      // Include factory calibration per data sheet and user environmental corrections
      //mRes = -42200~42200 for 16 bit ADC
      //magCalibration = 0.5 ~ 1.5
      //magCount = -32768~32767
      *mx = (double)magCount[0]*hmpu->mRes*hmpu->magCalibration[0] - hmpu->magbias[0];  // get actual magnetometer value, this depends on scale being set
 8000d82:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000d86:	ee07 3a90 	vmov	s15, r3
 8000d8a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	ed93 7b08 	vldr	d7, [r3, #32]
 8000d94:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8000d9e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000da8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	ed83 7b00 	vstr	d7, [r3]
      *my = (double)magCount[1]*hmpu->mRes*hmpu->magCalibration[1] - hmpu->magbias[1];  
 8000db2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000db6:	ee07 3a90 	vmov	s15, r3
 8000dba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	ed93 7b08 	vldr	d7, [r3, #32]
 8000dc4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8000dce:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000dd8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	ed83 7b00 	vstr	d7, [r3]
      *mz = (double)magCount[2]*hmpu->mRes*hmpu->magCalibration[2] - hmpu->magbias[2];   
 8000de2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000de6:	ee07 3a90 	vmov	s15, r3
 8000dea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	ed93 7b08 	vldr	d7, [r3, #32]
 8000df4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8000dfe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8000e08:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	ed83 7b00 	vstr	d7, [r3]
    }
  }
}
 8000e12:	bf00      	nop
 8000e14:	3720      	adds	r7, #32
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	0000      	movs	r0, r0
 8000e1c:	0000      	movs	r0, r0
	...

08000e20 <MPU_9255_readTempData>:

double MPU_9255_readTempData(MPU_9255_t *hmpu)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	6078      	str	r0, [r7, #4]
  int16_t tempCount;   // Stores the real internal chip temperature in degrees Celsius
  uint8_t rawData[2];  // x/y/z gyro register data stored here
  readBytes(hmpu, hmpu->addr, TEMP_OUT_H, 2, &rawData[0]);  // Read the two raw data registers sequentially into data array 
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2302      	movs	r3, #2
 8000e36:	2241      	movs	r2, #65	; 0x41
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff fd78 	bl	800092e <readBytes>
  tempCount = (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]); // Turn the MSB and LSB into a 16-bit value
 8000e3e:	7b3b      	ldrb	r3, [r7, #12]
 8000e40:	021b      	lsls	r3, r3, #8
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	7b7b      	ldrb	r3, [r7, #13]
 8000e46:	b21b      	sxth	r3, r3
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	81fb      	strh	r3, [r7, #14]
  return ((double) tempCount) / 333.87f + 21.0f;  // Temperature in degrees Centigrade
 8000e4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e50:	ee07 3a90 	vmov	s15, r3
 8000e54:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e58:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8000e78 <MPU_9255_readTempData+0x58>
 8000e5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e60:	eeb3 6b05 	vmov.f64	d6, #53	; 0x41a80000  21.0
 8000e64:	ee37 7b06 	vadd.f64	d7, d7, d6
}
 8000e68:	eeb0 0b47 	vmov.f64	d0, d7
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	f3af 8000 	nop.w
 8000e78:	80000000 	.word	0x80000000
 8000e7c:	4074ddeb 	.word	0x4074ddeb

08000e80 <resetMPU9255>:


void resetMPU9255(MPU_9255_t *hmpu ) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  // reset device
  writeByte(hmpu,hmpu->addr,PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	226b      	movs	r2, #107	; 0x6b
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff fd0c 	bl	80008b0 <writeByte>
  MPU_9255_delay(0.1);
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f001 f903 	bl	80020a4 <MPU_9255_delay>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <initAK8963>:
  
void initAK8963(MPU_9255_t *hmpu, double * destination){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  // First extract the factory calibration for each magnetometer axis
  uint8_t rawData[3];  // x/y/z gyro calibration data stored here
  writeByte(hmpu,AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer  
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	220a      	movs	r2, #10
 8000eb6:	2118      	movs	r1, #24
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff fcf9 	bl	80008b0 <writeByte>
  MPU_9255_delay(0.01);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f001 f8f0 	bl	80020a4 <MPU_9255_delay>
  writeByte(hmpu,AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	220a      	movs	r2, #10
 8000ec8:	2118      	movs	r1, #24
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fcf0 	bl	80008b0 <writeByte>
  MPU_9255_delay(0.01);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f001 f8e7 	bl	80020a4 <MPU_9255_delay>
  readBytes(hmpu,AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2303      	movs	r3, #3
 8000ede:	2210      	movs	r2, #16
 8000ee0:	2118      	movs	r1, #24
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff fd23 	bl	800092e <readBytes>
  
  //-0.5~0.5 + 1.0 => 0.5 ~ 1.5
  destination[0] =  (double)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8000ee8:	7b3b      	ldrb	r3, [r7, #12]
 8000eea:	3b80      	subs	r3, #128	; 0x80
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ef4:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8000f90 <initAK8963+0xe8>
 8000ef8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000efc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f00:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	ed83 7b00 	vstr	d7, [r3]
  destination[1] =  (double)(rawData[1] - 128)/256.0f + 1.0f;  
 8000f0a:	7b7b      	ldrb	r3, [r7, #13]
 8000f0c:	3b80      	subs	r3, #128	; 0x80
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f16:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 8000f90 <initAK8963+0xe8>
 8000f1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	3308      	adds	r3, #8
 8000f22:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f26:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f2a:	ed83 7b00 	vstr	d7, [r3]
  destination[2] =  (double)(rawData[2] - 128)/256.0f + 1.0f; 
 8000f2e:	7bbb      	ldrb	r3, [r7, #14]
 8000f30:	3b80      	subs	r3, #128	; 0x80
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f3a:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8000f90 <initAK8963+0xe8>
 8000f3e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	3310      	adds	r3, #16
 8000f46:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f4a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f4e:	ed83 7b00 	vstr	d7, [r3]
  writeByte(hmpu,AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer  
 8000f52:	2300      	movs	r3, #0
 8000f54:	220a      	movs	r2, #10
 8000f56:	2118      	movs	r1, #24
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff fca9 	bl	80008b0 <writeByte>
  MPU_9255_delay(0.01);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f001 f8a0 	bl	80020a4 <MPU_9255_delay>
  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeByte(hmpu,AK8963_ADDRESS, AK8963_CNTL, hmpu->Mscale << 4 | hmpu->Mmode); // Set magnetometer data resolution and sample ODR
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	799b      	ldrb	r3, [r3, #6]
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	b25a      	sxtb	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	79db      	ldrb	r3, [r3, #7]
 8000f70:	b25b      	sxtb	r3, r3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	220a      	movs	r2, #10
 8000f7a:	2118      	movs	r1, #24
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff fc97 	bl	80008b0 <writeByte>
  MPU_9255_delay(0.01);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f001 f88e 	bl	80020a4 <MPU_9255_delay>
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	00000000 	.word	0x00000000
 8000f94:	40700000 	.word	0x40700000

08000f98 <initMPU9255>:


void initMPU9255(MPU_9255_t *hmpu ){  
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  // Initialize MPU9255 device
  // wake up device
  writeByte(hmpu,hmpu->addr, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors 
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	226b      	movs	r2, #107	; 0x6b
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fc80 	bl	80008b0 <writeByte>
  MPU_9255_delay(0.1); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt  
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f001 f877 	bl	80020a4 <MPU_9255_delay>

  // get stable time source
  writeByte(hmpu,hmpu->addr, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	226b      	movs	r2, #107	; 0x6b
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff fc75 	bl	80008b0 <writeByte>

  // Configure Gyro and Accelerometer
  // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively; 
  // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
  // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  writeByte(hmpu,hmpu->addr, CONFIG, 0x03);  
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8000fcc:	2303      	movs	r3, #3
 8000fce:	221a      	movs	r2, #26
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff fc6d 	bl	80008b0 <writeByte>

  // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  writeByte(hmpu,hmpu->addr, SMPLRT_DIV, hmpu->Smplrt_div);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7a1b      	ldrb	r3, [r3, #8]
 8000fe0:	2219      	movs	r2, #25
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff fc64 	bl	80008b0 <writeByte>

  // Set gyroscope full scale range
  // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c =  readByte(hmpu,hmpu->addr, GYRO_CONFIG);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8000fee:	221b      	movs	r2, #27
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff fc7a 	bl	80008ec <readByte>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	73fb      	strb	r3, [r7, #15]
  writeByte(hmpu,hmpu->addr, GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5] 
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f003 031f 	and.w	r3, r3, #31
 8001008:	b2db      	uxtb	r3, r3
 800100a:	221b      	movs	r2, #27
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff fc4f 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	f023 0318 	bic.w	r3, r3, #24
 800101e:	b2db      	uxtb	r3, r3
 8001020:	221b      	movs	r2, #27
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff fc44 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, GYRO_CONFIG, c | hmpu->Gscale << 3); // Set full scale range for the gyro
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	795b      	ldrb	r3, [r3, #5]
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	b25a      	sxtb	r2, r3
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	4313      	orrs	r3, r2
 800103c:	b25b      	sxtb	r3, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	221b      	movs	r2, #27
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fc34 	bl	80008b0 <writeByte>

  // Set accelerometer configuration
  c =  readByte(hmpu,hmpu->addr, ACCEL_CONFIG);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800104e:	221c      	movs	r2, #28
 8001050:	4619      	mov	r1, r3
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff fc4a 	bl	80008ec <readByte>
 8001058:	4603      	mov	r3, r0
 800105a:	73fb      	strb	r3, [r7, #15]
  writeByte(hmpu,hmpu->addr, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5] 
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	f003 031f 	and.w	r3, r3, #31
 8001068:	b2db      	uxtb	r3, r3
 800106a:	221c      	movs	r2, #28
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff fc1f 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	f023 0318 	bic.w	r3, r3, #24
 800107e:	b2db      	uxtb	r3, r3
 8001080:	221c      	movs	r2, #28
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff fc14 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, ACCEL_CONFIG, c | hmpu->Ascale << 3); // Set full scale range for the accelerometer 
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	791b      	ldrb	r3, [r3, #4]
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	b25a      	sxtb	r2, r3
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	4313      	orrs	r3, r2
 800109c:	b25b      	sxtb	r3, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	221c      	movs	r2, #28
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff fc04 	bl	80008b0 <writeByte>

  // Set accelerometer sample rate configuration
  // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
  // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = readByte(hmpu,hmpu->addr, ACCEL_CONFIG2);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80010ae:	221d      	movs	r2, #29
 80010b0:	4619      	mov	r1, r3
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff fc1a 	bl	80008ec <readByte>
 80010b8:	4603      	mov	r3, r0
 80010ba:	73fb      	strb	r3, [r7, #15]
  writeByte(hmpu,hmpu->addr, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])  
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	f023 030f 	bic.w	r3, r3, #15
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	221d      	movs	r2, #29
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff fbef 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	f043 0303 	orr.w	r3, r3, #3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	221d      	movs	r2, #29
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff fbe4 	bl	80008b0 <writeByte>
  // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips 
  // can join the I2C bus and all can be controlled by the Arduino as master
  writeByte(hmpu,hmpu->addr, INT_PIN_CFG, 0x22);    
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80010ee:	2322      	movs	r3, #34	; 0x22
 80010f0:	2237      	movs	r2, #55	; 0x37
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff fbdc 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80010fe:	2301      	movs	r3, #1
 8001100:	2238      	movs	r2, #56	; 0x38
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fbd4 	bl	80008b0 <writeByte>
}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <calibrateMPU9255>:

// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9255(MPU_9255_t *hmpu, double * dest1, double * dest2)
{  
 8001110:	b580      	push	{r7, lr}
 8001112:	b09c      	sub	sp, #112	; 0x70
 8001114:	af02      	add	r7, sp, #8
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 800111c:	2300      	movs	r3, #0
 800111e:	643b      	str	r3, [r7, #64]	; 0x40
 8001120:	2300      	movs	r3, #0
 8001122:	647b      	str	r3, [r7, #68]	; 0x44
 8001124:	2300      	movs	r3, #0
 8001126:	64bb      	str	r3, [r7, #72]	; 0x48
 8001128:	2300      	movs	r3, #0
 800112a:	637b      	str	r3, [r7, #52]	; 0x34
 800112c:	2300      	movs	r3, #0
 800112e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001130:	2300      	movs	r3, #0
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c

  // reset device, reset all registers, clear gyro and accelerometer bias registers
  writeByte(hmpu,hmpu->addr, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	226b      	movs	r2, #107	; 0x6b
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f7ff fbb6 	bl	80008b0 <writeByte>
  MPU_9255_delay(0.1);  
 8001144:	2000      	movs	r0, #0
 8001146:	f000 ffad 	bl	80020a4 <MPU_9255_delay>

  // get stable time source
  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  writeByte(hmpu,hmpu->addr, PWR_MGMT_1, 0x01);  
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001150:	2301      	movs	r3, #1
 8001152:	226b      	movs	r2, #107	; 0x6b
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	f7ff fbab 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, PWR_MGMT_2, 0x00); 
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001160:	2300      	movs	r3, #0
 8001162:	226c      	movs	r2, #108	; 0x6c
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f7ff fba3 	bl	80008b0 <writeByte>
  MPU_9255_delay(0.2);
 800116a:	2000      	movs	r0, #0
 800116c:	f000 ff9a 	bl	80020a4 <MPU_9255_delay>

  // Configure device for bias calculation
  writeByte(hmpu,hmpu->addr, INT_ENABLE, 0x00);   // Disable all interrupts
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001176:	2300      	movs	r3, #0
 8001178:	2238      	movs	r2, #56	; 0x38
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f7ff fb98 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, FIFO_EN, 0x00);      // Disable FIFO
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001186:	2300      	movs	r3, #0
 8001188:	2223      	movs	r2, #35	; 0x23
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f7ff fb90 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001196:	2300      	movs	r3, #0
 8001198:	226b      	movs	r2, #107	; 0x6b
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f7ff fb88 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, I2C_MST_CTRL, 0x00); // Disable I2C master
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80011a6:	2300      	movs	r3, #0
 80011a8:	2224      	movs	r2, #36	; 0x24
 80011aa:	68f8      	ldr	r0, [r7, #12]
 80011ac:	f7ff fb80 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80011b6:	2300      	movs	r3, #0
 80011b8:	226a      	movs	r2, #106	; 0x6a
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f7ff fb78 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80011c6:	230c      	movs	r3, #12
 80011c8:	226a      	movs	r2, #106	; 0x6a
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f7ff fb70 	bl	80008b0 <writeByte>
  MPU_9255_delay(0.015);
 80011d0:	2000      	movs	r0, #0
 80011d2:	f000 ff67 	bl	80020a4 <MPU_9255_delay>

  // Configure MPU9255 gyro and accelerometer for bias calculation
  writeByte(hmpu,hmpu->addr, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80011dc:	2301      	movs	r3, #1
 80011de:	221a      	movs	r2, #26
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f7ff fb65 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80011ec:	2300      	movs	r3, #0
 80011ee:	2219      	movs	r2, #25
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f7ff fb5d 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80011fc:	2300      	movs	r3, #0
 80011fe:	221b      	movs	r2, #27
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff fb55 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 800120c:	2300      	movs	r3, #0
 800120e:	221c      	movs	r2, #28
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f7ff fb4d 	bl	80008b0 <writeByte>

  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8001216:	2383      	movs	r3, #131	; 0x83
 8001218:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 800121c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001220:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

  // Configure FIFO to capture accelerometer and gyro data for bias calculation
  writeByte(hmpu,hmpu->addr, USER_CTRL, 0x40);   // Enable FIFO  
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 800122a:	2340      	movs	r3, #64	; 0x40
 800122c:	226a      	movs	r2, #106	; 0x6a
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff fb3e 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9255)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 800123a:	2378      	movs	r3, #120	; 0x78
 800123c:	2223      	movs	r2, #35	; 0x23
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff fb36 	bl	80008b0 <writeByte>
  MPU_9255_delay(0.04); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8001244:	2000      	movs	r0, #0
 8001246:	f000 ff2d 	bl	80020a4 <MPU_9255_delay>

  // At end of sample accumulation, turn off FIFO sensor read
  writeByte(hmpu,hmpu->addr, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001250:	2300      	movs	r3, #0
 8001252:	2223      	movs	r2, #35	; 0x23
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f7ff fb2b 	bl	80008b0 <writeByte>
  readBytes(hmpu,hmpu->addr, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001260:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2302      	movs	r3, #2
 8001268:	2272      	movs	r2, #114	; 0x72
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f7ff fb5f 	bl	800092e <readBytes>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8001270:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	b21a      	sxth	r2, r3
 8001278:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b21b      	sxth	r3, r3
 8001282:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8001286:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800128a:	4a59      	ldr	r2, [pc, #356]	; (80013f0 <calibrateMPU9255+0x2e0>)
 800128c:	fba2 2303 	umull	r2, r3, r2, r3
 8001290:	08db      	lsrs	r3, r3, #3
 8001292:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

  for (ii = 0; ii < packet_count; ii++) {
 8001296:	2300      	movs	r3, #0
 8001298:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800129c:	e075      	b.n	800138a <calibrateMPU9255+0x27a>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 800129e:	2300      	movs	r3, #0
 80012a0:	83bb      	strh	r3, [r7, #28]
 80012a2:	2300      	movs	r3, #0
 80012a4:	83fb      	strh	r3, [r7, #30]
 80012a6:	2300      	movs	r3, #0
 80012a8:	843b      	strh	r3, [r7, #32]
 80012aa:	2300      	movs	r3, #0
 80012ac:	82bb      	strh	r3, [r7, #20]
 80012ae:	2300      	movs	r3, #0
 80012b0:	82fb      	strh	r3, [r7, #22]
 80012b2:	2300      	movs	r3, #0
 80012b4:	833b      	strh	r3, [r7, #24]
    readBytes(hmpu,hmpu->addr, FIFO_R_W, 12, &data[0]); // read data for averaging
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80012bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	230c      	movs	r3, #12
 80012c4:	2274      	movs	r2, #116	; 0x74
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f7ff fb31 	bl	800092e <readBytes>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 80012cc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b21b      	sxth	r3, r3
 80012de:	83bb      	strh	r3, [r7, #28]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 80012e0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	83fb      	strh	r3, [r7, #30]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;    
 80012f4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001300:	b21b      	sxth	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	b21b      	sxth	r3, r3
 8001306:	843b      	strh	r3, [r7, #32]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8001308:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b21a      	sxth	r2, r3
 8001310:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21b      	sxth	r3, r3
 800131a:	82bb      	strh	r3, [r7, #20]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 800131c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001328:	b21b      	sxth	r3, r3
 800132a:	4313      	orrs	r3, r2
 800132c:	b21b      	sxth	r3, r3
 800132e:	82fb      	strh	r3, [r7, #22]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001330:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	b21a      	sxth	r2, r3
 8001338:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800133c:	b21b      	sxth	r3, r3
 800133e:	4313      	orrs	r3, r2
 8001340:	b21b      	sxth	r3, r3
 8001342:	833b      	strh	r3, [r7, #24]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001346:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800134a:	4413      	add	r3, r2
 800134c:	637b      	str	r3, [r7, #52]	; 0x34
    accel_bias[1] += (int32_t) accel_temp[1];
 800134e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001350:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001354:	4413      	add	r3, r2
 8001356:	63bb      	str	r3, [r7, #56]	; 0x38
    accel_bias[2] += (int32_t) accel_temp[2];
 8001358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800135a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800135e:	4413      	add	r3, r2
 8001360:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 8001362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001364:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001368:	4413      	add	r3, r2
 800136a:	643b      	str	r3, [r7, #64]	; 0x40
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 800136c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800136e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001372:	4413      	add	r3, r2
 8001374:	647b      	str	r3, [r7, #68]	; 0x44
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8001376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001378:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800137c:	4413      	add	r3, r2
 800137e:	64bb      	str	r3, [r7, #72]	; 0x48
  for (ii = 0; ii < packet_count; ii++) {
 8001380:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001384:	3301      	adds	r3, #1
 8001386:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800138a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800138e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001392:	429a      	cmp	r2, r3
 8001394:	d383      	bcc.n	800129e <calibrateMPU9255+0x18e>
  }
  accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8001396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001398:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800139c:	fb92 f3f3 	sdiv	r3, r2, r3
 80013a0:	637b      	str	r3, [r7, #52]	; 0x34
  accel_bias[1] /= (int32_t) packet_count;
 80013a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013a4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80013a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80013ac:	63bb      	str	r3, [r7, #56]	; 0x38
  accel_bias[2] /= (int32_t) packet_count;
 80013ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013b0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80013b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80013b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  gyro_bias[0]  /= (int32_t) packet_count;
 80013ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80013c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80013c4:	643b      	str	r3, [r7, #64]	; 0x40
  gyro_bias[1]  /= (int32_t) packet_count;
 80013c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013c8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80013cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80013d0:	647b      	str	r3, [r7, #68]	; 0x44
  gyro_bias[2]  /= (int32_t) packet_count;
 80013d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013d4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80013d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80013dc:	64bb      	str	r3, [r7, #72]	; 0x48

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80013de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	dd07      	ble.n	80013f4 <calibrateMPU9255+0x2e4>
 80013e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013e6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013ee:	e006      	b.n	80013fe <calibrateMPU9255+0x2ee>
 80013f0:	aaaaaaab 	.word	0xaaaaaaab
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 80013f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013f6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80013fa:	4413      	add	r3, r2
 80013fc:	63fb      	str	r3, [r7, #60]	; 0x3c

  // Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80013fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001400:	425b      	negs	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	da00      	bge.n	8001408 <calibrateMPU9255+0x2f8>
 8001406:	3303      	adds	r3, #3
 8001408:	109b      	asrs	r3, r3, #2
 800140a:	121b      	asrs	r3, r3, #8
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001414:	425b      	negs	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	da00      	bge.n	800141c <calibrateMPU9255+0x30c>
 800141a:	3303      	adds	r3, #3
 800141c:	109b      	asrs	r3, r3, #2
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8001424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001426:	425b      	negs	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	da00      	bge.n	800142e <calibrateMPU9255+0x31e>
 800142c:	3303      	adds	r3, #3
 800142e:	109b      	asrs	r3, r3, #2
 8001430:	121b      	asrs	r3, r3, #8
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 8001438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800143a:	425b      	negs	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	da00      	bge.n	8001442 <calibrateMPU9255+0x332>
 8001440:	3303      	adds	r3, #3
 8001442:	109b      	asrs	r3, r3, #2
 8001444:	b2db      	uxtb	r3, r3
 8001446:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 800144a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800144c:	425b      	negs	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	da00      	bge.n	8001454 <calibrateMPU9255+0x344>
 8001452:	3303      	adds	r3, #3
 8001454:	109b      	asrs	r3, r3, #2
 8001456:	121b      	asrs	r3, r3, #8
 8001458:	b2db      	uxtb	r3, r3
 800145a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 800145e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001460:	425b      	negs	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	da00      	bge.n	8001468 <calibrateMPU9255+0x358>
 8001466:	3303      	adds	r3, #3
 8001468:	109b      	asrs	r3, r3, #2
 800146a:	b2db      	uxtb	r3, r3
 800146c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

/// Push gyro biases to hardware registers
  writeByte(hmpu,hmpu->addr, XG_OFFSET_H, data[0]);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001476:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800147a:	2213      	movs	r2, #19
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f7ff fa17 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, XG_OFFSET_L, data[1]);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001488:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800148c:	2214      	movs	r2, #20
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f7ff fa0e 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, YG_OFFSET_H, data[2]);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 800149a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800149e:	2215      	movs	r2, #21
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f7ff fa05 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, YG_OFFSET_L, data[3]);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80014ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014b0:	2216      	movs	r2, #22
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f7ff f9fc 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, ZG_OFFSET_H, data[4]);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80014be:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80014c2:	2217      	movs	r2, #23
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f7ff f9f3 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, ZG_OFFSET_L, data[5]);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80014d0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80014d4:	2218      	movs	r2, #24
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f7ff f9ea 	bl	80008b0 <writeByte>

  dest1[0] = (double) gyro_bias[0]/(double) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 80014dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80014e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80014f2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	ed83 7b00 	vstr	d7, [r3]
  dest1[1] = (double) gyro_bias[1]/(double) gyrosensitivity;
 80014fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014fe:	ee07 3a90 	vmov	s15, r3
 8001502:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001506:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800150a:	ee07 3a90 	vmov	s15, r3
 800150e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	3308      	adds	r3, #8
 8001516:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800151a:	ed83 7b00 	vstr	d7, [r3]
  dest1[2] = (double) gyro_bias[2]/(double) gyrosensitivity;
 800151e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001520:	ee07 3a90 	vmov	s15, r3
 8001524:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001528:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800152c:	ee07 3a90 	vmov	s15, r3
 8001530:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	3310      	adds	r3, #16
 8001538:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800153c:	ed83 7b00 	vstr	d7, [r3]
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001548:	2300      	movs	r3, #0
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
  readBytes(hmpu,hmpu->addr, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001552:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2302      	movs	r3, #2
 800155a:	2277      	movs	r2, #119	; 0x77
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f7ff f9e6 	bl	800092e <readBytes>
  accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001562:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21b      	sxth	r3, r3
 800156a:	461a      	mov	r2, r3
 800156c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001570:	4313      	orrs	r3, r2
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  readBytes(hmpu,hmpu->addr, YA_OFFSET_H, 2, &data[0]);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 800157a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2302      	movs	r3, #2
 8001582:	227a      	movs	r2, #122	; 0x7a
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f7ff f9d2 	bl	800092e <readBytes>
  accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 800158a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b21b      	sxth	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001598:	4313      	orrs	r3, r2
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  readBytes(hmpu,hmpu->addr, ZA_OFFSET_H, 2, &data[0]);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80015a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2302      	movs	r3, #2
 80015aa:	227d      	movs	r2, #125	; 0x7d
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff f9be 	bl	800092e <readBytes>
  accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 80015b2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80015c0:	4313      	orrs	r3, r2
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 80015c4:	2301      	movs	r3, #1
 80015c6:	65bb      	str	r3, [r7, #88]	; 0x58
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 80015c8:	2300      	movs	r3, #0
 80015ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80015ce:	2300      	movs	r3, #0
 80015d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  for(ii = 0; ii < 3; ii++) {
 80015da:	2300      	movs	r3, #0
 80015dc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80015e0:	e019      	b.n	8001616 <calibrateMPU9255+0x506>
  if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 80015e2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80015ec:	4413      	add	r3, r2
 80015ee:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80015f2:	461a      	mov	r2, r3
 80015f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d007      	beq.n	800160c <calibrateMPU9255+0x4fc>
 80015fc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001600:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001604:	4413      	add	r3, r2
 8001606:	2201      	movs	r2, #1
 8001608:	f803 2c44 	strb.w	r2, [r3, #-68]
  for(ii = 0; ii < 3; ii++) {
 800160c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001610:	3301      	adds	r3, #1
 8001612:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001616:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800161a:	2b02      	cmp	r3, #2
 800161c:	d9e1      	bls.n	80015e2 <calibrateMPU9255+0x4d2>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 800161e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001622:	2b00      	cmp	r3, #0
 8001624:	da00      	bge.n	8001628 <calibrateMPU9255+0x518>
 8001626:	3307      	adds	r3, #7
 8001628:	10db      	asrs	r3, r3, #3
 800162a:	425b      	negs	r3, r3
 800162c:	4413      	add	r3, r2
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  accel_bias_reg[1] -= (accel_bias[1]/8);
 8001630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001634:	2b00      	cmp	r3, #0
 8001636:	da00      	bge.n	800163a <calibrateMPU9255+0x52a>
 8001638:	3307      	adds	r3, #7
 800163a:	10db      	asrs	r3, r3, #3
 800163c:	425b      	negs	r3, r3
 800163e:	4413      	add	r3, r2
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
  accel_bias_reg[2] -= (accel_bias[2]/8);
 8001642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001646:	2b00      	cmp	r3, #0
 8001648:	da00      	bge.n	800164c <calibrateMPU9255+0x53c>
 800164a:	3307      	adds	r3, #7
 800164c:	10db      	asrs	r3, r3, #3
 800164e:	425b      	negs	r3, r3
 8001650:	4413      	add	r3, r2
 8001652:	633b      	str	r3, [r7, #48]	; 0x30

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8001654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001656:	121b      	asrs	r3, r3, #8
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  data[1] = (accel_bias_reg[0])      & 0xFF;
 800165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001660:	b2db      	uxtb	r3, r3
 8001662:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001666:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800166a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800166e:	4313      	orrs	r3, r2
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8001676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001678:	121b      	asrs	r3, r3, #8
 800167a:	b2db      	uxtb	r3, r3
 800167c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  data[3] = (accel_bias_reg[1])      & 0xFF;
 8001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001682:	b2db      	uxtb	r3, r3
 8001684:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001688:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800168c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001690:	4313      	orrs	r3, r2
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800169a:	121b      	asrs	r3, r3, #8
 800169c:	b2db      	uxtb	r3, r3
 800169e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  data[5] = (accel_bias_reg[2])      & 0xFF;
 80016a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80016aa:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 80016ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016b2:	4313      	orrs	r3, r2
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

// Apparently this is not working for the acceleration biases in the MPU-9255
// Are we handling the temperature correction bit properly?
// Push accelerometer biases to hardware registers
  
  writeByte(hmpu,hmpu->addr, XA_OFFSET_H, data[0]);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80016c0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80016c4:	2277      	movs	r2, #119	; 0x77
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f7ff f8f2 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, XA_OFFSET_L, data[1]);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80016d2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80016d6:	2278      	movs	r2, #120	; 0x78
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f7ff f8e9 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, YA_OFFSET_H, data[2]);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80016e4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80016e8:	227a      	movs	r2, #122	; 0x7a
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f7ff f8e0 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, YA_OFFSET_L, data[3]);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80016f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016fa:	227b      	movs	r2, #123	; 0x7b
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7ff f8d7 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, ZA_OFFSET_H, data[4]);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001708:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800170c:	227d      	movs	r2, #125	; 0x7d
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f7ff f8ce 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, ZA_OFFSET_L, data[5]);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 800171a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800171e:	227e      	movs	r2, #126	; 0x7e
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f7ff f8c5 	bl	80008b0 <writeByte>

// Output scaled accelerometer biases for manual subtraction in the main program
  dest2[0] = (double)accel_bias[0]/(double)accelsensitivity; 
 8001726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001728:	ee07 3a90 	vmov	s15, r3
 800172c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001730:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001734:	ee07 3a90 	vmov	s15, r3
 8001738:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800173c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	ed83 7b00 	vstr	d7, [r3]
  dest2[1] = (double)accel_bias[1]/(double)accelsensitivity;
 8001746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001748:	ee07 3a90 	vmov	s15, r3
 800174c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001750:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3308      	adds	r3, #8
 8001760:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001764:	ed83 7b00 	vstr	d7, [r3]
  dest2[2] = (double)accel_bias[2]/(double)accelsensitivity;
 8001768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001772:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3310      	adds	r3, #16
 8001782:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001786:	ed83 7b00 	vstr	d7, [r3]
}
 800178a:	bf00      	nop
 800178c:	3768      	adds	r7, #104	; 0x68
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	0000      	movs	r0, r0
	...

08001798 <MPU9255SelfTest>:


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9255SelfTest(MPU_9255_t *hmpu, double * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
 8001798:	b580      	push	{r7, lr}
 800179a:	ed2d 8b02 	vpush	{d8}
 800179e:	b0a2      	sub	sp, #136	; 0x88
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
 80017a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	809a      	strh	r2, [r3, #4]
  uint8_t selfTest[6];
  int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
  double factoryTrim[6];
  uint8_t FS = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

  writeByte(hmpu,hmpu->addr, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz �����W�v
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80017bc:	2300      	movs	r3, #0
 80017be:	2219      	movs	r2, #25
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff f875 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz �C�W�o�i���I���W�v
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80017cc:	2302      	movs	r3, #2
 80017ce:	221a      	movs	r2, #26
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff f86d 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, GYRO_CONFIG, 1<<FS); // Set full scale range for the gyro to 250 dps 
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80017dc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80017e0:	2201      	movs	r2, #1
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	221b      	movs	r2, #27
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff f860 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80017f6:	2302      	movs	r3, #2
 80017f8:	221d      	movs	r2, #29
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff f858 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, ACCEL_CONFIG, 1<<FS); // Set full scale range for the accelerometer to 2 g
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001806:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800180a:	2201      	movs	r2, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	221c      	movs	r2, #28
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff f84b 	bl	80008b0 <writeByte>

  //讀兩百筆目前感測器值取平均
  for( int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 800181a:	2300      	movs	r3, #0
 800181c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800181e:	e084      	b.n	800192a <MPU9255SelfTest+0x192>
    //讀加速度值
    readBytes(hmpu,hmpu->addr, ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001826:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2306      	movs	r3, #6
 800182e:	223b      	movs	r2, #59	; 0x3b
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff f87c 	bl	800092e <readBytes>
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8001836:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800183a:	b29a      	uxth	r2, r3
 800183c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b219      	sxth	r1, r3
 8001844:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001848:	b21b      	sxth	r3, r3
 800184a:	430b      	orrs	r3, r1
 800184c:	b21b      	sxth	r3, r3
 800184e:	b29b      	uxth	r3, r3
 8001850:	4413      	add	r3, r2
 8001852:	b29b      	uxth	r3, r3
 8001854:	b21b      	sxth	r3, r3
 8001856:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 800185a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800185e:	b29a      	uxth	r2, r3
 8001860:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	b219      	sxth	r1, r3
 8001868:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800186c:	b21b      	sxth	r3, r3
 800186e:	430b      	orrs	r3, r1
 8001870:	b21b      	sxth	r3, r3
 8001872:	b29b      	uxth	r3, r3
 8001874:	4413      	add	r3, r2
 8001876:	b29b      	uxth	r3, r3
 8001878:	b21b      	sxth	r3, r3
 800187a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 800187e:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8001882:	b29a      	uxth	r2, r3
 8001884:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	b219      	sxth	r1, r3
 800188c:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001890:	b21b      	sxth	r3, r3
 8001892:	430b      	orrs	r3, r1
 8001894:	b21b      	sxth	r3, r3
 8001896:	b29b      	uxth	r3, r3
 8001898:	4413      	add	r3, r2
 800189a:	b29b      	uxth	r3, r3
 800189c:	b21b      	sxth	r3, r3
 800189e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    //讀陀螺儀值
    readBytes(hmpu,hmpu->addr, GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80018a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2306      	movs	r3, #6
 80018b0:	2243      	movs	r2, #67	; 0x43
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff f83b 	bl	800092e <readBytes>
    gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80018b8:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80018bc:	b29a      	uxth	r2, r3
 80018be:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	b219      	sxth	r1, r3
 80018c6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80018ca:	b21b      	sxth	r3, r3
 80018cc:	430b      	orrs	r3, r1
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 80018dc:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	b219      	sxth	r1, r3
 80018ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	430b      	orrs	r3, r1
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8001900:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8001904:	b29a      	uxth	r2, r3
 8001906:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	b219      	sxth	r1, r3
 800190e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001912:	b21b      	sxth	r3, r3
 8001914:	430b      	orrs	r3, r1
 8001916:	b21b      	sxth	r3, r3
 8001918:	b29b      	uxth	r3, r3
 800191a:	4413      	add	r3, r2
 800191c:	b29b      	uxth	r3, r3
 800191e:	b21b      	sxth	r3, r3
 8001920:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  for( int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 8001924:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001926:	3301      	adds	r3, #1
 8001928:	67fb      	str	r3, [r7, #124]	; 0x7c
 800192a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800192c:	2bc7      	cmp	r3, #199	; 0xc7
 800192e:	f77f af77 	ble.w	8001820 <MPU9255SelfTest+0x88>
  }
  
  for (int ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8001932:	2300      	movs	r3, #0
 8001934:	67bb      	str	r3, [r7, #120]	; 0x78
 8001936:	e02c      	b.n	8001992 <MPU9255SelfTest+0x1fa>
    aAvg[ii] /= 200;
 8001938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001940:	4413      	add	r3, r2
 8001942:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8001946:	4a64      	ldr	r2, [pc, #400]	; (8001ad8 <MPU9255SelfTest+0x340>)
 8001948:	fb82 1203 	smull	r1, r2, r2, r3
 800194c:	1192      	asrs	r2, r2, #6
 800194e:	17db      	asrs	r3, r3, #31
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	b21a      	sxth	r2, r3
 8001954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800195c:	440b      	add	r3, r1
 800195e:	f823 2c34 	strh.w	r2, [r3, #-52]
    gAvg[ii] /= 200;
 8001962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800196a:	4413      	add	r3, r2
 800196c:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8001970:	4a59      	ldr	r2, [pc, #356]	; (8001ad8 <MPU9255SelfTest+0x340>)
 8001972:	fb82 1203 	smull	r1, r2, r2, r3
 8001976:	1192      	asrs	r2, r2, #6
 8001978:	17db      	asrs	r3, r3, #31
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	b21a      	sxth	r2, r3
 800197e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001986:	440b      	add	r3, r1
 8001988:	f823 2c2c 	strh.w	r2, [r3, #-44]
  for (int ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 800198c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800198e:	3301      	adds	r3, #1
 8001990:	67bb      	str	r3, [r7, #120]	; 0x78
 8001992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001994:	2b02      	cmp	r3, #2
 8001996:	ddcf      	ble.n	8001938 <MPU9255SelfTest+0x1a0>
  }
  
  // Configure the accelerometer for self-test
  writeByte(hmpu,hmpu->addr, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 800199e:	23e0      	movs	r3, #224	; 0xe0
 80019a0:	221c      	movs	r2, #28
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7fe ff84 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80019ae:	23e0      	movs	r3, #224	; 0xe0
 80019b0:	221b      	movs	r2, #27
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7fe ff7c 	bl	80008b0 <writeByte>
  MPU_9255_delay(0.25); // Delay a while to let the device stabilize
 80019b8:	2000      	movs	r0, #0
 80019ba:	f000 fb73 	bl	80020a4 <MPU_9255_delay>

  for( int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 80019be:	2300      	movs	r3, #0
 80019c0:	677b      	str	r3, [r7, #116]	; 0x74
 80019c2:	e082      	b.n	8001aca <MPU9255SelfTest+0x332>

    readBytes(hmpu,hmpu->addr, ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 80019ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2306      	movs	r3, #6
 80019d2:	223b      	movs	r2, #59	; 0x3b
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7fe ffaa 	bl	800092e <readBytes>
    aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80019da:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80019de:	b29a      	uxth	r2, r3
 80019e0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	b219      	sxth	r1, r3
 80019e8:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	430b      	orrs	r3, r1
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 80019fe:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	b219      	sxth	r1, r3
 8001a0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	430b      	orrs	r3, r1
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8001a22:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	b219      	sxth	r1, r3
 8001a30:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001a34:	b21b      	sxth	r3, r3
 8001a36:	430b      	orrs	r3, r1
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    readBytes(hmpu,hmpu->addr, GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001a4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2306      	movs	r3, #6
 8001a54:	2243      	movs	r2, #67	; 0x43
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7fe ff69 	bl	800092e <readBytes>
    gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8001a5c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	b219      	sxth	r1, r3
 8001a6a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	430b      	orrs	r3, r1
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	4413      	add	r3, r2
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8001a7e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	b219      	sxth	r1, r3
 8001a8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	430b      	orrs	r3, r1
 8001a94:	b21b      	sxth	r3, r3
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8001aa0:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	b219      	sxth	r1, r3
 8001aae:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001ab2:	b21b      	sxth	r3, r3
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	4413      	add	r3, r2
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  for( int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8001ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	677b      	str	r3, [r7, #116]	; 0x74
 8001aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001acc:	2bc7      	cmp	r3, #199	; 0xc7
 8001ace:	f77f af79 	ble.w	80019c4 <MPU9255SelfTest+0x22c>
  }
  
  for (int ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	673b      	str	r3, [r7, #112]	; 0x70
 8001ad6:	e02e      	b.n	8001b36 <MPU9255SelfTest+0x39e>
 8001ad8:	51eb851f 	.word	0x51eb851f
    aSTAvg[ii] /= 200;
 8001adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f933 3c3c 	ldrsh.w	r3, [r3, #-60]
 8001aea:	4ad3      	ldr	r2, [pc, #844]	; (8001e38 <MPU9255SelfTest+0x6a0>)
 8001aec:	fb82 1203 	smull	r1, r2, r2, r3
 8001af0:	1192      	asrs	r2, r2, #6
 8001af2:	17db      	asrs	r3, r3, #31
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	b21a      	sxth	r2, r3
 8001af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001b00:	440b      	add	r3, r1
 8001b02:	f823 2c3c 	strh.w	r2, [r3, #-60]
    gSTAvg[ii] /= 200;
 8001b06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001b0e:	4413      	add	r3, r2
 8001b10:	f933 3c44 	ldrsh.w	r3, [r3, #-68]
 8001b14:	4ac8      	ldr	r2, [pc, #800]	; (8001e38 <MPU9255SelfTest+0x6a0>)
 8001b16:	fb82 1203 	smull	r1, r2, r2, r3
 8001b1a:	1192      	asrs	r2, r2, #6
 8001b1c:	17db      	asrs	r3, r3, #31
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	b21a      	sxth	r2, r3
 8001b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f823 2c44 	strh.w	r2, [r3, #-68]
  for (int ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8001b30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b32:	3301      	adds	r3, #1
 8001b34:	673b      	str	r3, [r7, #112]	; 0x70
 8001b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	ddcf      	ble.n	8001adc <MPU9255SelfTest+0x344>
  }
  
  //切回一般感測資料模式
  // Configure the gyro and accelerometer for normal operation
  writeByte(hmpu,hmpu->addr, ACCEL_CONFIG, 0x00);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001b42:	2300      	movs	r3, #0
 8001b44:	221c      	movs	r2, #28
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7fe feb2 	bl	80008b0 <writeByte>
  writeByte(hmpu,hmpu->addr, GYRO_CONFIG, 0x00);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8001b52:	2300      	movs	r3, #0
 8001b54:	221b      	movs	r2, #27
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7fe feaa 	bl	80008b0 <writeByte>
  MPU_9255_delay(0.25); // Delay a while to let the device stabilize
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f000 faa1 	bl	80020a4 <MPU_9255_delay>

  // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
  selfTest[0] = readByte(hmpu,hmpu->addr, SELF_TEST_X_ACCEL); // X-axis accel self-test results
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001b68:	220d      	movs	r2, #13
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7fe febd 	bl	80008ec <readByte>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  selfTest[1] = readByte(hmpu,hmpu->addr, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001b7e:	220e      	movs	r2, #14
 8001b80:	4619      	mov	r1, r3
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7fe feb2 	bl	80008ec <readByte>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  selfTest[2] = readByte(hmpu,hmpu->addr, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001b94:	220f      	movs	r2, #15
 8001b96:	4619      	mov	r1, r3
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7fe fea7 	bl	80008ec <readByte>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  selfTest[3] = readByte(hmpu,hmpu->addr, SELF_TEST_X_GYRO); // X-axis gyro self-test results
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001baa:	2200      	movs	r2, #0
 8001bac:	4619      	mov	r1, r3
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7fe fe9c 	bl	80008ec <readByte>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  selfTest[4] = readByte(hmpu,hmpu->addr, SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7fe fe91 	bl	80008ec <readByte>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
  selfTest[5] = readByte(hmpu,hmpu->addr, SELF_TEST_Z_GYRO); // Z-axis gyro self-test results
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7fe fe86 	bl	80008ec <readByte>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

  // Retrieve factory self-test value from self-test code reads
  factoryTrim[0] = (double)(2620/1<<FS)*(pow( 1.01f , ((double)selfTest[0] - 1.0f) )); // FT[Xa] factory trim calculation
 8001be6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001bea:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	ee07 3a90 	vmov	s15, r3
 8001bf6:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8001bfa:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001bfe:	ee07 3a90 	vmov	s15, r3
 8001c02:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c06:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c0e:	eeb0 1b47 	vmov.f64	d1, d7
 8001c12:	ed9f 0b85 	vldr	d0, [pc, #532]	; 8001e28 <MPU9255SelfTest+0x690>
 8001c16:	f008 fd83 	bl	800a720 <pow>
 8001c1a:	eeb0 7b40 	vmov.f64	d7, d0
 8001c1e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001c22:	ed87 7b02 	vstr	d7, [r7, #8]
  factoryTrim[1] = (double)(2620/1<<FS)*(pow( 1.01f , ((double)selfTest[1] - 1.0f) )); // FT[Ya] factory trim calculation
 8001c26:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001c2a:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8001c3a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c46:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c4e:	eeb0 1b47 	vmov.f64	d1, d7
 8001c52:	ed9f 0b75 	vldr	d0, [pc, #468]	; 8001e28 <MPU9255SelfTest+0x690>
 8001c56:	f008 fd63 	bl	800a720 <pow>
 8001c5a:	eeb0 7b40 	vmov.f64	d7, d0
 8001c5e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001c62:	ed87 7b04 	vstr	d7, [r7, #16]
  factoryTrim[2] = (double)(2620/1<<FS)*(pow( 1.01f , ((double)selfTest[2] - 1.0f) )); // FT[Za] factory trim calculation
 8001c66:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001c6a:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	ee07 3a90 	vmov	s15, r3
 8001c76:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8001c7a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001c7e:	ee07 3a90 	vmov	s15, r3
 8001c82:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c86:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c8e:	eeb0 1b47 	vmov.f64	d1, d7
 8001c92:	ed9f 0b65 	vldr	d0, [pc, #404]	; 8001e28 <MPU9255SelfTest+0x690>
 8001c96:	f008 fd43 	bl	800a720 <pow>
 8001c9a:	eeb0 7b40 	vmov.f64	d7, d0
 8001c9e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001ca2:	ed87 7b06 	vstr	d7, [r7, #24]
  factoryTrim[3] = (double)(2620/1<<FS)*(pow( 1.01f , ((double)selfTest[3] - 1.0f) )); // FT[Xg] factory trim calculation
 8001ca6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001caa:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	ee07 3a90 	vmov	s15, r3
 8001cb6:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8001cba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001cc6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001cca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001cce:	eeb0 1b47 	vmov.f64	d1, d7
 8001cd2:	ed9f 0b55 	vldr	d0, [pc, #340]	; 8001e28 <MPU9255SelfTest+0x690>
 8001cd6:	f008 fd23 	bl	800a720 <pow>
 8001cda:	eeb0 7b40 	vmov.f64	d7, d0
 8001cde:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001ce2:	ed87 7b08 	vstr	d7, [r7, #32]
  factoryTrim[4] = (double)(2620/1<<FS)*(pow( 1.01f , ((double)selfTest[4] - 1.0f) )); // FT[Yg] factory trim calculation
 8001ce6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001cea:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8001cfa:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d06:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d0e:	eeb0 1b47 	vmov.f64	d1, d7
 8001d12:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8001e28 <MPU9255SelfTest+0x690>
 8001d16:	f008 fd03 	bl	800a720 <pow>
 8001d1a:	eeb0 7b40 	vmov.f64	d7, d0
 8001d1e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001d22:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  factoryTrim[5] = (double)(2620/1<<FS)*(pow( 1.01f , ((double)selfTest[5] - 1.0f) )); // FT[Zg] factory trim calculation
 8001d26:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001d2a:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8001d3a:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001d3e:	ee07 3a90 	vmov	s15, r3
 8001d42:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d46:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d4e:	eeb0 1b47 	vmov.f64	d1, d7
 8001d52:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8001e28 <MPU9255SelfTest+0x690>
 8001d56:	f008 fce3 	bl	800a720 <pow>
 8001d5a:	eeb0 7b40 	vmov.f64	d7, d0
 8001d5e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001d62:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30

  // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
  // To get percent, must multiply by 100
  for (int i = 0; i < 3; i++) {
 8001d66:	2300      	movs	r3, #0
 8001d68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d6a:	e054      	b.n	8001e16 <MPU9255SelfTest+0x67e>
    destination[i] = 100.0f*((double)(aSTAvg[i] - aAvg[i]))/factoryTrim[i]; // Report percent differences
 8001d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001d74:	4413      	add	r3, r2
 8001d76:	f933 3c3c 	ldrsh.w	r3, [r3, #-60]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001d84:	440b      	add	r3, r1
 8001d86:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	ee07 3a90 	vmov	s15, r3
 8001d90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d94:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8001e30 <MPU9255SelfTest+0x698>
 8001d98:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001da4:	4413      	add	r3, r2
 8001da6:	3b78      	subs	r3, #120	; 0x78
 8001da8:	ed93 6b00 	vldr	d6, [r3]
 8001dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001db8:	ed83 7b00 	vstr	d7, [r3]
    destination[i+3] = 100.0f*((double)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]; // Report percent differences
 8001dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f933 3c44 	ldrsh.w	r3, [r3, #-68]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001dd4:	440b      	add	r3, r1
 8001dd6:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	ee07 3a90 	vmov	s15, r3
 8001de0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001de4:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001e30 <MPU9255SelfTest+0x698>
 8001de8:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dee:	3303      	adds	r3, #3
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001df6:	4413      	add	r3, r2
 8001df8:	3b78      	subs	r3, #120	; 0x78
 8001dfa:	ed93 6b00 	vldr	d6, [r3]
 8001dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e00:	3303      	adds	r3, #3
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e0c:	ed83 7b00 	vstr	d7, [r3]
  for (int i = 0; i < 3; i++) {
 8001e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e12:	3301      	adds	r3, #1
 8001e14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	dda7      	ble.n	8001d6c <MPU9255SelfTest+0x5d4>
  }
   
}
 8001e1c:	bf00      	nop
 8001e1e:	3780      	adds	r7, #128	; 0x80
 8001e20:	46bd      	mov	sp, r7
 8001e22:	ecbd 8b02 	vpop	{d8}
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	c0000000 	.word	0xc0000000
 8001e2c:	3ff028f5 	.word	0x3ff028f5
 8001e30:	00000000 	.word	0x00000000
 8001e34:	40590000 	.word	0x40590000
 8001e38:	51eb851f 	.word	0x51eb851f

08001e3c <MPU_9255_initSensor>:

void MPU_9255_initSensor(MPU_9255_t *hmpu){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  
    //software reset by setting register
    resetMPU9255(hmpu); // Reset registers to default in preparation for device calibration
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff f81b 	bl	8000e80 <resetMPU9255>
    //self test
    MPU9255SelfTest(hmpu, hmpu->SelfTest); // Start by performing self test and reporting values
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3388      	adds	r3, #136	; 0x88
 8001e4e:	4619      	mov	r1, r3
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff fca1 	bl	8001798 <MPU9255SelfTest>
    calibrateMPU9255(hmpu, hmpu->gyroBias, hmpu->accelBias); // Calibrate gyro and accelerometers, load biases in bias registers  
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3370      	adds	r3, #112	; 0x70
 8001e60:	461a      	mov	r2, r3
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff f954 	bl	8001110 <calibrateMPU9255>
    MPU_9255_delay(2);
 8001e68:	2002      	movs	r0, #2
 8001e6a:	f000 f91b 	bl	80020a4 <MPU_9255_delay>
    
    initMPU9255(hmpu); 
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff f892 	bl	8000f98 <initMPU9255>
    initAK8963(hmpu, hmpu->magCalibration);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3328      	adds	r3, #40	; 0x28
 8001e78:	4619      	mov	r1, r3
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff f814 	bl	8000ea8 <initAK8963>
    MPU_9255_delay(1);
 8001e80:	2001      	movs	r0, #1
 8001e82:	f000 f90f 	bl	80020a4 <MPU_9255_delay>
  
    //get resolution of MPU9255
    getRes(hmpu);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7fe fe42 	bl	8000b10 <getRes>
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	0000      	movs	r0, r0
	...

08001e98 <MPU_9255_printInfo>:

void MPU_9255_printInfo(MPU_9255_t *hmpu){
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
    printf("\n\r--------------- start of Sensor Infomation ---------------\n\r");
 8001ea0:	485f      	ldr	r0, [pc, #380]	; (8002020 <MPU_9255_printInfo+0x188>)
 8001ea2:	f006 fcd5 	bl	8008850 <iprintf>
    printf("x-axis self test: acceleration trim within : %f %% of factory value\n\r", hmpu->SelfTest[0]);  
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8001eac:	461a      	mov	r2, r3
 8001eae:	4623      	mov	r3, r4
 8001eb0:	485c      	ldr	r0, [pc, #368]	; (8002024 <MPU_9255_printInfo+0x18c>)
 8001eb2:	f006 fccd 	bl	8008850 <iprintf>
    printf("y-axis self test: acceleration trim within : %f %% of factory value\n\r", hmpu->SelfTest[1]);  
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4623      	mov	r3, r4
 8001ec0:	4859      	ldr	r0, [pc, #356]	; (8002028 <MPU_9255_printInfo+0x190>)
 8001ec2:	f006 fcc5 	bl	8008850 <iprintf>
    printf("z-axis self test: acceleration trim within : %f %% of factory value\n\r", hmpu->SelfTest[2]);  
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4623      	mov	r3, r4
 8001ed0:	4856      	ldr	r0, [pc, #344]	; (800202c <MPU_9255_printInfo+0x194>)
 8001ed2:	f006 fcbd 	bl	8008850 <iprintf>
    printf("x-axis self test: gyration trim within : %f %% of factory value\n\r", hmpu->SelfTest[3]);  
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 8001edc:	461a      	mov	r2, r3
 8001ede:	4623      	mov	r3, r4
 8001ee0:	4853      	ldr	r0, [pc, #332]	; (8002030 <MPU_9255_printInfo+0x198>)
 8001ee2:	f006 fcb5 	bl	8008850 <iprintf>
    printf("y-axis self test: gyration trim within : %f %% of factory value\n\r", hmpu->SelfTest[4]);  
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8001eec:	461a      	mov	r2, r3
 8001eee:	4623      	mov	r3, r4
 8001ef0:	4850      	ldr	r0, [pc, #320]	; (8002034 <MPU_9255_printInfo+0x19c>)
 8001ef2:	f006 fcad 	bl	8008850 <iprintf>
    printf("z-axis self test: gyration trim within : %f %% of factory value\n\r", hmpu->SelfTest[5]); 
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 8001efc:	461a      	mov	r2, r3
 8001efe:	4623      	mov	r3, r4
 8001f00:	484d      	ldr	r0, [pc, #308]	; (8002038 <MPU_9255_printInfo+0x1a0>)
 8001f02:	f006 fca5 	bl	8008850 <iprintf>
  
    printf("x gyro bias = %f\n\r", hmpu->gyroBias[0]);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4623      	mov	r3, r4
 8001f10:	484a      	ldr	r0, [pc, #296]	; (800203c <MPU_9255_printInfo+0x1a4>)
 8001f12:	f006 fc9d 	bl	8008850 <iprintf>
    printf("y gyro bias = %f\n\r", hmpu->gyroBias[1]);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4623      	mov	r3, r4
 8001f20:	4847      	ldr	r0, [pc, #284]	; (8002040 <MPU_9255_printInfo+0x1a8>)
 8001f22:	f006 fc95 	bl	8008850 <iprintf>
    printf("z gyro bias = %f\n\r", hmpu->gyroBias[2]);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4623      	mov	r3, r4
 8001f30:	4844      	ldr	r0, [pc, #272]	; (8002044 <MPU_9255_printInfo+0x1ac>)
 8001f32:	f006 fc8d 	bl	8008850 <iprintf>
    printf("x accel bias = %f\n\r", hmpu->accelBias[0]);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4623      	mov	r3, r4
 8001f40:	4841      	ldr	r0, [pc, #260]	; (8002048 <MPU_9255_printInfo+0x1b0>)
 8001f42:	f006 fc85 	bl	8008850 <iprintf>
    printf("y accel bias = %f\n\r", hmpu->accelBias[1]);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4623      	mov	r3, r4
 8001f50:	483e      	ldr	r0, [pc, #248]	; (800204c <MPU_9255_printInfo+0x1b4>)
 8001f52:	f006 fc7d 	bl	8008850 <iprintf>
    printf("z accel bias = %f\n\r", hmpu->accelBias[2]);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4623      	mov	r3, r4
 8001f60:	483b      	ldr	r0, [pc, #236]	; (8002050 <MPU_9255_printInfo+0x1b8>)
 8001f62:	f006 fc75 	bl	8008850 <iprintf>
  
    printf("MPU9255 initialized for active data mode....\n\r"); // Initialize device for active mode read of acclerometer, gyroscope, and temperature
 8001f66:	483b      	ldr	r0, [pc, #236]	; (8002054 <MPU_9255_printInfo+0x1bc>)
 8001f68:	f006 fc72 	bl	8008850 <iprintf>
  
    printf("AK8963 initialized for active data mode....\n\r"); // Initialize device for active mode read of magnetometer
 8001f6c:	483a      	ldr	r0, [pc, #232]	; (8002058 <MPU_9255_printInfo+0x1c0>)
 8001f6e:	f006 fc6f 	bl	8008850 <iprintf>
    printf("Accelerometer full-scale range = %f  g\n\r", 2.0f*(double)(1<<hmpu->Ascale));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	791b      	ldrb	r3, [r3, #4]
 8001f76:	461a      	mov	r2, r3
 8001f78:	2301      	movs	r3, #1
 8001f7a:	4093      	lsls	r3, r2
 8001f7c:	ee07 3a90 	vmov	s15, r3
 8001f80:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f84:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001f88:	ec53 2b17 	vmov	r2, r3, d7
 8001f8c:	4833      	ldr	r0, [pc, #204]	; (800205c <MPU_9255_printInfo+0x1c4>)
 8001f8e:	f006 fc5f 	bl	8008850 <iprintf>
    printf("Gyroscope full-scale range = %f  deg/s\n\r", 250.0f*(double)(1<<hmpu->Gscale));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	795b      	ldrb	r3, [r3, #5]
 8001f96:	461a      	mov	r2, r3
 8001f98:	2301      	movs	r3, #1
 8001f9a:	4093      	lsls	r3, r2
 8001f9c:	ee07 3a90 	vmov	s15, r3
 8001fa0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fa4:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8002018 <MPU_9255_printInfo+0x180>
 8001fa8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001fac:	ec53 2b17 	vmov	r2, r3, d7
 8001fb0:	482b      	ldr	r0, [pc, #172]	; (8002060 <MPU_9255_printInfo+0x1c8>)
 8001fb2:	f006 fc4d 	bl	8008850 <iprintf>
    if(hmpu->Mscale == 0) printf("Magnetometer resolution = 14  bits\n\r");
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	799b      	ldrb	r3, [r3, #6]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d103      	bne.n	8001fc6 <MPU_9255_printInfo+0x12e>
 8001fbe:	4829      	ldr	r0, [pc, #164]	; (8002064 <MPU_9255_printInfo+0x1cc>)
 8001fc0:	f006 fc46 	bl	8008850 <iprintf>
 8001fc4:	e006      	b.n	8001fd4 <MPU_9255_printInfo+0x13c>
    else if(hmpu->Mscale == 1) printf("Magnetometer resolution = 16  bits\n\r");
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	799b      	ldrb	r3, [r3, #6]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d102      	bne.n	8001fd4 <MPU_9255_printInfo+0x13c>
 8001fce:	4826      	ldr	r0, [pc, #152]	; (8002068 <MPU_9255_printInfo+0x1d0>)
 8001fd0:	f006 fc3e 	bl	8008850 <iprintf>
    if(hmpu->Mmode == 2) printf("Magnetometer ODR = 8 Hz\n\r");
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	79db      	ldrb	r3, [r3, #7]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d103      	bne.n	8001fe4 <MPU_9255_printInfo+0x14c>
 8001fdc:	4823      	ldr	r0, [pc, #140]	; (800206c <MPU_9255_printInfo+0x1d4>)
 8001fde:	f006 fc37 	bl	8008850 <iprintf>
 8001fe2:	e006      	b.n	8001ff2 <MPU_9255_printInfo+0x15a>
    else if(hmpu->Mmode == 6) printf("Magnetometer ODR = 100 Hz\n\r");
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	79db      	ldrb	r3, [r3, #7]
 8001fe8:	2b06      	cmp	r3, #6
 8001fea:	d102      	bne.n	8001ff2 <MPU_9255_printInfo+0x15a>
 8001fec:	4820      	ldr	r0, [pc, #128]	; (8002070 <MPU_9255_printInfo+0x1d8>)
 8001fee:	f006 fc2f 	bl	8008850 <iprintf>
    printf("Accelerometer and Gyroscope sampling rate = %d Hz\n\r", 1000 / (1 + hmpu->Smplrt_div));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	7a1b      	ldrb	r3, [r3, #8]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ffc:	fb92 f3f3 	sdiv	r3, r2, r3
 8002000:	4619      	mov	r1, r3
 8002002:	481c      	ldr	r0, [pc, #112]	; (8002074 <MPU_9255_printInfo+0x1dc>)
 8002004:	f006 fc24 	bl	8008850 <iprintf>
    
    printf("--------------- end of Sensor Infomation ---------------\n\r");
 8002008:	481b      	ldr	r0, [pc, #108]	; (8002078 <MPU_9255_printInfo+0x1e0>)
 800200a:	f006 fc21 	bl	8008850 <iprintf>
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	bd90      	pop	{r4, r7, pc}
 8002016:	bf00      	nop
 8002018:	00000000 	.word	0x00000000
 800201c:	406f4000 	.word	0x406f4000
 8002020:	0800b318 	.word	0x0800b318
 8002024:	0800b358 	.word	0x0800b358
 8002028:	0800b3a0 	.word	0x0800b3a0
 800202c:	0800b3e8 	.word	0x0800b3e8
 8002030:	0800b430 	.word	0x0800b430
 8002034:	0800b474 	.word	0x0800b474
 8002038:	0800b4b8 	.word	0x0800b4b8
 800203c:	0800b4fc 	.word	0x0800b4fc
 8002040:	0800b510 	.word	0x0800b510
 8002044:	0800b524 	.word	0x0800b524
 8002048:	0800b538 	.word	0x0800b538
 800204c:	0800b54c 	.word	0x0800b54c
 8002050:	0800b560 	.word	0x0800b560
 8002054:	0800b574 	.word	0x0800b574
 8002058:	0800b5a4 	.word	0x0800b5a4
 800205c:	0800b5d4 	.word	0x0800b5d4
 8002060:	0800b600 	.word	0x0800b600
 8002064:	0800b62c 	.word	0x0800b62c
 8002068:	0800b654 	.word	0x0800b654
 800206c:	0800b67c 	.word	0x0800b67c
 8002070:	0800b698 	.word	0x0800b698
 8002074:	0800b6b4 	.word	0x0800b6b4
 8002078:	0800b6e8 	.word	0x0800b6e8

0800207c <MPU_9255_isDataReady>:

uint8_t MPU_9255_isDataReady(MPU_9255_t *hmpu){
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  return readByte(hmpu,hmpu->addr, INT_STATUS) & 0x01;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800208a:	223a      	movs	r2, #58	; 0x3a
 800208c:	4619      	mov	r1, r3
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe fc2c 	bl	80008ec <readByte>
 8002094:	4603      	mov	r3, r0
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	b2db      	uxtb	r3, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <MPU_9255_delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MPU_9255_delay(uint32_t ms)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 fe43 	bl	8002d38 <HAL_Delay>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <nmpu1_i2c_read>:
uint8_t nmpu1_i2c_read(uint16_t DevAddress, uint8_t *pData, uint16_t size)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	4603      	mov	r3, r0
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	80fb      	strh	r3, [r7, #6]
 80020c8:	4613      	mov	r3, r2
 80020ca:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Master_Receive(&hi2c1, DevAddress, pData, size, 100);
 80020cc:	88ba      	ldrh	r2, [r7, #4]
 80020ce:	88f9      	ldrh	r1, [r7, #6]
 80020d0:	2364      	movs	r3, #100	; 0x64
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	4803      	ldr	r0, [pc, #12]	; (80020e8 <nmpu1_i2c_read+0x2c>)
 80020da:	f001 facd 	bl	8003678 <HAL_I2C_Master_Receive>
 80020de:	4603      	mov	r3, r0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	2000029c 	.word	0x2000029c

080020ec <nmpu1_i2c_write>:
uint8_t nmpu1_i2c_write(uint16_t DevAddress, uint8_t *pData, uint16_t size)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	4603      	mov	r3, r0
 80020f4:	6039      	str	r1, [r7, #0]
 80020f6:	80fb      	strh	r3, [r7, #6]
 80020f8:	4613      	mov	r3, r2
 80020fa:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData, size, 100);
 80020fc:	88ba      	ldrh	r2, [r7, #4]
 80020fe:	88f9      	ldrh	r1, [r7, #6]
 8002100:	2364      	movs	r3, #100	; 0x64
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	4613      	mov	r3, r2
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	4803      	ldr	r0, [pc, #12]	; (8002118 <nmpu1_i2c_write+0x2c>)
 800210a:	f001 f9c1 	bl	8003490 <HAL_I2C_Master_Transmit>
 800210e:	4603      	mov	r3, r0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	2000029c 	.word	0x2000029c
 800211c:	00000000 	.word	0x00000000

08002120 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002122:	b09d      	sub	sp, #116	; 0x74
 8002124:	af04      	add	r7, sp, #16
    int32_t timeout;
    /* USER CODE END Boot_Mode_Sequence_0 */

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /* Wait until CPU2 boots and enters in stop mode or timeout*/
    timeout = 0xFFFF;
 8002126:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800212a:	65fb      	str	r3, [r7, #92]	; 0x5c
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 800212c:	bf00      	nop
 800212e:	4b7c      	ldr	r3, [pc, #496]	; (8002320 <main+0x200>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d004      	beq.n	8002144 <main+0x24>
 800213a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800213c:	1e5a      	subs	r2, r3, #1
 800213e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002140:	2b00      	cmp	r3, #0
 8002142:	dcf4      	bgt.n	800212e <main+0xe>
        ;
    if (timeout < 0) {
 8002144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002146:	2b00      	cmp	r3, #0
 8002148:	da01      	bge.n	800214e <main+0x2e>
        Error_Handler();
 800214a:	f000 fb87 	bl	800285c <Error_Handler>
    }
    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800214e:	f000 fd61 	bl	8002c14 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8002152:	f000 f8f9 	bl	8002348 <SystemClock_Config>
    /* USER CODE BEGIN Boot_Mode_Sequence_2 */
    /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
    HSEM notification */
    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 8002156:	4b72      	ldr	r3, [pc, #456]	; (8002320 <main+0x200>)
 8002158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215c:	4a70      	ldr	r2, [pc, #448]	; (8002320 <main+0x200>)
 800215e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002162:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002166:	4b6e      	ldr	r3, [pc, #440]	; (8002320 <main+0x200>)
 8002168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
    /*Take HSEM */
    HAL_HSEM_FastTake(HSEM_ID_0);
 8002174:	2000      	movs	r0, #0
 8002176:	f001 f8cd 	bl	8003314 <HAL_HSEM_FastTake>
    /*Release HSEM in order to notify the CPU2(CM4)*/
    HAL_HSEM_Release(HSEM_ID_0, 0);
 800217a:	2100      	movs	r1, #0
 800217c:	2000      	movs	r0, #0
 800217e:	f001 f8e3 	bl	8003348 <HAL_HSEM_Release>
    /* wait until CPU2 wakes up from stop mode */
    timeout = 0xFFFF;
 8002182:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002186:	65fb      	str	r3, [r7, #92]	; 0x5c
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8002188:	bf00      	nop
 800218a:	4b65      	ldr	r3, [pc, #404]	; (8002320 <main+0x200>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d104      	bne.n	80021a0 <main+0x80>
 8002196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002198:	1e5a      	subs	r2, r3, #1
 800219a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800219c:	2b00      	cmp	r3, #0
 800219e:	dcf4      	bgt.n	800218a <main+0x6a>
        ;
    if (timeout < 0) {
 80021a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	da01      	bge.n	80021aa <main+0x8a>
        Error_Handler();
 80021a6:	f000 fb59 	bl	800285c <Error_Handler>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80021aa:	f000 fa5d 	bl	8002668 <MX_GPIO_Init>
    MX_I2C1_Init();
 80021ae:	f000 f981 	bl	80024b4 <MX_I2C1_Init>
    MX_TIM3_Init();
 80021b2:	f000 f9bf 	bl	8002534 <MX_TIM3_Init>
    MX_USART3_UART_Init();
 80021b6:	f000 fa0b 	bl	80025d0 <MX_USART3_UART_Init>
    /* USER CODE BEGIN 2 */
    MPU_9255_t *nmpu = MPU_9255_new(MPU9255_ADDRESS_AD0_1, // AD0為0時的i2c地址
 80021ba:	4b5a      	ldr	r3, [pc, #360]	; (8002324 <main+0x204>)
 80021bc:	9303      	str	r3, [sp, #12]
 80021be:	4b5a      	ldr	r3, [pc, #360]	; (8002328 <main+0x208>)
 80021c0:	9302      	str	r3, [sp, #8]
 80021c2:	2301      	movs	r3, #1
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	2300      	movs	r3, #0
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2301      	movs	r3, #1
 80021cc:	2206      	movs	r2, #6
 80021ce:	2103      	movs	r1, #3
 80021d0:	20d0      	movs	r0, #208	; 0xd0
 80021d2:	f7fe faf7 	bl	80007c4 <MPU_9255_new>
 80021d6:	65b8      	str	r0, [r7, #88]	; 0x58
                                    nmpu1_i2c_read, //前面自己定義好的i2c寫指令
                                    nmpu1_i2c_write //前面自己定義好的i2c讀指令
    );

    // connecting to MPU
    connecting_MPU_9255(nmpu);
 80021d8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80021da:	f000 fb0b 	bl	80027f4 <connecting_MPU_9255>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        /* USER CODE END WHILE */
        HAL_Delay(1000);
 80021de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021e2:	f000 fda9 	bl	8002d38 <HAL_Delay>
        if (MPU_9255_isDataReady(nmpu)) {                // On interrupt, check if data ready interrupt
 80021e6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80021e8:	f7ff ff48 	bl	800207c <MPU_9255_isDataReady>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f5      	beq.n	80021de <main+0xbe>
            MPU_9255_readAccelData(nmpu, &ax, &ay, &az); // Read the accel x/y/z adc values
 80021f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021f6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80021fa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80021fe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002200:	f7fe fcb2 	bl	8000b68 <MPU_9255_readAccelData>
            MPU_9255_readGyroData(nmpu, &gx, &gy, &gz);  // Read the gyro x/y/z adc values
 8002204:	f107 0320 	add.w	r3, r7, #32
 8002208:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800220c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002210:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002212:	f7fe fd10 	bl	8000c36 <MPU_9255_readGyroData>
            MPU_9255_readMagData(nmpu, &mx, &my, &mz);   // Read the mag x/y/z adc values
 8002216:	f107 0308 	add.w	r3, r7, #8
 800221a:	f107 0210 	add.w	r2, r7, #16
 800221e:	f107 0118 	add.w	r1, r7, #24
 8002222:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002224:	f7fe fd6e 	bl	8000d04 <MPU_9255_readMagData>
            temperature = MPU_9255_readTempData(nmpu);   // Read the adc values
 8002228:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800222a:	f7fe fdf9 	bl	8000e20 <MPU_9255_readTempData>
 800222e:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50

            speech_len =
                sprintf(speech_c, " ax = %f, ay = %f, az = %f  mg\n\r", 1000.0f * ax, 1000.0f * ay, 1000.0f * az);
 8002232:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002236:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8002318 <main+0x1f8>
 800223a:	ee27 4b06 	vmul.f64	d4, d7, d6
 800223e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002242:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8002318 <main+0x1f8>
 8002246:	ee27 7b06 	vmul.f64	d7, d7, d6
 800224a:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 800224e:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8002318 <main+0x1f8>
 8002252:	ee26 6b05 	vmul.f64	d6, d6, d5
 8002256:	ed8d 6b02 	vstr	d6, [sp, #8]
 800225a:	ed8d 7b00 	vstr	d7, [sp]
 800225e:	ec53 2b14 	vmov	r2, r3, d4
 8002262:	4932      	ldr	r1, [pc, #200]	; (800232c <main+0x20c>)
 8002264:	4832      	ldr	r0, [pc, #200]	; (8002330 <main+0x210>)
 8002266:	f006 fb1b 	bl	80088a0 <siprintf>
 800226a:	4602      	mov	r2, r0
            speech_len =
 800226c:	4b31      	ldr	r3, [pc, #196]	; (8002334 <main+0x214>)
 800226e:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart3, speech_c, speech_len, HAL_MAX_DELAY);
 8002270:	4b30      	ldr	r3, [pc, #192]	; (8002334 <main+0x214>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	b29a      	uxth	r2, r3
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
 800227a:	492d      	ldr	r1, [pc, #180]	; (8002330 <main+0x210>)
 800227c:	482e      	ldr	r0, [pc, #184]	; (8002338 <main+0x218>)
 800227e:	f004 fcfd 	bl	8006c7c <HAL_UART_Transmit>

            speech_len = sprintf(speech_c, " gx = %f, gy = %f, gz = %f  deg/s\n\r", gx, gy, gz);
 8002282:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 8002286:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800228a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800228e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8002292:	e9cd 3400 	strd	r3, r4, [sp]
 8002296:	462a      	mov	r2, r5
 8002298:	4633      	mov	r3, r6
 800229a:	4928      	ldr	r1, [pc, #160]	; (800233c <main+0x21c>)
 800229c:	4824      	ldr	r0, [pc, #144]	; (8002330 <main+0x210>)
 800229e:	f006 faff 	bl	80088a0 <siprintf>
 80022a2:	4602      	mov	r2, r0
 80022a4:	4b23      	ldr	r3, [pc, #140]	; (8002334 <main+0x214>)
 80022a6:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart3, speech_c, speech_len, HAL_MAX_DELAY);
 80022a8:	4b22      	ldr	r3, [pc, #136]	; (8002334 <main+0x214>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295
 80022b2:	491f      	ldr	r1, [pc, #124]	; (8002330 <main+0x210>)
 80022b4:	4820      	ldr	r0, [pc, #128]	; (8002338 <main+0x218>)
 80022b6:	f004 fce1 	bl	8006c7c <HAL_UART_Transmit>

            speech_len = sprintf(speech_c, " mx = %f, my = %f, mz = %f  mG\n\r", mx, my, mz);
 80022ba:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 80022be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80022c2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80022c6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80022ca:	e9cd 3400 	strd	r3, r4, [sp]
 80022ce:	462a      	mov	r2, r5
 80022d0:	4633      	mov	r3, r6
 80022d2:	491b      	ldr	r1, [pc, #108]	; (8002340 <main+0x220>)
 80022d4:	4816      	ldr	r0, [pc, #88]	; (8002330 <main+0x210>)
 80022d6:	f006 fae3 	bl	80088a0 <siprintf>
 80022da:	4602      	mov	r2, r0
 80022dc:	4b15      	ldr	r3, [pc, #84]	; (8002334 <main+0x214>)
 80022de:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart3, speech_c, speech_len, HAL_MAX_DELAY);
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <main+0x214>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ea:	4911      	ldr	r1, [pc, #68]	; (8002330 <main+0x210>)
 80022ec:	4812      	ldr	r0, [pc, #72]	; (8002338 <main+0x218>)
 80022ee:	f004 fcc5 	bl	8006c7c <HAL_UART_Transmit>

            speech_len = sprintf(speech_c, " temperature = %f  C\n\r\n\r", temperature);
 80022f2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80022f6:	4913      	ldr	r1, [pc, #76]	; (8002344 <main+0x224>)
 80022f8:	480d      	ldr	r0, [pc, #52]	; (8002330 <main+0x210>)
 80022fa:	f006 fad1 	bl	80088a0 <siprintf>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <main+0x214>)
 8002302:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart3, speech_c, speech_len, HAL_MAX_DELAY);
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <main+0x214>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	b29a      	uxth	r2, r3
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
 800230e:	4908      	ldr	r1, [pc, #32]	; (8002330 <main+0x210>)
 8002310:	4809      	ldr	r0, [pc, #36]	; (8002338 <main+0x218>)
 8002312:	f004 fcb3 	bl	8006c7c <HAL_UART_Transmit>
        HAL_Delay(1000);
 8002316:	e762      	b.n	80021de <main+0xbe>
 8002318:	00000000 	.word	0x00000000
 800231c:	408f4000 	.word	0x408f4000
 8002320:	58024400 	.word	0x58024400
 8002324:	080020ed 	.word	0x080020ed
 8002328:	080020bd 	.word	0x080020bd
 800232c:	0800b724 	.word	0x0800b724
 8002330:	20000334 	.word	0x20000334
 8002334:	2000020c 	.word	0x2000020c
 8002338:	20000210 	.word	0x20000210
 800233c:	0800b748 	.word	0x0800b748
 8002340:	0800b76c 	.word	0x0800b76c
 8002344:	0800b790 	.word	0x0800b790

08002348 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b0cc      	sub	sp, #304	; 0x130
 800234c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800234e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002352:	224c      	movs	r2, #76	; 0x4c
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f005 fd90 	bl	8007e7c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800235c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002360:	2220      	movs	r2, #32
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f005 fd89 	bl	8007e7c <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800236a:	f107 0308 	add.w	r3, r7, #8
 800236e:	4618      	mov	r0, r3
 8002370:	23bc      	movs	r3, #188	; 0xbc
 8002372:	461a      	mov	r2, r3
 8002374:	2100      	movs	r1, #0
 8002376:	f005 fd81 	bl	8007e7c <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800237a:	2004      	movs	r0, #4
 800237c:	f001 fcea 	bl	8003d54 <HAL_PWREx_ConfigSupply>
    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002380:	1d3b      	adds	r3, r7, #4
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	4b49      	ldr	r3, [pc, #292]	; (80024ac <SystemClock_Config+0x164>)
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	4a48      	ldr	r2, [pc, #288]	; (80024ac <SystemClock_Config+0x164>)
 800238c:	f023 0301 	bic.w	r3, r3, #1
 8002390:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002392:	4b46      	ldr	r3, [pc, #280]	; (80024ac <SystemClock_Config+0x164>)
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	f003 0201 	and.w	r2, r3, #1
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	4b44      	ldr	r3, [pc, #272]	; (80024b0 <SystemClock_Config+0x168>)
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	4a43      	ldr	r2, [pc, #268]	; (80024b0 <SystemClock_Config+0x168>)
 80023a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023a8:	6193      	str	r3, [r2, #24]
 80023aa:	4b41      	ldr	r3, [pc, #260]	; (80024b0 <SystemClock_Config+0x168>)
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	681b      	ldr	r3, [r3, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80023ba:	bf00      	nop
 80023bc:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <SystemClock_Config+0x168>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023c8:	d1f8      	bne.n	80023bc <SystemClock_Config+0x74>
    }
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023ca:	2302      	movs	r3, #2
 80023cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80023d0:	2301      	movs	r3, #1
 80023d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023d6:	2340      	movs	r3, #64	; 0x40
 80023d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023dc:	2302      	movs	r3, #2
 80023de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    RCC_OscInitStruct.PLL.PLLM = 4;
 80023e8:	2304      	movs	r3, #4
 80023ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    RCC_OscInitStruct.PLL.PLLN = 50;
 80023ee:	2332      	movs	r3, #50	; 0x32
 80023f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    RCC_OscInitStruct.PLL.PLLP = 2;
 80023f4:	2302      	movs	r3, #2
 80023f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    RCC_OscInitStruct.PLL.PLLQ = 2;
 80023fa:	2302      	movs	r3, #2
 80023fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    RCC_OscInitStruct.PLL.PLLR = 2;
 8002400:	2302      	movs	r3, #2
 8002402:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002406:	230c      	movs	r3, #12
 8002408:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002418:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800241c:	4618      	mov	r0, r3
 800241e:	f001 fcf3 	bl	8003e08 <HAL_RCC_OscConfig>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <SystemClock_Config+0xe4>
        Error_Handler();
 8002428:	f000 fa18 	bl	800285c <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 800242c:	233f      	movs	r3, #63	; 0x3f
 800242e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002432:	2303      	movs	r3, #3
 8002434:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002438:	2300      	movs	r3, #0
 800243a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800243e:	2308      	movs	r3, #8
 8002440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002444:	2340      	movs	r3, #64	; 0x40
 8002446:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 800244a:	2350      	movs	r3, #80	; 0x50
 800244c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002454:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002458:	2340      	movs	r3, #64	; 0x40
 800245a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800245e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002462:	2102      	movs	r1, #2
 8002464:	4618      	mov	r0, r3
 8002466:	f002 f8df 	bl	8004628 <HAL_RCC_ClockConfig>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <SystemClock_Config+0x12c>
        Error_Handler();
 8002470:	f000 f9f4 	bl	800285c <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_I2C1;
 8002474:	f107 0308 	add.w	r3, r7, #8
 8002478:	220a      	movs	r2, #10
 800247a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800247c:	f107 0308 	add.w	r3, r7, #8
 8002480:	2200      	movs	r2, #0
 8002482:	675a      	str	r2, [r3, #116]	; 0x74
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002484:	f107 0308 	add.w	r3, r7, #8
 8002488:	2200      	movs	r2, #0
 800248a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800248e:	f107 0308 	add.w	r3, r7, #8
 8002492:	4618      	mov	r0, r3
 8002494:	f002 fc4c 	bl	8004d30 <HAL_RCCEx_PeriphCLKConfig>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <SystemClock_Config+0x15a>
        Error_Handler();
 800249e:	f000 f9dd 	bl	800285c <Error_Handler>
    }
}
 80024a2:	bf00      	nop
 80024a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	58000400 	.word	0x58000400
 80024b0:	58024800 	.word	0x58024800

080024b4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 80024b8:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <MX_I2C1_Init+0x74>)
 80024ba:	4a1c      	ldr	r2, [pc, #112]	; (800252c <MX_I2C1_Init+0x78>)
 80024bc:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x00C0EAFF;
 80024be:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <MX_I2C1_Init+0x74>)
 80024c0:	4a1b      	ldr	r2, [pc, #108]	; (8002530 <MX_I2C1_Init+0x7c>)
 80024c2:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 80024c4:	4b18      	ldr	r3, [pc, #96]	; (8002528 <MX_I2C1_Init+0x74>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ca:	4b17      	ldr	r3, [pc, #92]	; (8002528 <MX_I2C1_Init+0x74>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024d0:	4b15      	ldr	r3, [pc, #84]	; (8002528 <MX_I2C1_Init+0x74>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 80024d6:	4b14      	ldr	r3, [pc, #80]	; (8002528 <MX_I2C1_Init+0x74>)
 80024d8:	2200      	movs	r2, #0
 80024da:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <MX_I2C1_Init+0x74>)
 80024de:	2200      	movs	r2, #0
 80024e0:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024e2:	4b11      	ldr	r3, [pc, #68]	; (8002528 <MX_I2C1_Init+0x74>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024e8:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <MX_I2C1_Init+0x74>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80024ee:	480e      	ldr	r0, [pc, #56]	; (8002528 <MX_I2C1_Init+0x74>)
 80024f0:	f000 ff3e 	bl	8003370 <HAL_I2C_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_I2C1_Init+0x4a>
        Error_Handler();
 80024fa:	f000 f9af 	bl	800285c <Error_Handler>
    }
    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80024fe:	2100      	movs	r1, #0
 8002500:	4809      	ldr	r0, [pc, #36]	; (8002528 <MX_I2C1_Init+0x74>)
 8002502:	f001 fb8f 	bl	8003c24 <HAL_I2CEx_ConfigAnalogFilter>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_I2C1_Init+0x5c>
        Error_Handler();
 800250c:	f000 f9a6 	bl	800285c <Error_Handler>
    }
    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8002510:	2100      	movs	r1, #0
 8002512:	4805      	ldr	r0, [pc, #20]	; (8002528 <MX_I2C1_Init+0x74>)
 8002514:	f001 fbd1 	bl	8003cba <HAL_I2CEx_ConfigDigitalFilter>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_I2C1_Init+0x6e>
        Error_Handler();
 800251e:	f000 f99d 	bl	800285c <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	2000029c 	.word	0x2000029c
 800252c:	40005400 	.word	0x40005400
 8002530:	00c0eaff 	.word	0x00c0eaff

08002534 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800253a:	f107 0310 	add.w	r3, r7, #16
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	609a      	str	r2, [r3, #8]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8002552:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <MX_TIM3_Init+0x94>)
 8002554:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <MX_TIM3_Init+0x98>)
 8002556:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 100 - 1;
 8002558:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <MX_TIM3_Init+0x94>)
 800255a:	2263      	movs	r2, #99	; 0x63
 800255c:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <MX_TIM3_Init+0x94>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 1000 - 1;
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <MX_TIM3_Init+0x94>)
 8002566:	f240 32e7 	movw	r2, #999	; 0x3e7
 800256a:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800256c:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <MX_TIM3_Init+0x94>)
 800256e:	2200      	movs	r2, #0
 8002570:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <MX_TIM3_Init+0x94>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002578:	4813      	ldr	r0, [pc, #76]	; (80025c8 <MX_TIM3_Init+0x94>)
 800257a:	f003 fed9 	bl	8006330 <HAL_TIM_Base_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_TIM3_Init+0x54>
        Error_Handler();
 8002584:	f000 f96a 	bl	800285c <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800258c:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800258e:	f107 0310 	add.w	r3, r7, #16
 8002592:	4619      	mov	r1, r3
 8002594:	480c      	ldr	r0, [pc, #48]	; (80025c8 <MX_TIM3_Init+0x94>)
 8002596:	f004 f841 	bl	800661c <HAL_TIM_ConfigClockSource>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM3_Init+0x70>
        Error_Handler();
 80025a0:	f000 f95c 	bl	800285c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a4:	2300      	movs	r3, #0
 80025a6:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	4619      	mov	r1, r3
 80025b0:	4805      	ldr	r0, [pc, #20]	; (80025c8 <MX_TIM3_Init+0x94>)
 80025b2:	f004 fa6d 	bl	8006a90 <HAL_TIMEx_MasterConfigSynchronization>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM3_Init+0x8c>
        Error_Handler();
 80025bc:	f000 f94e 	bl	800285c <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
}
 80025c0:	bf00      	nop
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	200002e8 	.word	0x200002e8
 80025cc:	40000400 	.word	0x40000400

080025d0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
    /* USER CODE END USART3_Init 0 */

    /* USER CODE BEGIN USART3_Init 1 */

    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 80025d4:	4b22      	ldr	r3, [pc, #136]	; (8002660 <MX_USART3_UART_Init+0x90>)
 80025d6:	4a23      	ldr	r2, [pc, #140]	; (8002664 <MX_USART3_UART_Init+0x94>)
 80025d8:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <MX_USART3_UART_Init+0x90>)
 80025dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025e0:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025e2:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <MX_USART3_UART_Init+0x90>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 80025e8:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <MX_USART3_UART_Init+0x90>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 80025ee:	4b1c      	ldr	r3, [pc, #112]	; (8002660 <MX_USART3_UART_Init+0x90>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 80025f4:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <MX_USART3_UART_Init+0x90>)
 80025f6:	220c      	movs	r2, #12
 80025f8:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025fa:	4b19      	ldr	r3, [pc, #100]	; (8002660 <MX_USART3_UART_Init+0x90>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002600:	4b17      	ldr	r3, [pc, #92]	; (8002660 <MX_USART3_UART_Init+0x90>)
 8002602:	2200      	movs	r2, #0
 8002604:	61da      	str	r2, [r3, #28]
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002606:	4b16      	ldr	r3, [pc, #88]	; (8002660 <MX_USART3_UART_Init+0x90>)
 8002608:	2200      	movs	r2, #0
 800260a:	621a      	str	r2, [r3, #32]
    huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <MX_USART3_UART_Init+0x90>)
 800260e:	2200      	movs	r2, #0
 8002610:	625a      	str	r2, [r3, #36]	; 0x24
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <MX_USART3_UART_Init+0x90>)
 8002614:	2200      	movs	r2, #0
 8002616:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002618:	4811      	ldr	r0, [pc, #68]	; (8002660 <MX_USART3_UART_Init+0x90>)
 800261a:	f004 fadf 	bl	8006bdc <HAL_UART_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_USART3_UART_Init+0x58>
        Error_Handler();
 8002624:	f000 f91a 	bl	800285c <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8002628:	2100      	movs	r1, #0
 800262a:	480d      	ldr	r0, [pc, #52]	; (8002660 <MX_USART3_UART_Init+0x90>)
 800262c:	f005 fb0f 	bl	8007c4e <HAL_UARTEx_SetTxFifoThreshold>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_USART3_UART_Init+0x6a>
        Error_Handler();
 8002636:	f000 f911 	bl	800285c <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 800263a:	2100      	movs	r1, #0
 800263c:	4808      	ldr	r0, [pc, #32]	; (8002660 <MX_USART3_UART_Init+0x90>)
 800263e:	f005 fb44 	bl	8007cca <HAL_UARTEx_SetRxFifoThreshold>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_USART3_UART_Init+0x7c>
        Error_Handler();
 8002648:	f000 f908 	bl	800285c <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 800264c:	4804      	ldr	r0, [pc, #16]	; (8002660 <MX_USART3_UART_Init+0x90>)
 800264e:	f005 fac5 	bl	8007bdc <HAL_UARTEx_DisableFifoMode>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_USART3_UART_Init+0x8c>
        Error_Handler();
 8002658:	f000 f900 	bl	800285c <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */
}
 800265c:	bf00      	nop
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20000210 	.word	0x20000210
 8002664:	40004800 	.word	0x40004800

08002668 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08c      	sub	sp, #48	; 0x30
 800266c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266e:	f107 031c 	add.w	r3, r7, #28
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	60da      	str	r2, [r3, #12]
 800267c:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800267e:	4b58      	ldr	r3, [pc, #352]	; (80027e0 <MX_GPIO_Init+0x178>)
 8002680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002684:	4a56      	ldr	r2, [pc, #344]	; (80027e0 <MX_GPIO_Init+0x178>)
 8002686:	f043 0304 	orr.w	r3, r3, #4
 800268a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800268e:	4b54      	ldr	r3, [pc, #336]	; (80027e0 <MX_GPIO_Init+0x178>)
 8002690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800269c:	4b50      	ldr	r3, [pc, #320]	; (80027e0 <MX_GPIO_Init+0x178>)
 800269e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a2:	4a4f      	ldr	r2, [pc, #316]	; (80027e0 <MX_GPIO_Init+0x178>)
 80026a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026ac:	4b4c      	ldr	r3, [pc, #304]	; (80027e0 <MX_GPIO_Init+0x178>)
 80026ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ba:	4b49      	ldr	r3, [pc, #292]	; (80027e0 <MX_GPIO_Init+0x178>)
 80026bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c0:	4a47      	ldr	r2, [pc, #284]	; (80027e0 <MX_GPIO_Init+0x178>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026ca:	4b45      	ldr	r3, [pc, #276]	; (80027e0 <MX_GPIO_Init+0x178>)
 80026cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d8:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <MX_GPIO_Init+0x178>)
 80026da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026de:	4a40      	ldr	r2, [pc, #256]	; (80027e0 <MX_GPIO_Init+0x178>)
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026e8:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <MX_GPIO_Init+0x178>)
 80026ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026f6:	4b3a      	ldr	r3, [pc, #232]	; (80027e0 <MX_GPIO_Init+0x178>)
 80026f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026fc:	4a38      	ldr	r2, [pc, #224]	; (80027e0 <MX_GPIO_Init+0x178>)
 80026fe:	f043 0308 	orr.w	r3, r3, #8
 8002702:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002706:	4b36      	ldr	r3, [pc, #216]	; (80027e0 <MX_GPIO_Init+0x178>)
 8002708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002714:	4b32      	ldr	r3, [pc, #200]	; (80027e0 <MX_GPIO_Init+0x178>)
 8002716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800271a:	4a31      	ldr	r2, [pc, #196]	; (80027e0 <MX_GPIO_Init+0x178>)
 800271c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002720:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002724:	4b2e      	ldr	r3, [pc, #184]	; (80027e0 <MX_GPIO_Init+0x178>)
 8002726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pins : PC1 PC4 PC5 */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8002732:	2332      	movs	r3, #50	; 0x32
 8002734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273e:	2300      	movs	r3, #0
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002742:	230b      	movs	r3, #11
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002746:	f107 031c 	add.w	r3, r7, #28
 800274a:	4619      	mov	r1, r3
 800274c:	4825      	ldr	r0, [pc, #148]	; (80027e4 <MX_GPIO_Init+0x17c>)
 800274e:	f000 fc31 	bl	8002fb4 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA1 PA2 PA7 */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8002752:	2386      	movs	r3, #134	; 0x86
 8002754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275e:	2300      	movs	r3, #0
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002762:	230b      	movs	r3, #11
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002766:	f107 031c 	add.w	r3, r7, #28
 800276a:	4619      	mov	r1, r3
 800276c:	481e      	ldr	r0, [pc, #120]	; (80027e8 <MX_GPIO_Init+0x180>)
 800276e:	f000 fc21 	bl	8002fb4 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB13 */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002784:	230b      	movs	r3, #11
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002788:	f107 031c 	add.w	r3, r7, #28
 800278c:	4619      	mov	r1, r3
 800278e:	4817      	ldr	r0, [pc, #92]	; (80027ec <MX_GPIO_Init+0x184>)
 8002790:	f000 fc10 	bl	8002fb4 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA8 PA11 PA12 */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12;
 8002794:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80027a6:	230a      	movs	r3, #10
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027aa:	f107 031c 	add.w	r3, r7, #28
 80027ae:	4619      	mov	r1, r3
 80027b0:	480d      	ldr	r0, [pc, #52]	; (80027e8 <MX_GPIO_Init+0x180>)
 80027b2:	f000 fbff 	bl	8002fb4 <HAL_GPIO_Init>

    /*Configure GPIO pins : PG11 PG13 */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 80027b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80027ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027bc:	2302      	movs	r3, #2
 80027be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027c8:	230b      	movs	r3, #11
 80027ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027cc:	f107 031c 	add.w	r3, r7, #28
 80027d0:	4619      	mov	r1, r3
 80027d2:	4807      	ldr	r0, [pc, #28]	; (80027f0 <MX_GPIO_Init+0x188>)
 80027d4:	f000 fbee 	bl	8002fb4 <HAL_GPIO_Init>
}
 80027d8:	bf00      	nop
 80027da:	3730      	adds	r7, #48	; 0x30
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	58024400 	.word	0x58024400
 80027e4:	58020800 	.word	0x58020800
 80027e8:	58020000 	.word	0x58020000
 80027ec:	58020400 	.word	0x58020400
 80027f0:	58021800 	.word	0x58021800

080027f4 <connecting_MPU_9255>:

/* USER CODE BEGIN 4 */
void connecting_MPU_9255(MPU_9255_t *nmpu)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
    // Read WHO_AM_I register for MPU-9255
    while (1) {
        uint8_t who = MPU_9255_whoami(nmpu);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7fe f8cf 	bl	80009a0 <MPU_9255_whoami>
 8002802:	4603      	mov	r3, r0
 8002804:	73fb      	strb	r3, [r7, #15]

        if (who == 0x73) // WHO_AM_I should always be 0x73
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	2b73      	cmp	r3, #115	; 0x73
 800280a:	d111      	bne.n	8002830 <connecting_MPU_9255+0x3c>
        {
            HAL_UART_Transmit(&huart3, "MPU9255 is online...\\n\r", sizeof("MPU9255 is online...\\n\r") - 1,
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
 8002810:	2217      	movs	r2, #23
 8002812:	490f      	ldr	r1, [pc, #60]	; (8002850 <connecting_MPU_9255+0x5c>)
 8002814:	480f      	ldr	r0, [pc, #60]	; (8002854 <connecting_MPU_9255+0x60>)
 8002816:	f004 fa31 	bl	8006c7c <HAL_UART_Transmit>
                              HAL_MAX_DELAY);
            HAL_Delay(1000);
 800281a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800281e:	f000 fa8b 	bl	8002d38 <HAL_Delay>

            MPU_9255_initSensor(nmpu);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff fb0a 	bl	8001e3c <MPU_9255_initSensor>
            MPU_9255_printInfo(nmpu);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fb35 	bl	8001e98 <MPU_9255_printInfo>
            break;
 800282e:	e00b      	b.n	8002848 <connecting_MPU_9255+0x54>
        }
        else {

            HAL_UART_Transmit(&huart3, "Could not connect to MPU9255: \n\r",
 8002830:	f04f 33ff 	mov.w	r3, #4294967295
 8002834:	2220      	movs	r2, #32
 8002836:	4908      	ldr	r1, [pc, #32]	; (8002858 <connecting_MPU_9255+0x64>)
 8002838:	4806      	ldr	r0, [pc, #24]	; (8002854 <connecting_MPU_9255+0x60>)
 800283a:	f004 fa1f 	bl	8006c7c <HAL_UART_Transmit>
                              sizeof("Could not connect to MPU9255: \n\r") - 1, HAL_MAX_DELAY);

            HAL_Delay(1000);
 800283e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002842:	f000 fa79 	bl	8002d38 <HAL_Delay>
    while (1) {
 8002846:	e7d9      	b.n	80027fc <connecting_MPU_9255+0x8>
        }
    }
}
 8002848:	bf00      	nop
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	0800b7ac 	.word	0x0800b7ac
 8002854:	20000210 	.word	0x20000210
 8002858:	0800b7c4 	.word	0x0800b7c4

0800285c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002860:	b672      	cpsid	i
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8002862:	e7fe      	b.n	8002862 <Error_Handler+0x6>

08002864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286a:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <HAL_MspInit+0x30>)
 800286c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002870:	4a08      	ldr	r2, [pc, #32]	; (8002894 <HAL_MspInit+0x30>)
 8002872:	f043 0302 	orr.w	r3, r3, #2
 8002876:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_MspInit+0x30>)
 800287c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	58024400 	.word	0x58024400

08002898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	; 0x28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	f107 0314 	add.w	r3, r7, #20
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a1a      	ldr	r2, [pc, #104]	; (8002920 <HAL_I2C_MspInit+0x88>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d12d      	bne.n	8002916 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ba:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <HAL_I2C_MspInit+0x8c>)
 80028bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c0:	4a18      	ldr	r2, [pc, #96]	; (8002924 <HAL_I2C_MspInit+0x8c>)
 80028c2:	f043 0302 	orr.w	r3, r3, #2
 80028c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028ca:	4b16      	ldr	r3, [pc, #88]	; (8002924 <HAL_I2C_MspInit+0x8c>)
 80028cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028d8:	23c0      	movs	r3, #192	; 0xc0
 80028da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028dc:	2312      	movs	r3, #18
 80028de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028e0:	2301      	movs	r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028e4:	2302      	movs	r3, #2
 80028e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028e8:	2304      	movs	r3, #4
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ec:	f107 0314 	add.w	r3, r7, #20
 80028f0:	4619      	mov	r1, r3
 80028f2:	480d      	ldr	r0, [pc, #52]	; (8002928 <HAL_I2C_MspInit+0x90>)
 80028f4:	f000 fb5e 	bl	8002fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_I2C_MspInit+0x8c>)
 80028fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028fe:	4a09      	ldr	r2, [pc, #36]	; (8002924 <HAL_I2C_MspInit+0x8c>)
 8002900:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002904:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_I2C_MspInit+0x8c>)
 800290a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800290e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002916:	bf00      	nop
 8002918:	3728      	adds	r7, #40	; 0x28
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40005400 	.word	0x40005400
 8002924:	58024400 	.word	0x58024400
 8002928:	58020400 	.word	0x58020400

0800292c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0e      	ldr	r2, [pc, #56]	; (8002974 <HAL_TIM_Base_MspInit+0x48>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d116      	bne.n	800296c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800293e:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <HAL_TIM_Base_MspInit+0x4c>)
 8002940:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002944:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <HAL_TIM_Base_MspInit+0x4c>)
 8002946:	f043 0302 	orr.w	r3, r3, #2
 800294a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800294e:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <HAL_TIM_Base_MspInit+0x4c>)
 8002950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800295c:	2200      	movs	r2, #0
 800295e:	2100      	movs	r1, #0
 8002960:	201d      	movs	r0, #29
 8002962:	f000 faf2 	bl	8002f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002966:	201d      	movs	r0, #29
 8002968:	f000 fb09 	bl	8002f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40000400 	.word	0x40000400
 8002978:	58024400 	.word	0x58024400

0800297c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08a      	sub	sp, #40	; 0x28
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1a      	ldr	r2, [pc, #104]	; (8002a04 <HAL_UART_MspInit+0x88>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d12e      	bne.n	80029fc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800299e:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <HAL_UART_MspInit+0x8c>)
 80029a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029a4:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <HAL_UART_MspInit+0x8c>)
 80029a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029ae:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <HAL_UART_MspInit+0x8c>)
 80029b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029bc:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <HAL_UART_MspInit+0x8c>)
 80029be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c2:	4a11      	ldr	r2, [pc, #68]	; (8002a08 <HAL_UART_MspInit+0x8c>)
 80029c4:	f043 0308 	orr.w	r3, r3, #8
 80029c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029cc:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <HAL_UART_MspInit+0x8c>)
 80029ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80029da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e0:	2302      	movs	r3, #2
 80029e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e8:	2300      	movs	r3, #0
 80029ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029ec:	2307      	movs	r3, #7
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	4619      	mov	r1, r3
 80029f6:	4805      	ldr	r0, [pc, #20]	; (8002a0c <HAL_UART_MspInit+0x90>)
 80029f8:	f000 fadc 	bl	8002fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029fc:	bf00      	nop
 80029fe:	3728      	adds	r7, #40	; 0x28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40004800 	.word	0x40004800
 8002a08:	58024400 	.word	0x58024400
 8002a0c:	58020c00 	.word	0x58020c00

08002a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <NMI_Handler+0x4>

08002a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a1a:	e7fe      	b.n	8002a1a <HardFault_Handler+0x4>

08002a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a20:	e7fe      	b.n	8002a20 <MemManage_Handler+0x4>

08002a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a26:	e7fe      	b.n	8002a26 <BusFault_Handler+0x4>

08002a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a2c:	e7fe      	b.n	8002a2c <UsageFault_Handler+0x4>

08002a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a5c:	f000 f94c 	bl	8002cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a60:	bf00      	nop
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a68:	4802      	ldr	r0, [pc, #8]	; (8002a74 <TIM3_IRQHandler+0x10>)
 8002a6a:	f003 fcb8 	bl	80063de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200002e8 	.word	0x200002e8

08002a78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	e00a      	b.n	8002aa0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a8a:	f3af 8000 	nop.w
 8002a8e:	4601      	mov	r1, r0
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	60ba      	str	r2, [r7, #8]
 8002a96:	b2ca      	uxtb	r2, r1
 8002a98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	dbf0      	blt.n	8002a8a <_read+0x12>
	}

return len;
 8002aa8:	687b      	ldr	r3, [r7, #4]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b086      	sub	sp, #24
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	e009      	b.n	8002ad8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	60ba      	str	r2, [r7, #8]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	dbf1      	blt.n	8002ac4 <_write+0x12>
	}
	return len;
 8002ae0:	687b      	ldr	r3, [r7, #4]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <_close>:

int _close(int file)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
	return -1;
 8002af2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b12:	605a      	str	r2, [r3, #4]
	return 0;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <_isatty>:

int _isatty(int file)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
	return 1;
 8002b2a:	2301      	movs	r3, #1
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
	return 0;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b5c:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <_sbrk+0x5c>)
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <_sbrk+0x60>)
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b68:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <_sbrk+0x64>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d102      	bne.n	8002b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <_sbrk+0x64>)
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <_sbrk+0x68>)
 8002b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <_sbrk+0x64>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d207      	bcs.n	8002b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b84:	f005 f948 	bl	8007e18 <__errno>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	230c      	movs	r3, #12
 8002b8c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b92:	e009      	b.n	8002ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b94:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <_sbrk+0x64>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <_sbrk+0x64>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	4a05      	ldr	r2, [pc, #20]	; (8002bb8 <_sbrk+0x64>)
 8002ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20020000 	.word	0x20020000
 8002bb4:	00000400 	.word	0x00000400
 8002bb8:	20000200 	.word	0x20000200
 8002bbc:	200003c0 	.word	0x200003c0

08002bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bf8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002bc4:	f7fd fd64 	bl	8000690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002bc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002bca:	e003      	b.n	8002bd4 <LoopCopyDataInit>

08002bcc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002bce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002bd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002bd2:	3104      	adds	r1, #4

08002bd4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002bd4:	480a      	ldr	r0, [pc, #40]	; (8002c00 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002bd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002bda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002bdc:	d3f6      	bcc.n	8002bcc <CopyDataInit>
  ldr  r2, =_sbss
 8002bde:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002be0:	e002      	b.n	8002be8 <LoopFillZerobss>

08002be2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002be2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002be4:	f842 3b04 	str.w	r3, [r2], #4

08002be8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8002bea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bec:	d3f9      	bcc.n	8002be2 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8002bee:	f005 f919 	bl	8007e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bf2:	f7ff fa95 	bl	8002120 <main>
  bx  lr    
 8002bf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bf8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002bfc:	0800bb38 	.word	0x0800bb38
  ldr  r0, =_sdata
 8002c00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c04:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8002c08:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8002c0c:	200003bc 	.word	0x200003bc

08002c10 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c10:	e7fe      	b.n	8002c10 <ADC3_IRQHandler>
	...

08002c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c1a:	2003      	movs	r0, #3
 8002c1c:	f000 f98a 	bl	8002f34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c20:	f001 feb8 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8002c24:	4601      	mov	r1, r0
 8002c26:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <HAL_Init+0x68>)
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	4a13      	ldr	r2, [pc, #76]	; (8002c80 <HAL_Init+0x6c>)
 8002c32:	5cd3      	ldrb	r3, [r2, r3]
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	fa21 f303 	lsr.w	r3, r1, r3
 8002c3c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c3e:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <HAL_Init+0x68>)
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	4a0e      	ldr	r2, [pc, #56]	; (8002c80 <HAL_Init+0x6c>)
 8002c48:	5cd3      	ldrb	r3, [r2, r3]
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
 8002c54:	4a0b      	ldr	r2, [pc, #44]	; (8002c84 <HAL_Init+0x70>)
 8002c56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c58:	4a0b      	ldr	r2, [pc, #44]	; (8002c88 <HAL_Init+0x74>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f000 f814 	bl	8002c8c <HAL_InitTick>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e002      	b.n	8002c74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c6e:	f7ff fdf9 	bl	8002864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	58024400 	.word	0x58024400
 8002c80:	0800b7f8 	.word	0x0800b7f8
 8002c84:	20000004 	.word	0x20000004
 8002c88:	20000000 	.word	0x20000000

08002c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c94:	4b15      	ldr	r3, [pc, #84]	; (8002cec <HAL_InitTick+0x60>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e021      	b.n	8002ce4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ca0:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <HAL_InitTick+0x64>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HAL_InitTick+0x60>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f96f 	bl	8002f9a <HAL_SYSTICK_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e00e      	b.n	8002ce4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b0f      	cmp	r3, #15
 8002cca:	d80a      	bhi.n	8002ce2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd4:	f000 f939 	bl	8002f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cd8:	4a06      	ldr	r2, [pc, #24]	; (8002cf4 <HAL_InitTick+0x68>)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e000      	b.n	8002ce4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	2000000c 	.word	0x2000000c
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	20000008 	.word	0x20000008

08002cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_IncTick+0x20>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	461a      	mov	r2, r3
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_IncTick+0x24>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4413      	add	r3, r2
 8002d08:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <HAL_IncTick+0x24>)
 8002d0a:	6013      	str	r3, [r2, #0]
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	2000000c 	.word	0x2000000c
 8002d1c:	200003b4 	.word	0x200003b4

08002d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return uwTick;
 8002d24:	4b03      	ldr	r3, [pc, #12]	; (8002d34 <HAL_GetTick+0x14>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	200003b4 	.word	0x200003b4

08002d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d40:	f7ff ffee 	bl	8002d20 <HAL_GetTick>
 8002d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d50:	d005      	beq.n	8002d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_Delay+0x40>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d5e:	bf00      	nop
 8002d60:	f7ff ffde 	bl	8002d20 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d8f7      	bhi.n	8002d60 <HAL_Delay+0x28>
  {
  }
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	2000000c 	.word	0x2000000c

08002d7c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <HAL_GetREVID+0x14>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0c1b      	lsrs	r3, r3, #16
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	5c001000 	.word	0x5c001000

08002d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <__NVIC_SetPriorityGrouping+0x40>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002db0:	4013      	ands	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc2:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <__NVIC_SetPriorityGrouping+0x40>)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	60d3      	str	r3, [r2, #12]
}
 8002dc8:	bf00      	nop
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	e000ed00 	.word	0xe000ed00
 8002dd8:	05fa0000 	.word	0x05fa0000

08002ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <__NVIC_GetPriorityGrouping+0x18>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	f003 0307 	and.w	r3, r3, #7
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	db0b      	blt.n	8002e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	f003 021f 	and.w	r2, r3, #31
 8002e10:	4907      	ldr	r1, [pc, #28]	; (8002e30 <__NVIC_EnableIRQ+0x38>)
 8002e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	2001      	movs	r0, #1
 8002e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000e100 	.word	0xe000e100

08002e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	6039      	str	r1, [r7, #0]
 8002e3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	db0a      	blt.n	8002e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	490c      	ldr	r1, [pc, #48]	; (8002e80 <__NVIC_SetPriority+0x4c>)
 8002e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e52:	0112      	lsls	r2, r2, #4
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	440b      	add	r3, r1
 8002e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e5c:	e00a      	b.n	8002e74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	4908      	ldr	r1, [pc, #32]	; (8002e84 <__NVIC_SetPriority+0x50>)
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	3b04      	subs	r3, #4
 8002e6c:	0112      	lsls	r2, r2, #4
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	440b      	add	r3, r1
 8002e72:	761a      	strb	r2, [r3, #24]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000e100 	.word	0xe000e100
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b089      	sub	sp, #36	; 0x24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	bf28      	it	cs
 8002ea6:	2304      	movcs	r3, #4
 8002ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3304      	adds	r3, #4
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	d902      	bls.n	8002eb8 <NVIC_EncodePriority+0x30>
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3b03      	subs	r3, #3
 8002eb6:	e000      	b.n	8002eba <NVIC_EncodePriority+0x32>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	401a      	ands	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eda:	43d9      	mvns	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee0:	4313      	orrs	r3, r2
         );
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3724      	adds	r7, #36	; 0x24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
	...

08002ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f00:	d301      	bcc.n	8002f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f02:	2301      	movs	r3, #1
 8002f04:	e00f      	b.n	8002f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f06:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <SysTick_Config+0x40>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f0e:	210f      	movs	r1, #15
 8002f10:	f04f 30ff 	mov.w	r0, #4294967295
 8002f14:	f7ff ff8e 	bl	8002e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <SysTick_Config+0x40>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f1e:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <SysTick_Config+0x40>)
 8002f20:	2207      	movs	r2, #7
 8002f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	e000e010 	.word	0xe000e010

08002f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff ff29 	bl	8002d94 <__NVIC_SetPriorityGrouping>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	4603      	mov	r3, r0
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f58:	f7ff ff40 	bl	8002ddc <__NVIC_GetPriorityGrouping>
 8002f5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	6978      	ldr	r0, [r7, #20]
 8002f64:	f7ff ff90 	bl	8002e88 <NVIC_EncodePriority>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff ff5f 	bl	8002e34 <__NVIC_SetPriority>
}
 8002f76:	bf00      	nop
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	4603      	mov	r3, r0
 8002f86:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff33 	bl	8002df8 <__NVIC_EnableIRQ>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff ffa4 	bl	8002ef0 <SysTick_Config>
 8002fa8:	4603      	mov	r3, r0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	; 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002fc2:	4b89      	ldr	r3, [pc, #548]	; (80031e8 <HAL_GPIO_Init+0x234>)
 8002fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fc6:	e194      	b.n	80032f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	2101      	movs	r1, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 8186 	beq.w	80032ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d00b      	beq.n	8003000 <HAL_GPIO_Init+0x4c>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d007      	beq.n	8003000 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ff4:	2b11      	cmp	r3, #17
 8002ff6:	d003      	beq.n	8003000 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b12      	cmp	r3, #18
 8002ffe:	d130      	bne.n	8003062 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	2203      	movs	r2, #3
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003036:	2201      	movs	r2, #1
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4013      	ands	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	f003 0201 	and.w	r2, r3, #1
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	2203      	movs	r2, #3
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_Init+0xee>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b12      	cmp	r3, #18
 80030a0:	d123      	bne.n	80030ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	08da      	lsrs	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3208      	adds	r2, #8
 80030aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	220f      	movs	r2, #15
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	691a      	ldr	r2, [r3, #16]
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	08da      	lsrs	r2, r3, #3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3208      	adds	r2, #8
 80030e4:	69b9      	ldr	r1, [r7, #24]
 80030e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	2203      	movs	r2, #3
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f003 0203 	and.w	r2, r3, #3
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80e0 	beq.w	80032ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312c:	4b2f      	ldr	r3, [pc, #188]	; (80031ec <HAL_GPIO_Init+0x238>)
 800312e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003132:	4a2e      	ldr	r2, [pc, #184]	; (80031ec <HAL_GPIO_Init+0x238>)
 8003134:	f043 0302 	orr.w	r3, r3, #2
 8003138:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800313c:	4b2b      	ldr	r3, [pc, #172]	; (80031ec <HAL_GPIO_Init+0x238>)
 800313e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800314a:	4a29      	ldr	r2, [pc, #164]	; (80031f0 <HAL_GPIO_Init+0x23c>)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	089b      	lsrs	r3, r3, #2
 8003150:	3302      	adds	r3, #2
 8003152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	220f      	movs	r2, #15
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a20      	ldr	r2, [pc, #128]	; (80031f4 <HAL_GPIO_Init+0x240>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d052      	beq.n	800321c <HAL_GPIO_Init+0x268>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a1f      	ldr	r2, [pc, #124]	; (80031f8 <HAL_GPIO_Init+0x244>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d031      	beq.n	80031e2 <HAL_GPIO_Init+0x22e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a1e      	ldr	r2, [pc, #120]	; (80031fc <HAL_GPIO_Init+0x248>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d02b      	beq.n	80031de <HAL_GPIO_Init+0x22a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <HAL_GPIO_Init+0x24c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d025      	beq.n	80031da <HAL_GPIO_Init+0x226>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a1c      	ldr	r2, [pc, #112]	; (8003204 <HAL_GPIO_Init+0x250>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01f      	beq.n	80031d6 <HAL_GPIO_Init+0x222>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a1b      	ldr	r2, [pc, #108]	; (8003208 <HAL_GPIO_Init+0x254>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d019      	beq.n	80031d2 <HAL_GPIO_Init+0x21e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a1a      	ldr	r2, [pc, #104]	; (800320c <HAL_GPIO_Init+0x258>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d013      	beq.n	80031ce <HAL_GPIO_Init+0x21a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a19      	ldr	r2, [pc, #100]	; (8003210 <HAL_GPIO_Init+0x25c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00d      	beq.n	80031ca <HAL_GPIO_Init+0x216>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a18      	ldr	r2, [pc, #96]	; (8003214 <HAL_GPIO_Init+0x260>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d007      	beq.n	80031c6 <HAL_GPIO_Init+0x212>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a17      	ldr	r2, [pc, #92]	; (8003218 <HAL_GPIO_Init+0x264>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d101      	bne.n	80031c2 <HAL_GPIO_Init+0x20e>
 80031be:	2309      	movs	r3, #9
 80031c0:	e02d      	b.n	800321e <HAL_GPIO_Init+0x26a>
 80031c2:	230a      	movs	r3, #10
 80031c4:	e02b      	b.n	800321e <HAL_GPIO_Init+0x26a>
 80031c6:	2308      	movs	r3, #8
 80031c8:	e029      	b.n	800321e <HAL_GPIO_Init+0x26a>
 80031ca:	2307      	movs	r3, #7
 80031cc:	e027      	b.n	800321e <HAL_GPIO_Init+0x26a>
 80031ce:	2306      	movs	r3, #6
 80031d0:	e025      	b.n	800321e <HAL_GPIO_Init+0x26a>
 80031d2:	2305      	movs	r3, #5
 80031d4:	e023      	b.n	800321e <HAL_GPIO_Init+0x26a>
 80031d6:	2304      	movs	r3, #4
 80031d8:	e021      	b.n	800321e <HAL_GPIO_Init+0x26a>
 80031da:	2303      	movs	r3, #3
 80031dc:	e01f      	b.n	800321e <HAL_GPIO_Init+0x26a>
 80031de:	2302      	movs	r3, #2
 80031e0:	e01d      	b.n	800321e <HAL_GPIO_Init+0x26a>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e01b      	b.n	800321e <HAL_GPIO_Init+0x26a>
 80031e6:	bf00      	nop
 80031e8:	58000080 	.word	0x58000080
 80031ec:	58024400 	.word	0x58024400
 80031f0:	58000400 	.word	0x58000400
 80031f4:	58020000 	.word	0x58020000
 80031f8:	58020400 	.word	0x58020400
 80031fc:	58020800 	.word	0x58020800
 8003200:	58020c00 	.word	0x58020c00
 8003204:	58021000 	.word	0x58021000
 8003208:	58021400 	.word	0x58021400
 800320c:	58021800 	.word	0x58021800
 8003210:	58021c00 	.word	0x58021c00
 8003214:	58022000 	.word	0x58022000
 8003218:	58022400 	.word	0x58022400
 800321c:	2300      	movs	r3, #0
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	f002 0203 	and.w	r2, r2, #3
 8003224:	0092      	lsls	r2, r2, #2
 8003226:	4093      	lsls	r3, r2
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800322e:	4938      	ldr	r1, [pc, #224]	; (8003310 <HAL_GPIO_Init+0x35c>)
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	089b      	lsrs	r3, r3, #2
 8003234:	3302      	adds	r3, #2
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	43db      	mvns	r3, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80032b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80032be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80032e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	3301      	adds	r3, #1
 80032f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f47f ae63 	bne.w	8002fc8 <HAL_GPIO_Init+0x14>
  }
}
 8003302:	bf00      	nop
 8003304:	3724      	adds	r7, #36	; 0x24
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	58000400 	.word	0x58000400

08003314 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800331c:	4a08      	ldr	r2, [pc, #32]	; (8003340 <HAL_HSEM_FastTake+0x2c>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3320      	adds	r3, #32
 8003322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003326:	4a07      	ldr	r2, [pc, #28]	; (8003344 <HAL_HSEM_FastTake+0x30>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d101      	bne.n	8003330 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	e000      	b.n	8003332 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
}
 8003332:	4618      	mov	r0, r3
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	58026400 	.word	0x58026400
 8003344:	80000300 	.word	0x80000300

08003348 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003352:	4906      	ldr	r1, [pc, #24]	; (800336c <HAL_HSEM_Release+0x24>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	58026400 	.word	0x58026400

08003370 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e07f      	b.n	8003482 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff fa7e 	bl	8002898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2224      	movs	r2, #36	; 0x24
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d107      	bne.n	80033ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	e006      	b.n	80033f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80033f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d104      	bne.n	800340a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003408:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	4b1d      	ldr	r3, [pc, #116]	; (800348c <HAL_I2C_Init+0x11c>)
 8003416:	430b      	orrs	r3, r1
 8003418:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003428:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	ea42 0103 	orr.w	r1, r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	021a      	lsls	r2, r3, #8
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69d9      	ldr	r1, [r3, #28]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1a      	ldr	r2, [r3, #32]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	02008000 	.word	0x02008000

08003490 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af02      	add	r7, sp, #8
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	607a      	str	r2, [r7, #4]
 800349a:	461a      	mov	r2, r3
 800349c:	460b      	mov	r3, r1
 800349e:	817b      	strh	r3, [r7, #10]
 80034a0:	4613      	mov	r3, r2
 80034a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	f040 80da 	bne.w	8003666 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_I2C_Master_Transmit+0x30>
 80034bc:	2302      	movs	r3, #2
 80034be:	e0d3      	b.n	8003668 <HAL_I2C_Master_Transmit+0x1d8>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034c8:	f7ff fc2a 	bl	8002d20 <HAL_GetTick>
 80034cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	2319      	movs	r3, #25
 80034d4:	2201      	movs	r2, #1
 80034d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f9e6 	bl	80038ac <I2C_WaitOnFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0be      	b.n	8003668 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2221      	movs	r2, #33	; 0x21
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2210      	movs	r2, #16
 80034f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	893a      	ldrh	r2, [r7, #8]
 800350a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003516:	b29b      	uxth	r3, r3
 8003518:	2bff      	cmp	r3, #255	; 0xff
 800351a:	d90e      	bls.n	800353a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	22ff      	movs	r2, #255	; 0xff
 8003520:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003526:	b2da      	uxtb	r2, r3
 8003528:	8979      	ldrh	r1, [r7, #10]
 800352a:	4b51      	ldr	r3, [pc, #324]	; (8003670 <HAL_I2C_Master_Transmit+0x1e0>)
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 fb48 	bl	8003bc8 <I2C_TransferConfig>
 8003538:	e06c      	b.n	8003614 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003548:	b2da      	uxtb	r2, r3
 800354a:	8979      	ldrh	r1, [r7, #10]
 800354c:	4b48      	ldr	r3, [pc, #288]	; (8003670 <HAL_I2C_Master_Transmit+0x1e0>)
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 fb37 	bl	8003bc8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800355a:	e05b      	b.n	8003614 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	6a39      	ldr	r1, [r7, #32]
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f9e3 	bl	800392c <I2C_WaitOnTXISFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e07b      	b.n	8003668 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	781a      	ldrb	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d034      	beq.n	8003614 <HAL_I2C_Master_Transmit+0x184>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d130      	bne.n	8003614 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	2200      	movs	r2, #0
 80035ba:	2180      	movs	r1, #128	; 0x80
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f975 	bl	80038ac <I2C_WaitOnFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e04d      	b.n	8003668 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2bff      	cmp	r3, #255	; 0xff
 80035d4:	d90e      	bls.n	80035f4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	22ff      	movs	r2, #255	; 0xff
 80035da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	8979      	ldrh	r1, [r7, #10]
 80035e4:	2300      	movs	r3, #0
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 faeb 	bl	8003bc8 <I2C_TransferConfig>
 80035f2:	e00f      	b.n	8003614 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	b2da      	uxtb	r2, r3
 8003604:	8979      	ldrh	r1, [r7, #10]
 8003606:	2300      	movs	r3, #0
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fada 	bl	8003bc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d19e      	bne.n	800355c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	6a39      	ldr	r1, [r7, #32]
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f9c2 	bl	80039ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e01a      	b.n	8003668 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2220      	movs	r2, #32
 8003638:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_I2C_Master_Transmit+0x1e4>)
 8003646:	400b      	ands	r3, r1
 8003648:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	e000      	b.n	8003668 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003666:	2302      	movs	r3, #2
  }
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	80002000 	.word	0x80002000
 8003674:	fe00e800 	.word	0xfe00e800

08003678 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	461a      	mov	r2, r3
 8003684:	460b      	mov	r3, r1
 8003686:	817b      	strh	r3, [r7, #10]
 8003688:	4613      	mov	r3, r2
 800368a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b20      	cmp	r3, #32
 8003696:	f040 80db 	bne.w	8003850 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_I2C_Master_Receive+0x30>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e0d4      	b.n	8003852 <HAL_I2C_Master_Receive+0x1da>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036b0:	f7ff fb36 	bl	8002d20 <HAL_GetTick>
 80036b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	2319      	movs	r3, #25
 80036bc:	2201      	movs	r2, #1
 80036be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f8f2 	bl	80038ac <I2C_WaitOnFlagUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e0bf      	b.n	8003852 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2222      	movs	r2, #34	; 0x22
 80036d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2210      	movs	r2, #16
 80036de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	893a      	ldrh	r2, [r7, #8]
 80036f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2bff      	cmp	r3, #255	; 0xff
 8003702:	d90e      	bls.n	8003722 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	22ff      	movs	r2, #255	; 0xff
 8003708:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370e:	b2da      	uxtb	r2, r3
 8003710:	8979      	ldrh	r1, [r7, #10]
 8003712:	4b52      	ldr	r3, [pc, #328]	; (800385c <HAL_I2C_Master_Receive+0x1e4>)
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 fa54 	bl	8003bc8 <I2C_TransferConfig>
 8003720:	e06d      	b.n	80037fe <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003730:	b2da      	uxtb	r2, r3
 8003732:	8979      	ldrh	r1, [r7, #10]
 8003734:	4b49      	ldr	r3, [pc, #292]	; (800385c <HAL_I2C_Master_Receive+0x1e4>)
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 fa43 	bl	8003bc8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003742:	e05c      	b.n	80037fe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	6a39      	ldr	r1, [r7, #32]
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f96b 	bl	8003a24 <I2C_WaitOnRXNEFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e07c      	b.n	8003852 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d034      	beq.n	80037fe <HAL_I2C_Master_Receive+0x186>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003798:	2b00      	cmp	r3, #0
 800379a:	d130      	bne.n	80037fe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	2200      	movs	r2, #0
 80037a4:	2180      	movs	r1, #128	; 0x80
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f880 	bl	80038ac <I2C_WaitOnFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e04d      	b.n	8003852 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2bff      	cmp	r3, #255	; 0xff
 80037be:	d90e      	bls.n	80037de <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	22ff      	movs	r2, #255	; 0xff
 80037c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	8979      	ldrh	r1, [r7, #10]
 80037ce:	2300      	movs	r3, #0
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f9f6 	bl	8003bc8 <I2C_TransferConfig>
 80037dc:	e00f      	b.n	80037fe <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	8979      	ldrh	r1, [r7, #10]
 80037f0:	2300      	movs	r3, #0
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f9e5 	bl	8003bc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003802:	b29b      	uxth	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d19d      	bne.n	8003744 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	6a39      	ldr	r1, [r7, #32]
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f8cd 	bl	80039ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e01a      	b.n	8003852 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2220      	movs	r2, #32
 8003822:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6859      	ldr	r1, [r3, #4]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <HAL_I2C_Master_Receive+0x1e8>)
 8003830:	400b      	ands	r3, r1
 8003832:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	e000      	b.n	8003852 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003850:	2302      	movs	r3, #2
  }
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	80002400 	.word	0x80002400
 8003860:	fe00e800 	.word	0xfe00e800

08003864 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b02      	cmp	r3, #2
 8003878:	d103      	bne.n	8003882 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2200      	movs	r2, #0
 8003880:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b01      	cmp	r3, #1
 800388e:	d007      	beq.n	80038a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	619a      	str	r2, [r3, #24]
  }
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	4613      	mov	r3, r2
 80038ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038bc:	e022      	b.n	8003904 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c4:	d01e      	beq.n	8003904 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c6:	f7ff fa2b 	bl	8002d20 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d302      	bcc.n	80038dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d113      	bne.n	8003904 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e0:	f043 0220 	orr.w	r2, r3, #32
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e00f      	b.n	8003924 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	4013      	ands	r3, r2
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	429a      	cmp	r2, r3
 8003912:	bf0c      	ite	eq
 8003914:	2301      	moveq	r3, #1
 8003916:	2300      	movne	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	461a      	mov	r2, r3
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	429a      	cmp	r2, r3
 8003920:	d0cd      	beq.n	80038be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003938:	e02c      	b.n	8003994 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f8dc 	bl	8003afc <I2C_IsAcknowledgeFailed>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e02a      	b.n	80039a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d01e      	beq.n	8003994 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003956:	f7ff f9e3 	bl	8002d20 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	429a      	cmp	r2, r3
 8003964:	d302      	bcc.n	800396c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d113      	bne.n	8003994 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	f043 0220 	orr.w	r2, r3, #32
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e007      	b.n	80039a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d1cb      	bne.n	800393a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039b8:	e028      	b.n	8003a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f89c 	bl	8003afc <I2C_IsAcknowledgeFailed>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e026      	b.n	8003a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ce:	f7ff f9a7 	bl	8002d20 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d302      	bcc.n	80039e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d113      	bne.n	8003a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	f043 0220 	orr.w	r2, r3, #32
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e007      	b.n	8003a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	d1cf      	bne.n	80039ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a30:	e055      	b.n	8003ade <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 f860 	bl	8003afc <I2C_IsAcknowledgeFailed>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e053      	b.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	d129      	bne.n	8003aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d105      	bne.n	8003a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e03f      	b.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2220      	movs	r2, #32
 8003a74:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003a82:	400b      	ands	r3, r1
 8003a84:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e022      	b.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa8:	f7ff f93a 	bl	8002d20 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d302      	bcc.n	8003abe <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10f      	bne.n	8003ade <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	f043 0220 	orr.w	r2, r3, #32
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e007      	b.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d1a2      	bne.n	8003a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	fe00e800 	.word	0xfe00e800

08003afc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b10      	cmp	r3, #16
 8003b14:	d151      	bne.n	8003bba <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b16:	e022      	b.n	8003b5e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1e:	d01e      	beq.n	8003b5e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b20:	f7ff f8fe 	bl	8002d20 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d302      	bcc.n	8003b36 <I2C_IsAcknowledgeFailed+0x3a>
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d113      	bne.n	8003b5e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	f043 0220 	orr.w	r2, r3, #32
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e02e      	b.n	8003bbc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d1d5      	bne.n	8003b18 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2210      	movs	r2, #16
 8003b72:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f7ff fe71 	bl	8003864 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6859      	ldr	r1, [r3, #4]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4b0d      	ldr	r3, [pc, #52]	; (8003bc4 <I2C_IsAcknowledgeFailed+0xc8>)
 8003b8e:	400b      	ands	r3, r1
 8003b90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	f043 0204 	orr.w	r2, r3, #4
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	fe00e800 	.word	0xfe00e800

08003bc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	817b      	strh	r3, [r7, #10]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	0d5b      	lsrs	r3, r3, #21
 8003be4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003be8:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <I2C_TransferConfig+0x58>)
 8003bea:	430b      	orrs	r3, r1
 8003bec:	43db      	mvns	r3, r3
 8003bee:	ea02 0103 	and.w	r1, r2, r3
 8003bf2:	897b      	ldrh	r3, [r7, #10]
 8003bf4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bf8:	7a7b      	ldrb	r3, [r7, #9]
 8003bfa:	041b      	lsls	r3, r3, #16
 8003bfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	431a      	orrs	r2, r3
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003c12:	bf00      	nop
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	03ff63ff 	.word	0x03ff63ff

08003c24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	d138      	bne.n	8003cac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e032      	b.n	8003cae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2224      	movs	r2, #36	; 0x24
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6819      	ldr	r1, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e000      	b.n	8003cae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cac:	2302      	movs	r3, #2
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d139      	bne.n	8003d44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e033      	b.n	8003d46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2224      	movs	r2, #36	; 0x24
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	e000      	b.n	8003d46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d44:	2302      	movs	r3, #2
  }
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
	...

08003d54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003d5c:	4b29      	ldr	r3, [pc, #164]	; (8003e04 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	2b06      	cmp	r3, #6
 8003d66:	d00a      	beq.n	8003d7e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003d68:	4b26      	ldr	r3, [pc, #152]	; (8003e04 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d001      	beq.n	8003d7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e040      	b.n	8003dfc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e03e      	b.n	8003dfc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d7e:	4b21      	ldr	r3, [pc, #132]	; (8003e04 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003d86:	491f      	ldr	r1, [pc, #124]	; (8003e04 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d8e:	f7fe ffc7 	bl	8002d20 <HAL_GetTick>
 8003d92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d94:	e009      	b.n	8003daa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d96:	f7fe ffc3 	bl	8002d20 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003da4:	d901      	bls.n	8003daa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e028      	b.n	8003dfc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003daa:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <HAL_PWREx_ConfigSupply+0xb0>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db6:	d1ee      	bne.n	8003d96 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b1e      	cmp	r3, #30
 8003dbc:	d008      	beq.n	8003dd0 <HAL_PWREx_ConfigSupply+0x7c>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b2e      	cmp	r3, #46	; 0x2e
 8003dc2:	d005      	beq.n	8003dd0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b1d      	cmp	r3, #29
 8003dc8:	d002      	beq.n	8003dd0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b2d      	cmp	r3, #45	; 0x2d
 8003dce:	d114      	bne.n	8003dfa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003dd0:	f7fe ffa6 	bl	8002d20 <HAL_GetTick>
 8003dd4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003dd6:	e009      	b.n	8003dec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003dd8:	f7fe ffa2 	bl	8002d20 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003de6:	d901      	bls.n	8003dec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e007      	b.n	8003dfc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <HAL_PWREx_ConfigSupply+0xb0>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df8:	d1ee      	bne.n	8003dd8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	58024800 	.word	0x58024800

08003e08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08c      	sub	sp, #48	; 0x30
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e3ff      	b.n	800461a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 8087 	beq.w	8003f36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e28:	4b99      	ldr	r3, [pc, #612]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e32:	4b97      	ldr	r3, [pc, #604]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3a:	2b10      	cmp	r3, #16
 8003e3c:	d007      	beq.n	8003e4e <HAL_RCC_OscConfig+0x46>
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e40:	2b18      	cmp	r3, #24
 8003e42:	d110      	bne.n	8003e66 <HAL_RCC_OscConfig+0x5e>
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d10b      	bne.n	8003e66 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4e:	4b90      	ldr	r3, [pc, #576]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d06c      	beq.n	8003f34 <HAL_RCC_OscConfig+0x12c>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d168      	bne.n	8003f34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e3d9      	b.n	800461a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6e:	d106      	bne.n	8003e7e <HAL_RCC_OscConfig+0x76>
 8003e70:	4b87      	ldr	r3, [pc, #540]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a86      	ldr	r2, [pc, #536]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	e02e      	b.n	8003edc <HAL_RCC_OscConfig+0xd4>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x98>
 8003e86:	4b82      	ldr	r3, [pc, #520]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a81      	ldr	r2, [pc, #516]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	4b7f      	ldr	r3, [pc, #508]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a7e      	ldr	r2, [pc, #504]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	e01d      	b.n	8003edc <HAL_RCC_OscConfig+0xd4>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0xbc>
 8003eaa:	4b79      	ldr	r3, [pc, #484]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a78      	ldr	r2, [pc, #480]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	4b76      	ldr	r3, [pc, #472]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a75      	ldr	r2, [pc, #468]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e00b      	b.n	8003edc <HAL_RCC_OscConfig+0xd4>
 8003ec4:	4b72      	ldr	r3, [pc, #456]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a71      	ldr	r2, [pc, #452]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	4b6f      	ldr	r3, [pc, #444]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a6e      	ldr	r2, [pc, #440]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d013      	beq.n	8003f0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fe ff1c 	bl	8002d20 <HAL_GetTick>
 8003ee8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eec:	f7fe ff18 	bl	8002d20 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b64      	cmp	r3, #100	; 0x64
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e38d      	b.n	800461a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003efe:	4b64      	ldr	r3, [pc, #400]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0f0      	beq.n	8003eec <HAL_RCC_OscConfig+0xe4>
 8003f0a:	e014      	b.n	8003f36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fe ff08 	bl	8002d20 <HAL_GetTick>
 8003f10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f14:	f7fe ff04 	bl	8002d20 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b64      	cmp	r3, #100	; 0x64
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e379      	b.n	800461a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f26:	4b5a      	ldr	r3, [pc, #360]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x10c>
 8003f32:	e000      	b.n	8003f36 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 80ae 	beq.w	80040a0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f44:	4b52      	ldr	r3, [pc, #328]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f4e:	4b50      	ldr	r3, [pc, #320]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <HAL_RCC_OscConfig+0x162>
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	2b18      	cmp	r3, #24
 8003f5e:	d13a      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x1ce>
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d135      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f6a:	4b49      	ldr	r3, [pc, #292]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_RCC_OscConfig+0x17a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e34b      	b.n	800461a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f82:	f7fe fefb 	bl	8002d7c <HAL_GetREVID>
 8003f86:	4602      	mov	r2, r0
 8003f88:	f241 0303 	movw	r3, #4099	; 0x1003
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d817      	bhi.n	8003fc0 <HAL_RCC_OscConfig+0x1b8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	2b40      	cmp	r3, #64	; 0x40
 8003f96:	d108      	bne.n	8003faa <HAL_RCC_OscConfig+0x1a2>
 8003f98:	4b3d      	ldr	r3, [pc, #244]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003fa0:	4a3b      	ldr	r2, [pc, #236]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fa8:	e07a      	b.n	80040a0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003faa:	4b39      	ldr	r3, [pc, #228]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	031b      	lsls	r3, r3, #12
 8003fb8:	4935      	ldr	r1, [pc, #212]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fbe:	e06f      	b.n	80040a0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc0:	4b33      	ldr	r3, [pc, #204]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	061b      	lsls	r3, r3, #24
 8003fce:	4930      	ldr	r1, [pc, #192]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd4:	e064      	b.n	80040a0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d045      	beq.n	800406a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003fde:	4b2c      	ldr	r3, [pc, #176]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f023 0219 	bic.w	r2, r3, #25
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	4929      	ldr	r1, [pc, #164]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fe fe96 	bl	8002d20 <HAL_GetTick>
 8003ff4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff8:	f7fe fe92 	bl	8002d20 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e307      	b.n	800461a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800400a:	4b21      	ldr	r3, [pc, #132]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004016:	f7fe feb1 	bl	8002d7c <HAL_GetREVID>
 800401a:	4602      	mov	r2, r0
 800401c:	f241 0303 	movw	r3, #4099	; 0x1003
 8004020:	429a      	cmp	r2, r3
 8004022:	d817      	bhi.n	8004054 <HAL_RCC_OscConfig+0x24c>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	2b40      	cmp	r3, #64	; 0x40
 800402a:	d108      	bne.n	800403e <HAL_RCC_OscConfig+0x236>
 800402c:	4b18      	ldr	r3, [pc, #96]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004034:	4a16      	ldr	r2, [pc, #88]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8004036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800403a:	6053      	str	r3, [r2, #4]
 800403c:	e030      	b.n	80040a0 <HAL_RCC_OscConfig+0x298>
 800403e:	4b14      	ldr	r3, [pc, #80]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	031b      	lsls	r3, r3, #12
 800404c:	4910      	ldr	r1, [pc, #64]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 800404e:	4313      	orrs	r3, r2
 8004050:	604b      	str	r3, [r1, #4]
 8004052:	e025      	b.n	80040a0 <HAL_RCC_OscConfig+0x298>
 8004054:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	061b      	lsls	r3, r3, #24
 8004062:	490b      	ldr	r1, [pc, #44]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8004064:	4313      	orrs	r3, r2
 8004066:	604b      	str	r3, [r1, #4]
 8004068:	e01a      	b.n	80040a0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800406a:	4b09      	ldr	r3, [pc, #36]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a08      	ldr	r2, [pc, #32]	; (8004090 <HAL_RCC_OscConfig+0x288>)
 8004070:	f023 0301 	bic.w	r3, r3, #1
 8004074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004076:	f7fe fe53 	bl	8002d20 <HAL_GetTick>
 800407a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800407c:	e00a      	b.n	8004094 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800407e:	f7fe fe4f 	bl	8002d20 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d903      	bls.n	8004094 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e2c4      	b.n	800461a <HAL_RCC_OscConfig+0x812>
 8004090:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004094:	4ba4      	ldr	r3, [pc, #656]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1ee      	bne.n	800407e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 80a9 	beq.w	8004200 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ae:	4b9e      	ldr	r3, [pc, #632]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040b8:	4b9b      	ldr	r3, [pc, #620]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d007      	beq.n	80040d4 <HAL_RCC_OscConfig+0x2cc>
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2b18      	cmp	r3, #24
 80040c8:	d13a      	bne.n	8004140 <HAL_RCC_OscConfig+0x338>
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d135      	bne.n	8004140 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040d4:	4b94      	ldr	r3, [pc, #592]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_OscConfig+0x2e4>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	2b80      	cmp	r3, #128	; 0x80
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e296      	b.n	800461a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040ec:	f7fe fe46 	bl	8002d7c <HAL_GetREVID>
 80040f0:	4602      	mov	r2, r0
 80040f2:	f241 0303 	movw	r3, #4099	; 0x1003
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d817      	bhi.n	800412a <HAL_RCC_OscConfig+0x322>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d108      	bne.n	8004114 <HAL_RCC_OscConfig+0x30c>
 8004102:	4b89      	ldr	r3, [pc, #548]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800410a:	4a87      	ldr	r2, [pc, #540]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 800410c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004110:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004112:	e075      	b.n	8004200 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004114:	4b84      	ldr	r3, [pc, #528]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	069b      	lsls	r3, r3, #26
 8004122:	4981      	ldr	r1, [pc, #516]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 8004124:	4313      	orrs	r3, r2
 8004126:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004128:	e06a      	b.n	8004200 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800412a:	4b7f      	ldr	r3, [pc, #508]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	061b      	lsls	r3, r3, #24
 8004138:	497b      	ldr	r1, [pc, #492]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 800413a:	4313      	orrs	r3, r2
 800413c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800413e:	e05f      	b.n	8004200 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d042      	beq.n	80041ce <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004148:	4b77      	ldr	r3, [pc, #476]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a76      	ldr	r2, [pc, #472]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 800414e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004154:	f7fe fde4 	bl	8002d20 <HAL_GetTick>
 8004158:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800415c:	f7fe fde0 	bl	8002d20 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e255      	b.n	800461a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800416e:	4b6e      	ldr	r3, [pc, #440]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800417a:	f7fe fdff 	bl	8002d7c <HAL_GetREVID>
 800417e:	4602      	mov	r2, r0
 8004180:	f241 0303 	movw	r3, #4099	; 0x1003
 8004184:	429a      	cmp	r2, r3
 8004186:	d817      	bhi.n	80041b8 <HAL_RCC_OscConfig+0x3b0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	2b20      	cmp	r3, #32
 800418e:	d108      	bne.n	80041a2 <HAL_RCC_OscConfig+0x39a>
 8004190:	4b65      	ldr	r3, [pc, #404]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004198:	4a63      	ldr	r2, [pc, #396]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 800419a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800419e:	6053      	str	r3, [r2, #4]
 80041a0:	e02e      	b.n	8004200 <HAL_RCC_OscConfig+0x3f8>
 80041a2:	4b61      	ldr	r3, [pc, #388]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	069b      	lsls	r3, r3, #26
 80041b0:	495d      	ldr	r1, [pc, #372]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	604b      	str	r3, [r1, #4]
 80041b6:	e023      	b.n	8004200 <HAL_RCC_OscConfig+0x3f8>
 80041b8:	4b5b      	ldr	r3, [pc, #364]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	061b      	lsls	r3, r3, #24
 80041c6:	4958      	ldr	r1, [pc, #352]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60cb      	str	r3, [r1, #12]
 80041cc:	e018      	b.n	8004200 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80041ce:	4b56      	ldr	r3, [pc, #344]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a55      	ldr	r2, [pc, #340]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 80041d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041da:	f7fe fda1 	bl	8002d20 <HAL_GetTick>
 80041de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80041e2:	f7fe fd9d 	bl	8002d20 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e212      	b.n	800461a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041f4:	4b4c      	ldr	r3, [pc, #304]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f0      	bne.n	80041e2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	2b00      	cmp	r3, #0
 800420a:	d036      	beq.n	800427a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d019      	beq.n	8004248 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004214:	4b44      	ldr	r3, [pc, #272]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 8004216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004218:	4a43      	ldr	r2, [pc, #268]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004220:	f7fe fd7e 	bl	8002d20 <HAL_GetTick>
 8004224:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004228:	f7fe fd7a 	bl	8002d20 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e1ef      	b.n	800461a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800423a:	4b3b      	ldr	r3, [pc, #236]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 800423c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0x420>
 8004246:	e018      	b.n	800427a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004248:	4b37      	ldr	r3, [pc, #220]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 800424a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424c:	4a36      	ldr	r2, [pc, #216]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 800424e:	f023 0301 	bic.w	r3, r3, #1
 8004252:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004254:	f7fe fd64 	bl	8002d20 <HAL_GetTick>
 8004258:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800425c:	f7fe fd60 	bl	8002d20 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e1d5      	b.n	800461a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800426e:	4b2e      	ldr	r3, [pc, #184]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 8004270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d036      	beq.n	80042f4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d019      	beq.n	80042c2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800428e:	4b26      	ldr	r3, [pc, #152]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a25      	ldr	r2, [pc, #148]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 8004294:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004298:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800429a:	f7fe fd41 	bl	8002d20 <HAL_GetTick>
 800429e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80042a2:	f7fe fd3d 	bl	8002d20 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e1b2      	b.n	800461a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042b4:	4b1c      	ldr	r3, [pc, #112]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f0      	beq.n	80042a2 <HAL_RCC_OscConfig+0x49a>
 80042c0:	e018      	b.n	80042f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042c2:	4b19      	ldr	r3, [pc, #100]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a18      	ldr	r2, [pc, #96]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 80042c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042ce:	f7fe fd27 	bl	8002d20 <HAL_GetTick>
 80042d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80042d6:	f7fe fd23 	bl	8002d20 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e198      	b.n	800461a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042e8:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <HAL_RCC_OscConfig+0x520>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1f0      	bne.n	80042d6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8085 	beq.w	800440c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004302:	4b0a      	ldr	r3, [pc, #40]	; (800432c <HAL_RCC_OscConfig+0x524>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a09      	ldr	r2, [pc, #36]	; (800432c <HAL_RCC_OscConfig+0x524>)
 8004308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800430c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800430e:	f7fe fd07 	bl	8002d20 <HAL_GetTick>
 8004312:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004314:	e00c      	b.n	8004330 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004316:	f7fe fd03 	bl	8002d20 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b64      	cmp	r3, #100	; 0x64
 8004322:	d905      	bls.n	8004330 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e178      	b.n	800461a <HAL_RCC_OscConfig+0x812>
 8004328:	58024400 	.word	0x58024400
 800432c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004330:	4b96      	ldr	r3, [pc, #600]	; (800458c <HAL_RCC_OscConfig+0x784>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0ec      	beq.n	8004316 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d106      	bne.n	8004352 <HAL_RCC_OscConfig+0x54a>
 8004344:	4b92      	ldr	r3, [pc, #584]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	4a91      	ldr	r2, [pc, #580]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	6713      	str	r3, [r2, #112]	; 0x70
 8004350:	e02d      	b.n	80043ae <HAL_RCC_OscConfig+0x5a6>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10c      	bne.n	8004374 <HAL_RCC_OscConfig+0x56c>
 800435a:	4b8d      	ldr	r3, [pc, #564]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	4a8c      	ldr	r2, [pc, #560]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	6713      	str	r3, [r2, #112]	; 0x70
 8004366:	4b8a      	ldr	r3, [pc, #552]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 8004368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436a:	4a89      	ldr	r2, [pc, #548]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 800436c:	f023 0304 	bic.w	r3, r3, #4
 8004370:	6713      	str	r3, [r2, #112]	; 0x70
 8004372:	e01c      	b.n	80043ae <HAL_RCC_OscConfig+0x5a6>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b05      	cmp	r3, #5
 800437a:	d10c      	bne.n	8004396 <HAL_RCC_OscConfig+0x58e>
 800437c:	4b84      	ldr	r3, [pc, #528]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	4a83      	ldr	r2, [pc, #524]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 8004382:	f043 0304 	orr.w	r3, r3, #4
 8004386:	6713      	str	r3, [r2, #112]	; 0x70
 8004388:	4b81      	ldr	r3, [pc, #516]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 800438a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438c:	4a80      	ldr	r2, [pc, #512]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 800438e:	f043 0301 	orr.w	r3, r3, #1
 8004392:	6713      	str	r3, [r2, #112]	; 0x70
 8004394:	e00b      	b.n	80043ae <HAL_RCC_OscConfig+0x5a6>
 8004396:	4b7e      	ldr	r3, [pc, #504]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439a:	4a7d      	ldr	r2, [pc, #500]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	6713      	str	r3, [r2, #112]	; 0x70
 80043a2:	4b7b      	ldr	r3, [pc, #492]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	4a7a      	ldr	r2, [pc, #488]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 80043a8:	f023 0304 	bic.w	r3, r3, #4
 80043ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d015      	beq.n	80043e2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b6:	f7fe fcb3 	bl	8002d20 <HAL_GetTick>
 80043ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043bc:	e00a      	b.n	80043d4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043be:	f7fe fcaf 	bl	8002d20 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e122      	b.n	800461a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043d4:	4b6e      	ldr	r3, [pc, #440]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0ee      	beq.n	80043be <HAL_RCC_OscConfig+0x5b6>
 80043e0:	e014      	b.n	800440c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e2:	f7fe fc9d 	bl	8002d20 <HAL_GetTick>
 80043e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043e8:	e00a      	b.n	8004400 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ea:	f7fe fc99 	bl	8002d20 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e10c      	b.n	800461a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004400:	4b63      	ldr	r3, [pc, #396]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 8004402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1ee      	bne.n	80043ea <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 8101 	beq.w	8004618 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004416:	4b5e      	ldr	r3, [pc, #376]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800441e:	2b18      	cmp	r3, #24
 8004420:	f000 80bc 	beq.w	800459c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	2b02      	cmp	r3, #2
 800442a:	f040 8095 	bne.w	8004558 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442e:	4b58      	ldr	r3, [pc, #352]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a57      	ldr	r2, [pc, #348]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 8004434:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443a:	f7fe fc71 	bl	8002d20 <HAL_GetTick>
 800443e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004442:	f7fe fc6d 	bl	8002d20 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e0e2      	b.n	800461a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004454:	4b4e      	ldr	r3, [pc, #312]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f0      	bne.n	8004442 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004460:	4b4b      	ldr	r3, [pc, #300]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 8004462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004464:	4b4b      	ldr	r3, [pc, #300]	; (8004594 <HAL_RCC_OscConfig+0x78c>)
 8004466:	4013      	ands	r3, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004470:	0112      	lsls	r2, r2, #4
 8004472:	430a      	orrs	r2, r1
 8004474:	4946      	ldr	r1, [pc, #280]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 8004476:	4313      	orrs	r3, r2
 8004478:	628b      	str	r3, [r1, #40]	; 0x28
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	3b01      	subs	r3, #1
 8004480:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004488:	3b01      	subs	r3, #1
 800448a:	025b      	lsls	r3, r3, #9
 800448c:	b29b      	uxth	r3, r3
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	3b01      	subs	r3, #1
 8004496:	041b      	lsls	r3, r3, #16
 8004498:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a2:	3b01      	subs	r3, #1
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044aa:	4939      	ldr	r1, [pc, #228]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80044b0:	4b37      	ldr	r3, [pc, #220]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	4a36      	ldr	r2, [pc, #216]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 80044b6:	f023 0301 	bic.w	r3, r3, #1
 80044ba:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80044bc:	4b34      	ldr	r3, [pc, #208]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 80044be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044c0:	4b35      	ldr	r3, [pc, #212]	; (8004598 <HAL_RCC_OscConfig+0x790>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044c8:	00d2      	lsls	r2, r2, #3
 80044ca:	4931      	ldr	r1, [pc, #196]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80044d0:	4b2f      	ldr	r3, [pc, #188]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	f023 020c 	bic.w	r2, r3, #12
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	492c      	ldr	r1, [pc, #176]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80044e2:	4b2b      	ldr	r3, [pc, #172]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	f023 0202 	bic.w	r2, r3, #2
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	4928      	ldr	r1, [pc, #160]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80044f4:	4b26      	ldr	r3, [pc, #152]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	4a25      	ldr	r2, [pc, #148]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 80044fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004500:	4b23      	ldr	r3, [pc, #140]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	4a22      	ldr	r2, [pc, #136]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 8004506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800450a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800450c:	4b20      	ldr	r3, [pc, #128]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	4a1f      	ldr	r2, [pc, #124]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 8004512:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004516:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004518:	4b1d      	ldr	r3, [pc, #116]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	4a1c      	ldr	r2, [pc, #112]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004524:	4b1a      	ldr	r3, [pc, #104]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a19      	ldr	r2, [pc, #100]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 800452a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800452e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fe fbf6 	bl	8002d20 <HAL_GetTick>
 8004534:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004538:	f7fe fbf2 	bl	8002d20 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e067      	b.n	800461a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800454a:	4b11      	ldr	r3, [pc, #68]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f0      	beq.n	8004538 <HAL_RCC_OscConfig+0x730>
 8004556:	e05f      	b.n	8004618 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004558:	4b0d      	ldr	r3, [pc, #52]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a0c      	ldr	r2, [pc, #48]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 800455e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7fe fbdc 	bl	8002d20 <HAL_GetTick>
 8004568:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800456c:	f7fe fbd8 	bl	8002d20 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e04d      	b.n	800461a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800457e:	4b04      	ldr	r3, [pc, #16]	; (8004590 <HAL_RCC_OscConfig+0x788>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0x764>
 800458a:	e045      	b.n	8004618 <HAL_RCC_OscConfig+0x810>
 800458c:	58024800 	.word	0x58024800
 8004590:	58024400 	.word	0x58024400
 8004594:	fffffc0c 	.word	0xfffffc0c
 8004598:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800459c:	4b21      	ldr	r3, [pc, #132]	; (8004624 <HAL_RCC_OscConfig+0x81c>)
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80045a2:	4b20      	ldr	r3, [pc, #128]	; (8004624 <HAL_RCC_OscConfig+0x81c>)
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d031      	beq.n	8004614 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f003 0203 	and.w	r2, r3, #3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d12a      	bne.n	8004614 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d122      	bne.n	8004614 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045da:	429a      	cmp	r2, r3
 80045dc:	d11a      	bne.n	8004614 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	0a5b      	lsrs	r3, r3, #9
 80045e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ea:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d111      	bne.n	8004614 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	0c1b      	lsrs	r3, r3, #16
 80045f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045fe:	429a      	cmp	r2, r3
 8004600:	d108      	bne.n	8004614 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	0e1b      	lsrs	r3, r3, #24
 8004606:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004610:	429a      	cmp	r2, r3
 8004612:	d001      	beq.n	8004618 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3730      	adds	r7, #48	; 0x30
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	58024400 	.word	0x58024400

08004628 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e19c      	b.n	8004976 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800463c:	4b8a      	ldr	r3, [pc, #552]	; (8004868 <HAL_RCC_ClockConfig+0x240>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d910      	bls.n	800466c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464a:	4b87      	ldr	r3, [pc, #540]	; (8004868 <HAL_RCC_ClockConfig+0x240>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 020f 	bic.w	r2, r3, #15
 8004652:	4985      	ldr	r1, [pc, #532]	; (8004868 <HAL_RCC_ClockConfig+0x240>)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	4313      	orrs	r3, r2
 8004658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	4b83      	ldr	r3, [pc, #524]	; (8004868 <HAL_RCC_ClockConfig+0x240>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d001      	beq.n	800466c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e184      	b.n	8004976 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d010      	beq.n	800469a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	4b7b      	ldr	r3, [pc, #492]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004684:	429a      	cmp	r2, r3
 8004686:	d908      	bls.n	800469a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004688:	4b78      	ldr	r3, [pc, #480]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	4975      	ldr	r1, [pc, #468]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004696:	4313      	orrs	r3, r2
 8004698:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d010      	beq.n	80046c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	4b70      	ldr	r3, [pc, #448]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d908      	bls.n	80046c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046b6:	4b6d      	ldr	r3, [pc, #436]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	496a      	ldr	r1, [pc, #424]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0310 	and.w	r3, r3, #16
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d010      	beq.n	80046f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699a      	ldr	r2, [r3, #24]
 80046d8:	4b64      	ldr	r3, [pc, #400]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d908      	bls.n	80046f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046e4:	4b61      	ldr	r3, [pc, #388]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	495e      	ldr	r1, [pc, #376]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d010      	beq.n	8004724 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69da      	ldr	r2, [r3, #28]
 8004706:	4b59      	ldr	r3, [pc, #356]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800470e:	429a      	cmp	r2, r3
 8004710:	d908      	bls.n	8004724 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004712:	4b56      	ldr	r3, [pc, #344]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	4953      	ldr	r1, [pc, #332]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004720:	4313      	orrs	r3, r2
 8004722:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d010      	beq.n	8004752 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	4b4d      	ldr	r3, [pc, #308]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	429a      	cmp	r2, r3
 800473e:	d908      	bls.n	8004752 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004740:	4b4a      	ldr	r3, [pc, #296]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	f023 020f 	bic.w	r2, r3, #15
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	4947      	ldr	r1, [pc, #284]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 800474e:	4313      	orrs	r3, r2
 8004750:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d055      	beq.n	800480a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800475e:	4b43      	ldr	r3, [pc, #268]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	4940      	ldr	r1, [pc, #256]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 800476c:	4313      	orrs	r3, r2
 800476e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d107      	bne.n	8004788 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004778:	4b3c      	ldr	r3, [pc, #240]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d121      	bne.n	80047c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0f6      	b.n	8004976 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b03      	cmp	r3, #3
 800478e:	d107      	bne.n	80047a0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004790:	4b36      	ldr	r3, [pc, #216]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d115      	bne.n	80047c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e0ea      	b.n	8004976 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d107      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047a8:	4b30      	ldr	r3, [pc, #192]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d109      	bne.n	80047c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0de      	b.n	8004976 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047b8:	4b2c      	ldr	r3, [pc, #176]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0d6      	b.n	8004976 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047c8:	4b28      	ldr	r3, [pc, #160]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f023 0207 	bic.w	r2, r3, #7
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	4925      	ldr	r1, [pc, #148]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047da:	f7fe faa1 	bl	8002d20 <HAL_GetTick>
 80047de:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e0:	e00a      	b.n	80047f8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e2:	f7fe fa9d 	bl	8002d20 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e0be      	b.n	8004976 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f8:	4b1c      	ldr	r3, [pc, #112]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	429a      	cmp	r2, r3
 8004808:	d1eb      	bne.n	80047e2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d010      	beq.n	8004838 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	4b14      	ldr	r3, [pc, #80]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	429a      	cmp	r2, r3
 8004824:	d208      	bcs.n	8004838 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004826:	4b11      	ldr	r3, [pc, #68]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	f023 020f 	bic.w	r2, r3, #15
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	490e      	ldr	r1, [pc, #56]	; (800486c <HAL_RCC_ClockConfig+0x244>)
 8004834:	4313      	orrs	r3, r2
 8004836:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_RCC_ClockConfig+0x240>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d214      	bcs.n	8004870 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b08      	ldr	r3, [pc, #32]	; (8004868 <HAL_RCC_ClockConfig+0x240>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 020f 	bic.w	r2, r3, #15
 800484e:	4906      	ldr	r1, [pc, #24]	; (8004868 <HAL_RCC_ClockConfig+0x240>)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b04      	ldr	r3, [pc, #16]	; (8004868 <HAL_RCC_ClockConfig+0x240>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d005      	beq.n	8004870 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e086      	b.n	8004976 <HAL_RCC_ClockConfig+0x34e>
 8004868:	52002000 	.word	0x52002000
 800486c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d010      	beq.n	800489e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	4b3f      	ldr	r3, [pc, #252]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004888:	429a      	cmp	r2, r3
 800488a:	d208      	bcs.n	800489e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800488c:	4b3c      	ldr	r3, [pc, #240]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	4939      	ldr	r1, [pc, #228]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 800489a:	4313      	orrs	r3, r2
 800489c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d010      	beq.n	80048cc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695a      	ldr	r2, [r3, #20]
 80048ae:	4b34      	ldr	r3, [pc, #208]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d208      	bcs.n	80048cc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048ba:	4b31      	ldr	r3, [pc, #196]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	492e      	ldr	r1, [pc, #184]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d010      	beq.n	80048fa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699a      	ldr	r2, [r3, #24]
 80048dc:	4b28      	ldr	r3, [pc, #160]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d208      	bcs.n	80048fa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048e8:	4b25      	ldr	r3, [pc, #148]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	4922      	ldr	r1, [pc, #136]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b00      	cmp	r3, #0
 8004904:	d010      	beq.n	8004928 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69da      	ldr	r2, [r3, #28]
 800490a:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004912:	429a      	cmp	r2, r3
 8004914:	d208      	bcs.n	8004928 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004916:	4b1a      	ldr	r3, [pc, #104]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	4917      	ldr	r1, [pc, #92]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 8004924:	4313      	orrs	r3, r2
 8004926:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004928:	f000 f834 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 800492c:	4601      	mov	r1, r0
 800492e:	4b14      	ldr	r3, [pc, #80]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	0a1b      	lsrs	r3, r3, #8
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	4a12      	ldr	r2, [pc, #72]	; (8004984 <HAL_RCC_ClockConfig+0x35c>)
 800493a:	5cd3      	ldrb	r3, [r2, r3]
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	fa21 f303 	lsr.w	r3, r1, r3
 8004944:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004946:	4b0e      	ldr	r3, [pc, #56]	; (8004980 <HAL_RCC_ClockConfig+0x358>)
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	4a0d      	ldr	r2, [pc, #52]	; (8004984 <HAL_RCC_ClockConfig+0x35c>)
 8004950:	5cd3      	ldrb	r3, [r2, r3]
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
 800495c:	4a0a      	ldr	r2, [pc, #40]	; (8004988 <HAL_RCC_ClockConfig+0x360>)
 800495e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004960:	4a0a      	ldr	r2, [pc, #40]	; (800498c <HAL_RCC_ClockConfig+0x364>)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <HAL_RCC_ClockConfig+0x368>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7fe f98e 	bl	8002c8c <HAL_InitTick>
 8004970:	4603      	mov	r3, r0
 8004972:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004974:	7bfb      	ldrb	r3, [r7, #15]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	58024400 	.word	0x58024400
 8004984:	0800b7f8 	.word	0x0800b7f8
 8004988:	20000004 	.word	0x20000004
 800498c:	20000000 	.word	0x20000000
 8004990:	20000008 	.word	0x20000008

08004994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004994:	b480      	push	{r7}
 8004996:	b089      	sub	sp, #36	; 0x24
 8004998:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800499a:	4baf      	ldr	r3, [pc, #700]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049a2:	2b18      	cmp	r3, #24
 80049a4:	f200 814e 	bhi.w	8004c44 <HAL_RCC_GetSysClockFreq+0x2b0>
 80049a8:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	08004a15 	.word	0x08004a15
 80049b4:	08004c45 	.word	0x08004c45
 80049b8:	08004c45 	.word	0x08004c45
 80049bc:	08004c45 	.word	0x08004c45
 80049c0:	08004c45 	.word	0x08004c45
 80049c4:	08004c45 	.word	0x08004c45
 80049c8:	08004c45 	.word	0x08004c45
 80049cc:	08004c45 	.word	0x08004c45
 80049d0:	08004a3b 	.word	0x08004a3b
 80049d4:	08004c45 	.word	0x08004c45
 80049d8:	08004c45 	.word	0x08004c45
 80049dc:	08004c45 	.word	0x08004c45
 80049e0:	08004c45 	.word	0x08004c45
 80049e4:	08004c45 	.word	0x08004c45
 80049e8:	08004c45 	.word	0x08004c45
 80049ec:	08004c45 	.word	0x08004c45
 80049f0:	08004a41 	.word	0x08004a41
 80049f4:	08004c45 	.word	0x08004c45
 80049f8:	08004c45 	.word	0x08004c45
 80049fc:	08004c45 	.word	0x08004c45
 8004a00:	08004c45 	.word	0x08004c45
 8004a04:	08004c45 	.word	0x08004c45
 8004a08:	08004c45 	.word	0x08004c45
 8004a0c:	08004c45 	.word	0x08004c45
 8004a10:	08004a47 	.word	0x08004a47
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a14:	4b90      	ldr	r3, [pc, #576]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0320 	and.w	r3, r3, #32
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d009      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a20:	4b8d      	ldr	r3, [pc, #564]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	08db      	lsrs	r3, r3, #3
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	4a8c      	ldr	r2, [pc, #560]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004a32:	e10a      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a34:	4b89      	ldr	r3, [pc, #548]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004a36:	61bb      	str	r3, [r7, #24]
    break;
 8004a38:	e107      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004a3a:	4b89      	ldr	r3, [pc, #548]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004a3c:	61bb      	str	r3, [r7, #24]
    break;
 8004a3e:	e104      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004a40:	4b88      	ldr	r3, [pc, #544]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004a42:	61bb      	str	r3, [r7, #24]
    break;
 8004a44:	e101      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a46:	4b84      	ldr	r3, [pc, #528]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004a50:	4b81      	ldr	r3, [pc, #516]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a5a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a5c:	4b7e      	ldr	r3, [pc, #504]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004a66:	4b7c      	ldr	r3, [pc, #496]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6a:	08db      	lsrs	r3, r3, #3
 8004a6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	fb02 f303 	mul.w	r3, r2, r3
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80da 	beq.w	8004c3e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d05a      	beq.n	8004b46 <HAL_RCC_GetSysClockFreq+0x1b2>
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d302      	bcc.n	8004a9a <HAL_RCC_GetSysClockFreq+0x106>
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d078      	beq.n	8004b8a <HAL_RCC_GetSysClockFreq+0x1f6>
 8004a98:	e099      	b.n	8004bce <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a9a:	4b6f      	ldr	r3, [pc, #444]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d02d      	beq.n	8004b02 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004aa6:	4b6c      	ldr	r3, [pc, #432]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	08db      	lsrs	r3, r3, #3
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	4a6a      	ldr	r2, [pc, #424]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	ee07 3a90 	vmov	s15, r3
 8004ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004acc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad0:	4b61      	ldr	r3, [pc, #388]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad8:	ee07 3a90 	vmov	s15, r3
 8004adc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ae4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004c68 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004ae8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004af4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004b00:	e087      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	ee07 3a90 	vmov	s15, r3
 8004b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004c6c <HAL_RCC_GetSysClockFreq+0x2d8>
 8004b10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b14:	4b50      	ldr	r3, [pc, #320]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1c:	ee07 3a90 	vmov	s15, r3
 8004b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b24:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b28:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004c68 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004b2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b44:	e065      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	ee07 3a90 	vmov	s15, r3
 8004b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b50:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004c70 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004b54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b58:	4b3f      	ldr	r3, [pc, #252]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b60:	ee07 3a90 	vmov	s15, r3
 8004b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b68:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b6c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004c68 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004b70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b88:	e043      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	ee07 3a90 	vmov	s15, r3
 8004b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b94:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004c74 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004b98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9c:	4b2e      	ldr	r3, [pc, #184]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba4:	ee07 3a90 	vmov	s15, r3
 8004ba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bac:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bb0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004c68 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004bb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bcc:	e021      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	ee07 3a90 	vmov	s15, r3
 8004bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004c70 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004bdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be0:	4b1d      	ldr	r3, [pc, #116]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be8:	ee07 3a90 	vmov	s15, r3
 8004bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bf4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004c68 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004bf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c10:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004c12:	4b11      	ldr	r3, [pc, #68]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	0a5b      	lsrs	r3, r3, #9
 8004c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c36:	ee17 3a90 	vmov	r3, s15
 8004c3a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004c3c:	e005      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61bb      	str	r3, [r7, #24]
    break;
 8004c42:	e002      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004c44:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004c46:	61bb      	str	r3, [r7, #24]
    break;
 8004c48:	bf00      	nop
  }

  return sysclockfreq;
 8004c4a:	69bb      	ldr	r3, [r7, #24]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3724      	adds	r7, #36	; 0x24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	58024400 	.word	0x58024400
 8004c5c:	03d09000 	.word	0x03d09000
 8004c60:	003d0900 	.word	0x003d0900
 8004c64:	017d7840 	.word	0x017d7840
 8004c68:	46000000 	.word	0x46000000
 8004c6c:	4c742400 	.word	0x4c742400
 8004c70:	4a742400 	.word	0x4a742400
 8004c74:	4bbebc20 	.word	0x4bbebc20

08004c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c7e:	f7ff fe89 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8004c82:	4601      	mov	r1, r0
 8004c84:	4b10      	ldr	r3, [pc, #64]	; (8004cc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	0a1b      	lsrs	r3, r3, #8
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	4a0f      	ldr	r2, [pc, #60]	; (8004ccc <HAL_RCC_GetHCLKFreq+0x54>)
 8004c90:	5cd3      	ldrb	r3, [r2, r3]
 8004c92:	f003 031f 	and.w	r3, r3, #31
 8004c96:	fa21 f303 	lsr.w	r3, r1, r3
 8004c9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	4a09      	ldr	r2, [pc, #36]	; (8004ccc <HAL_RCC_GetHCLKFreq+0x54>)
 8004ca6:	5cd3      	ldrb	r3, [r2, r3]
 8004ca8:	f003 031f 	and.w	r3, r3, #31
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb2:	4a07      	ldr	r2, [pc, #28]	; (8004cd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004cb4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cb6:	4a07      	ldr	r2, [pc, #28]	; (8004cd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004cbc:	4b04      	ldr	r3, [pc, #16]	; (8004cd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	58024400 	.word	0x58024400
 8004ccc:	0800b7f8 	.word	0x0800b7f8
 8004cd0:	20000004 	.word	0x20000004
 8004cd4:	20000000 	.word	0x20000000

08004cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004cdc:	f7ff ffcc 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 8004ce0:	4601      	mov	r1, r0
 8004ce2:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	091b      	lsrs	r3, r3, #4
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	4a04      	ldr	r2, [pc, #16]	; (8004d00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cee:	5cd3      	ldrb	r3, [r2, r3]
 8004cf0:	f003 031f 	and.w	r3, r3, #31
 8004cf4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	58024400 	.word	0x58024400
 8004d00:	0800b7f8 	.word	0x0800b7f8

08004d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004d08:	f7ff ffb6 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 8004d0c:	4601      	mov	r1, r0
 8004d0e:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	0a1b      	lsrs	r3, r3, #8
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	4a04      	ldr	r2, [pc, #16]	; (8004d2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d1a:	5cd3      	ldrb	r3, [r2, r3]
 8004d1c:	f003 031f 	and.w	r3, r3, #31
 8004d20:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	58024400 	.word	0x58024400
 8004d2c:	0800b7f8 	.word	0x0800b7f8

08004d30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d38:	2300      	movs	r3, #0
 8004d3a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d03d      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d54:	d013      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d5a:	d802      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d007      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004d60:	e01f      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004d62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d66:	d013      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004d68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d6c:	d01c      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004d6e:	e018      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d70:	4baf      	ldr	r3, [pc, #700]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	4aae      	ldr	r2, [pc, #696]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d7c:	e015      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3304      	adds	r3, #4
 8004d82:	2102      	movs	r1, #2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f001 f96f 	bl	8006068 <RCCEx_PLL2_Config>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d8e:	e00c      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3324      	adds	r3, #36	; 0x24
 8004d94:	2102      	movs	r1, #2
 8004d96:	4618      	mov	r0, r3
 8004d98:	f001 fa18 	bl	80061cc <RCCEx_PLL3_Config>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004da0:	e003      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	75fb      	strb	r3, [r7, #23]
      break;
 8004da6:	e000      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004da8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004daa:	7dfb      	ldrb	r3, [r7, #23]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d109      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004db0:	4b9f      	ldr	r3, [pc, #636]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dbc:	499c      	ldr	r1, [pc, #624]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	650b      	str	r3, [r1, #80]	; 0x50
 8004dc2:	e001      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc4:	7dfb      	ldrb	r3, [r7, #23]
 8004dc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d03d      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d826      	bhi.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004ddc:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de2:	bf00      	nop
 8004de4:	08004df9 	.word	0x08004df9
 8004de8:	08004e07 	.word	0x08004e07
 8004dec:	08004e19 	.word	0x08004e19
 8004df0:	08004e31 	.word	0x08004e31
 8004df4:	08004e31 	.word	0x08004e31
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df8:	4b8d      	ldr	r3, [pc, #564]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	4a8c      	ldr	r2, [pc, #560]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e04:	e015      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f001 f92b 	bl	8006068 <RCCEx_PLL2_Config>
 8004e12:	4603      	mov	r3, r0
 8004e14:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e16:	e00c      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3324      	adds	r3, #36	; 0x24
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f001 f9d4 	bl	80061cc <RCCEx_PLL3_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e28:	e003      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e2e:	e000      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004e30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e32:	7dfb      	ldrb	r3, [r7, #23]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d109      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e38:	4b7d      	ldr	r3, [pc, #500]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3c:	f023 0207 	bic.w	r2, r3, #7
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e44:	497a      	ldr	r1, [pc, #488]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	650b      	str	r3, [r1, #80]	; 0x50
 8004e4a:	e001      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
 8004e4e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d03e      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e60:	2b80      	cmp	r3, #128	; 0x80
 8004e62:	d01c      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004e64:	2b80      	cmp	r3, #128	; 0x80
 8004e66:	d804      	bhi.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d008      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004e6c:	2b40      	cmp	r3, #64	; 0x40
 8004e6e:	d00d      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004e70:	e01e      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004e72:	2bc0      	cmp	r3, #192	; 0xc0
 8004e74:	d01f      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e7a:	d01e      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e7c:	e018      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e7e:	4b6c      	ldr	r3, [pc, #432]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e82:	4a6b      	ldr	r2, [pc, #428]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004e8a:	e017      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	2100      	movs	r1, #0
 8004e92:	4618      	mov	r0, r3
 8004e94:	f001 f8e8 	bl	8006068 <RCCEx_PLL2_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004e9c:	e00e      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3324      	adds	r3, #36	; 0x24
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f001 f991 	bl	80061cc <RCCEx_PLL3_Config>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004eae:	e005      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb4:	e002      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004eb6:	bf00      	nop
 8004eb8:	e000      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ebc:	7dfb      	ldrb	r3, [r7, #23]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004ec2:	4b5b      	ldr	r3, [pc, #364]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ece:	4958      	ldr	r1, [pc, #352]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	650b      	str	r3, [r1, #80]	; 0x50
 8004ed4:	e001      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed6:	7dfb      	ldrb	r3, [r7, #23]
 8004ed8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d044      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ef0:	d01f      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ef6:	d805      	bhi.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004efc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f00:	d00e      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004f02:	e01f      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004f04:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f08:	d01f      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004f0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f0e:	d01e      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004f10:	e018      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f12:	4b47      	ldr	r3, [pc, #284]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	4a46      	ldr	r2, [pc, #280]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f1e:	e017      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3304      	adds	r3, #4
 8004f24:	2100      	movs	r1, #0
 8004f26:	4618      	mov	r0, r3
 8004f28:	f001 f89e 	bl	8006068 <RCCEx_PLL2_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004f30:	e00e      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3324      	adds	r3, #36	; 0x24
 8004f36:	2100      	movs	r1, #0
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f001 f947 	bl	80061cc <RCCEx_PLL3_Config>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f42:	e005      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	75fb      	strb	r3, [r7, #23]
      break;
 8004f48:	e002      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004f4a:	bf00      	nop
 8004f4c:	e000      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f50:	7dfb      	ldrb	r3, [r7, #23]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10a      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004f56:	4b36      	ldr	r3, [pc, #216]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f64:	4932      	ldr	r1, [pc, #200]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	658b      	str	r3, [r1, #88]	; 0x58
 8004f6a:	e001      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6c:	7dfb      	ldrb	r3, [r7, #23]
 8004f6e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d044      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f86:	d01f      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004f88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f8c:	d805      	bhi.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004f92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f96:	d00e      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004f98:	e01f      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004f9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f9e:	d01f      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fa4:	d01e      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004fa6:	e018      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fa8:	4b21      	ldr	r3, [pc, #132]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	4a20      	ldr	r2, [pc, #128]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fb4:	e017      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	2100      	movs	r1, #0
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f001 f853 	bl	8006068 <RCCEx_PLL2_Config>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004fc6:	e00e      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3324      	adds	r3, #36	; 0x24
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f001 f8fc 	bl	80061cc <RCCEx_PLL3_Config>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fd8:	e005      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8004fde:	e002      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004fe0:	bf00      	nop
 8004fe2:	e000      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fe6:	7dfb      	ldrb	r3, [r7, #23]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10a      	bne.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004fec:	4b10      	ldr	r3, [pc, #64]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ffa:	490d      	ldr	r1, [pc, #52]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	658b      	str	r3, [r1, #88]	; 0x58
 8005000:	e001      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005002:	7dfb      	ldrb	r3, [r7, #23]
 8005004:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d035      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005016:	2b10      	cmp	r3, #16
 8005018:	d00c      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800501a:	2b10      	cmp	r3, #16
 800501c:	d802      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800501e:	2b00      	cmp	r3, #0
 8005020:	d01b      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005022:	e017      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005024:	2b20      	cmp	r3, #32
 8005026:	d00c      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005028:	2b30      	cmp	r3, #48	; 0x30
 800502a:	d018      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800502c:	e012      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800502e:	bf00      	nop
 8005030:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005034:	4baf      	ldr	r3, [pc, #700]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	4aae      	ldr	r2, [pc, #696]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800503a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800503e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005040:	e00e      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3304      	adds	r3, #4
 8005046:	2102      	movs	r1, #2
 8005048:	4618      	mov	r0, r3
 800504a:	f001 f80d 	bl	8006068 <RCCEx_PLL2_Config>
 800504e:	4603      	mov	r3, r0
 8005050:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005052:	e005      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	75fb      	strb	r3, [r7, #23]
      break;
 8005058:	e002      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800505a:	bf00      	nop
 800505c:	e000      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800505e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005066:	4ba3      	ldr	r3, [pc, #652]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005072:	49a0      	ldr	r1, [pc, #640]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005074:	4313      	orrs	r3, r2
 8005076:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005078:	e001      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507a:	7dfb      	ldrb	r3, [r7, #23]
 800507c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d042      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005092:	d01f      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005098:	d805      	bhi.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800509e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a2:	d00e      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80050a4:	e01f      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80050a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050aa:	d01f      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80050ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050b0:	d01e      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80050b2:	e018      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050b4:	4b8f      	ldr	r3, [pc, #572]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	4a8e      	ldr	r2, [pc, #568]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80050c0:	e017      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3304      	adds	r3, #4
 80050c6:	2100      	movs	r1, #0
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 ffcd 	bl	8006068 <RCCEx_PLL2_Config>
 80050ce:	4603      	mov	r3, r0
 80050d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80050d2:	e00e      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3324      	adds	r3, #36	; 0x24
 80050d8:	2100      	movs	r1, #0
 80050da:	4618      	mov	r0, r3
 80050dc:	f001 f876 	bl	80061cc <RCCEx_PLL3_Config>
 80050e0:	4603      	mov	r3, r0
 80050e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80050e4:	e005      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	75fb      	strb	r3, [r7, #23]
      break;
 80050ea:	e002      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80050ec:	bf00      	nop
 80050ee:	e000      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80050f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050f2:	7dfb      	ldrb	r3, [r7, #23]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d109      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80050f8:	4b7e      	ldr	r3, [pc, #504]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005104:	497b      	ldr	r1, [pc, #492]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005106:	4313      	orrs	r3, r2
 8005108:	650b      	str	r3, [r1, #80]	; 0x50
 800510a:	e001      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800510c:	7dfb      	ldrb	r3, [r7, #23]
 800510e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d042      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005124:	d01b      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005126:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800512a:	d805      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d022      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005134:	d00a      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005136:	e01b      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005138:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800513c:	d01d      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800513e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005142:	d01c      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005144:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005148:	d01b      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800514a:	e011      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3304      	adds	r3, #4
 8005150:	2101      	movs	r1, #1
 8005152:	4618      	mov	r0, r3
 8005154:	f000 ff88 	bl	8006068 <RCCEx_PLL2_Config>
 8005158:	4603      	mov	r3, r0
 800515a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800515c:	e012      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	3324      	adds	r3, #36	; 0x24
 8005162:	2101      	movs	r1, #1
 8005164:	4618      	mov	r0, r3
 8005166:	f001 f831 	bl	80061cc <RCCEx_PLL3_Config>
 800516a:	4603      	mov	r3, r0
 800516c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800516e:	e009      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	75fb      	strb	r3, [r7, #23]
      break;
 8005174:	e006      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005176:	bf00      	nop
 8005178:	e004      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800517a:	bf00      	nop
 800517c:	e002      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800517e:	bf00      	nop
 8005180:	e000      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005182:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005184:	7dfb      	ldrb	r3, [r7, #23]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d109      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800518a:	4b5a      	ldr	r3, [pc, #360]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800518c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005196:	4957      	ldr	r1, [pc, #348]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005198:	4313      	orrs	r3, r2
 800519a:	650b      	str	r3, [r1, #80]	; 0x50
 800519c:	e001      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800519e:	7dfb      	ldrb	r3, [r7, #23]
 80051a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d044      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80051b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051b8:	d01b      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80051ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051be:	d805      	bhi.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d022      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80051c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051c8:	d00a      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80051ca:	e01b      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80051cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d0:	d01d      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80051d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051d6:	d01c      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80051d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051dc:	d01b      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80051de:	e011      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3304      	adds	r3, #4
 80051e4:	2101      	movs	r1, #1
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 ff3e 	bl	8006068 <RCCEx_PLL2_Config>
 80051ec:	4603      	mov	r3, r0
 80051ee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80051f0:	e012      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3324      	adds	r3, #36	; 0x24
 80051f6:	2101      	movs	r1, #1
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 ffe7 	bl	80061cc <RCCEx_PLL3_Config>
 80051fe:	4603      	mov	r3, r0
 8005200:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005202:	e009      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	75fb      	strb	r3, [r7, #23]
      break;
 8005208:	e006      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800520a:	bf00      	nop
 800520c:	e004      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800520e:	bf00      	nop
 8005210:	e002      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005212:	bf00      	nop
 8005214:	e000      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005218:	7dfb      	ldrb	r3, [r7, #23]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800521e:	4b35      	ldr	r3, [pc, #212]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005222:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800522c:	4931      	ldr	r1, [pc, #196]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800522e:	4313      	orrs	r3, r2
 8005230:	658b      	str	r3, [r1, #88]	; 0x58
 8005232:	e001      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005234:	7dfb      	ldrb	r3, [r7, #23]
 8005236:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d02d      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800524c:	d005      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800524e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005252:	d009      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005254:	2b00      	cmp	r3, #0
 8005256:	d013      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005258:	e00f      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800525a:	4b26      	ldr	r3, [pc, #152]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	4a25      	ldr	r2, [pc, #148]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005264:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005266:	e00c      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3304      	adds	r3, #4
 800526c:	2101      	movs	r1, #1
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fefa 	bl	8006068 <RCCEx_PLL2_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005278:	e003      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	75fb      	strb	r3, [r7, #23]
      break;
 800527e:	e000      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005282:	7dfb      	ldrb	r3, [r7, #23]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d109      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005288:	4b1a      	ldr	r3, [pc, #104]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800528a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005294:	4917      	ldr	r1, [pc, #92]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005296:	4313      	orrs	r3, r2
 8005298:	650b      	str	r3, [r1, #80]	; 0x50
 800529a:	e001      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529c:	7dfb      	ldrb	r3, [r7, #23]
 800529e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d035      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d81b      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80052b4:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	080052f9 	.word	0x080052f9
 80052c0:	080052cd 	.word	0x080052cd
 80052c4:	080052db 	.word	0x080052db
 80052c8:	080052f9 	.word	0x080052f9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052cc:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	4a08      	ldr	r2, [pc, #32]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80052d8:	e00f      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3304      	adds	r3, #4
 80052de:	2102      	movs	r1, #2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fec1 	bl	8006068 <RCCEx_PLL2_Config>
 80052e6:	4603      	mov	r3, r0
 80052e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80052ea:	e006      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	75fb      	strb	r3, [r7, #23]
      break;
 80052f0:	e003      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80052f2:	bf00      	nop
 80052f4:	58024400 	.word	0x58024400
      break;
 80052f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052fa:	7dfb      	ldrb	r3, [r7, #23]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d109      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005300:	4bba      	ldr	r3, [pc, #744]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005304:	f023 0203 	bic.w	r2, r3, #3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530c:	49b7      	ldr	r1, [pc, #732]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800530e:	4313      	orrs	r3, r2
 8005310:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005312:	e001      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005314:	7dfb      	ldrb	r3, [r7, #23]
 8005316:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 8086 	beq.w	8005432 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005326:	4bb2      	ldr	r3, [pc, #712]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4ab1      	ldr	r2, [pc, #708]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800532c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005330:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005332:	f7fd fcf5 	bl	8002d20 <HAL_GetTick>
 8005336:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005338:	e009      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800533a:	f7fd fcf1 	bl	8002d20 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b64      	cmp	r3, #100	; 0x64
 8005346:	d902      	bls.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	75fb      	strb	r3, [r7, #23]
        break;
 800534c:	e005      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800534e:	4ba8      	ldr	r3, [pc, #672]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0ef      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800535a:	7dfb      	ldrb	r3, [r7, #23]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d166      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005360:	4ba2      	ldr	r3, [pc, #648]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005362:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800536a:	4053      	eors	r3, r2
 800536c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005370:	2b00      	cmp	r3, #0
 8005372:	d013      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005374:	4b9d      	ldr	r3, [pc, #628]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800537c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800537e:	4b9b      	ldr	r3, [pc, #620]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005382:	4a9a      	ldr	r2, [pc, #616]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005388:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800538a:	4b98      	ldr	r3, [pc, #608]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538e:	4a97      	ldr	r2, [pc, #604]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005394:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005396:	4a95      	ldr	r2, [pc, #596]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a6:	d115      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a8:	f7fd fcba 	bl	8002d20 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053ae:	e00b      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b0:	f7fd fcb6 	bl	8002d20 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80053be:	4293      	cmp	r3, r2
 80053c0:	d902      	bls.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	75fb      	strb	r3, [r7, #23]
            break;
 80053c6:	e005      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053c8:	4b88      	ldr	r3, [pc, #544]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80053ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0ed      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80053d4:	7dfb      	ldrb	r3, [r7, #23]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d126      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053e8:	d10d      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80053ea:	4b80      	ldr	r3, [pc, #512]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053f8:	0919      	lsrs	r1, r3, #4
 80053fa:	4b7e      	ldr	r3, [pc, #504]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80053fc:	400b      	ands	r3, r1
 80053fe:	497b      	ldr	r1, [pc, #492]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005400:	4313      	orrs	r3, r2
 8005402:	610b      	str	r3, [r1, #16]
 8005404:	e005      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005406:	4b79      	ldr	r3, [pc, #484]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	4a78      	ldr	r2, [pc, #480]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800540c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005410:	6113      	str	r3, [r2, #16]
 8005412:	4b76      	ldr	r3, [pc, #472]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005414:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800541c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005420:	4972      	ldr	r1, [pc, #456]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005422:	4313      	orrs	r3, r2
 8005424:	670b      	str	r3, [r1, #112]	; 0x70
 8005426:	e004      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005428:	7dfb      	ldrb	r3, [r7, #23]
 800542a:	75bb      	strb	r3, [r7, #22]
 800542c:	e001      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542e:	7dfb      	ldrb	r3, [r7, #23]
 8005430:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d07d      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005442:	2b28      	cmp	r3, #40	; 0x28
 8005444:	d866      	bhi.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005446:	a201      	add	r2, pc, #4	; (adr r2, 800544c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544c:	0800551b 	.word	0x0800551b
 8005450:	08005515 	.word	0x08005515
 8005454:	08005515 	.word	0x08005515
 8005458:	08005515 	.word	0x08005515
 800545c:	08005515 	.word	0x08005515
 8005460:	08005515 	.word	0x08005515
 8005464:	08005515 	.word	0x08005515
 8005468:	08005515 	.word	0x08005515
 800546c:	080054f1 	.word	0x080054f1
 8005470:	08005515 	.word	0x08005515
 8005474:	08005515 	.word	0x08005515
 8005478:	08005515 	.word	0x08005515
 800547c:	08005515 	.word	0x08005515
 8005480:	08005515 	.word	0x08005515
 8005484:	08005515 	.word	0x08005515
 8005488:	08005515 	.word	0x08005515
 800548c:	08005503 	.word	0x08005503
 8005490:	08005515 	.word	0x08005515
 8005494:	08005515 	.word	0x08005515
 8005498:	08005515 	.word	0x08005515
 800549c:	08005515 	.word	0x08005515
 80054a0:	08005515 	.word	0x08005515
 80054a4:	08005515 	.word	0x08005515
 80054a8:	08005515 	.word	0x08005515
 80054ac:	0800551b 	.word	0x0800551b
 80054b0:	08005515 	.word	0x08005515
 80054b4:	08005515 	.word	0x08005515
 80054b8:	08005515 	.word	0x08005515
 80054bc:	08005515 	.word	0x08005515
 80054c0:	08005515 	.word	0x08005515
 80054c4:	08005515 	.word	0x08005515
 80054c8:	08005515 	.word	0x08005515
 80054cc:	0800551b 	.word	0x0800551b
 80054d0:	08005515 	.word	0x08005515
 80054d4:	08005515 	.word	0x08005515
 80054d8:	08005515 	.word	0x08005515
 80054dc:	08005515 	.word	0x08005515
 80054e0:	08005515 	.word	0x08005515
 80054e4:	08005515 	.word	0x08005515
 80054e8:	08005515 	.word	0x08005515
 80054ec:	0800551b 	.word	0x0800551b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3304      	adds	r3, #4
 80054f4:	2101      	movs	r1, #1
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fdb6 	bl	8006068 <RCCEx_PLL2_Config>
 80054fc:	4603      	mov	r3, r0
 80054fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005500:	e00c      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3324      	adds	r3, #36	; 0x24
 8005506:	2101      	movs	r1, #1
 8005508:	4618      	mov	r0, r3
 800550a:	f000 fe5f 	bl	80061cc <RCCEx_PLL3_Config>
 800550e:	4603      	mov	r3, r0
 8005510:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005512:	e003      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	75fb      	strb	r3, [r7, #23]
      break;
 8005518:	e000      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800551a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800551c:	7dfb      	ldrb	r3, [r7, #23]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d109      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005522:	4b32      	ldr	r3, [pc, #200]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005526:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800552e:	492f      	ldr	r1, [pc, #188]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005530:	4313      	orrs	r3, r2
 8005532:	654b      	str	r3, [r1, #84]	; 0x54
 8005534:	e001      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005536:	7dfb      	ldrb	r3, [r7, #23]
 8005538:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d037      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800554a:	2b05      	cmp	r3, #5
 800554c:	d820      	bhi.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800554e:	a201      	add	r2, pc, #4	; (adr r2, 8005554 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005554:	08005597 	.word	0x08005597
 8005558:	0800556d 	.word	0x0800556d
 800555c:	0800557f 	.word	0x0800557f
 8005560:	08005597 	.word	0x08005597
 8005564:	08005597 	.word	0x08005597
 8005568:	08005597 	.word	0x08005597
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	3304      	adds	r3, #4
 8005570:	2101      	movs	r1, #1
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fd78 	bl	8006068 <RCCEx_PLL2_Config>
 8005578:	4603      	mov	r3, r0
 800557a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800557c:	e00c      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3324      	adds	r3, #36	; 0x24
 8005582:	2101      	movs	r1, #1
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fe21 	bl	80061cc <RCCEx_PLL3_Config>
 800558a:	4603      	mov	r3, r0
 800558c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800558e:	e003      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	75fb      	strb	r3, [r7, #23]
      break;
 8005594:	e000      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8005596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005598:	7dfb      	ldrb	r3, [r7, #23]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d109      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800559e:	4b13      	ldr	r3, [pc, #76]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a2:	f023 0207 	bic.w	r2, r3, #7
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055aa:	4910      	ldr	r1, [pc, #64]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	654b      	str	r3, [r1, #84]	; 0x54
 80055b0:	e001      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b2:	7dfb      	ldrb	r3, [r7, #23]
 80055b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d040      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c8:	2b05      	cmp	r3, #5
 80055ca:	d827      	bhi.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80055cc:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	08005623 	.word	0x08005623
 80055d8:	080055f9 	.word	0x080055f9
 80055dc:	0800560b 	.word	0x0800560b
 80055e0:	08005623 	.word	0x08005623
 80055e4:	08005623 	.word	0x08005623
 80055e8:	08005623 	.word	0x08005623
 80055ec:	58024400 	.word	0x58024400
 80055f0:	58024800 	.word	0x58024800
 80055f4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3304      	adds	r3, #4
 80055fc:	2101      	movs	r1, #1
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 fd32 	bl	8006068 <RCCEx_PLL2_Config>
 8005604:	4603      	mov	r3, r0
 8005606:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005608:	e00c      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3324      	adds	r3, #36	; 0x24
 800560e:	2101      	movs	r1, #1
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fddb 	bl	80061cc <RCCEx_PLL3_Config>
 8005616:	4603      	mov	r3, r0
 8005618:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800561a:	e003      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	75fb      	strb	r3, [r7, #23]
      break;
 8005620:	e000      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8005622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005624:	7dfb      	ldrb	r3, [r7, #23]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10a      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800562a:	4bb2      	ldr	r3, [pc, #712]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800562c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562e:	f023 0207 	bic.w	r2, r3, #7
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005638:	49ae      	ldr	r1, [pc, #696]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800563a:	4313      	orrs	r3, r2
 800563c:	658b      	str	r3, [r1, #88]	; 0x58
 800563e:	e001      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005640:	7dfb      	ldrb	r3, [r7, #23]
 8005642:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d044      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800565a:	d01b      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800565c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005660:	d805      	bhi.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8005662:	2b00      	cmp	r3, #0
 8005664:	d022      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8005666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800566a:	d00a      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800566c:	e01b      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800566e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005672:	d01d      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005678:	d01c      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800567a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800567e:	d01b      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005680:	e011      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3304      	adds	r3, #4
 8005686:	2100      	movs	r1, #0
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fced 	bl	8006068 <RCCEx_PLL2_Config>
 800568e:	4603      	mov	r3, r0
 8005690:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005692:	e012      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3324      	adds	r3, #36	; 0x24
 8005698:	2102      	movs	r1, #2
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fd96 	bl	80061cc <RCCEx_PLL3_Config>
 80056a0:	4603      	mov	r3, r0
 80056a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80056a4:	e009      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	75fb      	strb	r3, [r7, #23]
      break;
 80056aa:	e006      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80056ac:	bf00      	nop
 80056ae:	e004      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80056b0:	bf00      	nop
 80056b2:	e002      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80056b4:	bf00      	nop
 80056b6:	e000      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80056b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10a      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056c0:	4b8c      	ldr	r3, [pc, #560]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80056c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056ce:	4989      	ldr	r1, [pc, #548]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	654b      	str	r3, [r1, #84]	; 0x54
 80056d4:	e001      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d6:	7dfb      	ldrb	r3, [r7, #23]
 80056d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d044      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f0:	d01b      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80056f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f6:	d805      	bhi.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d022      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80056fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005700:	d00a      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005702:	e01b      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005708:	d01d      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800570a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800570e:	d01c      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8005710:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005714:	d01b      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005716:	e011      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3304      	adds	r3, #4
 800571c:	2100      	movs	r1, #0
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fca2 	bl	8006068 <RCCEx_PLL2_Config>
 8005724:	4603      	mov	r3, r0
 8005726:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005728:	e012      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3324      	adds	r3, #36	; 0x24
 800572e:	2102      	movs	r1, #2
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fd4b 	bl	80061cc <RCCEx_PLL3_Config>
 8005736:	4603      	mov	r3, r0
 8005738:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800573a:	e009      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	75fb      	strb	r3, [r7, #23]
      break;
 8005740:	e006      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005742:	bf00      	nop
 8005744:	e004      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005746:	bf00      	nop
 8005748:	e002      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800574a:	bf00      	nop
 800574c:	e000      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800574e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005750:	7dfb      	ldrb	r3, [r7, #23]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10a      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005756:	4b67      	ldr	r3, [pc, #412]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800575a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005764:	4963      	ldr	r1, [pc, #396]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005766:	4313      	orrs	r3, r2
 8005768:	658b      	str	r3, [r1, #88]	; 0x58
 800576a:	e001      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576c:	7dfb      	ldrb	r3, [r7, #23]
 800576e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005778:	2b00      	cmp	r3, #0
 800577a:	d044      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005786:	d01b      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800578c:	d805      	bhi.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800578e:	2b00      	cmp	r3, #0
 8005790:	d022      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005796:	d00a      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005798:	e01b      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800579a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800579e:	d01d      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80057a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80057a4:	d01c      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80057a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80057aa:	d01b      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80057ac:	e011      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	3304      	adds	r3, #4
 80057b2:	2100      	movs	r1, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fc57 	bl	8006068 <RCCEx_PLL2_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80057be:	e012      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3324      	adds	r3, #36	; 0x24
 80057c4:	2102      	movs	r1, #2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fd00 	bl	80061cc <RCCEx_PLL3_Config>
 80057cc:	4603      	mov	r3, r0
 80057ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80057d0:	e009      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	75fb      	strb	r3, [r7, #23]
      break;
 80057d6:	e006      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80057d8:	bf00      	nop
 80057da:	e004      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80057dc:	bf00      	nop
 80057de:	e002      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80057e0:	bf00      	nop
 80057e2:	e000      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80057e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057e6:	7dfb      	ldrb	r3, [r7, #23]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10a      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80057ec:	4b41      	ldr	r3, [pc, #260]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057fa:	493e      	ldr	r1, [pc, #248]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	658b      	str	r3, [r1, #88]	; 0x58
 8005800:	e001      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005802:	7dfb      	ldrb	r3, [r7, #23]
 8005804:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	2b00      	cmp	r3, #0
 8005810:	d01a      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581c:	d10a      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3324      	adds	r3, #36	; 0x24
 8005822:	2102      	movs	r1, #2
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fcd1 	bl	80061cc <RCCEx_PLL3_Config>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005834:	4b2f      	ldr	r3, [pc, #188]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005838:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005842:	492c      	ldr	r1, [pc, #176]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005844:	4313      	orrs	r3, r2
 8005846:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0310 	and.w	r3, r3, #16
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01a      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800585a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800585e:	d10a      	bne.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3324      	adds	r3, #36	; 0x24
 8005864:	2102      	movs	r1, #2
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fcb0 	bl	80061cc <RCCEx_PLL3_Config>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005876:	4b1f      	ldr	r3, [pc, #124]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005884:	491b      	ldr	r1, [pc, #108]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005886:	4313      	orrs	r3, r2
 8005888:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d032      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800589c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a0:	d00d      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80058a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058a6:	d016      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d111      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3304      	adds	r3, #4
 80058b0:	2100      	movs	r1, #0
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fbd8 	bl	8006068 <RCCEx_PLL2_Config>
 80058b8:	4603      	mov	r3, r0
 80058ba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80058bc:	e00c      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	3324      	adds	r3, #36	; 0x24
 80058c2:	2102      	movs	r1, #2
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 fc81 	bl	80061cc <RCCEx_PLL3_Config>
 80058ca:	4603      	mov	r3, r0
 80058cc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80058ce:	e003      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	75fb      	strb	r3, [r7, #23]
      break;
 80058d4:	e000      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80058d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058d8:	7dfb      	ldrb	r3, [r7, #23]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10c      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058de:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80058ec:	4901      	ldr	r1, [pc, #4]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	658b      	str	r3, [r1, #88]	; 0x58
 80058f2:	e003      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80058f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f8:	7dfb      	ldrb	r3, [r7, #23]
 80058fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d02f      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800590e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005912:	d00c      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005914:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005918:	d015      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800591a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800591e:	d10f      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005920:	4b79      	ldr	r3, [pc, #484]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	4a78      	ldr	r2, [pc, #480]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800592a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800592c:	e00c      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3324      	adds	r3, #36	; 0x24
 8005932:	2101      	movs	r1, #1
 8005934:	4618      	mov	r0, r3
 8005936:	f000 fc49 	bl	80061cc <RCCEx_PLL3_Config>
 800593a:	4603      	mov	r3, r0
 800593c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800593e:	e003      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	75fb      	strb	r3, [r7, #23]
      break;
 8005944:	e000      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005948:	7dfb      	ldrb	r3, [r7, #23]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10a      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800594e:	4b6e      	ldr	r3, [pc, #440]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005952:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800595c:	496a      	ldr	r1, [pc, #424]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800595e:	4313      	orrs	r3, r2
 8005960:	654b      	str	r3, [r1, #84]	; 0x54
 8005962:	e001      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005964:	7dfb      	ldrb	r3, [r7, #23]
 8005966:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d029      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800597c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005980:	d007      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005982:	e00f      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005984:	4b60      	ldr	r3, [pc, #384]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	4a5f      	ldr	r2, [pc, #380]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800598a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800598e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005990:	e00b      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3304      	adds	r3, #4
 8005996:	2102      	movs	r1, #2
 8005998:	4618      	mov	r0, r3
 800599a:	f000 fb65 	bl	8006068 <RCCEx_PLL2_Config>
 800599e:	4603      	mov	r3, r0
 80059a0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80059a2:	e002      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	75fb      	strb	r3, [r7, #23]
      break;
 80059a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059aa:	7dfb      	ldrb	r3, [r7, #23]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d109      	bne.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80059b0:	4b55      	ldr	r3, [pc, #340]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80059b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059bc:	4952      	ldr	r1, [pc, #328]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80059c2:	e001      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c4:	7dfb      	ldrb	r3, [r7, #23]
 80059c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3324      	adds	r3, #36	; 0x24
 80059d8:	2102      	movs	r1, #2
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fbf6 	bl	80061cc <RCCEx_PLL3_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d02f      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059fe:	d00c      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a04:	d802      	bhi.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d011      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005a0a:	e00d      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a10:	d00f      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a16:	d00e      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005a18:	e006      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a1a:	4b3b      	ldr	r3, [pc, #236]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	4a3a      	ldr	r2, [pc, #232]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005a26:	e007      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a2c:	e004      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005a2e:	bf00      	nop
 8005a30:	e002      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005a32:	bf00      	nop
 8005a34:	e000      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005a36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d109      	bne.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a3e:	4b32      	ldr	r3, [pc, #200]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a4a:	492f      	ldr	r1, [pc, #188]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	654b      	str	r3, [r1, #84]	; 0x54
 8005a50:	e001      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a52:	7dfb      	ldrb	r3, [r7, #23]
 8005a54:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d008      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a62:	4b29      	ldr	r3, [pc, #164]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6e:	4926      	ldr	r1, [pc, #152]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d009      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005a80:	4b21      	ldr	r3, [pc, #132]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a8e:	491e      	ldr	r1, [pc, #120]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005aa0:	4b19      	ldr	r3, [pc, #100]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aac:	4916      	ldr	r1, [pc, #88]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00d      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005abe:	4b12      	ldr	r3, [pc, #72]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	4a11      	ldr	r2, [pc, #68]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ac4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ac8:	6113      	str	r3, [r2, #16]
 8005aca:	4b0f      	ldr	r3, [pc, #60]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005acc:	691a      	ldr	r2, [r3, #16]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005ad4:	490c      	ldr	r1, [pc, #48]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	da08      	bge.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005ae2:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aee:	4906      	ldr	r1, [pc, #24]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005af4:	7dbb      	ldrb	r3, [r7, #22]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e000      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	58024400 	.word	0x58024400

08005b0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b10:	f7ff f8b2 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 8005b14:	4601      	mov	r1, r0
 8005b16:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	091b      	lsrs	r3, r3, #4
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	4a04      	ldr	r2, [pc, #16]	; (8005b34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b22:	5cd3      	ldrb	r3, [r2, r3]
 8005b24:	f003 031f 	and.w	r3, r3, #31
 8005b28:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	58024400 	.word	0x58024400
 8005b34:	0800b7f8 	.word	0x0800b7f8

08005b38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b089      	sub	sp, #36	; 0x24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b40:	4b9d      	ldr	r3, [pc, #628]	; (8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005b4a:	4b9b      	ldr	r3, [pc, #620]	; (8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4e:	0b1b      	lsrs	r3, r3, #12
 8005b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005b56:	4b98      	ldr	r3, [pc, #608]	; (8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	091b      	lsrs	r3, r3, #4
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005b62:	4b95      	ldr	r3, [pc, #596]	; (8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b66:	08db      	lsrs	r3, r3, #3
 8005b68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	fb02 f303 	mul.w	r3, r2, r3
 8005b72:	ee07 3a90 	vmov	s15, r3
 8005b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 810a 	beq.w	8005d9a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d05a      	beq.n	8005c42 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d302      	bcc.n	8005b96 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d078      	beq.n	8005c86 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005b94:	e099      	b.n	8005cca <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b96:	4b88      	ldr	r3, [pc, #544]	; (8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d02d      	beq.n	8005bfe <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ba2:	4b85      	ldr	r3, [pc, #532]	; (8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	08db      	lsrs	r3, r3, #3
 8005ba8:	f003 0303 	and.w	r3, r3, #3
 8005bac:	4a83      	ldr	r2, [pc, #524]	; (8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005bae:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	ee07 3a90 	vmov	s15, r3
 8005bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	ee07 3a90 	vmov	s15, r3
 8005bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bcc:	4b7a      	ldr	r3, [pc, #488]	; (8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd4:	ee07 3a90 	vmov	s15, r3
 8005bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005be0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005be4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005be8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005bfc:	e087      	b.n	8005d0e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	ee07 3a90 	vmov	s15, r3
 8005c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c08:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c10:	4b69      	ldr	r3, [pc, #420]	; (8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c18:	ee07 3a90 	vmov	s15, r3
 8005c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c20:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c24:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005c28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c40:	e065      	b.n	8005d0e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	ee07 3a90 	vmov	s15, r3
 8005c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005c50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c54:	4b58      	ldr	r3, [pc, #352]	; (8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5c:	ee07 3a90 	vmov	s15, r3
 8005c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c64:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c68:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005c6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c84:	e043      	b.n	8005d0e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	ee07 3a90 	vmov	s15, r3
 8005c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c90:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005dcc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c98:	4b47      	ldr	r3, [pc, #284]	; (8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca0:	ee07 3a90 	vmov	s15, r3
 8005ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cac:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cc8:	e021      	b.n	8005d0e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	ee07 3a90 	vmov	s15, r3
 8005cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005cd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cdc:	4b36      	ldr	r3, [pc, #216]	; (8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce4:	ee07 3a90 	vmov	s15, r3
 8005ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cec:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cf0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005cf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d0c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005d0e:	4b2a      	ldr	r3, [pc, #168]	; (8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d12:	0a5b      	lsrs	r3, r3, #9
 8005d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d18:	ee07 3a90 	vmov	s15, r3
 8005d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d28:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d34:	ee17 2a90 	vmov	r2, s15
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005d3c:	4b1e      	ldr	r3, [pc, #120]	; (8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	0c1b      	lsrs	r3, r3, #16
 8005d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d56:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d62:	ee17 2a90 	vmov	r2, s15
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005d6a:	4b13      	ldr	r3, [pc, #76]	; (8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	0e1b      	lsrs	r3, r3, #24
 8005d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d74:	ee07 3a90 	vmov	s15, r3
 8005d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d84:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d90:	ee17 2a90 	vmov	r2, s15
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d98:	e008      	b.n	8005dac <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	609a      	str	r2, [r3, #8]
}
 8005dac:	bf00      	nop
 8005dae:	3724      	adds	r7, #36	; 0x24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	58024400 	.word	0x58024400
 8005dbc:	03d09000 	.word	0x03d09000
 8005dc0:	46000000 	.word	0x46000000
 8005dc4:	4c742400 	.word	0x4c742400
 8005dc8:	4a742400 	.word	0x4a742400
 8005dcc:	4bbebc20 	.word	0x4bbebc20

08005dd0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b089      	sub	sp, #36	; 0x24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dd8:	4b9d      	ldr	r3, [pc, #628]	; (8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ddc:	f003 0303 	and.w	r3, r3, #3
 8005de0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005de2:	4b9b      	ldr	r3, [pc, #620]	; (8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	0d1b      	lsrs	r3, r3, #20
 8005de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005dee:	4b98      	ldr	r3, [pc, #608]	; (8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df2:	0a1b      	lsrs	r3, r3, #8
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005dfa:	4b95      	ldr	r3, [pc, #596]	; (8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfe:	08db      	lsrs	r3, r3, #3
 8005e00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	fb02 f303 	mul.w	r3, r2, r3
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 810a 	beq.w	8006032 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d05a      	beq.n	8005eda <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d302      	bcc.n	8005e2e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d078      	beq.n	8005f1e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005e2c:	e099      	b.n	8005f62 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e2e:	4b88      	ldr	r3, [pc, #544]	; (8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d02d      	beq.n	8005e96 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e3a:	4b85      	ldr	r3, [pc, #532]	; (8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	08db      	lsrs	r3, r3, #3
 8005e40:	f003 0303 	and.w	r3, r3, #3
 8005e44:	4a83      	ldr	r2, [pc, #524]	; (8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005e46:	fa22 f303 	lsr.w	r3, r2, r3
 8005e4a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	ee07 3a90 	vmov	s15, r3
 8005e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e64:	4b7a      	ldr	r3, [pc, #488]	; (8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6c:	ee07 3a90 	vmov	s15, r3
 8005e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e74:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e78:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006058 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005e7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e90:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005e94:	e087      	b.n	8005fa6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	ee07 3a90 	vmov	s15, r3
 8005e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800605c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005ea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea8:	4b69      	ldr	r3, [pc, #420]	; (8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb0:	ee07 3a90 	vmov	s15, r3
 8005eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ebc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006058 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005ec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ed8:	e065      	b.n	8005fa6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005ee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eec:	4b58      	ldr	r3, [pc, #352]	; (8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef4:	ee07 3a90 	vmov	s15, r3
 8005ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f00:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006058 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005f04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f1c:	e043      	b.n	8005fa6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f28:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006064 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005f2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f30:	4b47      	ldr	r3, [pc, #284]	; (8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f38:	ee07 3a90 	vmov	s15, r3
 8005f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f40:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f44:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006058 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005f48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f60:	e021      	b.n	8005fa6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	ee07 3a90 	vmov	s15, r3
 8005f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005f70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f74:	4b36      	ldr	r3, [pc, #216]	; (8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f7c:	ee07 3a90 	vmov	s15, r3
 8005f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f84:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f88:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006058 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005f8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fa4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005fa6:	4b2a      	ldr	r3, [pc, #168]	; (8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	0a5b      	lsrs	r3, r3, #9
 8005fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fb0:	ee07 3a90 	vmov	s15, r3
 8005fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fcc:	ee17 2a90 	vmov	r2, s15
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005fd4:	4b1e      	ldr	r3, [pc, #120]	; (8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd8:	0c1b      	lsrs	r3, r3, #16
 8005fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fee:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ffa:	ee17 2a90 	vmov	r2, s15
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006002:	4b13      	ldr	r3, [pc, #76]	; (8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	0e1b      	lsrs	r3, r3, #24
 8006008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800600c:	ee07 3a90 	vmov	s15, r3
 8006010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006014:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006018:	ee37 7a87 	vadd.f32	s14, s15, s14
 800601c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006028:	ee17 2a90 	vmov	r2, s15
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006030:	e008      	b.n	8006044 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	609a      	str	r2, [r3, #8]
}
 8006044:	bf00      	nop
 8006046:	3724      	adds	r7, #36	; 0x24
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	58024400 	.word	0x58024400
 8006054:	03d09000 	.word	0x03d09000
 8006058:	46000000 	.word	0x46000000
 800605c:	4c742400 	.word	0x4c742400
 8006060:	4a742400 	.word	0x4a742400
 8006064:	4bbebc20 	.word	0x4bbebc20

08006068 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006076:	4b53      	ldr	r3, [pc, #332]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	2b03      	cmp	r3, #3
 8006080:	d101      	bne.n	8006086 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e099      	b.n	80061ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006086:	4b4f      	ldr	r3, [pc, #316]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a4e      	ldr	r2, [pc, #312]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 800608c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006092:	f7fc fe45 	bl	8002d20 <HAL_GetTick>
 8006096:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006098:	e008      	b.n	80060ac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800609a:	f7fc fe41 	bl	8002d20 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d901      	bls.n	80060ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e086      	b.n	80061ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060ac:	4b45      	ldr	r3, [pc, #276]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1f0      	bne.n	800609a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80060b8:	4b42      	ldr	r3, [pc, #264]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 80060ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	031b      	lsls	r3, r3, #12
 80060c6:	493f      	ldr	r1, [pc, #252]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	628b      	str	r3, [r1, #40]	; 0x28
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	3b01      	subs	r3, #1
 80060d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	3b01      	subs	r3, #1
 80060dc:	025b      	lsls	r3, r3, #9
 80060de:	b29b      	uxth	r3, r3
 80060e0:	431a      	orrs	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	041b      	lsls	r3, r3, #16
 80060ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	061b      	lsls	r3, r3, #24
 80060f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060fc:	4931      	ldr	r1, [pc, #196]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006102:	4b30      	ldr	r3, [pc, #192]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006106:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	492d      	ldr	r1, [pc, #180]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006110:	4313      	orrs	r3, r2
 8006112:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006114:	4b2b      	ldr	r3, [pc, #172]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	f023 0220 	bic.w	r2, r3, #32
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	4928      	ldr	r1, [pc, #160]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006122:	4313      	orrs	r3, r2
 8006124:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006126:	4b27      	ldr	r3, [pc, #156]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	4a26      	ldr	r2, [pc, #152]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 800612c:	f023 0310 	bic.w	r3, r3, #16
 8006130:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006132:	4b24      	ldr	r3, [pc, #144]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006134:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006136:	4b24      	ldr	r3, [pc, #144]	; (80061c8 <RCCEx_PLL2_Config+0x160>)
 8006138:	4013      	ands	r3, r2
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	69d2      	ldr	r2, [r2, #28]
 800613e:	00d2      	lsls	r2, r2, #3
 8006140:	4920      	ldr	r1, [pc, #128]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006142:	4313      	orrs	r3, r2
 8006144:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006146:	4b1f      	ldr	r3, [pc, #124]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	4a1e      	ldr	r2, [pc, #120]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 800614c:	f043 0310 	orr.w	r3, r3, #16
 8006150:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d106      	bne.n	8006166 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006158:	4b1a      	ldr	r3, [pc, #104]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 800615a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615c:	4a19      	ldr	r2, [pc, #100]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 800615e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006162:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006164:	e00f      	b.n	8006186 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d106      	bne.n	800617a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800616c:	4b15      	ldr	r3, [pc, #84]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	4a14      	ldr	r2, [pc, #80]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006176:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006178:	e005      	b.n	8006186 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800617a:	4b12      	ldr	r3, [pc, #72]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617e:	4a11      	ldr	r2, [pc, #68]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006180:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006184:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006186:	4b0f      	ldr	r3, [pc, #60]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a0e      	ldr	r2, [pc, #56]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 800618c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006192:	f7fc fdc5 	bl	8002d20 <HAL_GetTick>
 8006196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006198:	e008      	b.n	80061ac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800619a:	f7fc fdc1 	bl	8002d20 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e006      	b.n	80061ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061ac:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0f0      	beq.n	800619a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	58024400 	.word	0x58024400
 80061c8:	ffff0007 	.word	0xffff0007

080061cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061da:	4b53      	ldr	r3, [pc, #332]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d101      	bne.n	80061ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e099      	b.n	800631e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80061ea:	4b4f      	ldr	r3, [pc, #316]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a4e      	ldr	r2, [pc, #312]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80061f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061f6:	f7fc fd93 	bl	8002d20 <HAL_GetTick>
 80061fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061fc:	e008      	b.n	8006210 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80061fe:	f7fc fd8f 	bl	8002d20 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d901      	bls.n	8006210 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e086      	b.n	800631e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006210:	4b45      	ldr	r3, [pc, #276]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1f0      	bne.n	80061fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800621c:	4b42      	ldr	r3, [pc, #264]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 800621e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006220:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	051b      	lsls	r3, r3, #20
 800622a:	493f      	ldr	r1, [pc, #252]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 800622c:	4313      	orrs	r3, r2
 800622e:	628b      	str	r3, [r1, #40]	; 0x28
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	3b01      	subs	r3, #1
 8006236:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	3b01      	subs	r3, #1
 8006240:	025b      	lsls	r3, r3, #9
 8006242:	b29b      	uxth	r3, r3
 8006244:	431a      	orrs	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	3b01      	subs	r3, #1
 800624c:	041b      	lsls	r3, r3, #16
 800624e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006252:	431a      	orrs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	3b01      	subs	r3, #1
 800625a:	061b      	lsls	r3, r3, #24
 800625c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006260:	4931      	ldr	r1, [pc, #196]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 8006262:	4313      	orrs	r3, r2
 8006264:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006266:	4b30      	ldr	r3, [pc, #192]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 8006268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	492d      	ldr	r1, [pc, #180]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 8006274:	4313      	orrs	r3, r2
 8006276:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006278:	4b2b      	ldr	r3, [pc, #172]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	4928      	ldr	r1, [pc, #160]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 8006286:	4313      	orrs	r3, r2
 8006288:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800628a:	4b27      	ldr	r3, [pc, #156]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	4a26      	ldr	r2, [pc, #152]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 8006290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006294:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006296:	4b24      	ldr	r3, [pc, #144]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 8006298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800629a:	4b24      	ldr	r3, [pc, #144]	; (800632c <RCCEx_PLL3_Config+0x160>)
 800629c:	4013      	ands	r3, r2
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	69d2      	ldr	r2, [r2, #28]
 80062a2:	00d2      	lsls	r2, r2, #3
 80062a4:	4920      	ldr	r1, [pc, #128]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80062aa:	4b1f      	ldr	r3, [pc, #124]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ae:	4a1e      	ldr	r2, [pc, #120]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d106      	bne.n	80062ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80062bc:	4b1a      	ldr	r3, [pc, #104]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	4a19      	ldr	r2, [pc, #100]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80062c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062c8:	e00f      	b.n	80062ea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d106      	bne.n	80062de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80062d0:	4b15      	ldr	r3, [pc, #84]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	4a14      	ldr	r2, [pc, #80]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80062da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062dc:	e005      	b.n	80062ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80062de:	4b12      	ldr	r3, [pc, #72]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e2:	4a11      	ldr	r2, [pc, #68]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80062ea:	4b0f      	ldr	r3, [pc, #60]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a0e      	ldr	r2, [pc, #56]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062f6:	f7fc fd13 	bl	8002d20 <HAL_GetTick>
 80062fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062fc:	e008      	b.n	8006310 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80062fe:	f7fc fd0f 	bl	8002d20 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	2b02      	cmp	r3, #2
 800630a:	d901      	bls.n	8006310 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e006      	b.n	800631e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006310:	4b05      	ldr	r3, [pc, #20]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0f0      	beq.n	80062fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800631c:	7bfb      	ldrb	r3, [r7, #15]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	58024400 	.word	0x58024400
 800632c:	ffff0007 	.word	0xffff0007

08006330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e049      	b.n	80063d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7fc fae8 	bl	800292c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3304      	adds	r3, #4
 800636c:	4619      	mov	r1, r3
 800636e:	4610      	mov	r0, r2
 8006370:	f000 fa56 	bl	8006820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b082      	sub	sp, #8
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d122      	bne.n	800643a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d11b      	bne.n	800643a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f06f 0202 	mvn.w	r2, #2
 800640a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	f003 0303 	and.w	r3, r3, #3
 800641c:	2b00      	cmp	r3, #0
 800641e:	d003      	beq.n	8006428 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f9df 	bl	80067e4 <HAL_TIM_IC_CaptureCallback>
 8006426:	e005      	b.n	8006434 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f9d1 	bl	80067d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f9e2 	bl	80067f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b04      	cmp	r3, #4
 8006446:	d122      	bne.n	800648e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	2b04      	cmp	r3, #4
 8006454:	d11b      	bne.n	800648e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f06f 0204 	mvn.w	r2, #4
 800645e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f9b5 	bl	80067e4 <HAL_TIM_IC_CaptureCallback>
 800647a:	e005      	b.n	8006488 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f9a7 	bl	80067d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f9b8 	bl	80067f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b08      	cmp	r3, #8
 800649a:	d122      	bne.n	80064e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	2b08      	cmp	r3, #8
 80064a8:	d11b      	bne.n	80064e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f06f 0208 	mvn.w	r2, #8
 80064b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2204      	movs	r2, #4
 80064b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	f003 0303 	and.w	r3, r3, #3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d003      	beq.n	80064d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f98b 	bl	80067e4 <HAL_TIM_IC_CaptureCallback>
 80064ce:	e005      	b.n	80064dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f97d 	bl	80067d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f98e 	bl	80067f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	f003 0310 	and.w	r3, r3, #16
 80064ec:	2b10      	cmp	r3, #16
 80064ee:	d122      	bne.n	8006536 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f003 0310 	and.w	r3, r3, #16
 80064fa:	2b10      	cmp	r3, #16
 80064fc:	d11b      	bne.n	8006536 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f06f 0210 	mvn.w	r2, #16
 8006506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2208      	movs	r2, #8
 800650c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f961 	bl	80067e4 <HAL_TIM_IC_CaptureCallback>
 8006522:	e005      	b.n	8006530 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f953 	bl	80067d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f964 	bl	80067f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b01      	cmp	r3, #1
 8006542:	d10e      	bne.n	8006562 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b01      	cmp	r3, #1
 8006550:	d107      	bne.n	8006562 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f06f 0201 	mvn.w	r2, #1
 800655a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f92d 	bl	80067bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656c:	2b80      	cmp	r3, #128	; 0x80
 800656e:	d10e      	bne.n	800658e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657a:	2b80      	cmp	r3, #128	; 0x80
 800657c:	d107      	bne.n	800658e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fb13 	bl	8006bb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800659c:	d10e      	bne.n	80065bc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a8:	2b80      	cmp	r3, #128	; 0x80
 80065aa:	d107      	bne.n	80065bc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fb06 	bl	8006bc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c6:	2b40      	cmp	r3, #64	; 0x40
 80065c8:	d10e      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d4:	2b40      	cmp	r3, #64	; 0x40
 80065d6:	d107      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f912 	bl	800680c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b20      	cmp	r3, #32
 80065f4:	d10e      	bne.n	8006614 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f003 0320 	and.w	r3, r3, #32
 8006600:	2b20      	cmp	r3, #32
 8006602:	d107      	bne.n	8006614 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f06f 0220 	mvn.w	r2, #32
 800660c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fac6 	bl	8006ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006614:	bf00      	nop
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_TIM_ConfigClockSource+0x18>
 8006630:	2302      	movs	r3, #2
 8006632:	e0b7      	b.n	80067a4 <HAL_TIM_ConfigClockSource+0x188>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4b57      	ldr	r3, [pc, #348]	; (80067ac <HAL_TIM_ConfigClockSource+0x190>)
 8006650:	4013      	ands	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800665a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b70      	cmp	r3, #112	; 0x70
 800666a:	d02e      	beq.n	80066ca <HAL_TIM_ConfigClockSource+0xae>
 800666c:	2b70      	cmp	r3, #112	; 0x70
 800666e:	d812      	bhi.n	8006696 <HAL_TIM_ConfigClockSource+0x7a>
 8006670:	2b30      	cmp	r3, #48	; 0x30
 8006672:	f000 8084 	beq.w	800677e <HAL_TIM_ConfigClockSource+0x162>
 8006676:	2b30      	cmp	r3, #48	; 0x30
 8006678:	d806      	bhi.n	8006688 <HAL_TIM_ConfigClockSource+0x6c>
 800667a:	2b10      	cmp	r3, #16
 800667c:	d07f      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x162>
 800667e:	2b20      	cmp	r3, #32
 8006680:	d07d      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x162>
 8006682:	2b00      	cmp	r3, #0
 8006684:	d07b      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006686:	e084      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8006688:	2b50      	cmp	r3, #80	; 0x50
 800668a:	d048      	beq.n	800671e <HAL_TIM_ConfigClockSource+0x102>
 800668c:	2b60      	cmp	r3, #96	; 0x60
 800668e:	d056      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x122>
 8006690:	2b40      	cmp	r3, #64	; 0x40
 8006692:	d064      	beq.n	800675e <HAL_TIM_ConfigClockSource+0x142>
      break;
 8006694:	e07d      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8006696:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800669a:	d070      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x162>
 800669c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80066a0:	d809      	bhi.n	80066b6 <HAL_TIM_ConfigClockSource+0x9a>
 80066a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a6:	d027      	beq.n	80066f8 <HAL_TIM_ConfigClockSource+0xdc>
 80066a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ac:	d067      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x162>
 80066ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b2:	d06d      	beq.n	8006790 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066b4:	e06d      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80066b6:	4a3e      	ldr	r2, [pc, #248]	; (80067b0 <HAL_TIM_ConfigClockSource+0x194>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d060      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x162>
 80066bc:	4a3d      	ldr	r2, [pc, #244]	; (80067b4 <HAL_TIM_ConfigClockSource+0x198>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d05d      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x162>
 80066c2:	4a3d      	ldr	r2, [pc, #244]	; (80067b8 <HAL_TIM_ConfigClockSource+0x19c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d05a      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x162>
      break;
 80066c8:	e063      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6818      	ldr	r0, [r3, #0]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	6899      	ldr	r1, [r3, #8]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f000 f9b9 	bl	8006a50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	609a      	str	r2, [r3, #8]
      break;
 80066f6:	e04c      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6818      	ldr	r0, [r3, #0]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	6899      	ldr	r1, [r3, #8]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f000 f9a2 	bl	8006a50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800671a:	609a      	str	r2, [r3, #8]
      break;
 800671c:	e039      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	6859      	ldr	r1, [r3, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	461a      	mov	r2, r3
 800672c:	f000 f912 	bl	8006954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2150      	movs	r1, #80	; 0x50
 8006736:	4618      	mov	r0, r3
 8006738:	f000 f96c 	bl	8006a14 <TIM_ITRx_SetConfig>
      break;
 800673c:	e029      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	6859      	ldr	r1, [r3, #4]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	461a      	mov	r2, r3
 800674c:	f000 f931 	bl	80069b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2160      	movs	r1, #96	; 0x60
 8006756:	4618      	mov	r0, r3
 8006758:	f000 f95c 	bl	8006a14 <TIM_ITRx_SetConfig>
      break;
 800675c:	e019      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6818      	ldr	r0, [r3, #0]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	6859      	ldr	r1, [r3, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	461a      	mov	r2, r3
 800676c:	f000 f8f2 	bl	8006954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2140      	movs	r1, #64	; 0x40
 8006776:	4618      	mov	r0, r3
 8006778:	f000 f94c 	bl	8006a14 <TIM_ITRx_SetConfig>
      break;
 800677c:	e009      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4619      	mov	r1, r3
 8006788:	4610      	mov	r0, r2
 800678a:	f000 f943 	bl	8006a14 <TIM_ITRx_SetConfig>
      break;
 800678e:	e000      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006790:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	ffceff88 	.word	0xffceff88
 80067b0:	00100030 	.word	0x00100030
 80067b4:	00100040 	.word	0x00100040
 80067b8:	00100020 	.word	0x00100020

080067bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a40      	ldr	r2, [pc, #256]	; (8006934 <TIM_Base_SetConfig+0x114>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d013      	beq.n	8006860 <TIM_Base_SetConfig+0x40>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800683e:	d00f      	beq.n	8006860 <TIM_Base_SetConfig+0x40>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a3d      	ldr	r2, [pc, #244]	; (8006938 <TIM_Base_SetConfig+0x118>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00b      	beq.n	8006860 <TIM_Base_SetConfig+0x40>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a3c      	ldr	r2, [pc, #240]	; (800693c <TIM_Base_SetConfig+0x11c>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d007      	beq.n	8006860 <TIM_Base_SetConfig+0x40>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a3b      	ldr	r2, [pc, #236]	; (8006940 <TIM_Base_SetConfig+0x120>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d003      	beq.n	8006860 <TIM_Base_SetConfig+0x40>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a3a      	ldr	r2, [pc, #232]	; (8006944 <TIM_Base_SetConfig+0x124>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d108      	bne.n	8006872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a2f      	ldr	r2, [pc, #188]	; (8006934 <TIM_Base_SetConfig+0x114>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d01f      	beq.n	80068ba <TIM_Base_SetConfig+0x9a>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006880:	d01b      	beq.n	80068ba <TIM_Base_SetConfig+0x9a>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a2c      	ldr	r2, [pc, #176]	; (8006938 <TIM_Base_SetConfig+0x118>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d017      	beq.n	80068ba <TIM_Base_SetConfig+0x9a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a2b      	ldr	r2, [pc, #172]	; (800693c <TIM_Base_SetConfig+0x11c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d013      	beq.n	80068ba <TIM_Base_SetConfig+0x9a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a2a      	ldr	r2, [pc, #168]	; (8006940 <TIM_Base_SetConfig+0x120>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d00f      	beq.n	80068ba <TIM_Base_SetConfig+0x9a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a29      	ldr	r2, [pc, #164]	; (8006944 <TIM_Base_SetConfig+0x124>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00b      	beq.n	80068ba <TIM_Base_SetConfig+0x9a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a28      	ldr	r2, [pc, #160]	; (8006948 <TIM_Base_SetConfig+0x128>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d007      	beq.n	80068ba <TIM_Base_SetConfig+0x9a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a27      	ldr	r2, [pc, #156]	; (800694c <TIM_Base_SetConfig+0x12c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d003      	beq.n	80068ba <TIM_Base_SetConfig+0x9a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a26      	ldr	r2, [pc, #152]	; (8006950 <TIM_Base_SetConfig+0x130>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d108      	bne.n	80068cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a10      	ldr	r2, [pc, #64]	; (8006934 <TIM_Base_SetConfig+0x114>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d00f      	beq.n	8006918 <TIM_Base_SetConfig+0xf8>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a12      	ldr	r2, [pc, #72]	; (8006944 <TIM_Base_SetConfig+0x124>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d00b      	beq.n	8006918 <TIM_Base_SetConfig+0xf8>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a11      	ldr	r2, [pc, #68]	; (8006948 <TIM_Base_SetConfig+0x128>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d007      	beq.n	8006918 <TIM_Base_SetConfig+0xf8>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a10      	ldr	r2, [pc, #64]	; (800694c <TIM_Base_SetConfig+0x12c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d003      	beq.n	8006918 <TIM_Base_SetConfig+0xf8>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a0f      	ldr	r2, [pc, #60]	; (8006950 <TIM_Base_SetConfig+0x130>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d103      	bne.n	8006920 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	615a      	str	r2, [r3, #20]
}
 8006926:	bf00      	nop
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	40010000 	.word	0x40010000
 8006938:	40000400 	.word	0x40000400
 800693c:	40000800 	.word	0x40000800
 8006940:	40000c00 	.word	0x40000c00
 8006944:	40010400 	.word	0x40010400
 8006948:	40014000 	.word	0x40014000
 800694c:	40014400 	.word	0x40014400
 8006950:	40014800 	.word	0x40014800

08006954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	f023 0201 	bic.w	r2, r3, #1
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800697e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	011b      	lsls	r3, r3, #4
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	4313      	orrs	r3, r2
 8006988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f023 030a 	bic.w	r3, r3, #10
 8006990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	4313      	orrs	r3, r2
 8006998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	621a      	str	r2, [r3, #32]
}
 80069a6:	bf00      	nop
 80069a8:	371c      	adds	r7, #28
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b087      	sub	sp, #28
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	f023 0210 	bic.w	r2, r3, #16
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	031b      	lsls	r3, r3, #12
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	621a      	str	r2, [r3, #32]
}
 8006a06:	bf00      	nop
 8006a08:	371c      	adds	r7, #28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
	...

08006a14 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <TIM_ITRx_SetConfig+0x38>)
 8006a28:	4013      	ands	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	f043 0307 	orr.w	r3, r3, #7
 8006a36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	609a      	str	r2, [r3, #8]
}
 8006a3e:	bf00      	nop
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	ffcfff8f 	.word	0xffcfff8f

08006a50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	021a      	lsls	r2, r3, #8
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	431a      	orrs	r2, r3
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	609a      	str	r2, [r3, #8]
}
 8006a84:	bf00      	nop
 8006a86:	371c      	adds	r7, #28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e068      	b.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a2e      	ldr	r2, [pc, #184]	; (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d004      	beq.n	8006adc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a2d      	ldr	r2, [pc, #180]	; (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d108      	bne.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ae2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a1e      	ldr	r2, [pc, #120]	; (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d01d      	beq.n	8006b4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1a:	d018      	beq.n	8006b4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a1b      	ldr	r2, [pc, #108]	; (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d013      	beq.n	8006b4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a1a      	ldr	r2, [pc, #104]	; (8006b94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00e      	beq.n	8006b4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a18      	ldr	r2, [pc, #96]	; (8006b98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d009      	beq.n	8006b4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a13      	ldr	r2, [pc, #76]	; (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d004      	beq.n	8006b4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a14      	ldr	r2, [pc, #80]	; (8006b9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d10c      	bne.n	8006b68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	40010000 	.word	0x40010000
 8006b8c:	40010400 	.word	0x40010400
 8006b90:	40000400 	.word	0x40000400
 8006b94:	40000800 	.word	0x40000800
 8006b98:	40000c00 	.word	0x40000c00
 8006b9c:	40001800 	.word	0x40001800

08006ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e042      	b.n	8006c74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d106      	bne.n	8006c06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7fb febb 	bl	800297c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2224      	movs	r2, #36	; 0x24
 8006c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0201 	bic.w	r2, r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f8c2 	bl	8006da8 <UART_SetConfig>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e022      	b.n	8006c74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fe66 	bl	8007908 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f042 0201 	orr.w	r2, r2, #1
 8006c6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 feed 	bl	8007a4c <UART_CheckIdleState>
 8006c72:	4603      	mov	r3, r0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08a      	sub	sp, #40	; 0x28
 8006c80:	af02      	add	r7, sp, #8
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	603b      	str	r3, [r7, #0]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c92:	2b20      	cmp	r3, #32
 8006c94:	f040 8083 	bne.w	8006d9e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <HAL_UART_Transmit+0x28>
 8006c9e:	88fb      	ldrh	r3, [r7, #6]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e07b      	b.n	8006da0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d101      	bne.n	8006cb6 <HAL_UART_Transmit+0x3a>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e074      	b.n	8006da0 <HAL_UART_Transmit+0x124>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2221      	movs	r2, #33	; 0x21
 8006cca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006cce:	f7fc f827 	bl	8002d20 <HAL_GetTick>
 8006cd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	88fa      	ldrh	r2, [r7, #6]
 8006cd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	88fa      	ldrh	r2, [r7, #6]
 8006ce0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cec:	d108      	bne.n	8006d00 <HAL_UART_Transmit+0x84>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d104      	bne.n	8006d00 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	e003      	b.n	8006d08 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d04:	2300      	movs	r3, #0
 8006d06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8006d10:	e02c      	b.n	8006d6c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2180      	movs	r1, #128	; 0x80
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 fedd 	bl	8007adc <UART_WaitOnFlagUntilTimeout>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e039      	b.n	8006da0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10b      	bne.n	8006d4a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	461a      	mov	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	3302      	adds	r3, #2
 8006d46:	61bb      	str	r3, [r7, #24]
 8006d48:	e007      	b.n	8006d5a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	781a      	ldrb	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	3301      	adds	r3, #1
 8006d58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	3b01      	subs	r3, #1
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1cc      	bne.n	8006d12 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	2140      	movs	r1, #64	; 0x40
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f000 feaa 	bl	8007adc <UART_WaitOnFlagUntilTimeout>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e006      	b.n	8006da0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2220      	movs	r2, #32
 8006d96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e000      	b.n	8006da0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006d9e:	2302      	movs	r3, #2
  }
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3720      	adds	r7, #32
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006da8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006dac:	b08e      	sub	sp, #56	; 0x38
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689a      	ldr	r2, [r3, #8]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	4bc1      	ldr	r3, [pc, #772]	; (80070e8 <UART_SetConfig+0x340>)
 8006de2:	4013      	ands	r3, r2
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	6812      	ldr	r2, [r2, #0]
 8006de8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006dea:	430b      	orrs	r3, r1
 8006dec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4ab7      	ldr	r2, [pc, #732]	; (80070ec <UART_SetConfig+0x344>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d004      	beq.n	8006e1e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	4bb2      	ldr	r3, [pc, #712]	; (80070f0 <UART_SetConfig+0x348>)
 8006e26:	4013      	ands	r3, r2
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6812      	ldr	r2, [r2, #0]
 8006e2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e38:	f023 010f 	bic.w	r1, r3, #15
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4aa9      	ldr	r2, [pc, #676]	; (80070f4 <UART_SetConfig+0x34c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d177      	bne.n	8006f42 <UART_SetConfig+0x19a>
 8006e52:	4ba9      	ldr	r3, [pc, #676]	; (80070f8 <UART_SetConfig+0x350>)
 8006e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e5a:	2b28      	cmp	r3, #40	; 0x28
 8006e5c:	d86c      	bhi.n	8006f38 <UART_SetConfig+0x190>
 8006e5e:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <UART_SetConfig+0xbc>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006f09 	.word	0x08006f09
 8006e68:	08006f39 	.word	0x08006f39
 8006e6c:	08006f39 	.word	0x08006f39
 8006e70:	08006f39 	.word	0x08006f39
 8006e74:	08006f39 	.word	0x08006f39
 8006e78:	08006f39 	.word	0x08006f39
 8006e7c:	08006f39 	.word	0x08006f39
 8006e80:	08006f39 	.word	0x08006f39
 8006e84:	08006f11 	.word	0x08006f11
 8006e88:	08006f39 	.word	0x08006f39
 8006e8c:	08006f39 	.word	0x08006f39
 8006e90:	08006f39 	.word	0x08006f39
 8006e94:	08006f39 	.word	0x08006f39
 8006e98:	08006f39 	.word	0x08006f39
 8006e9c:	08006f39 	.word	0x08006f39
 8006ea0:	08006f39 	.word	0x08006f39
 8006ea4:	08006f19 	.word	0x08006f19
 8006ea8:	08006f39 	.word	0x08006f39
 8006eac:	08006f39 	.word	0x08006f39
 8006eb0:	08006f39 	.word	0x08006f39
 8006eb4:	08006f39 	.word	0x08006f39
 8006eb8:	08006f39 	.word	0x08006f39
 8006ebc:	08006f39 	.word	0x08006f39
 8006ec0:	08006f39 	.word	0x08006f39
 8006ec4:	08006f21 	.word	0x08006f21
 8006ec8:	08006f39 	.word	0x08006f39
 8006ecc:	08006f39 	.word	0x08006f39
 8006ed0:	08006f39 	.word	0x08006f39
 8006ed4:	08006f39 	.word	0x08006f39
 8006ed8:	08006f39 	.word	0x08006f39
 8006edc:	08006f39 	.word	0x08006f39
 8006ee0:	08006f39 	.word	0x08006f39
 8006ee4:	08006f29 	.word	0x08006f29
 8006ee8:	08006f39 	.word	0x08006f39
 8006eec:	08006f39 	.word	0x08006f39
 8006ef0:	08006f39 	.word	0x08006f39
 8006ef4:	08006f39 	.word	0x08006f39
 8006ef8:	08006f39 	.word	0x08006f39
 8006efc:	08006f39 	.word	0x08006f39
 8006f00:	08006f39 	.word	0x08006f39
 8006f04:	08006f31 	.word	0x08006f31
 8006f08:	2301      	movs	r3, #1
 8006f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f0e:	e233      	b.n	8007378 <UART_SetConfig+0x5d0>
 8006f10:	2304      	movs	r3, #4
 8006f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f16:	e22f      	b.n	8007378 <UART_SetConfig+0x5d0>
 8006f18:	2308      	movs	r3, #8
 8006f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f1e:	e22b      	b.n	8007378 <UART_SetConfig+0x5d0>
 8006f20:	2310      	movs	r3, #16
 8006f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f26:	e227      	b.n	8007378 <UART_SetConfig+0x5d0>
 8006f28:	2320      	movs	r3, #32
 8006f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f2e:	e223      	b.n	8007378 <UART_SetConfig+0x5d0>
 8006f30:	2340      	movs	r3, #64	; 0x40
 8006f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f36:	e21f      	b.n	8007378 <UART_SetConfig+0x5d0>
 8006f38:	2380      	movs	r3, #128	; 0x80
 8006f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f3e:	bf00      	nop
 8006f40:	e21a      	b.n	8007378 <UART_SetConfig+0x5d0>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a6d      	ldr	r2, [pc, #436]	; (80070fc <UART_SetConfig+0x354>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d132      	bne.n	8006fb2 <UART_SetConfig+0x20a>
 8006f4c:	4b6a      	ldr	r3, [pc, #424]	; (80070f8 <UART_SetConfig+0x350>)
 8006f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	2b05      	cmp	r3, #5
 8006f56:	d827      	bhi.n	8006fa8 <UART_SetConfig+0x200>
 8006f58:	a201      	add	r2, pc, #4	; (adr r2, 8006f60 <UART_SetConfig+0x1b8>)
 8006f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5e:	bf00      	nop
 8006f60:	08006f79 	.word	0x08006f79
 8006f64:	08006f81 	.word	0x08006f81
 8006f68:	08006f89 	.word	0x08006f89
 8006f6c:	08006f91 	.word	0x08006f91
 8006f70:	08006f99 	.word	0x08006f99
 8006f74:	08006fa1 	.word	0x08006fa1
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f7e:	e1fb      	b.n	8007378 <UART_SetConfig+0x5d0>
 8006f80:	2304      	movs	r3, #4
 8006f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f86:	e1f7      	b.n	8007378 <UART_SetConfig+0x5d0>
 8006f88:	2308      	movs	r3, #8
 8006f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f8e:	e1f3      	b.n	8007378 <UART_SetConfig+0x5d0>
 8006f90:	2310      	movs	r3, #16
 8006f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f96:	e1ef      	b.n	8007378 <UART_SetConfig+0x5d0>
 8006f98:	2320      	movs	r3, #32
 8006f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f9e:	e1eb      	b.n	8007378 <UART_SetConfig+0x5d0>
 8006fa0:	2340      	movs	r3, #64	; 0x40
 8006fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fa6:	e1e7      	b.n	8007378 <UART_SetConfig+0x5d0>
 8006fa8:	2380      	movs	r3, #128	; 0x80
 8006faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fae:	bf00      	nop
 8006fb0:	e1e2      	b.n	8007378 <UART_SetConfig+0x5d0>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a52      	ldr	r2, [pc, #328]	; (8007100 <UART_SetConfig+0x358>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d132      	bne.n	8007022 <UART_SetConfig+0x27a>
 8006fbc:	4b4e      	ldr	r3, [pc, #312]	; (80070f8 <UART_SetConfig+0x350>)
 8006fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc0:	f003 0307 	and.w	r3, r3, #7
 8006fc4:	2b05      	cmp	r3, #5
 8006fc6:	d827      	bhi.n	8007018 <UART_SetConfig+0x270>
 8006fc8:	a201      	add	r2, pc, #4	; (adr r2, 8006fd0 <UART_SetConfig+0x228>)
 8006fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fce:	bf00      	nop
 8006fd0:	08006fe9 	.word	0x08006fe9
 8006fd4:	08006ff1 	.word	0x08006ff1
 8006fd8:	08006ff9 	.word	0x08006ff9
 8006fdc:	08007001 	.word	0x08007001
 8006fe0:	08007009 	.word	0x08007009
 8006fe4:	08007011 	.word	0x08007011
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fee:	e1c3      	b.n	8007378 <UART_SetConfig+0x5d0>
 8006ff0:	2304      	movs	r3, #4
 8006ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ff6:	e1bf      	b.n	8007378 <UART_SetConfig+0x5d0>
 8006ff8:	2308      	movs	r3, #8
 8006ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ffe:	e1bb      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007000:	2310      	movs	r3, #16
 8007002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007006:	e1b7      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007008:	2320      	movs	r3, #32
 800700a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800700e:	e1b3      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007010:	2340      	movs	r3, #64	; 0x40
 8007012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007016:	e1af      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007018:	2380      	movs	r3, #128	; 0x80
 800701a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800701e:	bf00      	nop
 8007020:	e1aa      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a37      	ldr	r2, [pc, #220]	; (8007104 <UART_SetConfig+0x35c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d132      	bne.n	8007092 <UART_SetConfig+0x2ea>
 800702c:	4b32      	ldr	r3, [pc, #200]	; (80070f8 <UART_SetConfig+0x350>)
 800702e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007030:	f003 0307 	and.w	r3, r3, #7
 8007034:	2b05      	cmp	r3, #5
 8007036:	d827      	bhi.n	8007088 <UART_SetConfig+0x2e0>
 8007038:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <UART_SetConfig+0x298>)
 800703a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703e:	bf00      	nop
 8007040:	08007059 	.word	0x08007059
 8007044:	08007061 	.word	0x08007061
 8007048:	08007069 	.word	0x08007069
 800704c:	08007071 	.word	0x08007071
 8007050:	08007079 	.word	0x08007079
 8007054:	08007081 	.word	0x08007081
 8007058:	2300      	movs	r3, #0
 800705a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800705e:	e18b      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007060:	2304      	movs	r3, #4
 8007062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007066:	e187      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007068:	2308      	movs	r3, #8
 800706a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800706e:	e183      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007070:	2310      	movs	r3, #16
 8007072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007076:	e17f      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007078:	2320      	movs	r3, #32
 800707a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800707e:	e17b      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007080:	2340      	movs	r3, #64	; 0x40
 8007082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007086:	e177      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007088:	2380      	movs	r3, #128	; 0x80
 800708a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800708e:	bf00      	nop
 8007090:	e172      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a1c      	ldr	r2, [pc, #112]	; (8007108 <UART_SetConfig+0x360>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d144      	bne.n	8007126 <UART_SetConfig+0x37e>
 800709c:	4b16      	ldr	r3, [pc, #88]	; (80070f8 <UART_SetConfig+0x350>)
 800709e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a0:	f003 0307 	and.w	r3, r3, #7
 80070a4:	2b05      	cmp	r3, #5
 80070a6:	d839      	bhi.n	800711c <UART_SetConfig+0x374>
 80070a8:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <UART_SetConfig+0x308>)
 80070aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ae:	bf00      	nop
 80070b0:	080070c9 	.word	0x080070c9
 80070b4:	080070d1 	.word	0x080070d1
 80070b8:	080070d9 	.word	0x080070d9
 80070bc:	080070e1 	.word	0x080070e1
 80070c0:	0800710d 	.word	0x0800710d
 80070c4:	08007115 	.word	0x08007115
 80070c8:	2300      	movs	r3, #0
 80070ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ce:	e153      	b.n	8007378 <UART_SetConfig+0x5d0>
 80070d0:	2304      	movs	r3, #4
 80070d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070d6:	e14f      	b.n	8007378 <UART_SetConfig+0x5d0>
 80070d8:	2308      	movs	r3, #8
 80070da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070de:	e14b      	b.n	8007378 <UART_SetConfig+0x5d0>
 80070e0:	2310      	movs	r3, #16
 80070e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070e6:	e147      	b.n	8007378 <UART_SetConfig+0x5d0>
 80070e8:	cfff69f3 	.word	0xcfff69f3
 80070ec:	58000c00 	.word	0x58000c00
 80070f0:	11fff4ff 	.word	0x11fff4ff
 80070f4:	40011000 	.word	0x40011000
 80070f8:	58024400 	.word	0x58024400
 80070fc:	40004400 	.word	0x40004400
 8007100:	40004800 	.word	0x40004800
 8007104:	40004c00 	.word	0x40004c00
 8007108:	40005000 	.word	0x40005000
 800710c:	2320      	movs	r3, #32
 800710e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007112:	e131      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007114:	2340      	movs	r3, #64	; 0x40
 8007116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800711a:	e12d      	b.n	8007378 <UART_SetConfig+0x5d0>
 800711c:	2380      	movs	r3, #128	; 0x80
 800711e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007122:	bf00      	nop
 8007124:	e128      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4ab6      	ldr	r2, [pc, #728]	; (8007404 <UART_SetConfig+0x65c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d178      	bne.n	8007222 <UART_SetConfig+0x47a>
 8007130:	4bb5      	ldr	r3, [pc, #724]	; (8007408 <UART_SetConfig+0x660>)
 8007132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007134:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007138:	2b28      	cmp	r3, #40	; 0x28
 800713a:	d86d      	bhi.n	8007218 <UART_SetConfig+0x470>
 800713c:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <UART_SetConfig+0x39c>)
 800713e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007142:	bf00      	nop
 8007144:	080071e9 	.word	0x080071e9
 8007148:	08007219 	.word	0x08007219
 800714c:	08007219 	.word	0x08007219
 8007150:	08007219 	.word	0x08007219
 8007154:	08007219 	.word	0x08007219
 8007158:	08007219 	.word	0x08007219
 800715c:	08007219 	.word	0x08007219
 8007160:	08007219 	.word	0x08007219
 8007164:	080071f1 	.word	0x080071f1
 8007168:	08007219 	.word	0x08007219
 800716c:	08007219 	.word	0x08007219
 8007170:	08007219 	.word	0x08007219
 8007174:	08007219 	.word	0x08007219
 8007178:	08007219 	.word	0x08007219
 800717c:	08007219 	.word	0x08007219
 8007180:	08007219 	.word	0x08007219
 8007184:	080071f9 	.word	0x080071f9
 8007188:	08007219 	.word	0x08007219
 800718c:	08007219 	.word	0x08007219
 8007190:	08007219 	.word	0x08007219
 8007194:	08007219 	.word	0x08007219
 8007198:	08007219 	.word	0x08007219
 800719c:	08007219 	.word	0x08007219
 80071a0:	08007219 	.word	0x08007219
 80071a4:	08007201 	.word	0x08007201
 80071a8:	08007219 	.word	0x08007219
 80071ac:	08007219 	.word	0x08007219
 80071b0:	08007219 	.word	0x08007219
 80071b4:	08007219 	.word	0x08007219
 80071b8:	08007219 	.word	0x08007219
 80071bc:	08007219 	.word	0x08007219
 80071c0:	08007219 	.word	0x08007219
 80071c4:	08007209 	.word	0x08007209
 80071c8:	08007219 	.word	0x08007219
 80071cc:	08007219 	.word	0x08007219
 80071d0:	08007219 	.word	0x08007219
 80071d4:	08007219 	.word	0x08007219
 80071d8:	08007219 	.word	0x08007219
 80071dc:	08007219 	.word	0x08007219
 80071e0:	08007219 	.word	0x08007219
 80071e4:	08007211 	.word	0x08007211
 80071e8:	2301      	movs	r3, #1
 80071ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ee:	e0c3      	b.n	8007378 <UART_SetConfig+0x5d0>
 80071f0:	2304      	movs	r3, #4
 80071f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071f6:	e0bf      	b.n	8007378 <UART_SetConfig+0x5d0>
 80071f8:	2308      	movs	r3, #8
 80071fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071fe:	e0bb      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007200:	2310      	movs	r3, #16
 8007202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007206:	e0b7      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007208:	2320      	movs	r3, #32
 800720a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800720e:	e0b3      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007210:	2340      	movs	r3, #64	; 0x40
 8007212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007216:	e0af      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007218:	2380      	movs	r3, #128	; 0x80
 800721a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800721e:	bf00      	nop
 8007220:	e0aa      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a79      	ldr	r2, [pc, #484]	; (800740c <UART_SetConfig+0x664>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d132      	bne.n	8007292 <UART_SetConfig+0x4ea>
 800722c:	4b76      	ldr	r3, [pc, #472]	; (8007408 <UART_SetConfig+0x660>)
 800722e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	2b05      	cmp	r3, #5
 8007236:	d827      	bhi.n	8007288 <UART_SetConfig+0x4e0>
 8007238:	a201      	add	r2, pc, #4	; (adr r2, 8007240 <UART_SetConfig+0x498>)
 800723a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723e:	bf00      	nop
 8007240:	08007259 	.word	0x08007259
 8007244:	08007261 	.word	0x08007261
 8007248:	08007269 	.word	0x08007269
 800724c:	08007271 	.word	0x08007271
 8007250:	08007279 	.word	0x08007279
 8007254:	08007281 	.word	0x08007281
 8007258:	2300      	movs	r3, #0
 800725a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800725e:	e08b      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007260:	2304      	movs	r3, #4
 8007262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007266:	e087      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007268:	2308      	movs	r3, #8
 800726a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800726e:	e083      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007270:	2310      	movs	r3, #16
 8007272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007276:	e07f      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007278:	2320      	movs	r3, #32
 800727a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800727e:	e07b      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007280:	2340      	movs	r3, #64	; 0x40
 8007282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007286:	e077      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007288:	2380      	movs	r3, #128	; 0x80
 800728a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800728e:	bf00      	nop
 8007290:	e072      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a5e      	ldr	r2, [pc, #376]	; (8007410 <UART_SetConfig+0x668>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d132      	bne.n	8007302 <UART_SetConfig+0x55a>
 800729c:	4b5a      	ldr	r3, [pc, #360]	; (8007408 <UART_SetConfig+0x660>)
 800729e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	2b05      	cmp	r3, #5
 80072a6:	d827      	bhi.n	80072f8 <UART_SetConfig+0x550>
 80072a8:	a201      	add	r2, pc, #4	; (adr r2, 80072b0 <UART_SetConfig+0x508>)
 80072aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ae:	bf00      	nop
 80072b0:	080072c9 	.word	0x080072c9
 80072b4:	080072d1 	.word	0x080072d1
 80072b8:	080072d9 	.word	0x080072d9
 80072bc:	080072e1 	.word	0x080072e1
 80072c0:	080072e9 	.word	0x080072e9
 80072c4:	080072f1 	.word	0x080072f1
 80072c8:	2300      	movs	r3, #0
 80072ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072ce:	e053      	b.n	8007378 <UART_SetConfig+0x5d0>
 80072d0:	2304      	movs	r3, #4
 80072d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072d6:	e04f      	b.n	8007378 <UART_SetConfig+0x5d0>
 80072d8:	2308      	movs	r3, #8
 80072da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072de:	e04b      	b.n	8007378 <UART_SetConfig+0x5d0>
 80072e0:	2310      	movs	r3, #16
 80072e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072e6:	e047      	b.n	8007378 <UART_SetConfig+0x5d0>
 80072e8:	2320      	movs	r3, #32
 80072ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072ee:	e043      	b.n	8007378 <UART_SetConfig+0x5d0>
 80072f0:	2340      	movs	r3, #64	; 0x40
 80072f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072f6:	e03f      	b.n	8007378 <UART_SetConfig+0x5d0>
 80072f8:	2380      	movs	r3, #128	; 0x80
 80072fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072fe:	bf00      	nop
 8007300:	e03a      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a43      	ldr	r2, [pc, #268]	; (8007414 <UART_SetConfig+0x66c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d132      	bne.n	8007372 <UART_SetConfig+0x5ca>
 800730c:	4b3e      	ldr	r3, [pc, #248]	; (8007408 <UART_SetConfig+0x660>)
 800730e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007310:	f003 0307 	and.w	r3, r3, #7
 8007314:	2b05      	cmp	r3, #5
 8007316:	d827      	bhi.n	8007368 <UART_SetConfig+0x5c0>
 8007318:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <UART_SetConfig+0x578>)
 800731a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731e:	bf00      	nop
 8007320:	08007339 	.word	0x08007339
 8007324:	08007341 	.word	0x08007341
 8007328:	08007349 	.word	0x08007349
 800732c:	08007351 	.word	0x08007351
 8007330:	08007359 	.word	0x08007359
 8007334:	08007361 	.word	0x08007361
 8007338:	2302      	movs	r3, #2
 800733a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800733e:	e01b      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007340:	2304      	movs	r3, #4
 8007342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007346:	e017      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007348:	2308      	movs	r3, #8
 800734a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800734e:	e013      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007350:	2310      	movs	r3, #16
 8007352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007356:	e00f      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007358:	2320      	movs	r3, #32
 800735a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800735e:	e00b      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007360:	2340      	movs	r3, #64	; 0x40
 8007362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007366:	e007      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007368:	2380      	movs	r3, #128	; 0x80
 800736a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800736e:	bf00      	nop
 8007370:	e002      	b.n	8007378 <UART_SetConfig+0x5d0>
 8007372:	2380      	movs	r3, #128	; 0x80
 8007374:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a25      	ldr	r2, [pc, #148]	; (8007414 <UART_SetConfig+0x66c>)
 800737e:	4293      	cmp	r3, r2
 8007380:	f040 80b8 	bne.w	80074f4 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007384:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007388:	2b08      	cmp	r3, #8
 800738a:	d019      	beq.n	80073c0 <UART_SetConfig+0x618>
 800738c:	2b08      	cmp	r3, #8
 800738e:	dc04      	bgt.n	800739a <UART_SetConfig+0x5f2>
 8007390:	2b02      	cmp	r3, #2
 8007392:	d009      	beq.n	80073a8 <UART_SetConfig+0x600>
 8007394:	2b04      	cmp	r3, #4
 8007396:	d00b      	beq.n	80073b0 <UART_SetConfig+0x608>
 8007398:	e042      	b.n	8007420 <UART_SetConfig+0x678>
 800739a:	2b20      	cmp	r3, #32
 800739c:	d02b      	beq.n	80073f6 <UART_SetConfig+0x64e>
 800739e:	2b40      	cmp	r3, #64	; 0x40
 80073a0:	d02c      	beq.n	80073fc <UART_SetConfig+0x654>
 80073a2:	2b10      	cmp	r3, #16
 80073a4:	d014      	beq.n	80073d0 <UART_SetConfig+0x628>
 80073a6:	e03b      	b.n	8007420 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80073a8:	f7fe fbb0 	bl	8005b0c <HAL_RCCEx_GetD3PCLK1Freq>
 80073ac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80073ae:	e03d      	b.n	800742c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073b0:	f107 0314 	add.w	r3, r7, #20
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fe fbbf 	bl	8005b38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073be:	e035      	b.n	800742c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073c0:	f107 0308 	add.w	r3, r7, #8
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe fd03 	bl	8005dd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073ce:	e02d      	b.n	800742c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073d0:	4b0d      	ldr	r3, [pc, #52]	; (8007408 <UART_SetConfig+0x660>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0320 	and.w	r3, r3, #32
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d009      	beq.n	80073f0 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073dc:	4b0a      	ldr	r3, [pc, #40]	; (8007408 <UART_SetConfig+0x660>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	08db      	lsrs	r3, r3, #3
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	4a0c      	ldr	r2, [pc, #48]	; (8007418 <UART_SetConfig+0x670>)
 80073e8:	fa22 f303 	lsr.w	r3, r2, r3
 80073ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073ee:	e01d      	b.n	800742c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80073f0:	4b09      	ldr	r3, [pc, #36]	; (8007418 <UART_SetConfig+0x670>)
 80073f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073f4:	e01a      	b.n	800742c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073f6:	4b09      	ldr	r3, [pc, #36]	; (800741c <UART_SetConfig+0x674>)
 80073f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073fa:	e017      	b.n	800742c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007400:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007402:	e013      	b.n	800742c <UART_SetConfig+0x684>
 8007404:	40011400 	.word	0x40011400
 8007408:	58024400 	.word	0x58024400
 800740c:	40007800 	.word	0x40007800
 8007410:	40007c00 	.word	0x40007c00
 8007414:	58000c00 	.word	0x58000c00
 8007418:	03d09000 	.word	0x03d09000
 800741c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8007420:	2300      	movs	r3, #0
 8007422:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800742a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800742c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 824d 	beq.w	80078ce <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	4aad      	ldr	r2, [pc, #692]	; (80076f0 <UART_SetConfig+0x948>)
 800743a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800743e:	461a      	mov	r2, r3
 8007440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007442:	fbb3 f3f2 	udiv	r3, r3, r2
 8007446:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	4613      	mov	r3, r2
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	4413      	add	r3, r2
 8007452:	6a3a      	ldr	r2, [r7, #32]
 8007454:	429a      	cmp	r2, r3
 8007456:	d305      	bcc.n	8007464 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800745e:	6a3a      	ldr	r2, [r7, #32]
 8007460:	429a      	cmp	r2, r3
 8007462:	d903      	bls.n	800746c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800746a:	e230      	b.n	80078ce <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800746c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746e:	4618      	mov	r0, r3
 8007470:	f04f 0100 	mov.w	r1, #0
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	4a9d      	ldr	r2, [pc, #628]	; (80076f0 <UART_SetConfig+0x948>)
 800747a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800747e:	b29b      	uxth	r3, r3
 8007480:	f04f 0400 	mov.w	r4, #0
 8007484:	461a      	mov	r2, r3
 8007486:	4623      	mov	r3, r4
 8007488:	f7f8 ff82 	bl	8000390 <__aeabi_uldivmod>
 800748c:	4603      	mov	r3, r0
 800748e:	460c      	mov	r4, r1
 8007490:	4619      	mov	r1, r3
 8007492:	4622      	mov	r2, r4
 8007494:	f04f 0300 	mov.w	r3, #0
 8007498:	f04f 0400 	mov.w	r4, #0
 800749c:	0214      	lsls	r4, r2, #8
 800749e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80074a2:	020b      	lsls	r3, r1, #8
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6852      	ldr	r2, [r2, #4]
 80074a8:	0852      	lsrs	r2, r2, #1
 80074aa:	4611      	mov	r1, r2
 80074ac:	f04f 0200 	mov.w	r2, #0
 80074b0:	eb13 0b01 	adds.w	fp, r3, r1
 80074b4:	eb44 0c02 	adc.w	ip, r4, r2
 80074b8:	4658      	mov	r0, fp
 80074ba:	4661      	mov	r1, ip
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f04f 0400 	mov.w	r4, #0
 80074c4:	461a      	mov	r2, r3
 80074c6:	4623      	mov	r3, r4
 80074c8:	f7f8 ff62 	bl	8000390 <__aeabi_uldivmod>
 80074cc:	4603      	mov	r3, r0
 80074ce:	460c      	mov	r4, r1
 80074d0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074d8:	d308      	bcc.n	80074ec <UART_SetConfig+0x744>
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074e0:	d204      	bcs.n	80074ec <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074e8:	60da      	str	r2, [r3, #12]
 80074ea:	e1f0      	b.n	80078ce <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80074f2:	e1ec      	b.n	80078ce <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	69db      	ldr	r3, [r3, #28]
 80074f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074fc:	f040 8100 	bne.w	8007700 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8007500:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007504:	2b40      	cmp	r3, #64	; 0x40
 8007506:	f200 80b7 	bhi.w	8007678 <UART_SetConfig+0x8d0>
 800750a:	a201      	add	r2, pc, #4	; (adr r2, 8007510 <UART_SetConfig+0x768>)
 800750c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007510:	08007615 	.word	0x08007615
 8007514:	0800761d 	.word	0x0800761d
 8007518:	08007679 	.word	0x08007679
 800751c:	08007679 	.word	0x08007679
 8007520:	08007625 	.word	0x08007625
 8007524:	08007679 	.word	0x08007679
 8007528:	08007679 	.word	0x08007679
 800752c:	08007679 	.word	0x08007679
 8007530:	08007635 	.word	0x08007635
 8007534:	08007679 	.word	0x08007679
 8007538:	08007679 	.word	0x08007679
 800753c:	08007679 	.word	0x08007679
 8007540:	08007679 	.word	0x08007679
 8007544:	08007679 	.word	0x08007679
 8007548:	08007679 	.word	0x08007679
 800754c:	08007679 	.word	0x08007679
 8007550:	08007645 	.word	0x08007645
 8007554:	08007679 	.word	0x08007679
 8007558:	08007679 	.word	0x08007679
 800755c:	08007679 	.word	0x08007679
 8007560:	08007679 	.word	0x08007679
 8007564:	08007679 	.word	0x08007679
 8007568:	08007679 	.word	0x08007679
 800756c:	08007679 	.word	0x08007679
 8007570:	08007679 	.word	0x08007679
 8007574:	08007679 	.word	0x08007679
 8007578:	08007679 	.word	0x08007679
 800757c:	08007679 	.word	0x08007679
 8007580:	08007679 	.word	0x08007679
 8007584:	08007679 	.word	0x08007679
 8007588:	08007679 	.word	0x08007679
 800758c:	08007679 	.word	0x08007679
 8007590:	0800766b 	.word	0x0800766b
 8007594:	08007679 	.word	0x08007679
 8007598:	08007679 	.word	0x08007679
 800759c:	08007679 	.word	0x08007679
 80075a0:	08007679 	.word	0x08007679
 80075a4:	08007679 	.word	0x08007679
 80075a8:	08007679 	.word	0x08007679
 80075ac:	08007679 	.word	0x08007679
 80075b0:	08007679 	.word	0x08007679
 80075b4:	08007679 	.word	0x08007679
 80075b8:	08007679 	.word	0x08007679
 80075bc:	08007679 	.word	0x08007679
 80075c0:	08007679 	.word	0x08007679
 80075c4:	08007679 	.word	0x08007679
 80075c8:	08007679 	.word	0x08007679
 80075cc:	08007679 	.word	0x08007679
 80075d0:	08007679 	.word	0x08007679
 80075d4:	08007679 	.word	0x08007679
 80075d8:	08007679 	.word	0x08007679
 80075dc:	08007679 	.word	0x08007679
 80075e0:	08007679 	.word	0x08007679
 80075e4:	08007679 	.word	0x08007679
 80075e8:	08007679 	.word	0x08007679
 80075ec:	08007679 	.word	0x08007679
 80075f0:	08007679 	.word	0x08007679
 80075f4:	08007679 	.word	0x08007679
 80075f8:	08007679 	.word	0x08007679
 80075fc:	08007679 	.word	0x08007679
 8007600:	08007679 	.word	0x08007679
 8007604:	08007679 	.word	0x08007679
 8007608:	08007679 	.word	0x08007679
 800760c:	08007679 	.word	0x08007679
 8007610:	08007671 	.word	0x08007671
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007614:	f7fd fb60 	bl	8004cd8 <HAL_RCC_GetPCLK1Freq>
 8007618:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800761a:	e033      	b.n	8007684 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800761c:	f7fd fb72 	bl	8004d04 <HAL_RCC_GetPCLK2Freq>
 8007620:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007622:	e02f      	b.n	8007684 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007624:	f107 0314 	add.w	r3, r7, #20
 8007628:	4618      	mov	r0, r3
 800762a:	f7fe fa85 	bl	8005b38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007632:	e027      	b.n	8007684 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007634:	f107 0308 	add.w	r3, r7, #8
 8007638:	4618      	mov	r0, r3
 800763a:	f7fe fbc9 	bl	8005dd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007642:	e01f      	b.n	8007684 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007644:	4b2b      	ldr	r3, [pc, #172]	; (80076f4 <UART_SetConfig+0x94c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0320 	and.w	r3, r3, #32
 800764c:	2b00      	cmp	r3, #0
 800764e:	d009      	beq.n	8007664 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007650:	4b28      	ldr	r3, [pc, #160]	; (80076f4 <UART_SetConfig+0x94c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	08db      	lsrs	r3, r3, #3
 8007656:	f003 0303 	and.w	r3, r3, #3
 800765a:	4a27      	ldr	r2, [pc, #156]	; (80076f8 <UART_SetConfig+0x950>)
 800765c:	fa22 f303 	lsr.w	r3, r2, r3
 8007660:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007662:	e00f      	b.n	8007684 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8007664:	4b24      	ldr	r3, [pc, #144]	; (80076f8 <UART_SetConfig+0x950>)
 8007666:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007668:	e00c      	b.n	8007684 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800766a:	4b24      	ldr	r3, [pc, #144]	; (80076fc <UART_SetConfig+0x954>)
 800766c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800766e:	e009      	b.n	8007684 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007674:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007676:	e005      	b.n	8007684 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007682:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 8121 	beq.w	80078ce <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	4a17      	ldr	r2, [pc, #92]	; (80076f0 <UART_SetConfig+0x948>)
 8007692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007696:	461a      	mov	r2, r3
 8007698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769a:	fbb3 f3f2 	udiv	r3, r3, r2
 800769e:	005a      	lsls	r2, r3, #1
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	085b      	lsrs	r3, r3, #1
 80076a6:	441a      	add	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b6:	2b0f      	cmp	r3, #15
 80076b8:	d916      	bls.n	80076e8 <UART_SetConfig+0x940>
 80076ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076c0:	d212      	bcs.n	80076e8 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f023 030f 	bic.w	r3, r3, #15
 80076ca:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ce:	085b      	lsrs	r3, r3, #1
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076da:	4313      	orrs	r3, r2
 80076dc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80076e4:	60da      	str	r2, [r3, #12]
 80076e6:	e0f2      	b.n	80078ce <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80076ee:	e0ee      	b.n	80078ce <UART_SetConfig+0xb26>
 80076f0:	0800b808 	.word	0x0800b808
 80076f4:	58024400 	.word	0x58024400
 80076f8:	03d09000 	.word	0x03d09000
 80076fc:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8007700:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007704:	2b40      	cmp	r3, #64	; 0x40
 8007706:	f200 80b7 	bhi.w	8007878 <UART_SetConfig+0xad0>
 800770a:	a201      	add	r2, pc, #4	; (adr r2, 8007710 <UART_SetConfig+0x968>)
 800770c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007710:	08007815 	.word	0x08007815
 8007714:	0800781d 	.word	0x0800781d
 8007718:	08007879 	.word	0x08007879
 800771c:	08007879 	.word	0x08007879
 8007720:	08007825 	.word	0x08007825
 8007724:	08007879 	.word	0x08007879
 8007728:	08007879 	.word	0x08007879
 800772c:	08007879 	.word	0x08007879
 8007730:	08007835 	.word	0x08007835
 8007734:	08007879 	.word	0x08007879
 8007738:	08007879 	.word	0x08007879
 800773c:	08007879 	.word	0x08007879
 8007740:	08007879 	.word	0x08007879
 8007744:	08007879 	.word	0x08007879
 8007748:	08007879 	.word	0x08007879
 800774c:	08007879 	.word	0x08007879
 8007750:	08007845 	.word	0x08007845
 8007754:	08007879 	.word	0x08007879
 8007758:	08007879 	.word	0x08007879
 800775c:	08007879 	.word	0x08007879
 8007760:	08007879 	.word	0x08007879
 8007764:	08007879 	.word	0x08007879
 8007768:	08007879 	.word	0x08007879
 800776c:	08007879 	.word	0x08007879
 8007770:	08007879 	.word	0x08007879
 8007774:	08007879 	.word	0x08007879
 8007778:	08007879 	.word	0x08007879
 800777c:	08007879 	.word	0x08007879
 8007780:	08007879 	.word	0x08007879
 8007784:	08007879 	.word	0x08007879
 8007788:	08007879 	.word	0x08007879
 800778c:	08007879 	.word	0x08007879
 8007790:	0800786b 	.word	0x0800786b
 8007794:	08007879 	.word	0x08007879
 8007798:	08007879 	.word	0x08007879
 800779c:	08007879 	.word	0x08007879
 80077a0:	08007879 	.word	0x08007879
 80077a4:	08007879 	.word	0x08007879
 80077a8:	08007879 	.word	0x08007879
 80077ac:	08007879 	.word	0x08007879
 80077b0:	08007879 	.word	0x08007879
 80077b4:	08007879 	.word	0x08007879
 80077b8:	08007879 	.word	0x08007879
 80077bc:	08007879 	.word	0x08007879
 80077c0:	08007879 	.word	0x08007879
 80077c4:	08007879 	.word	0x08007879
 80077c8:	08007879 	.word	0x08007879
 80077cc:	08007879 	.word	0x08007879
 80077d0:	08007879 	.word	0x08007879
 80077d4:	08007879 	.word	0x08007879
 80077d8:	08007879 	.word	0x08007879
 80077dc:	08007879 	.word	0x08007879
 80077e0:	08007879 	.word	0x08007879
 80077e4:	08007879 	.word	0x08007879
 80077e8:	08007879 	.word	0x08007879
 80077ec:	08007879 	.word	0x08007879
 80077f0:	08007879 	.word	0x08007879
 80077f4:	08007879 	.word	0x08007879
 80077f8:	08007879 	.word	0x08007879
 80077fc:	08007879 	.word	0x08007879
 8007800:	08007879 	.word	0x08007879
 8007804:	08007879 	.word	0x08007879
 8007808:	08007879 	.word	0x08007879
 800780c:	08007879 	.word	0x08007879
 8007810:	08007871 	.word	0x08007871
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007814:	f7fd fa60 	bl	8004cd8 <HAL_RCC_GetPCLK1Freq>
 8007818:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800781a:	e033      	b.n	8007884 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800781c:	f7fd fa72 	bl	8004d04 <HAL_RCC_GetPCLK2Freq>
 8007820:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007822:	e02f      	b.n	8007884 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007824:	f107 0314 	add.w	r3, r7, #20
 8007828:	4618      	mov	r0, r3
 800782a:	f7fe f985 	bl	8005b38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007832:	e027      	b.n	8007884 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007834:	f107 0308 	add.w	r3, r7, #8
 8007838:	4618      	mov	r0, r3
 800783a:	f7fe fac9 	bl	8005dd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007842:	e01f      	b.n	8007884 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007844:	4b2c      	ldr	r3, [pc, #176]	; (80078f8 <UART_SetConfig+0xb50>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0320 	and.w	r3, r3, #32
 800784c:	2b00      	cmp	r3, #0
 800784e:	d009      	beq.n	8007864 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007850:	4b29      	ldr	r3, [pc, #164]	; (80078f8 <UART_SetConfig+0xb50>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	08db      	lsrs	r3, r3, #3
 8007856:	f003 0303 	and.w	r3, r3, #3
 800785a:	4a28      	ldr	r2, [pc, #160]	; (80078fc <UART_SetConfig+0xb54>)
 800785c:	fa22 f303 	lsr.w	r3, r2, r3
 8007860:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007862:	e00f      	b.n	8007884 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8007864:	4b25      	ldr	r3, [pc, #148]	; (80078fc <UART_SetConfig+0xb54>)
 8007866:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007868:	e00c      	b.n	8007884 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800786a:	4b25      	ldr	r3, [pc, #148]	; (8007900 <UART_SetConfig+0xb58>)
 800786c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800786e:	e009      	b.n	8007884 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007870:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007874:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007876:	e005      	b.n	8007884 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007882:	bf00      	nop
    }

    if (pclk != 0U)
 8007884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007886:	2b00      	cmp	r3, #0
 8007888:	d021      	beq.n	80078ce <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	4a1d      	ldr	r2, [pc, #116]	; (8007904 <UART_SetConfig+0xb5c>)
 8007890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007894:	461a      	mov	r2, r3
 8007896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007898:	fbb3 f2f2 	udiv	r2, r3, r2
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	085b      	lsrs	r3, r3, #1
 80078a2:	441a      	add	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	2b0f      	cmp	r3, #15
 80078b4:	d908      	bls.n	80078c8 <UART_SetConfig+0xb20>
 80078b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078bc:	d204      	bcs.n	80078c8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078c4:	60da      	str	r2, [r3, #12]
 80078c6:	e002      	b.n	80078ce <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80078ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3738      	adds	r7, #56	; 0x38
 80078f2:	46bd      	mov	sp, r7
 80078f4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80078f8:	58024400 	.word	0x58024400
 80078fc:	03d09000 	.word	0x03d09000
 8007900:	003d0900 	.word	0x003d0900
 8007904:	0800b808 	.word	0x0800b808

08007908 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007936:	f003 0302 	and.w	r3, r3, #2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	430a      	orrs	r2, r1
 8007952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00a      	beq.n	8007976 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797a:	f003 0308 	and.w	r3, r3, #8
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799c:	f003 0310 	and.w	r3, r3, #16
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00a      	beq.n	80079ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079be:	f003 0320 	and.w	r3, r3, #32
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d01a      	beq.n	8007a1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a06:	d10a      	bne.n	8007a1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	605a      	str	r2, [r3, #4]
  }
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af02      	add	r7, sp, #8
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007a5c:	f7fb f960 	bl	8002d20 <HAL_GetTick>
 8007a60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0308 	and.w	r3, r3, #8
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d10e      	bne.n	8007a8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f82c 	bl	8007adc <UART_WaitOnFlagUntilTimeout>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e022      	b.n	8007ad4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0304 	and.w	r3, r3, #4
 8007a98:	2b04      	cmp	r3, #4
 8007a9a:	d10e      	bne.n	8007aba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f816 	bl	8007adc <UART_WaitOnFlagUntilTimeout>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d001      	beq.n	8007aba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e00c      	b.n	8007ad4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2220      	movs	r2, #32
 8007abe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	603b      	str	r3, [r7, #0]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aec:	e062      	b.n	8007bb4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af4:	d05e      	beq.n	8007bb4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007af6:	f7fb f913 	bl	8002d20 <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	69ba      	ldr	r2, [r7, #24]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d302      	bcc.n	8007b0c <UART_WaitOnFlagUntilTimeout+0x30>
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d11d      	bne.n	8007b48 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b1a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689a      	ldr	r2, [r3, #8]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 0201 	bic.w	r2, r2, #1
 8007b2a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2220      	movs	r2, #32
 8007b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e045      	b.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 0304 	and.w	r3, r3, #4
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d02e      	beq.n	8007bb4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	69db      	ldr	r3, [r3, #28]
 8007b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b64:	d126      	bne.n	8007bb4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b6e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b7e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689a      	ldr	r2, [r3, #8]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0201 	bic.w	r2, r2, #1
 8007b8e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2220      	movs	r2, #32
 8007b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e00f      	b.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	69da      	ldr	r2, [r3, #28]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	bf0c      	ite	eq
 8007bc4:	2301      	moveq	r3, #1
 8007bc6:	2300      	movne	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	461a      	mov	r2, r3
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d08d      	beq.n	8007aee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d101      	bne.n	8007bf2 <HAL_UARTEx_DisableFifoMode+0x16>
 8007bee:	2302      	movs	r3, #2
 8007bf0:	e027      	b.n	8007c42 <HAL_UARTEx_DisableFifoMode+0x66>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2224      	movs	r2, #36	; 0x24
 8007bfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0201 	bic.w	r2, r2, #1
 8007c18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d101      	bne.n	8007c66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c62:	2302      	movs	r3, #2
 8007c64:	e02d      	b.n	8007cc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2224      	movs	r2, #36	; 0x24
 8007c72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0201 	bic.w	r2, r2, #1
 8007c8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f850 	bl	8007d48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d101      	bne.n	8007ce2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007cde:	2302      	movs	r3, #2
 8007ce0:	e02d      	b.n	8007d3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2224      	movs	r2, #36	; 0x24
 8007cee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f022 0201 	bic.w	r2, r2, #1
 8007d08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f812 	bl	8007d48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2220      	movs	r2, #32
 8007d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
	...

08007d48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b089      	sub	sp, #36	; 0x24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007d50:	4a2f      	ldr	r2, [pc, #188]	; (8007e10 <UARTEx_SetNbDataToProcess+0xc8>)
 8007d52:	f107 0314 	add.w	r3, r7, #20
 8007d56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d5a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007d5e:	4a2d      	ldr	r2, [pc, #180]	; (8007e14 <UARTEx_SetNbDataToProcess+0xcc>)
 8007d60:	f107 030c 	add.w	r3, r7, #12
 8007d64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d68:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d108      	bne.n	8007d86 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d84:	e03d      	b.n	8007e02 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d86:	2310      	movs	r3, #16
 8007d88:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d8a:	2310      	movs	r3, #16
 8007d8c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	0e5b      	lsrs	r3, r3, #25
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	f003 0307 	and.w	r3, r3, #7
 8007d9c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	0f5b      	lsrs	r3, r3, #29
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	f003 0307 	and.w	r3, r3, #7
 8007dac:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007dae:	7fbb      	ldrb	r3, [r7, #30]
 8007db0:	7f3a      	ldrb	r2, [r7, #28]
 8007db2:	f107 0120 	add.w	r1, r7, #32
 8007db6:	440a      	add	r2, r1
 8007db8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007dbc:	fb02 f303 	mul.w	r3, r2, r3
 8007dc0:	7f3a      	ldrb	r2, [r7, #28]
 8007dc2:	f107 0120 	add.w	r1, r7, #32
 8007dc6:	440a      	add	r2, r1
 8007dc8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007dcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007dd8:	7ffb      	ldrb	r3, [r7, #31]
 8007dda:	7f7a      	ldrb	r2, [r7, #29]
 8007ddc:	f107 0120 	add.w	r1, r7, #32
 8007de0:	440a      	add	r2, r1
 8007de2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007de6:	fb02 f303 	mul.w	r3, r2, r3
 8007dea:	7f7a      	ldrb	r2, [r7, #29]
 8007dec:	f107 0120 	add.w	r1, r7, #32
 8007df0:	440a      	add	r2, r1
 8007df2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007df6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e02:	bf00      	nop
 8007e04:	3724      	adds	r7, #36	; 0x24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	0800b7e8 	.word	0x0800b7e8
 8007e14:	0800b7f0 	.word	0x0800b7f0

08007e18 <__errno>:
 8007e18:	4b01      	ldr	r3, [pc, #4]	; (8007e20 <__errno+0x8>)
 8007e1a:	6818      	ldr	r0, [r3, #0]
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	20000010 	.word	0x20000010

08007e24 <__libc_init_array>:
 8007e24:	b570      	push	{r4, r5, r6, lr}
 8007e26:	4e0d      	ldr	r6, [pc, #52]	; (8007e5c <__libc_init_array+0x38>)
 8007e28:	4c0d      	ldr	r4, [pc, #52]	; (8007e60 <__libc_init_array+0x3c>)
 8007e2a:	1ba4      	subs	r4, r4, r6
 8007e2c:	10a4      	asrs	r4, r4, #2
 8007e2e:	2500      	movs	r5, #0
 8007e30:	42a5      	cmp	r5, r4
 8007e32:	d109      	bne.n	8007e48 <__libc_init_array+0x24>
 8007e34:	4e0b      	ldr	r6, [pc, #44]	; (8007e64 <__libc_init_array+0x40>)
 8007e36:	4c0c      	ldr	r4, [pc, #48]	; (8007e68 <__libc_init_array+0x44>)
 8007e38:	f003 fa60 	bl	800b2fc <_init>
 8007e3c:	1ba4      	subs	r4, r4, r6
 8007e3e:	10a4      	asrs	r4, r4, #2
 8007e40:	2500      	movs	r5, #0
 8007e42:	42a5      	cmp	r5, r4
 8007e44:	d105      	bne.n	8007e52 <__libc_init_array+0x2e>
 8007e46:	bd70      	pop	{r4, r5, r6, pc}
 8007e48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e4c:	4798      	blx	r3
 8007e4e:	3501      	adds	r5, #1
 8007e50:	e7ee      	b.n	8007e30 <__libc_init_array+0xc>
 8007e52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e56:	4798      	blx	r3
 8007e58:	3501      	adds	r5, #1
 8007e5a:	e7f2      	b.n	8007e42 <__libc_init_array+0x1e>
 8007e5c:	0800bb30 	.word	0x0800bb30
 8007e60:	0800bb30 	.word	0x0800bb30
 8007e64:	0800bb30 	.word	0x0800bb30
 8007e68:	0800bb34 	.word	0x0800bb34

08007e6c <malloc>:
 8007e6c:	4b02      	ldr	r3, [pc, #8]	; (8007e78 <malloc+0xc>)
 8007e6e:	4601      	mov	r1, r0
 8007e70:	6818      	ldr	r0, [r3, #0]
 8007e72:	f000 b859 	b.w	8007f28 <_malloc_r>
 8007e76:	bf00      	nop
 8007e78:	20000010 	.word	0x20000010

08007e7c <memset>:
 8007e7c:	4402      	add	r2, r0
 8007e7e:	4603      	mov	r3, r0
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d100      	bne.n	8007e86 <memset+0xa>
 8007e84:	4770      	bx	lr
 8007e86:	f803 1b01 	strb.w	r1, [r3], #1
 8007e8a:	e7f9      	b.n	8007e80 <memset+0x4>

08007e8c <_free_r>:
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	4605      	mov	r5, r0
 8007e90:	2900      	cmp	r1, #0
 8007e92:	d045      	beq.n	8007f20 <_free_r+0x94>
 8007e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e98:	1f0c      	subs	r4, r1, #4
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	bfb8      	it	lt
 8007e9e:	18e4      	addlt	r4, r4, r3
 8007ea0:	f001 fbd9 	bl	8009656 <__malloc_lock>
 8007ea4:	4a1f      	ldr	r2, [pc, #124]	; (8007f24 <_free_r+0x98>)
 8007ea6:	6813      	ldr	r3, [r2, #0]
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	b933      	cbnz	r3, 8007eba <_free_r+0x2e>
 8007eac:	6063      	str	r3, [r4, #4]
 8007eae:	6014      	str	r4, [r2, #0]
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eb6:	f001 bbcf 	b.w	8009658 <__malloc_unlock>
 8007eba:	42a3      	cmp	r3, r4
 8007ebc:	d90c      	bls.n	8007ed8 <_free_r+0x4c>
 8007ebe:	6821      	ldr	r1, [r4, #0]
 8007ec0:	1862      	adds	r2, r4, r1
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	bf04      	itt	eq
 8007ec6:	681a      	ldreq	r2, [r3, #0]
 8007ec8:	685b      	ldreq	r3, [r3, #4]
 8007eca:	6063      	str	r3, [r4, #4]
 8007ecc:	bf04      	itt	eq
 8007ece:	1852      	addeq	r2, r2, r1
 8007ed0:	6022      	streq	r2, [r4, #0]
 8007ed2:	6004      	str	r4, [r0, #0]
 8007ed4:	e7ec      	b.n	8007eb0 <_free_r+0x24>
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	685a      	ldr	r2, [r3, #4]
 8007eda:	b10a      	cbz	r2, 8007ee0 <_free_r+0x54>
 8007edc:	42a2      	cmp	r2, r4
 8007ede:	d9fa      	bls.n	8007ed6 <_free_r+0x4a>
 8007ee0:	6819      	ldr	r1, [r3, #0]
 8007ee2:	1858      	adds	r0, r3, r1
 8007ee4:	42a0      	cmp	r0, r4
 8007ee6:	d10b      	bne.n	8007f00 <_free_r+0x74>
 8007ee8:	6820      	ldr	r0, [r4, #0]
 8007eea:	4401      	add	r1, r0
 8007eec:	1858      	adds	r0, r3, r1
 8007eee:	4282      	cmp	r2, r0
 8007ef0:	6019      	str	r1, [r3, #0]
 8007ef2:	d1dd      	bne.n	8007eb0 <_free_r+0x24>
 8007ef4:	6810      	ldr	r0, [r2, #0]
 8007ef6:	6852      	ldr	r2, [r2, #4]
 8007ef8:	605a      	str	r2, [r3, #4]
 8007efa:	4401      	add	r1, r0
 8007efc:	6019      	str	r1, [r3, #0]
 8007efe:	e7d7      	b.n	8007eb0 <_free_r+0x24>
 8007f00:	d902      	bls.n	8007f08 <_free_r+0x7c>
 8007f02:	230c      	movs	r3, #12
 8007f04:	602b      	str	r3, [r5, #0]
 8007f06:	e7d3      	b.n	8007eb0 <_free_r+0x24>
 8007f08:	6820      	ldr	r0, [r4, #0]
 8007f0a:	1821      	adds	r1, r4, r0
 8007f0c:	428a      	cmp	r2, r1
 8007f0e:	bf04      	itt	eq
 8007f10:	6811      	ldreq	r1, [r2, #0]
 8007f12:	6852      	ldreq	r2, [r2, #4]
 8007f14:	6062      	str	r2, [r4, #4]
 8007f16:	bf04      	itt	eq
 8007f18:	1809      	addeq	r1, r1, r0
 8007f1a:	6021      	streq	r1, [r4, #0]
 8007f1c:	605c      	str	r4, [r3, #4]
 8007f1e:	e7c7      	b.n	8007eb0 <_free_r+0x24>
 8007f20:	bd38      	pop	{r3, r4, r5, pc}
 8007f22:	bf00      	nop
 8007f24:	20000204 	.word	0x20000204

08007f28 <_malloc_r>:
 8007f28:	b570      	push	{r4, r5, r6, lr}
 8007f2a:	1ccd      	adds	r5, r1, #3
 8007f2c:	f025 0503 	bic.w	r5, r5, #3
 8007f30:	3508      	adds	r5, #8
 8007f32:	2d0c      	cmp	r5, #12
 8007f34:	bf38      	it	cc
 8007f36:	250c      	movcc	r5, #12
 8007f38:	2d00      	cmp	r5, #0
 8007f3a:	4606      	mov	r6, r0
 8007f3c:	db01      	blt.n	8007f42 <_malloc_r+0x1a>
 8007f3e:	42a9      	cmp	r1, r5
 8007f40:	d903      	bls.n	8007f4a <_malloc_r+0x22>
 8007f42:	230c      	movs	r3, #12
 8007f44:	6033      	str	r3, [r6, #0]
 8007f46:	2000      	movs	r0, #0
 8007f48:	bd70      	pop	{r4, r5, r6, pc}
 8007f4a:	f001 fb84 	bl	8009656 <__malloc_lock>
 8007f4e:	4a21      	ldr	r2, [pc, #132]	; (8007fd4 <_malloc_r+0xac>)
 8007f50:	6814      	ldr	r4, [r2, #0]
 8007f52:	4621      	mov	r1, r4
 8007f54:	b991      	cbnz	r1, 8007f7c <_malloc_r+0x54>
 8007f56:	4c20      	ldr	r4, [pc, #128]	; (8007fd8 <_malloc_r+0xb0>)
 8007f58:	6823      	ldr	r3, [r4, #0]
 8007f5a:	b91b      	cbnz	r3, 8007f64 <_malloc_r+0x3c>
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	f000 fc8f 	bl	8008880 <_sbrk_r>
 8007f62:	6020      	str	r0, [r4, #0]
 8007f64:	4629      	mov	r1, r5
 8007f66:	4630      	mov	r0, r6
 8007f68:	f000 fc8a 	bl	8008880 <_sbrk_r>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	d124      	bne.n	8007fba <_malloc_r+0x92>
 8007f70:	230c      	movs	r3, #12
 8007f72:	6033      	str	r3, [r6, #0]
 8007f74:	4630      	mov	r0, r6
 8007f76:	f001 fb6f 	bl	8009658 <__malloc_unlock>
 8007f7a:	e7e4      	b.n	8007f46 <_malloc_r+0x1e>
 8007f7c:	680b      	ldr	r3, [r1, #0]
 8007f7e:	1b5b      	subs	r3, r3, r5
 8007f80:	d418      	bmi.n	8007fb4 <_malloc_r+0x8c>
 8007f82:	2b0b      	cmp	r3, #11
 8007f84:	d90f      	bls.n	8007fa6 <_malloc_r+0x7e>
 8007f86:	600b      	str	r3, [r1, #0]
 8007f88:	50cd      	str	r5, [r1, r3]
 8007f8a:	18cc      	adds	r4, r1, r3
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	f001 fb63 	bl	8009658 <__malloc_unlock>
 8007f92:	f104 000b 	add.w	r0, r4, #11
 8007f96:	1d23      	adds	r3, r4, #4
 8007f98:	f020 0007 	bic.w	r0, r0, #7
 8007f9c:	1ac3      	subs	r3, r0, r3
 8007f9e:	d0d3      	beq.n	8007f48 <_malloc_r+0x20>
 8007fa0:	425a      	negs	r2, r3
 8007fa2:	50e2      	str	r2, [r4, r3]
 8007fa4:	e7d0      	b.n	8007f48 <_malloc_r+0x20>
 8007fa6:	428c      	cmp	r4, r1
 8007fa8:	684b      	ldr	r3, [r1, #4]
 8007faa:	bf16      	itet	ne
 8007fac:	6063      	strne	r3, [r4, #4]
 8007fae:	6013      	streq	r3, [r2, #0]
 8007fb0:	460c      	movne	r4, r1
 8007fb2:	e7eb      	b.n	8007f8c <_malloc_r+0x64>
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	6849      	ldr	r1, [r1, #4]
 8007fb8:	e7cc      	b.n	8007f54 <_malloc_r+0x2c>
 8007fba:	1cc4      	adds	r4, r0, #3
 8007fbc:	f024 0403 	bic.w	r4, r4, #3
 8007fc0:	42a0      	cmp	r0, r4
 8007fc2:	d005      	beq.n	8007fd0 <_malloc_r+0xa8>
 8007fc4:	1a21      	subs	r1, r4, r0
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f000 fc5a 	bl	8008880 <_sbrk_r>
 8007fcc:	3001      	adds	r0, #1
 8007fce:	d0cf      	beq.n	8007f70 <_malloc_r+0x48>
 8007fd0:	6025      	str	r5, [r4, #0]
 8007fd2:	e7db      	b.n	8007f8c <_malloc_r+0x64>
 8007fd4:	20000204 	.word	0x20000204
 8007fd8:	20000208 	.word	0x20000208

08007fdc <__cvt>:
 8007fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fde:	ed2d 8b02 	vpush	{d8}
 8007fe2:	eeb0 8b40 	vmov.f64	d8, d0
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	4617      	mov	r7, r2
 8007fea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007fec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007fee:	ee18 2a90 	vmov	r2, s17
 8007ff2:	f025 0520 	bic.w	r5, r5, #32
 8007ff6:	2a00      	cmp	r2, #0
 8007ff8:	bfb6      	itet	lt
 8007ffa:	222d      	movlt	r2, #45	; 0x2d
 8007ffc:	2200      	movge	r2, #0
 8007ffe:	eeb1 8b40 	vneglt.f64	d8, d0
 8008002:	2d46      	cmp	r5, #70	; 0x46
 8008004:	460c      	mov	r4, r1
 8008006:	701a      	strb	r2, [r3, #0]
 8008008:	d004      	beq.n	8008014 <__cvt+0x38>
 800800a:	2d45      	cmp	r5, #69	; 0x45
 800800c:	d100      	bne.n	8008010 <__cvt+0x34>
 800800e:	3401      	adds	r4, #1
 8008010:	2102      	movs	r1, #2
 8008012:	e000      	b.n	8008016 <__cvt+0x3a>
 8008014:	2103      	movs	r1, #3
 8008016:	ab03      	add	r3, sp, #12
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	ab02      	add	r3, sp, #8
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	4622      	mov	r2, r4
 8008020:	4633      	mov	r3, r6
 8008022:	eeb0 0b48 	vmov.f64	d0, d8
 8008026:	f000 fce7 	bl	80089f8 <_dtoa_r>
 800802a:	2d47      	cmp	r5, #71	; 0x47
 800802c:	d101      	bne.n	8008032 <__cvt+0x56>
 800802e:	07fb      	lsls	r3, r7, #31
 8008030:	d51e      	bpl.n	8008070 <__cvt+0x94>
 8008032:	2d46      	cmp	r5, #70	; 0x46
 8008034:	eb00 0304 	add.w	r3, r0, r4
 8008038:	d10c      	bne.n	8008054 <__cvt+0x78>
 800803a:	7802      	ldrb	r2, [r0, #0]
 800803c:	2a30      	cmp	r2, #48	; 0x30
 800803e:	d107      	bne.n	8008050 <__cvt+0x74>
 8008040:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008048:	bf1c      	itt	ne
 800804a:	f1c4 0401 	rsbne	r4, r4, #1
 800804e:	6034      	strne	r4, [r6, #0]
 8008050:	6832      	ldr	r2, [r6, #0]
 8008052:	4413      	add	r3, r2
 8008054:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800805c:	d007      	beq.n	800806e <__cvt+0x92>
 800805e:	2130      	movs	r1, #48	; 0x30
 8008060:	9a03      	ldr	r2, [sp, #12]
 8008062:	429a      	cmp	r2, r3
 8008064:	d204      	bcs.n	8008070 <__cvt+0x94>
 8008066:	1c54      	adds	r4, r2, #1
 8008068:	9403      	str	r4, [sp, #12]
 800806a:	7011      	strb	r1, [r2, #0]
 800806c:	e7f8      	b.n	8008060 <__cvt+0x84>
 800806e:	9303      	str	r3, [sp, #12]
 8008070:	9b03      	ldr	r3, [sp, #12]
 8008072:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008074:	1a1b      	subs	r3, r3, r0
 8008076:	6013      	str	r3, [r2, #0]
 8008078:	b005      	add	sp, #20
 800807a:	ecbd 8b02 	vpop	{d8}
 800807e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008080 <__exponent>:
 8008080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008082:	2900      	cmp	r1, #0
 8008084:	4604      	mov	r4, r0
 8008086:	bfba      	itte	lt
 8008088:	4249      	neglt	r1, r1
 800808a:	232d      	movlt	r3, #45	; 0x2d
 800808c:	232b      	movge	r3, #43	; 0x2b
 800808e:	2909      	cmp	r1, #9
 8008090:	f804 2b02 	strb.w	r2, [r4], #2
 8008094:	7043      	strb	r3, [r0, #1]
 8008096:	dd20      	ble.n	80080da <__exponent+0x5a>
 8008098:	f10d 0307 	add.w	r3, sp, #7
 800809c:	461f      	mov	r7, r3
 800809e:	260a      	movs	r6, #10
 80080a0:	fb91 f5f6 	sdiv	r5, r1, r6
 80080a4:	fb06 1115 	mls	r1, r6, r5, r1
 80080a8:	3130      	adds	r1, #48	; 0x30
 80080aa:	2d09      	cmp	r5, #9
 80080ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80080b0:	f103 32ff 	add.w	r2, r3, #4294967295
 80080b4:	4629      	mov	r1, r5
 80080b6:	dc09      	bgt.n	80080cc <__exponent+0x4c>
 80080b8:	3130      	adds	r1, #48	; 0x30
 80080ba:	3b02      	subs	r3, #2
 80080bc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80080c0:	42bb      	cmp	r3, r7
 80080c2:	4622      	mov	r2, r4
 80080c4:	d304      	bcc.n	80080d0 <__exponent+0x50>
 80080c6:	1a10      	subs	r0, r2, r0
 80080c8:	b003      	add	sp, #12
 80080ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080cc:	4613      	mov	r3, r2
 80080ce:	e7e7      	b.n	80080a0 <__exponent+0x20>
 80080d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080d4:	f804 2b01 	strb.w	r2, [r4], #1
 80080d8:	e7f2      	b.n	80080c0 <__exponent+0x40>
 80080da:	2330      	movs	r3, #48	; 0x30
 80080dc:	4419      	add	r1, r3
 80080de:	7083      	strb	r3, [r0, #2]
 80080e0:	1d02      	adds	r2, r0, #4
 80080e2:	70c1      	strb	r1, [r0, #3]
 80080e4:	e7ef      	b.n	80080c6 <__exponent+0x46>
	...

080080e8 <_printf_float>:
 80080e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ec:	b08d      	sub	sp, #52	; 0x34
 80080ee:	460c      	mov	r4, r1
 80080f0:	4616      	mov	r6, r2
 80080f2:	461f      	mov	r7, r3
 80080f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80080f8:	4605      	mov	r5, r0
 80080fa:	f001 fa93 	bl	8009624 <_localeconv_r>
 80080fe:	f8d0 b000 	ldr.w	fp, [r0]
 8008102:	4658      	mov	r0, fp
 8008104:	f7f8 f8ec 	bl	80002e0 <strlen>
 8008108:	2300      	movs	r3, #0
 800810a:	930a      	str	r3, [sp, #40]	; 0x28
 800810c:	f8d8 3000 	ldr.w	r3, [r8]
 8008110:	9005      	str	r0, [sp, #20]
 8008112:	3307      	adds	r3, #7
 8008114:	f023 0307 	bic.w	r3, r3, #7
 8008118:	f103 0108 	add.w	r1, r3, #8
 800811c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008120:	6822      	ldr	r2, [r4, #0]
 8008122:	f8c8 1000 	str.w	r1, [r8]
 8008126:	e9d3 0100 	ldrd	r0, r1, [r3]
 800812a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800812e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 80083b8 <_printf_float+0x2d0>
 8008132:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008136:	eeb0 6bc0 	vabs.f64	d6, d0
 800813a:	eeb4 6b47 	vcmp.f64	d6, d7
 800813e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008142:	dd24      	ble.n	800818e <_printf_float+0xa6>
 8008144:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800814c:	d502      	bpl.n	8008154 <_printf_float+0x6c>
 800814e:	232d      	movs	r3, #45	; 0x2d
 8008150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008154:	499a      	ldr	r1, [pc, #616]	; (80083c0 <_printf_float+0x2d8>)
 8008156:	4b9b      	ldr	r3, [pc, #620]	; (80083c4 <_printf_float+0x2dc>)
 8008158:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800815c:	bf8c      	ite	hi
 800815e:	4688      	movhi	r8, r1
 8008160:	4698      	movls	r8, r3
 8008162:	f022 0204 	bic.w	r2, r2, #4
 8008166:	2303      	movs	r3, #3
 8008168:	6123      	str	r3, [r4, #16]
 800816a:	6022      	str	r2, [r4, #0]
 800816c:	f04f 0a00 	mov.w	sl, #0
 8008170:	9700      	str	r7, [sp, #0]
 8008172:	4633      	mov	r3, r6
 8008174:	aa0b      	add	r2, sp, #44	; 0x2c
 8008176:	4621      	mov	r1, r4
 8008178:	4628      	mov	r0, r5
 800817a:	f000 f9e1 	bl	8008540 <_printf_common>
 800817e:	3001      	adds	r0, #1
 8008180:	f040 8089 	bne.w	8008296 <_printf_float+0x1ae>
 8008184:	f04f 30ff 	mov.w	r0, #4294967295
 8008188:	b00d      	add	sp, #52	; 0x34
 800818a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818e:	eeb4 0b40 	vcmp.f64	d0, d0
 8008192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008196:	d702      	bvc.n	800819e <_printf_float+0xb6>
 8008198:	498b      	ldr	r1, [pc, #556]	; (80083c8 <_printf_float+0x2e0>)
 800819a:	4b8c      	ldr	r3, [pc, #560]	; (80083cc <_printf_float+0x2e4>)
 800819c:	e7dc      	b.n	8008158 <_printf_float+0x70>
 800819e:	6861      	ldr	r1, [r4, #4]
 80081a0:	1c4b      	adds	r3, r1, #1
 80081a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081a6:	ab0a      	add	r3, sp, #40	; 0x28
 80081a8:	a809      	add	r0, sp, #36	; 0x24
 80081aa:	d13b      	bne.n	8008224 <_printf_float+0x13c>
 80081ac:	2106      	movs	r1, #6
 80081ae:	6061      	str	r1, [r4, #4]
 80081b0:	f04f 0c00 	mov.w	ip, #0
 80081b4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80081b8:	e9cd 0900 	strd	r0, r9, [sp]
 80081bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80081c0:	6022      	str	r2, [r4, #0]
 80081c2:	6861      	ldr	r1, [r4, #4]
 80081c4:	4628      	mov	r0, r5
 80081c6:	f7ff ff09 	bl	8007fdc <__cvt>
 80081ca:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80081ce:	2b47      	cmp	r3, #71	; 0x47
 80081d0:	4680      	mov	r8, r0
 80081d2:	d109      	bne.n	80081e8 <_printf_float+0x100>
 80081d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d6:	1cd8      	adds	r0, r3, #3
 80081d8:	db02      	blt.n	80081e0 <_printf_float+0xf8>
 80081da:	6862      	ldr	r2, [r4, #4]
 80081dc:	4293      	cmp	r3, r2
 80081de:	dd47      	ble.n	8008270 <_printf_float+0x188>
 80081e0:	f1a9 0902 	sub.w	r9, r9, #2
 80081e4:	fa5f f989 	uxtb.w	r9, r9
 80081e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80081ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081ee:	d824      	bhi.n	800823a <_printf_float+0x152>
 80081f0:	3901      	subs	r1, #1
 80081f2:	464a      	mov	r2, r9
 80081f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80081f8:	9109      	str	r1, [sp, #36]	; 0x24
 80081fa:	f7ff ff41 	bl	8008080 <__exponent>
 80081fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008200:	1813      	adds	r3, r2, r0
 8008202:	2a01      	cmp	r2, #1
 8008204:	4682      	mov	sl, r0
 8008206:	6123      	str	r3, [r4, #16]
 8008208:	dc02      	bgt.n	8008210 <_printf_float+0x128>
 800820a:	6822      	ldr	r2, [r4, #0]
 800820c:	07d1      	lsls	r1, r2, #31
 800820e:	d501      	bpl.n	8008214 <_printf_float+0x12c>
 8008210:	3301      	adds	r3, #1
 8008212:	6123      	str	r3, [r4, #16]
 8008214:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008218:	2b00      	cmp	r3, #0
 800821a:	d0a9      	beq.n	8008170 <_printf_float+0x88>
 800821c:	232d      	movs	r3, #45	; 0x2d
 800821e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008222:	e7a5      	b.n	8008170 <_printf_float+0x88>
 8008224:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8008228:	f000 8178 	beq.w	800851c <_printf_float+0x434>
 800822c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008230:	d1be      	bne.n	80081b0 <_printf_float+0xc8>
 8008232:	2900      	cmp	r1, #0
 8008234:	d1bc      	bne.n	80081b0 <_printf_float+0xc8>
 8008236:	2101      	movs	r1, #1
 8008238:	e7b9      	b.n	80081ae <_printf_float+0xc6>
 800823a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800823e:	d119      	bne.n	8008274 <_printf_float+0x18c>
 8008240:	2900      	cmp	r1, #0
 8008242:	6863      	ldr	r3, [r4, #4]
 8008244:	dd0c      	ble.n	8008260 <_printf_float+0x178>
 8008246:	6121      	str	r1, [r4, #16]
 8008248:	b913      	cbnz	r3, 8008250 <_printf_float+0x168>
 800824a:	6822      	ldr	r2, [r4, #0]
 800824c:	07d2      	lsls	r2, r2, #31
 800824e:	d502      	bpl.n	8008256 <_printf_float+0x16e>
 8008250:	3301      	adds	r3, #1
 8008252:	440b      	add	r3, r1
 8008254:	6123      	str	r3, [r4, #16]
 8008256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008258:	65a3      	str	r3, [r4, #88]	; 0x58
 800825a:	f04f 0a00 	mov.w	sl, #0
 800825e:	e7d9      	b.n	8008214 <_printf_float+0x12c>
 8008260:	b913      	cbnz	r3, 8008268 <_printf_float+0x180>
 8008262:	6822      	ldr	r2, [r4, #0]
 8008264:	07d0      	lsls	r0, r2, #31
 8008266:	d501      	bpl.n	800826c <_printf_float+0x184>
 8008268:	3302      	adds	r3, #2
 800826a:	e7f3      	b.n	8008254 <_printf_float+0x16c>
 800826c:	2301      	movs	r3, #1
 800826e:	e7f1      	b.n	8008254 <_printf_float+0x16c>
 8008270:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008274:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008278:	4293      	cmp	r3, r2
 800827a:	db05      	blt.n	8008288 <_printf_float+0x1a0>
 800827c:	6822      	ldr	r2, [r4, #0]
 800827e:	6123      	str	r3, [r4, #16]
 8008280:	07d1      	lsls	r1, r2, #31
 8008282:	d5e8      	bpl.n	8008256 <_printf_float+0x16e>
 8008284:	3301      	adds	r3, #1
 8008286:	e7e5      	b.n	8008254 <_printf_float+0x16c>
 8008288:	2b00      	cmp	r3, #0
 800828a:	bfd4      	ite	le
 800828c:	f1c3 0302 	rsble	r3, r3, #2
 8008290:	2301      	movgt	r3, #1
 8008292:	4413      	add	r3, r2
 8008294:	e7de      	b.n	8008254 <_printf_float+0x16c>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	055a      	lsls	r2, r3, #21
 800829a:	d407      	bmi.n	80082ac <_printf_float+0x1c4>
 800829c:	6923      	ldr	r3, [r4, #16]
 800829e:	4642      	mov	r2, r8
 80082a0:	4631      	mov	r1, r6
 80082a2:	4628      	mov	r0, r5
 80082a4:	47b8      	blx	r7
 80082a6:	3001      	adds	r0, #1
 80082a8:	d12a      	bne.n	8008300 <_printf_float+0x218>
 80082aa:	e76b      	b.n	8008184 <_printf_float+0x9c>
 80082ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80082b0:	f240 80de 	bls.w	8008470 <_printf_float+0x388>
 80082b4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80082b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80082bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c0:	d133      	bne.n	800832a <_printf_float+0x242>
 80082c2:	2301      	movs	r3, #1
 80082c4:	4a42      	ldr	r2, [pc, #264]	; (80083d0 <_printf_float+0x2e8>)
 80082c6:	4631      	mov	r1, r6
 80082c8:	4628      	mov	r0, r5
 80082ca:	47b8      	blx	r7
 80082cc:	3001      	adds	r0, #1
 80082ce:	f43f af59 	beq.w	8008184 <_printf_float+0x9c>
 80082d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082d6:	429a      	cmp	r2, r3
 80082d8:	db02      	blt.n	80082e0 <_printf_float+0x1f8>
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	07d8      	lsls	r0, r3, #31
 80082de:	d50f      	bpl.n	8008300 <_printf_float+0x218>
 80082e0:	9b05      	ldr	r3, [sp, #20]
 80082e2:	465a      	mov	r2, fp
 80082e4:	4631      	mov	r1, r6
 80082e6:	4628      	mov	r0, r5
 80082e8:	47b8      	blx	r7
 80082ea:	3001      	adds	r0, #1
 80082ec:	f43f af4a 	beq.w	8008184 <_printf_float+0x9c>
 80082f0:	f04f 0800 	mov.w	r8, #0
 80082f4:	f104 091a 	add.w	r9, r4, #26
 80082f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082fa:	3b01      	subs	r3, #1
 80082fc:	4543      	cmp	r3, r8
 80082fe:	dc09      	bgt.n	8008314 <_printf_float+0x22c>
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	079b      	lsls	r3, r3, #30
 8008304:	f100 8105 	bmi.w	8008512 <_printf_float+0x42a>
 8008308:	68e0      	ldr	r0, [r4, #12]
 800830a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800830c:	4298      	cmp	r0, r3
 800830e:	bfb8      	it	lt
 8008310:	4618      	movlt	r0, r3
 8008312:	e739      	b.n	8008188 <_printf_float+0xa0>
 8008314:	2301      	movs	r3, #1
 8008316:	464a      	mov	r2, r9
 8008318:	4631      	mov	r1, r6
 800831a:	4628      	mov	r0, r5
 800831c:	47b8      	blx	r7
 800831e:	3001      	adds	r0, #1
 8008320:	f43f af30 	beq.w	8008184 <_printf_float+0x9c>
 8008324:	f108 0801 	add.w	r8, r8, #1
 8008328:	e7e6      	b.n	80082f8 <_printf_float+0x210>
 800832a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800832c:	2b00      	cmp	r3, #0
 800832e:	dc2b      	bgt.n	8008388 <_printf_float+0x2a0>
 8008330:	2301      	movs	r3, #1
 8008332:	4a27      	ldr	r2, [pc, #156]	; (80083d0 <_printf_float+0x2e8>)
 8008334:	4631      	mov	r1, r6
 8008336:	4628      	mov	r0, r5
 8008338:	47b8      	blx	r7
 800833a:	3001      	adds	r0, #1
 800833c:	f43f af22 	beq.w	8008184 <_printf_float+0x9c>
 8008340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008342:	b923      	cbnz	r3, 800834e <_printf_float+0x266>
 8008344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008346:	b913      	cbnz	r3, 800834e <_printf_float+0x266>
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	07d9      	lsls	r1, r3, #31
 800834c:	d5d8      	bpl.n	8008300 <_printf_float+0x218>
 800834e:	9b05      	ldr	r3, [sp, #20]
 8008350:	465a      	mov	r2, fp
 8008352:	4631      	mov	r1, r6
 8008354:	4628      	mov	r0, r5
 8008356:	47b8      	blx	r7
 8008358:	3001      	adds	r0, #1
 800835a:	f43f af13 	beq.w	8008184 <_printf_float+0x9c>
 800835e:	f04f 0900 	mov.w	r9, #0
 8008362:	f104 0a1a 	add.w	sl, r4, #26
 8008366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008368:	425b      	negs	r3, r3
 800836a:	454b      	cmp	r3, r9
 800836c:	dc01      	bgt.n	8008372 <_printf_float+0x28a>
 800836e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008370:	e795      	b.n	800829e <_printf_float+0x1b6>
 8008372:	2301      	movs	r3, #1
 8008374:	4652      	mov	r2, sl
 8008376:	4631      	mov	r1, r6
 8008378:	4628      	mov	r0, r5
 800837a:	47b8      	blx	r7
 800837c:	3001      	adds	r0, #1
 800837e:	f43f af01 	beq.w	8008184 <_printf_float+0x9c>
 8008382:	f109 0901 	add.w	r9, r9, #1
 8008386:	e7ee      	b.n	8008366 <_printf_float+0x27e>
 8008388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800838a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800838c:	429a      	cmp	r2, r3
 800838e:	bfa8      	it	ge
 8008390:	461a      	movge	r2, r3
 8008392:	2a00      	cmp	r2, #0
 8008394:	4691      	mov	r9, r2
 8008396:	dd07      	ble.n	80083a8 <_printf_float+0x2c0>
 8008398:	4613      	mov	r3, r2
 800839a:	4631      	mov	r1, r6
 800839c:	4642      	mov	r2, r8
 800839e:	4628      	mov	r0, r5
 80083a0:	47b8      	blx	r7
 80083a2:	3001      	adds	r0, #1
 80083a4:	f43f aeee 	beq.w	8008184 <_printf_float+0x9c>
 80083a8:	f104 031a 	add.w	r3, r4, #26
 80083ac:	f04f 0a00 	mov.w	sl, #0
 80083b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083b4:	9307      	str	r3, [sp, #28]
 80083b6:	e017      	b.n	80083e8 <_printf_float+0x300>
 80083b8:	ffffffff 	.word	0xffffffff
 80083bc:	7fefffff 	.word	0x7fefffff
 80083c0:	0800b828 	.word	0x0800b828
 80083c4:	0800b824 	.word	0x0800b824
 80083c8:	0800b830 	.word	0x0800b830
 80083cc:	0800b82c 	.word	0x0800b82c
 80083d0:	0800b834 	.word	0x0800b834
 80083d4:	2301      	movs	r3, #1
 80083d6:	9a07      	ldr	r2, [sp, #28]
 80083d8:	4631      	mov	r1, r6
 80083da:	4628      	mov	r0, r5
 80083dc:	47b8      	blx	r7
 80083de:	3001      	adds	r0, #1
 80083e0:	f43f aed0 	beq.w	8008184 <_printf_float+0x9c>
 80083e4:	f10a 0a01 	add.w	sl, sl, #1
 80083e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083ea:	9306      	str	r3, [sp, #24]
 80083ec:	eba3 0309 	sub.w	r3, r3, r9
 80083f0:	4553      	cmp	r3, sl
 80083f2:	dcef      	bgt.n	80083d4 <_printf_float+0x2ec>
 80083f4:	9b06      	ldr	r3, [sp, #24]
 80083f6:	4498      	add	r8, r3
 80083f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083fc:	429a      	cmp	r2, r3
 80083fe:	db15      	blt.n	800842c <_printf_float+0x344>
 8008400:	6823      	ldr	r3, [r4, #0]
 8008402:	07da      	lsls	r2, r3, #31
 8008404:	d412      	bmi.n	800842c <_printf_float+0x344>
 8008406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008408:	9a06      	ldr	r2, [sp, #24]
 800840a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800840c:	1a9a      	subs	r2, r3, r2
 800840e:	eba3 0a01 	sub.w	sl, r3, r1
 8008412:	4592      	cmp	sl, r2
 8008414:	bfa8      	it	ge
 8008416:	4692      	movge	sl, r2
 8008418:	f1ba 0f00 	cmp.w	sl, #0
 800841c:	dc0e      	bgt.n	800843c <_printf_float+0x354>
 800841e:	f04f 0800 	mov.w	r8, #0
 8008422:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008426:	f104 091a 	add.w	r9, r4, #26
 800842a:	e019      	b.n	8008460 <_printf_float+0x378>
 800842c:	9b05      	ldr	r3, [sp, #20]
 800842e:	465a      	mov	r2, fp
 8008430:	4631      	mov	r1, r6
 8008432:	4628      	mov	r0, r5
 8008434:	47b8      	blx	r7
 8008436:	3001      	adds	r0, #1
 8008438:	d1e5      	bne.n	8008406 <_printf_float+0x31e>
 800843a:	e6a3      	b.n	8008184 <_printf_float+0x9c>
 800843c:	4653      	mov	r3, sl
 800843e:	4642      	mov	r2, r8
 8008440:	4631      	mov	r1, r6
 8008442:	4628      	mov	r0, r5
 8008444:	47b8      	blx	r7
 8008446:	3001      	adds	r0, #1
 8008448:	d1e9      	bne.n	800841e <_printf_float+0x336>
 800844a:	e69b      	b.n	8008184 <_printf_float+0x9c>
 800844c:	2301      	movs	r3, #1
 800844e:	464a      	mov	r2, r9
 8008450:	4631      	mov	r1, r6
 8008452:	4628      	mov	r0, r5
 8008454:	47b8      	blx	r7
 8008456:	3001      	adds	r0, #1
 8008458:	f43f ae94 	beq.w	8008184 <_printf_float+0x9c>
 800845c:	f108 0801 	add.w	r8, r8, #1
 8008460:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008464:	1a9b      	subs	r3, r3, r2
 8008466:	eba3 030a 	sub.w	r3, r3, sl
 800846a:	4543      	cmp	r3, r8
 800846c:	dcee      	bgt.n	800844c <_printf_float+0x364>
 800846e:	e747      	b.n	8008300 <_printf_float+0x218>
 8008470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008472:	2a01      	cmp	r2, #1
 8008474:	dc01      	bgt.n	800847a <_printf_float+0x392>
 8008476:	07db      	lsls	r3, r3, #31
 8008478:	d539      	bpl.n	80084ee <_printf_float+0x406>
 800847a:	2301      	movs	r3, #1
 800847c:	4642      	mov	r2, r8
 800847e:	4631      	mov	r1, r6
 8008480:	4628      	mov	r0, r5
 8008482:	47b8      	blx	r7
 8008484:	3001      	adds	r0, #1
 8008486:	f43f ae7d 	beq.w	8008184 <_printf_float+0x9c>
 800848a:	9b05      	ldr	r3, [sp, #20]
 800848c:	465a      	mov	r2, fp
 800848e:	4631      	mov	r1, r6
 8008490:	4628      	mov	r0, r5
 8008492:	47b8      	blx	r7
 8008494:	3001      	adds	r0, #1
 8008496:	f108 0801 	add.w	r8, r8, #1
 800849a:	f43f ae73 	beq.w	8008184 <_printf_float+0x9c>
 800849e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80084a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80084a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ac:	f103 33ff 	add.w	r3, r3, #4294967295
 80084b0:	d018      	beq.n	80084e4 <_printf_float+0x3fc>
 80084b2:	4642      	mov	r2, r8
 80084b4:	4631      	mov	r1, r6
 80084b6:	4628      	mov	r0, r5
 80084b8:	47b8      	blx	r7
 80084ba:	3001      	adds	r0, #1
 80084bc:	d10e      	bne.n	80084dc <_printf_float+0x3f4>
 80084be:	e661      	b.n	8008184 <_printf_float+0x9c>
 80084c0:	2301      	movs	r3, #1
 80084c2:	464a      	mov	r2, r9
 80084c4:	4631      	mov	r1, r6
 80084c6:	4628      	mov	r0, r5
 80084c8:	47b8      	blx	r7
 80084ca:	3001      	adds	r0, #1
 80084cc:	f43f ae5a 	beq.w	8008184 <_printf_float+0x9c>
 80084d0:	f108 0801 	add.w	r8, r8, #1
 80084d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d6:	3b01      	subs	r3, #1
 80084d8:	4543      	cmp	r3, r8
 80084da:	dcf1      	bgt.n	80084c0 <_printf_float+0x3d8>
 80084dc:	4653      	mov	r3, sl
 80084de:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80084e2:	e6dd      	b.n	80082a0 <_printf_float+0x1b8>
 80084e4:	f04f 0800 	mov.w	r8, #0
 80084e8:	f104 091a 	add.w	r9, r4, #26
 80084ec:	e7f2      	b.n	80084d4 <_printf_float+0x3ec>
 80084ee:	2301      	movs	r3, #1
 80084f0:	e7df      	b.n	80084b2 <_printf_float+0x3ca>
 80084f2:	2301      	movs	r3, #1
 80084f4:	464a      	mov	r2, r9
 80084f6:	4631      	mov	r1, r6
 80084f8:	4628      	mov	r0, r5
 80084fa:	47b8      	blx	r7
 80084fc:	3001      	adds	r0, #1
 80084fe:	f43f ae41 	beq.w	8008184 <_printf_float+0x9c>
 8008502:	f108 0801 	add.w	r8, r8, #1
 8008506:	68e3      	ldr	r3, [r4, #12]
 8008508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800850a:	1a9b      	subs	r3, r3, r2
 800850c:	4543      	cmp	r3, r8
 800850e:	dcf0      	bgt.n	80084f2 <_printf_float+0x40a>
 8008510:	e6fa      	b.n	8008308 <_printf_float+0x220>
 8008512:	f04f 0800 	mov.w	r8, #0
 8008516:	f104 0919 	add.w	r9, r4, #25
 800851a:	e7f4      	b.n	8008506 <_printf_float+0x41e>
 800851c:	2900      	cmp	r1, #0
 800851e:	f43f ae8a 	beq.w	8008236 <_printf_float+0x14e>
 8008522:	f04f 0c00 	mov.w	ip, #0
 8008526:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800852a:	e9cd 0900 	strd	r0, r9, [sp]
 800852e:	6022      	str	r2, [r4, #0]
 8008530:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008534:	4628      	mov	r0, r5
 8008536:	f7ff fd51 	bl	8007fdc <__cvt>
 800853a:	4680      	mov	r8, r0
 800853c:	e64a      	b.n	80081d4 <_printf_float+0xec>
 800853e:	bf00      	nop

08008540 <_printf_common>:
 8008540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008544:	4691      	mov	r9, r2
 8008546:	461f      	mov	r7, r3
 8008548:	688a      	ldr	r2, [r1, #8]
 800854a:	690b      	ldr	r3, [r1, #16]
 800854c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008550:	4293      	cmp	r3, r2
 8008552:	bfb8      	it	lt
 8008554:	4613      	movlt	r3, r2
 8008556:	f8c9 3000 	str.w	r3, [r9]
 800855a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800855e:	4606      	mov	r6, r0
 8008560:	460c      	mov	r4, r1
 8008562:	b112      	cbz	r2, 800856a <_printf_common+0x2a>
 8008564:	3301      	adds	r3, #1
 8008566:	f8c9 3000 	str.w	r3, [r9]
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	0699      	lsls	r1, r3, #26
 800856e:	bf42      	ittt	mi
 8008570:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008574:	3302      	addmi	r3, #2
 8008576:	f8c9 3000 	strmi.w	r3, [r9]
 800857a:	6825      	ldr	r5, [r4, #0]
 800857c:	f015 0506 	ands.w	r5, r5, #6
 8008580:	d107      	bne.n	8008592 <_printf_common+0x52>
 8008582:	f104 0a19 	add.w	sl, r4, #25
 8008586:	68e3      	ldr	r3, [r4, #12]
 8008588:	f8d9 2000 	ldr.w	r2, [r9]
 800858c:	1a9b      	subs	r3, r3, r2
 800858e:	42ab      	cmp	r3, r5
 8008590:	dc28      	bgt.n	80085e4 <_printf_common+0xa4>
 8008592:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008596:	6822      	ldr	r2, [r4, #0]
 8008598:	3300      	adds	r3, #0
 800859a:	bf18      	it	ne
 800859c:	2301      	movne	r3, #1
 800859e:	0692      	lsls	r2, r2, #26
 80085a0:	d42d      	bmi.n	80085fe <_printf_common+0xbe>
 80085a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085a6:	4639      	mov	r1, r7
 80085a8:	4630      	mov	r0, r6
 80085aa:	47c0      	blx	r8
 80085ac:	3001      	adds	r0, #1
 80085ae:	d020      	beq.n	80085f2 <_printf_common+0xb2>
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	68e5      	ldr	r5, [r4, #12]
 80085b4:	f8d9 2000 	ldr.w	r2, [r9]
 80085b8:	f003 0306 	and.w	r3, r3, #6
 80085bc:	2b04      	cmp	r3, #4
 80085be:	bf08      	it	eq
 80085c0:	1aad      	subeq	r5, r5, r2
 80085c2:	68a3      	ldr	r3, [r4, #8]
 80085c4:	6922      	ldr	r2, [r4, #16]
 80085c6:	bf0c      	ite	eq
 80085c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085cc:	2500      	movne	r5, #0
 80085ce:	4293      	cmp	r3, r2
 80085d0:	bfc4      	itt	gt
 80085d2:	1a9b      	subgt	r3, r3, r2
 80085d4:	18ed      	addgt	r5, r5, r3
 80085d6:	f04f 0900 	mov.w	r9, #0
 80085da:	341a      	adds	r4, #26
 80085dc:	454d      	cmp	r5, r9
 80085de:	d11a      	bne.n	8008616 <_printf_common+0xd6>
 80085e0:	2000      	movs	r0, #0
 80085e2:	e008      	b.n	80085f6 <_printf_common+0xb6>
 80085e4:	2301      	movs	r3, #1
 80085e6:	4652      	mov	r2, sl
 80085e8:	4639      	mov	r1, r7
 80085ea:	4630      	mov	r0, r6
 80085ec:	47c0      	blx	r8
 80085ee:	3001      	adds	r0, #1
 80085f0:	d103      	bne.n	80085fa <_printf_common+0xba>
 80085f2:	f04f 30ff 	mov.w	r0, #4294967295
 80085f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fa:	3501      	adds	r5, #1
 80085fc:	e7c3      	b.n	8008586 <_printf_common+0x46>
 80085fe:	18e1      	adds	r1, r4, r3
 8008600:	1c5a      	adds	r2, r3, #1
 8008602:	2030      	movs	r0, #48	; 0x30
 8008604:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008608:	4422      	add	r2, r4
 800860a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800860e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008612:	3302      	adds	r3, #2
 8008614:	e7c5      	b.n	80085a2 <_printf_common+0x62>
 8008616:	2301      	movs	r3, #1
 8008618:	4622      	mov	r2, r4
 800861a:	4639      	mov	r1, r7
 800861c:	4630      	mov	r0, r6
 800861e:	47c0      	blx	r8
 8008620:	3001      	adds	r0, #1
 8008622:	d0e6      	beq.n	80085f2 <_printf_common+0xb2>
 8008624:	f109 0901 	add.w	r9, r9, #1
 8008628:	e7d8      	b.n	80085dc <_printf_common+0x9c>
	...

0800862c <_printf_i>:
 800862c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008630:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008634:	460c      	mov	r4, r1
 8008636:	7e09      	ldrb	r1, [r1, #24]
 8008638:	b085      	sub	sp, #20
 800863a:	296e      	cmp	r1, #110	; 0x6e
 800863c:	4617      	mov	r7, r2
 800863e:	4606      	mov	r6, r0
 8008640:	4698      	mov	r8, r3
 8008642:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008644:	f000 80b3 	beq.w	80087ae <_printf_i+0x182>
 8008648:	d822      	bhi.n	8008690 <_printf_i+0x64>
 800864a:	2963      	cmp	r1, #99	; 0x63
 800864c:	d036      	beq.n	80086bc <_printf_i+0x90>
 800864e:	d80a      	bhi.n	8008666 <_printf_i+0x3a>
 8008650:	2900      	cmp	r1, #0
 8008652:	f000 80b9 	beq.w	80087c8 <_printf_i+0x19c>
 8008656:	2958      	cmp	r1, #88	; 0x58
 8008658:	f000 8083 	beq.w	8008762 <_printf_i+0x136>
 800865c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008660:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008664:	e032      	b.n	80086cc <_printf_i+0xa0>
 8008666:	2964      	cmp	r1, #100	; 0x64
 8008668:	d001      	beq.n	800866e <_printf_i+0x42>
 800866a:	2969      	cmp	r1, #105	; 0x69
 800866c:	d1f6      	bne.n	800865c <_printf_i+0x30>
 800866e:	6820      	ldr	r0, [r4, #0]
 8008670:	6813      	ldr	r3, [r2, #0]
 8008672:	0605      	lsls	r5, r0, #24
 8008674:	f103 0104 	add.w	r1, r3, #4
 8008678:	d52a      	bpl.n	80086d0 <_printf_i+0xa4>
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6011      	str	r1, [r2, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	da03      	bge.n	800868a <_printf_i+0x5e>
 8008682:	222d      	movs	r2, #45	; 0x2d
 8008684:	425b      	negs	r3, r3
 8008686:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800868a:	486f      	ldr	r0, [pc, #444]	; (8008848 <_printf_i+0x21c>)
 800868c:	220a      	movs	r2, #10
 800868e:	e039      	b.n	8008704 <_printf_i+0xd8>
 8008690:	2973      	cmp	r1, #115	; 0x73
 8008692:	f000 809d 	beq.w	80087d0 <_printf_i+0x1a4>
 8008696:	d808      	bhi.n	80086aa <_printf_i+0x7e>
 8008698:	296f      	cmp	r1, #111	; 0x6f
 800869a:	d020      	beq.n	80086de <_printf_i+0xb2>
 800869c:	2970      	cmp	r1, #112	; 0x70
 800869e:	d1dd      	bne.n	800865c <_printf_i+0x30>
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	f043 0320 	orr.w	r3, r3, #32
 80086a6:	6023      	str	r3, [r4, #0]
 80086a8:	e003      	b.n	80086b2 <_printf_i+0x86>
 80086aa:	2975      	cmp	r1, #117	; 0x75
 80086ac:	d017      	beq.n	80086de <_printf_i+0xb2>
 80086ae:	2978      	cmp	r1, #120	; 0x78
 80086b0:	d1d4      	bne.n	800865c <_printf_i+0x30>
 80086b2:	2378      	movs	r3, #120	; 0x78
 80086b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086b8:	4864      	ldr	r0, [pc, #400]	; (800884c <_printf_i+0x220>)
 80086ba:	e055      	b.n	8008768 <_printf_i+0x13c>
 80086bc:	6813      	ldr	r3, [r2, #0]
 80086be:	1d19      	adds	r1, r3, #4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6011      	str	r1, [r2, #0]
 80086c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086cc:	2301      	movs	r3, #1
 80086ce:	e08c      	b.n	80087ea <_printf_i+0x1be>
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	6011      	str	r1, [r2, #0]
 80086d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086d8:	bf18      	it	ne
 80086da:	b21b      	sxthne	r3, r3
 80086dc:	e7cf      	b.n	800867e <_printf_i+0x52>
 80086de:	6813      	ldr	r3, [r2, #0]
 80086e0:	6825      	ldr	r5, [r4, #0]
 80086e2:	1d18      	adds	r0, r3, #4
 80086e4:	6010      	str	r0, [r2, #0]
 80086e6:	0628      	lsls	r0, r5, #24
 80086e8:	d501      	bpl.n	80086ee <_printf_i+0xc2>
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	e002      	b.n	80086f4 <_printf_i+0xc8>
 80086ee:	0668      	lsls	r0, r5, #25
 80086f0:	d5fb      	bpl.n	80086ea <_printf_i+0xbe>
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	4854      	ldr	r0, [pc, #336]	; (8008848 <_printf_i+0x21c>)
 80086f6:	296f      	cmp	r1, #111	; 0x6f
 80086f8:	bf14      	ite	ne
 80086fa:	220a      	movne	r2, #10
 80086fc:	2208      	moveq	r2, #8
 80086fe:	2100      	movs	r1, #0
 8008700:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008704:	6865      	ldr	r5, [r4, #4]
 8008706:	60a5      	str	r5, [r4, #8]
 8008708:	2d00      	cmp	r5, #0
 800870a:	f2c0 8095 	blt.w	8008838 <_printf_i+0x20c>
 800870e:	6821      	ldr	r1, [r4, #0]
 8008710:	f021 0104 	bic.w	r1, r1, #4
 8008714:	6021      	str	r1, [r4, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d13d      	bne.n	8008796 <_printf_i+0x16a>
 800871a:	2d00      	cmp	r5, #0
 800871c:	f040 808e 	bne.w	800883c <_printf_i+0x210>
 8008720:	4665      	mov	r5, ip
 8008722:	2a08      	cmp	r2, #8
 8008724:	d10b      	bne.n	800873e <_printf_i+0x112>
 8008726:	6823      	ldr	r3, [r4, #0]
 8008728:	07db      	lsls	r3, r3, #31
 800872a:	d508      	bpl.n	800873e <_printf_i+0x112>
 800872c:	6923      	ldr	r3, [r4, #16]
 800872e:	6862      	ldr	r2, [r4, #4]
 8008730:	429a      	cmp	r2, r3
 8008732:	bfde      	ittt	le
 8008734:	2330      	movle	r3, #48	; 0x30
 8008736:	f805 3c01 	strble.w	r3, [r5, #-1]
 800873a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800873e:	ebac 0305 	sub.w	r3, ip, r5
 8008742:	6123      	str	r3, [r4, #16]
 8008744:	f8cd 8000 	str.w	r8, [sp]
 8008748:	463b      	mov	r3, r7
 800874a:	aa03      	add	r2, sp, #12
 800874c:	4621      	mov	r1, r4
 800874e:	4630      	mov	r0, r6
 8008750:	f7ff fef6 	bl	8008540 <_printf_common>
 8008754:	3001      	adds	r0, #1
 8008756:	d14d      	bne.n	80087f4 <_printf_i+0x1c8>
 8008758:	f04f 30ff 	mov.w	r0, #4294967295
 800875c:	b005      	add	sp, #20
 800875e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008762:	4839      	ldr	r0, [pc, #228]	; (8008848 <_printf_i+0x21c>)
 8008764:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008768:	6813      	ldr	r3, [r2, #0]
 800876a:	6821      	ldr	r1, [r4, #0]
 800876c:	1d1d      	adds	r5, r3, #4
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6015      	str	r5, [r2, #0]
 8008772:	060a      	lsls	r2, r1, #24
 8008774:	d50b      	bpl.n	800878e <_printf_i+0x162>
 8008776:	07ca      	lsls	r2, r1, #31
 8008778:	bf44      	itt	mi
 800877a:	f041 0120 	orrmi.w	r1, r1, #32
 800877e:	6021      	strmi	r1, [r4, #0]
 8008780:	b91b      	cbnz	r3, 800878a <_printf_i+0x15e>
 8008782:	6822      	ldr	r2, [r4, #0]
 8008784:	f022 0220 	bic.w	r2, r2, #32
 8008788:	6022      	str	r2, [r4, #0]
 800878a:	2210      	movs	r2, #16
 800878c:	e7b7      	b.n	80086fe <_printf_i+0xd2>
 800878e:	064d      	lsls	r5, r1, #25
 8008790:	bf48      	it	mi
 8008792:	b29b      	uxthmi	r3, r3
 8008794:	e7ef      	b.n	8008776 <_printf_i+0x14a>
 8008796:	4665      	mov	r5, ip
 8008798:	fbb3 f1f2 	udiv	r1, r3, r2
 800879c:	fb02 3311 	mls	r3, r2, r1, r3
 80087a0:	5cc3      	ldrb	r3, [r0, r3]
 80087a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80087a6:	460b      	mov	r3, r1
 80087a8:	2900      	cmp	r1, #0
 80087aa:	d1f5      	bne.n	8008798 <_printf_i+0x16c>
 80087ac:	e7b9      	b.n	8008722 <_printf_i+0xf6>
 80087ae:	6813      	ldr	r3, [r2, #0]
 80087b0:	6825      	ldr	r5, [r4, #0]
 80087b2:	6961      	ldr	r1, [r4, #20]
 80087b4:	1d18      	adds	r0, r3, #4
 80087b6:	6010      	str	r0, [r2, #0]
 80087b8:	0628      	lsls	r0, r5, #24
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	d501      	bpl.n	80087c2 <_printf_i+0x196>
 80087be:	6019      	str	r1, [r3, #0]
 80087c0:	e002      	b.n	80087c8 <_printf_i+0x19c>
 80087c2:	066a      	lsls	r2, r5, #25
 80087c4:	d5fb      	bpl.n	80087be <_printf_i+0x192>
 80087c6:	8019      	strh	r1, [r3, #0]
 80087c8:	2300      	movs	r3, #0
 80087ca:	6123      	str	r3, [r4, #16]
 80087cc:	4665      	mov	r5, ip
 80087ce:	e7b9      	b.n	8008744 <_printf_i+0x118>
 80087d0:	6813      	ldr	r3, [r2, #0]
 80087d2:	1d19      	adds	r1, r3, #4
 80087d4:	6011      	str	r1, [r2, #0]
 80087d6:	681d      	ldr	r5, [r3, #0]
 80087d8:	6862      	ldr	r2, [r4, #4]
 80087da:	2100      	movs	r1, #0
 80087dc:	4628      	mov	r0, r5
 80087de:	f7f7 fd87 	bl	80002f0 <memchr>
 80087e2:	b108      	cbz	r0, 80087e8 <_printf_i+0x1bc>
 80087e4:	1b40      	subs	r0, r0, r5
 80087e6:	6060      	str	r0, [r4, #4]
 80087e8:	6863      	ldr	r3, [r4, #4]
 80087ea:	6123      	str	r3, [r4, #16]
 80087ec:	2300      	movs	r3, #0
 80087ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087f2:	e7a7      	b.n	8008744 <_printf_i+0x118>
 80087f4:	6923      	ldr	r3, [r4, #16]
 80087f6:	462a      	mov	r2, r5
 80087f8:	4639      	mov	r1, r7
 80087fa:	4630      	mov	r0, r6
 80087fc:	47c0      	blx	r8
 80087fe:	3001      	adds	r0, #1
 8008800:	d0aa      	beq.n	8008758 <_printf_i+0x12c>
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	079b      	lsls	r3, r3, #30
 8008806:	d413      	bmi.n	8008830 <_printf_i+0x204>
 8008808:	68e0      	ldr	r0, [r4, #12]
 800880a:	9b03      	ldr	r3, [sp, #12]
 800880c:	4298      	cmp	r0, r3
 800880e:	bfb8      	it	lt
 8008810:	4618      	movlt	r0, r3
 8008812:	e7a3      	b.n	800875c <_printf_i+0x130>
 8008814:	2301      	movs	r3, #1
 8008816:	464a      	mov	r2, r9
 8008818:	4639      	mov	r1, r7
 800881a:	4630      	mov	r0, r6
 800881c:	47c0      	blx	r8
 800881e:	3001      	adds	r0, #1
 8008820:	d09a      	beq.n	8008758 <_printf_i+0x12c>
 8008822:	3501      	adds	r5, #1
 8008824:	68e3      	ldr	r3, [r4, #12]
 8008826:	9a03      	ldr	r2, [sp, #12]
 8008828:	1a9b      	subs	r3, r3, r2
 800882a:	42ab      	cmp	r3, r5
 800882c:	dcf2      	bgt.n	8008814 <_printf_i+0x1e8>
 800882e:	e7eb      	b.n	8008808 <_printf_i+0x1dc>
 8008830:	2500      	movs	r5, #0
 8008832:	f104 0919 	add.w	r9, r4, #25
 8008836:	e7f5      	b.n	8008824 <_printf_i+0x1f8>
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1ac      	bne.n	8008796 <_printf_i+0x16a>
 800883c:	7803      	ldrb	r3, [r0, #0]
 800883e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008842:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008846:	e76c      	b.n	8008722 <_printf_i+0xf6>
 8008848:	0800b836 	.word	0x0800b836
 800884c:	0800b847 	.word	0x0800b847

08008850 <iprintf>:
 8008850:	b40f      	push	{r0, r1, r2, r3}
 8008852:	4b0a      	ldr	r3, [pc, #40]	; (800887c <iprintf+0x2c>)
 8008854:	b513      	push	{r0, r1, r4, lr}
 8008856:	681c      	ldr	r4, [r3, #0]
 8008858:	b124      	cbz	r4, 8008864 <iprintf+0x14>
 800885a:	69a3      	ldr	r3, [r4, #24]
 800885c:	b913      	cbnz	r3, 8008864 <iprintf+0x14>
 800885e:	4620      	mov	r0, r4
 8008860:	f000 fe56 	bl	8009510 <__sinit>
 8008864:	ab05      	add	r3, sp, #20
 8008866:	9a04      	ldr	r2, [sp, #16]
 8008868:	68a1      	ldr	r1, [r4, #8]
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	4620      	mov	r0, r4
 800886e:	f001 fb59 	bl	8009f24 <_vfiprintf_r>
 8008872:	b002      	add	sp, #8
 8008874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008878:	b004      	add	sp, #16
 800887a:	4770      	bx	lr
 800887c:	20000010 	.word	0x20000010

08008880 <_sbrk_r>:
 8008880:	b538      	push	{r3, r4, r5, lr}
 8008882:	4c06      	ldr	r4, [pc, #24]	; (800889c <_sbrk_r+0x1c>)
 8008884:	2300      	movs	r3, #0
 8008886:	4605      	mov	r5, r0
 8008888:	4608      	mov	r0, r1
 800888a:	6023      	str	r3, [r4, #0]
 800888c:	f7fa f962 	bl	8002b54 <_sbrk>
 8008890:	1c43      	adds	r3, r0, #1
 8008892:	d102      	bne.n	800889a <_sbrk_r+0x1a>
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	b103      	cbz	r3, 800889a <_sbrk_r+0x1a>
 8008898:	602b      	str	r3, [r5, #0]
 800889a:	bd38      	pop	{r3, r4, r5, pc}
 800889c:	200003b8 	.word	0x200003b8

080088a0 <siprintf>:
 80088a0:	b40e      	push	{r1, r2, r3}
 80088a2:	b500      	push	{lr}
 80088a4:	b09c      	sub	sp, #112	; 0x70
 80088a6:	ab1d      	add	r3, sp, #116	; 0x74
 80088a8:	9002      	str	r0, [sp, #8]
 80088aa:	9006      	str	r0, [sp, #24]
 80088ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088b0:	4809      	ldr	r0, [pc, #36]	; (80088d8 <siprintf+0x38>)
 80088b2:	9107      	str	r1, [sp, #28]
 80088b4:	9104      	str	r1, [sp, #16]
 80088b6:	4909      	ldr	r1, [pc, #36]	; (80088dc <siprintf+0x3c>)
 80088b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80088bc:	9105      	str	r1, [sp, #20]
 80088be:	6800      	ldr	r0, [r0, #0]
 80088c0:	9301      	str	r3, [sp, #4]
 80088c2:	a902      	add	r1, sp, #8
 80088c4:	f001 fa0c 	bl	8009ce0 <_svfiprintf_r>
 80088c8:	9b02      	ldr	r3, [sp, #8]
 80088ca:	2200      	movs	r2, #0
 80088cc:	701a      	strb	r2, [r3, #0]
 80088ce:	b01c      	add	sp, #112	; 0x70
 80088d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80088d4:	b003      	add	sp, #12
 80088d6:	4770      	bx	lr
 80088d8:	20000010 	.word	0x20000010
 80088dc:	ffff0208 	.word	0xffff0208

080088e0 <quorem>:
 80088e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	6903      	ldr	r3, [r0, #16]
 80088e6:	690c      	ldr	r4, [r1, #16]
 80088e8:	42a3      	cmp	r3, r4
 80088ea:	4680      	mov	r8, r0
 80088ec:	f2c0 8082 	blt.w	80089f4 <quorem+0x114>
 80088f0:	3c01      	subs	r4, #1
 80088f2:	f101 0714 	add.w	r7, r1, #20
 80088f6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80088fa:	f100 0614 	add.w	r6, r0, #20
 80088fe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008902:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008906:	eb06 030c 	add.w	r3, r6, ip
 800890a:	3501      	adds	r5, #1
 800890c:	eb07 090c 	add.w	r9, r7, ip
 8008910:	9301      	str	r3, [sp, #4]
 8008912:	fbb0 f5f5 	udiv	r5, r0, r5
 8008916:	b395      	cbz	r5, 800897e <quorem+0x9e>
 8008918:	f04f 0a00 	mov.w	sl, #0
 800891c:	4638      	mov	r0, r7
 800891e:	46b6      	mov	lr, r6
 8008920:	46d3      	mov	fp, sl
 8008922:	f850 2b04 	ldr.w	r2, [r0], #4
 8008926:	b293      	uxth	r3, r2
 8008928:	fb05 a303 	mla	r3, r5, r3, sl
 800892c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008930:	b29b      	uxth	r3, r3
 8008932:	ebab 0303 	sub.w	r3, fp, r3
 8008936:	0c12      	lsrs	r2, r2, #16
 8008938:	f8de b000 	ldr.w	fp, [lr]
 800893c:	fb05 a202 	mla	r2, r5, r2, sl
 8008940:	fa13 f38b 	uxtah	r3, r3, fp
 8008944:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008948:	fa1f fb82 	uxth.w	fp, r2
 800894c:	f8de 2000 	ldr.w	r2, [lr]
 8008950:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008954:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008958:	b29b      	uxth	r3, r3
 800895a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800895e:	4581      	cmp	r9, r0
 8008960:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008964:	f84e 3b04 	str.w	r3, [lr], #4
 8008968:	d2db      	bcs.n	8008922 <quorem+0x42>
 800896a:	f856 300c 	ldr.w	r3, [r6, ip]
 800896e:	b933      	cbnz	r3, 800897e <quorem+0x9e>
 8008970:	9b01      	ldr	r3, [sp, #4]
 8008972:	3b04      	subs	r3, #4
 8008974:	429e      	cmp	r6, r3
 8008976:	461a      	mov	r2, r3
 8008978:	d330      	bcc.n	80089dc <quorem+0xfc>
 800897a:	f8c8 4010 	str.w	r4, [r8, #16]
 800897e:	4640      	mov	r0, r8
 8008980:	f001 f880 	bl	8009a84 <__mcmp>
 8008984:	2800      	cmp	r0, #0
 8008986:	db25      	blt.n	80089d4 <quorem+0xf4>
 8008988:	3501      	adds	r5, #1
 800898a:	4630      	mov	r0, r6
 800898c:	f04f 0c00 	mov.w	ip, #0
 8008990:	f857 2b04 	ldr.w	r2, [r7], #4
 8008994:	f8d0 e000 	ldr.w	lr, [r0]
 8008998:	b293      	uxth	r3, r2
 800899a:	ebac 0303 	sub.w	r3, ip, r3
 800899e:	0c12      	lsrs	r2, r2, #16
 80089a0:	fa13 f38e 	uxtah	r3, r3, lr
 80089a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80089a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089b2:	45b9      	cmp	r9, r7
 80089b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80089b8:	f840 3b04 	str.w	r3, [r0], #4
 80089bc:	d2e8      	bcs.n	8008990 <quorem+0xb0>
 80089be:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80089c2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80089c6:	b92a      	cbnz	r2, 80089d4 <quorem+0xf4>
 80089c8:	3b04      	subs	r3, #4
 80089ca:	429e      	cmp	r6, r3
 80089cc:	461a      	mov	r2, r3
 80089ce:	d30b      	bcc.n	80089e8 <quorem+0x108>
 80089d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80089d4:	4628      	mov	r0, r5
 80089d6:	b003      	add	sp, #12
 80089d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089dc:	6812      	ldr	r2, [r2, #0]
 80089de:	3b04      	subs	r3, #4
 80089e0:	2a00      	cmp	r2, #0
 80089e2:	d1ca      	bne.n	800897a <quorem+0x9a>
 80089e4:	3c01      	subs	r4, #1
 80089e6:	e7c5      	b.n	8008974 <quorem+0x94>
 80089e8:	6812      	ldr	r2, [r2, #0]
 80089ea:	3b04      	subs	r3, #4
 80089ec:	2a00      	cmp	r2, #0
 80089ee:	d1ef      	bne.n	80089d0 <quorem+0xf0>
 80089f0:	3c01      	subs	r4, #1
 80089f2:	e7ea      	b.n	80089ca <quorem+0xea>
 80089f4:	2000      	movs	r0, #0
 80089f6:	e7ee      	b.n	80089d6 <quorem+0xf6>

080089f8 <_dtoa_r>:
 80089f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fc:	ec57 6b10 	vmov	r6, r7, d0
 8008a00:	b095      	sub	sp, #84	; 0x54
 8008a02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a04:	9108      	str	r1, [sp, #32]
 8008a06:	4604      	mov	r4, r0
 8008a08:	920a      	str	r2, [sp, #40]	; 0x28
 8008a0a:	9311      	str	r3, [sp, #68]	; 0x44
 8008a0c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8008a10:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008a14:	b93d      	cbnz	r5, 8008a26 <_dtoa_r+0x2e>
 8008a16:	2010      	movs	r0, #16
 8008a18:	f7ff fa28 	bl	8007e6c <malloc>
 8008a1c:	6260      	str	r0, [r4, #36]	; 0x24
 8008a1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a22:	6005      	str	r5, [r0, #0]
 8008a24:	60c5      	str	r5, [r0, #12]
 8008a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a28:	6819      	ldr	r1, [r3, #0]
 8008a2a:	b151      	cbz	r1, 8008a42 <_dtoa_r+0x4a>
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	604a      	str	r2, [r1, #4]
 8008a30:	2301      	movs	r3, #1
 8008a32:	4093      	lsls	r3, r2
 8008a34:	608b      	str	r3, [r1, #8]
 8008a36:	4620      	mov	r0, r4
 8008a38:	f000 fe43 	bl	80096c2 <_Bfree>
 8008a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a3e:	2200      	movs	r2, #0
 8008a40:	601a      	str	r2, [r3, #0]
 8008a42:	1e3b      	subs	r3, r7, #0
 8008a44:	bfb9      	ittee	lt
 8008a46:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a4a:	9303      	strlt	r3, [sp, #12]
 8008a4c:	2300      	movge	r3, #0
 8008a4e:	f8c8 3000 	strge.w	r3, [r8]
 8008a52:	9d03      	ldr	r5, [sp, #12]
 8008a54:	4bac      	ldr	r3, [pc, #688]	; (8008d08 <_dtoa_r+0x310>)
 8008a56:	bfbc      	itt	lt
 8008a58:	2201      	movlt	r2, #1
 8008a5a:	f8c8 2000 	strlt.w	r2, [r8]
 8008a5e:	43ab      	bics	r3, r5
 8008a60:	d11b      	bne.n	8008a9a <_dtoa_r+0xa2>
 8008a62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008a64:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a68:	6013      	str	r3, [r2, #0]
 8008a6a:	9b02      	ldr	r3, [sp, #8]
 8008a6c:	b923      	cbnz	r3, 8008a78 <_dtoa_r+0x80>
 8008a6e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008a72:	2d00      	cmp	r5, #0
 8008a74:	f000 84dd 	beq.w	8009432 <_dtoa_r+0xa3a>
 8008a78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008a7a:	b953      	cbnz	r3, 8008a92 <_dtoa_r+0x9a>
 8008a7c:	4ba3      	ldr	r3, [pc, #652]	; (8008d0c <_dtoa_r+0x314>)
 8008a7e:	e020      	b.n	8008ac2 <_dtoa_r+0xca>
 8008a80:	4ba3      	ldr	r3, [pc, #652]	; (8008d10 <_dtoa_r+0x318>)
 8008a82:	9304      	str	r3, [sp, #16]
 8008a84:	3308      	adds	r3, #8
 8008a86:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008a88:	6013      	str	r3, [r2, #0]
 8008a8a:	9804      	ldr	r0, [sp, #16]
 8008a8c:	b015      	add	sp, #84	; 0x54
 8008a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a92:	4b9e      	ldr	r3, [pc, #632]	; (8008d0c <_dtoa_r+0x314>)
 8008a94:	9304      	str	r3, [sp, #16]
 8008a96:	3303      	adds	r3, #3
 8008a98:	e7f5      	b.n	8008a86 <_dtoa_r+0x8e>
 8008a9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa6:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008aaa:	d10c      	bne.n	8008ac6 <_dtoa_r+0xce>
 8008aac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008aae:	2301      	movs	r3, #1
 8008ab0:	6013      	str	r3, [r2, #0]
 8008ab2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f000 84b9 	beq.w	800942c <_dtoa_r+0xa34>
 8008aba:	4b96      	ldr	r3, [pc, #600]	; (8008d14 <_dtoa_r+0x31c>)
 8008abc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008abe:	6013      	str	r3, [r2, #0]
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	9304      	str	r3, [sp, #16]
 8008ac4:	e7e1      	b.n	8008a8a <_dtoa_r+0x92>
 8008ac6:	a913      	add	r1, sp, #76	; 0x4c
 8008ac8:	aa12      	add	r2, sp, #72	; 0x48
 8008aca:	ed9d 0b04 	vldr	d0, [sp, #16]
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f001 f84f 	bl	8009b72 <__d2b>
 8008ad4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8008ad8:	9001      	str	r0, [sp, #4]
 8008ada:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008adc:	2e00      	cmp	r6, #0
 8008ade:	d046      	beq.n	8008b6e <_dtoa_r+0x176>
 8008ae0:	9805      	ldr	r0, [sp, #20]
 8008ae2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8008ae6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008aea:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8008aee:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008af2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8008af6:	2700      	movs	r7, #0
 8008af8:	ee07 aa90 	vmov	s15, sl
 8008afc:	ec43 2b16 	vmov	d6, r2, r3
 8008b00:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8008b04:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8008cf0 <_dtoa_r+0x2f8>
 8008b08:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008b0c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008b10:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8008cf8 <_dtoa_r+0x300>
 8008b14:	eea7 6b04 	vfma.f64	d6, d7, d4
 8008b18:	eeb0 7b46 	vmov.f64	d7, d6
 8008b1c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8008d00 <_dtoa_r+0x308>
 8008b20:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008b24:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008b28:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b30:	ee16 ba90 	vmov	fp, s13
 8008b34:	d508      	bpl.n	8008b48 <_dtoa_r+0x150>
 8008b36:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008b3a:	eeb4 6b47 	vcmp.f64	d6, d7
 8008b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b42:	bf18      	it	ne
 8008b44:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008b48:	f1bb 0f16 	cmp.w	fp, #22
 8008b4c:	d834      	bhi.n	8008bb8 <_dtoa_r+0x1c0>
 8008b4e:	4b72      	ldr	r3, [pc, #456]	; (8008d18 <_dtoa_r+0x320>)
 8008b50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008b54:	ed93 7b00 	vldr	d7, [r3]
 8008b58:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008b5c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b64:	dd01      	ble.n	8008b6a <_dtoa_r+0x172>
 8008b66:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	e025      	b.n	8008bba <_dtoa_r+0x1c2>
 8008b6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b70:	eb01 0a03 	add.w	sl, r1, r3
 8008b74:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8008b78:	2b20      	cmp	r3, #32
 8008b7a:	dd17      	ble.n	8008bac <_dtoa_r+0x1b4>
 8008b7c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008b80:	9a02      	ldr	r2, [sp, #8]
 8008b82:	409d      	lsls	r5, r3
 8008b84:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8008b88:	fa22 f303 	lsr.w	r3, r2, r3
 8008b8c:	432b      	orrs	r3, r5
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008b96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b9a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b9e:	9805      	ldr	r0, [sp, #20]
 8008ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ba4:	2701      	movs	r7, #1
 8008ba6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8008baa:	e7a5      	b.n	8008af8 <_dtoa_r+0x100>
 8008bac:	9a02      	ldr	r2, [sp, #8]
 8008bae:	f1c3 0320 	rsb	r3, r3, #32
 8008bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb6:	e7ea      	b.n	8008b8e <_dtoa_r+0x196>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	eba1 0a0a 	sub.w	sl, r1, sl
 8008bbe:	9310      	str	r3, [sp, #64]	; 0x40
 8008bc0:	f1ba 0301 	subs.w	r3, sl, #1
 8008bc4:	9307      	str	r3, [sp, #28]
 8008bc6:	bf43      	ittte	mi
 8008bc8:	2300      	movmi	r3, #0
 8008bca:	f1ca 0a01 	rsbmi	sl, sl, #1
 8008bce:	9307      	strmi	r3, [sp, #28]
 8008bd0:	f04f 0a00 	movpl.w	sl, #0
 8008bd4:	f1bb 0f00 	cmp.w	fp, #0
 8008bd8:	db19      	blt.n	8008c0e <_dtoa_r+0x216>
 8008bda:	9b07      	ldr	r3, [sp, #28]
 8008bdc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008be0:	445b      	add	r3, fp
 8008be2:	9307      	str	r3, [sp, #28]
 8008be4:	f04f 0800 	mov.w	r8, #0
 8008be8:	9b08      	ldr	r3, [sp, #32]
 8008bea:	2b09      	cmp	r3, #9
 8008bec:	d866      	bhi.n	8008cbc <_dtoa_r+0x2c4>
 8008bee:	2b05      	cmp	r3, #5
 8008bf0:	bfc4      	itt	gt
 8008bf2:	3b04      	subgt	r3, #4
 8008bf4:	9308      	strgt	r3, [sp, #32]
 8008bf6:	9b08      	ldr	r3, [sp, #32]
 8008bf8:	f1a3 0302 	sub.w	r3, r3, #2
 8008bfc:	bfcc      	ite	gt
 8008bfe:	2500      	movgt	r5, #0
 8008c00:	2501      	movle	r5, #1
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d866      	bhi.n	8008cd4 <_dtoa_r+0x2dc>
 8008c06:	e8df f003 	tbb	[pc, r3]
 8008c0a:	5755      	.short	0x5755
 8008c0c:	4909      	.short	0x4909
 8008c0e:	2300      	movs	r3, #0
 8008c10:	ebaa 0a0b 	sub.w	sl, sl, fp
 8008c14:	f1cb 0800 	rsb	r8, fp, #0
 8008c18:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c1a:	e7e5      	b.n	8008be8 <_dtoa_r+0x1f0>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	dd59      	ble.n	8008cda <_dtoa_r+0x2e2>
 8008c26:	9306      	str	r3, [sp, #24]
 8008c28:	4699      	mov	r9, r3
 8008c2a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	6072      	str	r2, [r6, #4]
 8008c30:	2204      	movs	r2, #4
 8008c32:	f102 0014 	add.w	r0, r2, #20
 8008c36:	4298      	cmp	r0, r3
 8008c38:	6871      	ldr	r1, [r6, #4]
 8008c3a:	d953      	bls.n	8008ce4 <_dtoa_r+0x2ec>
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f000 fd0c 	bl	800965a <_Balloc>
 8008c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c44:	6030      	str	r0, [r6, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	9304      	str	r3, [sp, #16]
 8008c4a:	f1b9 0f0e 	cmp.w	r9, #14
 8008c4e:	f200 80c2 	bhi.w	8008dd6 <_dtoa_r+0x3de>
 8008c52:	2d00      	cmp	r5, #0
 8008c54:	f000 80bf 	beq.w	8008dd6 <_dtoa_r+0x3de>
 8008c58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c5c:	f1bb 0f00 	cmp.w	fp, #0
 8008c60:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8008c64:	f340 80e6 	ble.w	8008e34 <_dtoa_r+0x43c>
 8008c68:	4a2b      	ldr	r2, [pc, #172]	; (8008d18 <_dtoa_r+0x320>)
 8008c6a:	f00b 030f 	and.w	r3, fp, #15
 8008c6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c72:	ed93 7b00 	vldr	d7, [r3]
 8008c76:	ea4f 132b 	mov.w	r3, fp, asr #4
 8008c7a:	06da      	lsls	r2, r3, #27
 8008c7c:	f140 80d8 	bpl.w	8008e30 <_dtoa_r+0x438>
 8008c80:	4a26      	ldr	r2, [pc, #152]	; (8008d1c <_dtoa_r+0x324>)
 8008c82:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8008c86:	ed92 6b08 	vldr	d6, [r2, #32]
 8008c8a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008c8e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008c92:	f003 030f 	and.w	r3, r3, #15
 8008c96:	2203      	movs	r2, #3
 8008c98:	4920      	ldr	r1, [pc, #128]	; (8008d1c <_dtoa_r+0x324>)
 8008c9a:	e04a      	b.n	8008d32 <_dtoa_r+0x33a>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8008ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ca2:	445b      	add	r3, fp
 8008ca4:	f103 0901 	add.w	r9, r3, #1
 8008ca8:	9306      	str	r3, [sp, #24]
 8008caa:	464b      	mov	r3, r9
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	bfb8      	it	lt
 8008cb0:	2301      	movlt	r3, #1
 8008cb2:	e7ba      	b.n	8008c2a <_dtoa_r+0x232>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	e7b2      	b.n	8008c1e <_dtoa_r+0x226>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	e7f0      	b.n	8008c9e <_dtoa_r+0x2a6>
 8008cbc:	2501      	movs	r5, #1
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8008cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc8:	9306      	str	r3, [sp, #24]
 8008cca:	4699      	mov	r9, r3
 8008ccc:	2200      	movs	r2, #0
 8008cce:	2312      	movs	r3, #18
 8008cd0:	920a      	str	r2, [sp, #40]	; 0x28
 8008cd2:	e7aa      	b.n	8008c2a <_dtoa_r+0x232>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8008cd8:	e7f4      	b.n	8008cc4 <_dtoa_r+0x2cc>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	9306      	str	r3, [sp, #24]
 8008cde:	4699      	mov	r9, r3
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	e7f5      	b.n	8008cd0 <_dtoa_r+0x2d8>
 8008ce4:	3101      	adds	r1, #1
 8008ce6:	6071      	str	r1, [r6, #4]
 8008ce8:	0052      	lsls	r2, r2, #1
 8008cea:	e7a2      	b.n	8008c32 <_dtoa_r+0x23a>
 8008cec:	f3af 8000 	nop.w
 8008cf0:	636f4361 	.word	0x636f4361
 8008cf4:	3fd287a7 	.word	0x3fd287a7
 8008cf8:	8b60c8b3 	.word	0x8b60c8b3
 8008cfc:	3fc68a28 	.word	0x3fc68a28
 8008d00:	509f79fb 	.word	0x509f79fb
 8008d04:	3fd34413 	.word	0x3fd34413
 8008d08:	7ff00000 	.word	0x7ff00000
 8008d0c:	0800b861 	.word	0x0800b861
 8008d10:	0800b858 	.word	0x0800b858
 8008d14:	0800b835 	.word	0x0800b835
 8008d18:	0800b8f0 	.word	0x0800b8f0
 8008d1c:	0800b8c8 	.word	0x0800b8c8
 8008d20:	07de      	lsls	r6, r3, #31
 8008d22:	d504      	bpl.n	8008d2e <_dtoa_r+0x336>
 8008d24:	ed91 6b00 	vldr	d6, [r1]
 8008d28:	3201      	adds	r2, #1
 8008d2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d2e:	105b      	asrs	r3, r3, #1
 8008d30:	3108      	adds	r1, #8
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1f4      	bne.n	8008d20 <_dtoa_r+0x328>
 8008d36:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008d3a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008d3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 80a7 	beq.w	8008e98 <_dtoa_r+0x4a0>
 8008d4a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008d4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d52:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d5a:	f140 809d 	bpl.w	8008e98 <_dtoa_r+0x4a0>
 8008d5e:	f1b9 0f00 	cmp.w	r9, #0
 8008d62:	f000 8099 	beq.w	8008e98 <_dtoa_r+0x4a0>
 8008d66:	9b06      	ldr	r3, [sp, #24]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	dd30      	ble.n	8008dce <_dtoa_r+0x3d6>
 8008d6c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008d70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d78:	9d06      	ldr	r5, [sp, #24]
 8008d7a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008d7e:	3201      	adds	r2, #1
 8008d80:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008d84:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008d88:	ee07 2a90 	vmov	s15, r2
 8008d8c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008d90:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008d94:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008d98:	9a03      	ldr	r2, [sp, #12]
 8008d9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d9e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8008da2:	2d00      	cmp	r5, #0
 8008da4:	d17b      	bne.n	8008e9e <_dtoa_r+0x4a6>
 8008da6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008daa:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008dae:	ec41 0b17 	vmov	d7, r0, r1
 8008db2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dba:	f300 8253 	bgt.w	8009264 <_dtoa_r+0x86c>
 8008dbe:	eeb1 7b47 	vneg.f64	d7, d7
 8008dc2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dca:	f100 8249 	bmi.w	8009260 <_dtoa_r+0x868>
 8008dce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008dd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008dd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f2c0 8119 	blt.w	8009010 <_dtoa_r+0x618>
 8008dde:	f1bb 0f0e 	cmp.w	fp, #14
 8008de2:	f300 8115 	bgt.w	8009010 <_dtoa_r+0x618>
 8008de6:	4bc3      	ldr	r3, [pc, #780]	; (80090f4 <_dtoa_r+0x6fc>)
 8008de8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008dec:	ed93 6b00 	vldr	d6, [r3]
 8008df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f280 80ba 	bge.w	8008f6c <_dtoa_r+0x574>
 8008df8:	f1b9 0f00 	cmp.w	r9, #0
 8008dfc:	f300 80b6 	bgt.w	8008f6c <_dtoa_r+0x574>
 8008e00:	f040 822d 	bne.w	800925e <_dtoa_r+0x866>
 8008e04:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008e08:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008e0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e18:	464d      	mov	r5, r9
 8008e1a:	464f      	mov	r7, r9
 8008e1c:	f280 8204 	bge.w	8009228 <_dtoa_r+0x830>
 8008e20:	9b04      	ldr	r3, [sp, #16]
 8008e22:	9a04      	ldr	r2, [sp, #16]
 8008e24:	1c5e      	adds	r6, r3, #1
 8008e26:	2331      	movs	r3, #49	; 0x31
 8008e28:	7013      	strb	r3, [r2, #0]
 8008e2a:	f10b 0b01 	add.w	fp, fp, #1
 8008e2e:	e1ff      	b.n	8009230 <_dtoa_r+0x838>
 8008e30:	2202      	movs	r2, #2
 8008e32:	e731      	b.n	8008c98 <_dtoa_r+0x2a0>
 8008e34:	d02e      	beq.n	8008e94 <_dtoa_r+0x49c>
 8008e36:	f1cb 0300 	rsb	r3, fp, #0
 8008e3a:	4aae      	ldr	r2, [pc, #696]	; (80090f4 <_dtoa_r+0x6fc>)
 8008e3c:	f003 010f 	and.w	r1, r3, #15
 8008e40:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008e44:	ed92 7b00 	vldr	d7, [r2]
 8008e48:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8008e4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008e50:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008e54:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8008e58:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008e5c:	49a6      	ldr	r1, [pc, #664]	; (80090f8 <_dtoa_r+0x700>)
 8008e5e:	111b      	asrs	r3, r3, #4
 8008e60:	2000      	movs	r0, #0
 8008e62:	2202      	movs	r2, #2
 8008e64:	b93b      	cbnz	r3, 8008e76 <_dtoa_r+0x47e>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	f43f af6b 	beq.w	8008d42 <_dtoa_r+0x34a>
 8008e6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e74:	e765      	b.n	8008d42 <_dtoa_r+0x34a>
 8008e76:	07dd      	lsls	r5, r3, #31
 8008e78:	d509      	bpl.n	8008e8e <_dtoa_r+0x496>
 8008e7a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008e7e:	ed91 7b00 	vldr	d7, [r1]
 8008e82:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008e86:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008e8a:	3201      	adds	r2, #1
 8008e8c:	2001      	movs	r0, #1
 8008e8e:	105b      	asrs	r3, r3, #1
 8008e90:	3108      	adds	r1, #8
 8008e92:	e7e7      	b.n	8008e64 <_dtoa_r+0x46c>
 8008e94:	2202      	movs	r2, #2
 8008e96:	e754      	b.n	8008d42 <_dtoa_r+0x34a>
 8008e98:	465b      	mov	r3, fp
 8008e9a:	464d      	mov	r5, r9
 8008e9c:	e770      	b.n	8008d80 <_dtoa_r+0x388>
 8008e9e:	4a95      	ldr	r2, [pc, #596]	; (80090f4 <_dtoa_r+0x6fc>)
 8008ea0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8008ea4:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eaa:	ec41 0b17 	vmov	d7, r0, r1
 8008eae:	b35a      	cbz	r2, 8008f08 <_dtoa_r+0x510>
 8008eb0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008eb4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008eb8:	9e04      	ldr	r6, [sp, #16]
 8008eba:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008ebe:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008ec2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008ec6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008eca:	ee14 2a90 	vmov	r2, s9
 8008ece:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008ed2:	3230      	adds	r2, #48	; 0x30
 8008ed4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008ed8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee0:	f806 2b01 	strb.w	r2, [r6], #1
 8008ee4:	d43b      	bmi.n	8008f5e <_dtoa_r+0x566>
 8008ee6:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008eea:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef2:	d472      	bmi.n	8008fda <_dtoa_r+0x5e2>
 8008ef4:	9a04      	ldr	r2, [sp, #16]
 8008ef6:	1ab2      	subs	r2, r6, r2
 8008ef8:	4295      	cmp	r5, r2
 8008efa:	f77f af68 	ble.w	8008dce <_dtoa_r+0x3d6>
 8008efe:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008f02:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008f06:	e7de      	b.n	8008ec6 <_dtoa_r+0x4ce>
 8008f08:	9a04      	ldr	r2, [sp, #16]
 8008f0a:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008f0e:	1956      	adds	r6, r2, r5
 8008f10:	4611      	mov	r1, r2
 8008f12:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008f16:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008f1a:	ee14 2a90 	vmov	r2, s9
 8008f1e:	3230      	adds	r2, #48	; 0x30
 8008f20:	f801 2b01 	strb.w	r2, [r1], #1
 8008f24:	42b1      	cmp	r1, r6
 8008f26:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008f2a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008f2e:	d11a      	bne.n	8008f66 <_dtoa_r+0x56e>
 8008f30:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008f34:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008f38:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f40:	dc4b      	bgt.n	8008fda <_dtoa_r+0x5e2>
 8008f42:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008f46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f4e:	f57f af3e 	bpl.w	8008dce <_dtoa_r+0x3d6>
 8008f52:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008f56:	2a30      	cmp	r2, #48	; 0x30
 8008f58:	f106 31ff 	add.w	r1, r6, #4294967295
 8008f5c:	d001      	beq.n	8008f62 <_dtoa_r+0x56a>
 8008f5e:	469b      	mov	fp, r3
 8008f60:	e02a      	b.n	8008fb8 <_dtoa_r+0x5c0>
 8008f62:	460e      	mov	r6, r1
 8008f64:	e7f5      	b.n	8008f52 <_dtoa_r+0x55a>
 8008f66:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008f6a:	e7d4      	b.n	8008f16 <_dtoa_r+0x51e>
 8008f6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f70:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008f74:	9e04      	ldr	r6, [sp, #16]
 8008f76:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008f7a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008f7e:	ee15 3a10 	vmov	r3, s10
 8008f82:	3330      	adds	r3, #48	; 0x30
 8008f84:	f806 3b01 	strb.w	r3, [r6], #1
 8008f88:	9b04      	ldr	r3, [sp, #16]
 8008f8a:	1af3      	subs	r3, r6, r3
 8008f8c:	4599      	cmp	r9, r3
 8008f8e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008f92:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008f96:	d133      	bne.n	8009000 <_dtoa_r+0x608>
 8008f98:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008f9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa4:	dc18      	bgt.n	8008fd8 <_dtoa_r+0x5e0>
 8008fa6:	eeb4 7b46 	vcmp.f64	d7, d6
 8008faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fae:	d103      	bne.n	8008fb8 <_dtoa_r+0x5c0>
 8008fb0:	ee15 3a10 	vmov	r3, s10
 8008fb4:	07db      	lsls	r3, r3, #31
 8008fb6:	d40f      	bmi.n	8008fd8 <_dtoa_r+0x5e0>
 8008fb8:	9901      	ldr	r1, [sp, #4]
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f000 fb81 	bl	80096c2 <_Bfree>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008fc4:	7033      	strb	r3, [r6, #0]
 8008fc6:	f10b 0301 	add.w	r3, fp, #1
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f43f ad5b 	beq.w	8008a8a <_dtoa_r+0x92>
 8008fd4:	601e      	str	r6, [r3, #0]
 8008fd6:	e558      	b.n	8008a8a <_dtoa_r+0x92>
 8008fd8:	465b      	mov	r3, fp
 8008fda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008fde:	2939      	cmp	r1, #57	; 0x39
 8008fe0:	f106 32ff 	add.w	r2, r6, #4294967295
 8008fe4:	d106      	bne.n	8008ff4 <_dtoa_r+0x5fc>
 8008fe6:	9904      	ldr	r1, [sp, #16]
 8008fe8:	4291      	cmp	r1, r2
 8008fea:	d107      	bne.n	8008ffc <_dtoa_r+0x604>
 8008fec:	2230      	movs	r2, #48	; 0x30
 8008fee:	700a      	strb	r2, [r1, #0]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	460a      	mov	r2, r1
 8008ff4:	7811      	ldrb	r1, [r2, #0]
 8008ff6:	3101      	adds	r1, #1
 8008ff8:	7011      	strb	r1, [r2, #0]
 8008ffa:	e7b0      	b.n	8008f5e <_dtoa_r+0x566>
 8008ffc:	4616      	mov	r6, r2
 8008ffe:	e7ec      	b.n	8008fda <_dtoa_r+0x5e2>
 8009000:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009004:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800900c:	d1b3      	bne.n	8008f76 <_dtoa_r+0x57e>
 800900e:	e7d3      	b.n	8008fb8 <_dtoa_r+0x5c0>
 8009010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009012:	2a00      	cmp	r2, #0
 8009014:	f000 808d 	beq.w	8009132 <_dtoa_r+0x73a>
 8009018:	9a08      	ldr	r2, [sp, #32]
 800901a:	2a01      	cmp	r2, #1
 800901c:	dc72      	bgt.n	8009104 <_dtoa_r+0x70c>
 800901e:	2f00      	cmp	r7, #0
 8009020:	d06c      	beq.n	80090fc <_dtoa_r+0x704>
 8009022:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009026:	4645      	mov	r5, r8
 8009028:	4656      	mov	r6, sl
 800902a:	9a07      	ldr	r2, [sp, #28]
 800902c:	2101      	movs	r1, #1
 800902e:	441a      	add	r2, r3
 8009030:	4620      	mov	r0, r4
 8009032:	449a      	add	sl, r3
 8009034:	9207      	str	r2, [sp, #28]
 8009036:	f000 fbe4 	bl	8009802 <__i2b>
 800903a:	4607      	mov	r7, r0
 800903c:	2e00      	cmp	r6, #0
 800903e:	dd0b      	ble.n	8009058 <_dtoa_r+0x660>
 8009040:	9b07      	ldr	r3, [sp, #28]
 8009042:	2b00      	cmp	r3, #0
 8009044:	dd08      	ble.n	8009058 <_dtoa_r+0x660>
 8009046:	42b3      	cmp	r3, r6
 8009048:	9a07      	ldr	r2, [sp, #28]
 800904a:	bfa8      	it	ge
 800904c:	4633      	movge	r3, r6
 800904e:	ebaa 0a03 	sub.w	sl, sl, r3
 8009052:	1af6      	subs	r6, r6, r3
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	9307      	str	r3, [sp, #28]
 8009058:	f1b8 0f00 	cmp.w	r8, #0
 800905c:	d01d      	beq.n	800909a <_dtoa_r+0x6a2>
 800905e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009060:	2b00      	cmp	r3, #0
 8009062:	d06a      	beq.n	800913a <_dtoa_r+0x742>
 8009064:	b18d      	cbz	r5, 800908a <_dtoa_r+0x692>
 8009066:	4639      	mov	r1, r7
 8009068:	462a      	mov	r2, r5
 800906a:	4620      	mov	r0, r4
 800906c:	f000 fc68 	bl	8009940 <__pow5mult>
 8009070:	9a01      	ldr	r2, [sp, #4]
 8009072:	4601      	mov	r1, r0
 8009074:	4607      	mov	r7, r0
 8009076:	4620      	mov	r0, r4
 8009078:	f000 fbcc 	bl	8009814 <__multiply>
 800907c:	9901      	ldr	r1, [sp, #4]
 800907e:	900c      	str	r0, [sp, #48]	; 0x30
 8009080:	4620      	mov	r0, r4
 8009082:	f000 fb1e 	bl	80096c2 <_Bfree>
 8009086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009088:	9301      	str	r3, [sp, #4]
 800908a:	ebb8 0205 	subs.w	r2, r8, r5
 800908e:	d004      	beq.n	800909a <_dtoa_r+0x6a2>
 8009090:	9901      	ldr	r1, [sp, #4]
 8009092:	4620      	mov	r0, r4
 8009094:	f000 fc54 	bl	8009940 <__pow5mult>
 8009098:	9001      	str	r0, [sp, #4]
 800909a:	2101      	movs	r1, #1
 800909c:	4620      	mov	r0, r4
 800909e:	f000 fbb0 	bl	8009802 <__i2b>
 80090a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090a4:	4605      	mov	r5, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f000 81ca 	beq.w	8009440 <_dtoa_r+0xa48>
 80090ac:	461a      	mov	r2, r3
 80090ae:	4601      	mov	r1, r0
 80090b0:	4620      	mov	r0, r4
 80090b2:	f000 fc45 	bl	8009940 <__pow5mult>
 80090b6:	9b08      	ldr	r3, [sp, #32]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	4605      	mov	r5, r0
 80090bc:	dc44      	bgt.n	8009148 <_dtoa_r+0x750>
 80090be:	9b02      	ldr	r3, [sp, #8]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d13c      	bne.n	800913e <_dtoa_r+0x746>
 80090c4:	9b03      	ldr	r3, [sp, #12]
 80090c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d137      	bne.n	800913e <_dtoa_r+0x746>
 80090ce:	9b03      	ldr	r3, [sp, #12]
 80090d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090d4:	0d1b      	lsrs	r3, r3, #20
 80090d6:	051b      	lsls	r3, r3, #20
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d033      	beq.n	8009144 <_dtoa_r+0x74c>
 80090dc:	9b07      	ldr	r3, [sp, #28]
 80090de:	3301      	adds	r3, #1
 80090e0:	f10a 0a01 	add.w	sl, sl, #1
 80090e4:	9307      	str	r3, [sp, #28]
 80090e6:	f04f 0801 	mov.w	r8, #1
 80090ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ec:	bb73      	cbnz	r3, 800914c <_dtoa_r+0x754>
 80090ee:	2001      	movs	r0, #1
 80090f0:	e034      	b.n	800915c <_dtoa_r+0x764>
 80090f2:	bf00      	nop
 80090f4:	0800b8f0 	.word	0x0800b8f0
 80090f8:	0800b8c8 	.word	0x0800b8c8
 80090fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009102:	e790      	b.n	8009026 <_dtoa_r+0x62e>
 8009104:	f109 35ff 	add.w	r5, r9, #4294967295
 8009108:	45a8      	cmp	r8, r5
 800910a:	bfbf      	itttt	lt
 800910c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800910e:	eba5 0808 	sublt.w	r8, r5, r8
 8009112:	4443      	addlt	r3, r8
 8009114:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8009116:	bfb6      	itet	lt
 8009118:	46a8      	movlt	r8, r5
 800911a:	eba8 0505 	subge.w	r5, r8, r5
 800911e:	2500      	movlt	r5, #0
 8009120:	f1b9 0f00 	cmp.w	r9, #0
 8009124:	bfb9      	ittee	lt
 8009126:	ebaa 0609 	sublt.w	r6, sl, r9
 800912a:	2300      	movlt	r3, #0
 800912c:	4656      	movge	r6, sl
 800912e:	464b      	movge	r3, r9
 8009130:	e77b      	b.n	800902a <_dtoa_r+0x632>
 8009132:	4645      	mov	r5, r8
 8009134:	4656      	mov	r6, sl
 8009136:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009138:	e780      	b.n	800903c <_dtoa_r+0x644>
 800913a:	4642      	mov	r2, r8
 800913c:	e7a8      	b.n	8009090 <_dtoa_r+0x698>
 800913e:	f04f 0800 	mov.w	r8, #0
 8009142:	e7d2      	b.n	80090ea <_dtoa_r+0x6f2>
 8009144:	4698      	mov	r8, r3
 8009146:	e7d0      	b.n	80090ea <_dtoa_r+0x6f2>
 8009148:	f04f 0800 	mov.w	r8, #0
 800914c:	692b      	ldr	r3, [r5, #16]
 800914e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009152:	6918      	ldr	r0, [r3, #16]
 8009154:	f000 fb07 	bl	8009766 <__hi0bits>
 8009158:	f1c0 0020 	rsb	r0, r0, #32
 800915c:	9b07      	ldr	r3, [sp, #28]
 800915e:	4418      	add	r0, r3
 8009160:	f010 001f 	ands.w	r0, r0, #31
 8009164:	d047      	beq.n	80091f6 <_dtoa_r+0x7fe>
 8009166:	f1c0 0320 	rsb	r3, r0, #32
 800916a:	2b04      	cmp	r3, #4
 800916c:	dd3b      	ble.n	80091e6 <_dtoa_r+0x7ee>
 800916e:	9b07      	ldr	r3, [sp, #28]
 8009170:	f1c0 001c 	rsb	r0, r0, #28
 8009174:	4482      	add	sl, r0
 8009176:	4406      	add	r6, r0
 8009178:	4403      	add	r3, r0
 800917a:	9307      	str	r3, [sp, #28]
 800917c:	f1ba 0f00 	cmp.w	sl, #0
 8009180:	dd05      	ble.n	800918e <_dtoa_r+0x796>
 8009182:	4652      	mov	r2, sl
 8009184:	9901      	ldr	r1, [sp, #4]
 8009186:	4620      	mov	r0, r4
 8009188:	f000 fc28 	bl	80099dc <__lshift>
 800918c:	9001      	str	r0, [sp, #4]
 800918e:	9b07      	ldr	r3, [sp, #28]
 8009190:	2b00      	cmp	r3, #0
 8009192:	dd05      	ble.n	80091a0 <_dtoa_r+0x7a8>
 8009194:	4629      	mov	r1, r5
 8009196:	461a      	mov	r2, r3
 8009198:	4620      	mov	r0, r4
 800919a:	f000 fc1f 	bl	80099dc <__lshift>
 800919e:	4605      	mov	r5, r0
 80091a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091a2:	b353      	cbz	r3, 80091fa <_dtoa_r+0x802>
 80091a4:	4629      	mov	r1, r5
 80091a6:	9801      	ldr	r0, [sp, #4]
 80091a8:	f000 fc6c 	bl	8009a84 <__mcmp>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	da24      	bge.n	80091fa <_dtoa_r+0x802>
 80091b0:	2300      	movs	r3, #0
 80091b2:	220a      	movs	r2, #10
 80091b4:	9901      	ldr	r1, [sp, #4]
 80091b6:	4620      	mov	r0, r4
 80091b8:	f000 fa9a 	bl	80096f0 <__multadd>
 80091bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091be:	9001      	str	r0, [sp, #4]
 80091c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 8142 	beq.w	800944e <_dtoa_r+0xa56>
 80091ca:	2300      	movs	r3, #0
 80091cc:	4639      	mov	r1, r7
 80091ce:	220a      	movs	r2, #10
 80091d0:	4620      	mov	r0, r4
 80091d2:	f000 fa8d 	bl	80096f0 <__multadd>
 80091d6:	9b06      	ldr	r3, [sp, #24]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	4607      	mov	r7, r0
 80091dc:	dc4b      	bgt.n	8009276 <_dtoa_r+0x87e>
 80091de:	9b08      	ldr	r3, [sp, #32]
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	dd48      	ble.n	8009276 <_dtoa_r+0x87e>
 80091e4:	e011      	b.n	800920a <_dtoa_r+0x812>
 80091e6:	d0c9      	beq.n	800917c <_dtoa_r+0x784>
 80091e8:	9a07      	ldr	r2, [sp, #28]
 80091ea:	331c      	adds	r3, #28
 80091ec:	441a      	add	r2, r3
 80091ee:	449a      	add	sl, r3
 80091f0:	441e      	add	r6, r3
 80091f2:	4613      	mov	r3, r2
 80091f4:	e7c1      	b.n	800917a <_dtoa_r+0x782>
 80091f6:	4603      	mov	r3, r0
 80091f8:	e7f6      	b.n	80091e8 <_dtoa_r+0x7f0>
 80091fa:	f1b9 0f00 	cmp.w	r9, #0
 80091fe:	dc34      	bgt.n	800926a <_dtoa_r+0x872>
 8009200:	9b08      	ldr	r3, [sp, #32]
 8009202:	2b02      	cmp	r3, #2
 8009204:	dd31      	ble.n	800926a <_dtoa_r+0x872>
 8009206:	f8cd 9018 	str.w	r9, [sp, #24]
 800920a:	9b06      	ldr	r3, [sp, #24]
 800920c:	b963      	cbnz	r3, 8009228 <_dtoa_r+0x830>
 800920e:	4629      	mov	r1, r5
 8009210:	2205      	movs	r2, #5
 8009212:	4620      	mov	r0, r4
 8009214:	f000 fa6c 	bl	80096f0 <__multadd>
 8009218:	4601      	mov	r1, r0
 800921a:	4605      	mov	r5, r0
 800921c:	9801      	ldr	r0, [sp, #4]
 800921e:	f000 fc31 	bl	8009a84 <__mcmp>
 8009222:	2800      	cmp	r0, #0
 8009224:	f73f adfc 	bgt.w	8008e20 <_dtoa_r+0x428>
 8009228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800922a:	9e04      	ldr	r6, [sp, #16]
 800922c:	ea6f 0b03 	mvn.w	fp, r3
 8009230:	f04f 0900 	mov.w	r9, #0
 8009234:	4629      	mov	r1, r5
 8009236:	4620      	mov	r0, r4
 8009238:	f000 fa43 	bl	80096c2 <_Bfree>
 800923c:	2f00      	cmp	r7, #0
 800923e:	f43f aebb 	beq.w	8008fb8 <_dtoa_r+0x5c0>
 8009242:	f1b9 0f00 	cmp.w	r9, #0
 8009246:	d005      	beq.n	8009254 <_dtoa_r+0x85c>
 8009248:	45b9      	cmp	r9, r7
 800924a:	d003      	beq.n	8009254 <_dtoa_r+0x85c>
 800924c:	4649      	mov	r1, r9
 800924e:	4620      	mov	r0, r4
 8009250:	f000 fa37 	bl	80096c2 <_Bfree>
 8009254:	4639      	mov	r1, r7
 8009256:	4620      	mov	r0, r4
 8009258:	f000 fa33 	bl	80096c2 <_Bfree>
 800925c:	e6ac      	b.n	8008fb8 <_dtoa_r+0x5c0>
 800925e:	2500      	movs	r5, #0
 8009260:	462f      	mov	r7, r5
 8009262:	e7e1      	b.n	8009228 <_dtoa_r+0x830>
 8009264:	469b      	mov	fp, r3
 8009266:	462f      	mov	r7, r5
 8009268:	e5da      	b.n	8008e20 <_dtoa_r+0x428>
 800926a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800926c:	f8cd 9018 	str.w	r9, [sp, #24]
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 80f3 	beq.w	800945c <_dtoa_r+0xa64>
 8009276:	2e00      	cmp	r6, #0
 8009278:	dd05      	ble.n	8009286 <_dtoa_r+0x88e>
 800927a:	4639      	mov	r1, r7
 800927c:	4632      	mov	r2, r6
 800927e:	4620      	mov	r0, r4
 8009280:	f000 fbac 	bl	80099dc <__lshift>
 8009284:	4607      	mov	r7, r0
 8009286:	f1b8 0f00 	cmp.w	r8, #0
 800928a:	d04c      	beq.n	8009326 <_dtoa_r+0x92e>
 800928c:	6879      	ldr	r1, [r7, #4]
 800928e:	4620      	mov	r0, r4
 8009290:	f000 f9e3 	bl	800965a <_Balloc>
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	3202      	adds	r2, #2
 8009298:	4606      	mov	r6, r0
 800929a:	0092      	lsls	r2, r2, #2
 800929c:	f107 010c 	add.w	r1, r7, #12
 80092a0:	300c      	adds	r0, #12
 80092a2:	f000 f9cd 	bl	8009640 <memcpy>
 80092a6:	2201      	movs	r2, #1
 80092a8:	4631      	mov	r1, r6
 80092aa:	4620      	mov	r0, r4
 80092ac:	f000 fb96 	bl	80099dc <__lshift>
 80092b0:	9b02      	ldr	r3, [sp, #8]
 80092b2:	f8dd a010 	ldr.w	sl, [sp, #16]
 80092b6:	f003 0301 	and.w	r3, r3, #1
 80092ba:	46b9      	mov	r9, r7
 80092bc:	9307      	str	r3, [sp, #28]
 80092be:	4607      	mov	r7, r0
 80092c0:	4629      	mov	r1, r5
 80092c2:	9801      	ldr	r0, [sp, #4]
 80092c4:	f7ff fb0c 	bl	80088e0 <quorem>
 80092c8:	4649      	mov	r1, r9
 80092ca:	4606      	mov	r6, r0
 80092cc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80092d0:	9801      	ldr	r0, [sp, #4]
 80092d2:	f000 fbd7 	bl	8009a84 <__mcmp>
 80092d6:	463a      	mov	r2, r7
 80092d8:	9002      	str	r0, [sp, #8]
 80092da:	4629      	mov	r1, r5
 80092dc:	4620      	mov	r0, r4
 80092de:	f000 fbeb 	bl	8009ab8 <__mdiff>
 80092e2:	68c3      	ldr	r3, [r0, #12]
 80092e4:	4602      	mov	r2, r0
 80092e6:	bb03      	cbnz	r3, 800932a <_dtoa_r+0x932>
 80092e8:	4601      	mov	r1, r0
 80092ea:	9009      	str	r0, [sp, #36]	; 0x24
 80092ec:	9801      	ldr	r0, [sp, #4]
 80092ee:	f000 fbc9 	bl	8009a84 <__mcmp>
 80092f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092f4:	4603      	mov	r3, r0
 80092f6:	4611      	mov	r1, r2
 80092f8:	4620      	mov	r0, r4
 80092fa:	9309      	str	r3, [sp, #36]	; 0x24
 80092fc:	f000 f9e1 	bl	80096c2 <_Bfree>
 8009300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009302:	b9a3      	cbnz	r3, 800932e <_dtoa_r+0x936>
 8009304:	9a08      	ldr	r2, [sp, #32]
 8009306:	b992      	cbnz	r2, 800932e <_dtoa_r+0x936>
 8009308:	9a07      	ldr	r2, [sp, #28]
 800930a:	b982      	cbnz	r2, 800932e <_dtoa_r+0x936>
 800930c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009310:	d029      	beq.n	8009366 <_dtoa_r+0x96e>
 8009312:	9b02      	ldr	r3, [sp, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	dd01      	ble.n	800931c <_dtoa_r+0x924>
 8009318:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800931c:	f10a 0601 	add.w	r6, sl, #1
 8009320:	f88a 8000 	strb.w	r8, [sl]
 8009324:	e786      	b.n	8009234 <_dtoa_r+0x83c>
 8009326:	4638      	mov	r0, r7
 8009328:	e7c2      	b.n	80092b0 <_dtoa_r+0x8b8>
 800932a:	2301      	movs	r3, #1
 800932c:	e7e3      	b.n	80092f6 <_dtoa_r+0x8fe>
 800932e:	9a02      	ldr	r2, [sp, #8]
 8009330:	2a00      	cmp	r2, #0
 8009332:	db04      	blt.n	800933e <_dtoa_r+0x946>
 8009334:	d124      	bne.n	8009380 <_dtoa_r+0x988>
 8009336:	9a08      	ldr	r2, [sp, #32]
 8009338:	bb12      	cbnz	r2, 8009380 <_dtoa_r+0x988>
 800933a:	9a07      	ldr	r2, [sp, #28]
 800933c:	bb02      	cbnz	r2, 8009380 <_dtoa_r+0x988>
 800933e:	2b00      	cmp	r3, #0
 8009340:	ddec      	ble.n	800931c <_dtoa_r+0x924>
 8009342:	2201      	movs	r2, #1
 8009344:	9901      	ldr	r1, [sp, #4]
 8009346:	4620      	mov	r0, r4
 8009348:	f000 fb48 	bl	80099dc <__lshift>
 800934c:	4629      	mov	r1, r5
 800934e:	9001      	str	r0, [sp, #4]
 8009350:	f000 fb98 	bl	8009a84 <__mcmp>
 8009354:	2800      	cmp	r0, #0
 8009356:	dc03      	bgt.n	8009360 <_dtoa_r+0x968>
 8009358:	d1e0      	bne.n	800931c <_dtoa_r+0x924>
 800935a:	f018 0f01 	tst.w	r8, #1
 800935e:	d0dd      	beq.n	800931c <_dtoa_r+0x924>
 8009360:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009364:	d1d8      	bne.n	8009318 <_dtoa_r+0x920>
 8009366:	2339      	movs	r3, #57	; 0x39
 8009368:	f10a 0601 	add.w	r6, sl, #1
 800936c:	f88a 3000 	strb.w	r3, [sl]
 8009370:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009374:	2b39      	cmp	r3, #57	; 0x39
 8009376:	f106 32ff 	add.w	r2, r6, #4294967295
 800937a:	d04c      	beq.n	8009416 <_dtoa_r+0xa1e>
 800937c:	3301      	adds	r3, #1
 800937e:	e051      	b.n	8009424 <_dtoa_r+0xa2c>
 8009380:	2b00      	cmp	r3, #0
 8009382:	f10a 0601 	add.w	r6, sl, #1
 8009386:	dd05      	ble.n	8009394 <_dtoa_r+0x99c>
 8009388:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800938c:	d0eb      	beq.n	8009366 <_dtoa_r+0x96e>
 800938e:	f108 0801 	add.w	r8, r8, #1
 8009392:	e7c5      	b.n	8009320 <_dtoa_r+0x928>
 8009394:	9b04      	ldr	r3, [sp, #16]
 8009396:	9a06      	ldr	r2, [sp, #24]
 8009398:	f806 8c01 	strb.w	r8, [r6, #-1]
 800939c:	1af3      	subs	r3, r6, r3
 800939e:	4293      	cmp	r3, r2
 80093a0:	d021      	beq.n	80093e6 <_dtoa_r+0x9ee>
 80093a2:	2300      	movs	r3, #0
 80093a4:	220a      	movs	r2, #10
 80093a6:	9901      	ldr	r1, [sp, #4]
 80093a8:	4620      	mov	r0, r4
 80093aa:	f000 f9a1 	bl	80096f0 <__multadd>
 80093ae:	45b9      	cmp	r9, r7
 80093b0:	9001      	str	r0, [sp, #4]
 80093b2:	f04f 0300 	mov.w	r3, #0
 80093b6:	f04f 020a 	mov.w	r2, #10
 80093ba:	4649      	mov	r1, r9
 80093bc:	4620      	mov	r0, r4
 80093be:	d105      	bne.n	80093cc <_dtoa_r+0x9d4>
 80093c0:	f000 f996 	bl	80096f0 <__multadd>
 80093c4:	4681      	mov	r9, r0
 80093c6:	4607      	mov	r7, r0
 80093c8:	46b2      	mov	sl, r6
 80093ca:	e779      	b.n	80092c0 <_dtoa_r+0x8c8>
 80093cc:	f000 f990 	bl	80096f0 <__multadd>
 80093d0:	4639      	mov	r1, r7
 80093d2:	4681      	mov	r9, r0
 80093d4:	2300      	movs	r3, #0
 80093d6:	220a      	movs	r2, #10
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 f989 	bl	80096f0 <__multadd>
 80093de:	4607      	mov	r7, r0
 80093e0:	e7f2      	b.n	80093c8 <_dtoa_r+0x9d0>
 80093e2:	f04f 0900 	mov.w	r9, #0
 80093e6:	2201      	movs	r2, #1
 80093e8:	9901      	ldr	r1, [sp, #4]
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 faf6 	bl	80099dc <__lshift>
 80093f0:	4629      	mov	r1, r5
 80093f2:	9001      	str	r0, [sp, #4]
 80093f4:	f000 fb46 	bl	8009a84 <__mcmp>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	dcb9      	bgt.n	8009370 <_dtoa_r+0x978>
 80093fc:	d102      	bne.n	8009404 <_dtoa_r+0xa0c>
 80093fe:	f018 0f01 	tst.w	r8, #1
 8009402:	d1b5      	bne.n	8009370 <_dtoa_r+0x978>
 8009404:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009408:	2b30      	cmp	r3, #48	; 0x30
 800940a:	f106 32ff 	add.w	r2, r6, #4294967295
 800940e:	f47f af11 	bne.w	8009234 <_dtoa_r+0x83c>
 8009412:	4616      	mov	r6, r2
 8009414:	e7f6      	b.n	8009404 <_dtoa_r+0xa0c>
 8009416:	9b04      	ldr	r3, [sp, #16]
 8009418:	4293      	cmp	r3, r2
 800941a:	d105      	bne.n	8009428 <_dtoa_r+0xa30>
 800941c:	9a04      	ldr	r2, [sp, #16]
 800941e:	f10b 0b01 	add.w	fp, fp, #1
 8009422:	2331      	movs	r3, #49	; 0x31
 8009424:	7013      	strb	r3, [r2, #0]
 8009426:	e705      	b.n	8009234 <_dtoa_r+0x83c>
 8009428:	4616      	mov	r6, r2
 800942a:	e7a1      	b.n	8009370 <_dtoa_r+0x978>
 800942c:	4b16      	ldr	r3, [pc, #88]	; (8009488 <_dtoa_r+0xa90>)
 800942e:	f7ff bb48 	b.w	8008ac2 <_dtoa_r+0xca>
 8009432:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009434:	2b00      	cmp	r3, #0
 8009436:	f47f ab23 	bne.w	8008a80 <_dtoa_r+0x88>
 800943a:	4b14      	ldr	r3, [pc, #80]	; (800948c <_dtoa_r+0xa94>)
 800943c:	f7ff bb41 	b.w	8008ac2 <_dtoa_r+0xca>
 8009440:	9b08      	ldr	r3, [sp, #32]
 8009442:	2b01      	cmp	r3, #1
 8009444:	f77f ae3b 	ble.w	80090be <_dtoa_r+0x6c6>
 8009448:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800944c:	e64f      	b.n	80090ee <_dtoa_r+0x6f6>
 800944e:	9b06      	ldr	r3, [sp, #24]
 8009450:	2b00      	cmp	r3, #0
 8009452:	dc03      	bgt.n	800945c <_dtoa_r+0xa64>
 8009454:	9b08      	ldr	r3, [sp, #32]
 8009456:	2b02      	cmp	r3, #2
 8009458:	f73f aed7 	bgt.w	800920a <_dtoa_r+0x812>
 800945c:	9e04      	ldr	r6, [sp, #16]
 800945e:	9801      	ldr	r0, [sp, #4]
 8009460:	4629      	mov	r1, r5
 8009462:	f7ff fa3d 	bl	80088e0 <quorem>
 8009466:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800946a:	f806 8b01 	strb.w	r8, [r6], #1
 800946e:	9b04      	ldr	r3, [sp, #16]
 8009470:	9a06      	ldr	r2, [sp, #24]
 8009472:	1af3      	subs	r3, r6, r3
 8009474:	429a      	cmp	r2, r3
 8009476:	ddb4      	ble.n	80093e2 <_dtoa_r+0x9ea>
 8009478:	2300      	movs	r3, #0
 800947a:	220a      	movs	r2, #10
 800947c:	9901      	ldr	r1, [sp, #4]
 800947e:	4620      	mov	r0, r4
 8009480:	f000 f936 	bl	80096f0 <__multadd>
 8009484:	9001      	str	r0, [sp, #4]
 8009486:	e7ea      	b.n	800945e <_dtoa_r+0xa66>
 8009488:	0800b834 	.word	0x0800b834
 800948c:	0800b858 	.word	0x0800b858

08009490 <std>:
 8009490:	2300      	movs	r3, #0
 8009492:	b510      	push	{r4, lr}
 8009494:	4604      	mov	r4, r0
 8009496:	e9c0 3300 	strd	r3, r3, [r0]
 800949a:	6083      	str	r3, [r0, #8]
 800949c:	8181      	strh	r1, [r0, #12]
 800949e:	6643      	str	r3, [r0, #100]	; 0x64
 80094a0:	81c2      	strh	r2, [r0, #14]
 80094a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094a6:	6183      	str	r3, [r0, #24]
 80094a8:	4619      	mov	r1, r3
 80094aa:	2208      	movs	r2, #8
 80094ac:	305c      	adds	r0, #92	; 0x5c
 80094ae:	f7fe fce5 	bl	8007e7c <memset>
 80094b2:	4b05      	ldr	r3, [pc, #20]	; (80094c8 <std+0x38>)
 80094b4:	6263      	str	r3, [r4, #36]	; 0x24
 80094b6:	4b05      	ldr	r3, [pc, #20]	; (80094cc <std+0x3c>)
 80094b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80094ba:	4b05      	ldr	r3, [pc, #20]	; (80094d0 <std+0x40>)
 80094bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094be:	4b05      	ldr	r3, [pc, #20]	; (80094d4 <std+0x44>)
 80094c0:	6224      	str	r4, [r4, #32]
 80094c2:	6323      	str	r3, [r4, #48]	; 0x30
 80094c4:	bd10      	pop	{r4, pc}
 80094c6:	bf00      	nop
 80094c8:	0800a151 	.word	0x0800a151
 80094cc:	0800a173 	.word	0x0800a173
 80094d0:	0800a1ab 	.word	0x0800a1ab
 80094d4:	0800a1cf 	.word	0x0800a1cf

080094d8 <_cleanup_r>:
 80094d8:	4901      	ldr	r1, [pc, #4]	; (80094e0 <_cleanup_r+0x8>)
 80094da:	f000 b885 	b.w	80095e8 <_fwalk_reent>
 80094de:	bf00      	nop
 80094e0:	0800a4a9 	.word	0x0800a4a9

080094e4 <__sfmoreglue>:
 80094e4:	b570      	push	{r4, r5, r6, lr}
 80094e6:	1e4a      	subs	r2, r1, #1
 80094e8:	2568      	movs	r5, #104	; 0x68
 80094ea:	4355      	muls	r5, r2
 80094ec:	460e      	mov	r6, r1
 80094ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094f2:	f7fe fd19 	bl	8007f28 <_malloc_r>
 80094f6:	4604      	mov	r4, r0
 80094f8:	b140      	cbz	r0, 800950c <__sfmoreglue+0x28>
 80094fa:	2100      	movs	r1, #0
 80094fc:	e9c0 1600 	strd	r1, r6, [r0]
 8009500:	300c      	adds	r0, #12
 8009502:	60a0      	str	r0, [r4, #8]
 8009504:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009508:	f7fe fcb8 	bl	8007e7c <memset>
 800950c:	4620      	mov	r0, r4
 800950e:	bd70      	pop	{r4, r5, r6, pc}

08009510 <__sinit>:
 8009510:	6983      	ldr	r3, [r0, #24]
 8009512:	b510      	push	{r4, lr}
 8009514:	4604      	mov	r4, r0
 8009516:	bb33      	cbnz	r3, 8009566 <__sinit+0x56>
 8009518:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800951c:	6503      	str	r3, [r0, #80]	; 0x50
 800951e:	4b12      	ldr	r3, [pc, #72]	; (8009568 <__sinit+0x58>)
 8009520:	4a12      	ldr	r2, [pc, #72]	; (800956c <__sinit+0x5c>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6282      	str	r2, [r0, #40]	; 0x28
 8009526:	4298      	cmp	r0, r3
 8009528:	bf04      	itt	eq
 800952a:	2301      	moveq	r3, #1
 800952c:	6183      	streq	r3, [r0, #24]
 800952e:	f000 f81f 	bl	8009570 <__sfp>
 8009532:	6060      	str	r0, [r4, #4]
 8009534:	4620      	mov	r0, r4
 8009536:	f000 f81b 	bl	8009570 <__sfp>
 800953a:	60a0      	str	r0, [r4, #8]
 800953c:	4620      	mov	r0, r4
 800953e:	f000 f817 	bl	8009570 <__sfp>
 8009542:	2200      	movs	r2, #0
 8009544:	60e0      	str	r0, [r4, #12]
 8009546:	2104      	movs	r1, #4
 8009548:	6860      	ldr	r0, [r4, #4]
 800954a:	f7ff ffa1 	bl	8009490 <std>
 800954e:	2201      	movs	r2, #1
 8009550:	2109      	movs	r1, #9
 8009552:	68a0      	ldr	r0, [r4, #8]
 8009554:	f7ff ff9c 	bl	8009490 <std>
 8009558:	2202      	movs	r2, #2
 800955a:	2112      	movs	r1, #18
 800955c:	68e0      	ldr	r0, [r4, #12]
 800955e:	f7ff ff97 	bl	8009490 <std>
 8009562:	2301      	movs	r3, #1
 8009564:	61a3      	str	r3, [r4, #24]
 8009566:	bd10      	pop	{r4, pc}
 8009568:	0800b820 	.word	0x0800b820
 800956c:	080094d9 	.word	0x080094d9

08009570 <__sfp>:
 8009570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009572:	4b1b      	ldr	r3, [pc, #108]	; (80095e0 <__sfp+0x70>)
 8009574:	681e      	ldr	r6, [r3, #0]
 8009576:	69b3      	ldr	r3, [r6, #24]
 8009578:	4607      	mov	r7, r0
 800957a:	b913      	cbnz	r3, 8009582 <__sfp+0x12>
 800957c:	4630      	mov	r0, r6
 800957e:	f7ff ffc7 	bl	8009510 <__sinit>
 8009582:	3648      	adds	r6, #72	; 0x48
 8009584:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009588:	3b01      	subs	r3, #1
 800958a:	d503      	bpl.n	8009594 <__sfp+0x24>
 800958c:	6833      	ldr	r3, [r6, #0]
 800958e:	b133      	cbz	r3, 800959e <__sfp+0x2e>
 8009590:	6836      	ldr	r6, [r6, #0]
 8009592:	e7f7      	b.n	8009584 <__sfp+0x14>
 8009594:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009598:	b16d      	cbz	r5, 80095b6 <__sfp+0x46>
 800959a:	3468      	adds	r4, #104	; 0x68
 800959c:	e7f4      	b.n	8009588 <__sfp+0x18>
 800959e:	2104      	movs	r1, #4
 80095a0:	4638      	mov	r0, r7
 80095a2:	f7ff ff9f 	bl	80094e4 <__sfmoreglue>
 80095a6:	6030      	str	r0, [r6, #0]
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d1f1      	bne.n	8009590 <__sfp+0x20>
 80095ac:	230c      	movs	r3, #12
 80095ae:	603b      	str	r3, [r7, #0]
 80095b0:	4604      	mov	r4, r0
 80095b2:	4620      	mov	r0, r4
 80095b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095b6:	4b0b      	ldr	r3, [pc, #44]	; (80095e4 <__sfp+0x74>)
 80095b8:	6665      	str	r5, [r4, #100]	; 0x64
 80095ba:	e9c4 5500 	strd	r5, r5, [r4]
 80095be:	60a5      	str	r5, [r4, #8]
 80095c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80095c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80095c8:	2208      	movs	r2, #8
 80095ca:	4629      	mov	r1, r5
 80095cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80095d0:	f7fe fc54 	bl	8007e7c <memset>
 80095d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095dc:	e7e9      	b.n	80095b2 <__sfp+0x42>
 80095de:	bf00      	nop
 80095e0:	0800b820 	.word	0x0800b820
 80095e4:	ffff0001 	.word	0xffff0001

080095e8 <_fwalk_reent>:
 80095e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095ec:	4680      	mov	r8, r0
 80095ee:	4689      	mov	r9, r1
 80095f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095f4:	2600      	movs	r6, #0
 80095f6:	b914      	cbnz	r4, 80095fe <_fwalk_reent+0x16>
 80095f8:	4630      	mov	r0, r6
 80095fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009602:	3f01      	subs	r7, #1
 8009604:	d501      	bpl.n	800960a <_fwalk_reent+0x22>
 8009606:	6824      	ldr	r4, [r4, #0]
 8009608:	e7f5      	b.n	80095f6 <_fwalk_reent+0xe>
 800960a:	89ab      	ldrh	r3, [r5, #12]
 800960c:	2b01      	cmp	r3, #1
 800960e:	d907      	bls.n	8009620 <_fwalk_reent+0x38>
 8009610:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009614:	3301      	adds	r3, #1
 8009616:	d003      	beq.n	8009620 <_fwalk_reent+0x38>
 8009618:	4629      	mov	r1, r5
 800961a:	4640      	mov	r0, r8
 800961c:	47c8      	blx	r9
 800961e:	4306      	orrs	r6, r0
 8009620:	3568      	adds	r5, #104	; 0x68
 8009622:	e7ee      	b.n	8009602 <_fwalk_reent+0x1a>

08009624 <_localeconv_r>:
 8009624:	4b04      	ldr	r3, [pc, #16]	; (8009638 <_localeconv_r+0x14>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6a18      	ldr	r0, [r3, #32]
 800962a:	4b04      	ldr	r3, [pc, #16]	; (800963c <_localeconv_r+0x18>)
 800962c:	2800      	cmp	r0, #0
 800962e:	bf08      	it	eq
 8009630:	4618      	moveq	r0, r3
 8009632:	30f0      	adds	r0, #240	; 0xf0
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	20000010 	.word	0x20000010
 800963c:	20000074 	.word	0x20000074

08009640 <memcpy>:
 8009640:	b510      	push	{r4, lr}
 8009642:	1e43      	subs	r3, r0, #1
 8009644:	440a      	add	r2, r1
 8009646:	4291      	cmp	r1, r2
 8009648:	d100      	bne.n	800964c <memcpy+0xc>
 800964a:	bd10      	pop	{r4, pc}
 800964c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009650:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009654:	e7f7      	b.n	8009646 <memcpy+0x6>

08009656 <__malloc_lock>:
 8009656:	4770      	bx	lr

08009658 <__malloc_unlock>:
 8009658:	4770      	bx	lr

0800965a <_Balloc>:
 800965a:	b570      	push	{r4, r5, r6, lr}
 800965c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800965e:	4604      	mov	r4, r0
 8009660:	460e      	mov	r6, r1
 8009662:	b93d      	cbnz	r5, 8009674 <_Balloc+0x1a>
 8009664:	2010      	movs	r0, #16
 8009666:	f7fe fc01 	bl	8007e6c <malloc>
 800966a:	6260      	str	r0, [r4, #36]	; 0x24
 800966c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009670:	6005      	str	r5, [r0, #0]
 8009672:	60c5      	str	r5, [r0, #12]
 8009674:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009676:	68eb      	ldr	r3, [r5, #12]
 8009678:	b183      	cbz	r3, 800969c <_Balloc+0x42>
 800967a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009682:	b9b8      	cbnz	r0, 80096b4 <_Balloc+0x5a>
 8009684:	2101      	movs	r1, #1
 8009686:	fa01 f506 	lsl.w	r5, r1, r6
 800968a:	1d6a      	adds	r2, r5, #5
 800968c:	0092      	lsls	r2, r2, #2
 800968e:	4620      	mov	r0, r4
 8009690:	f000 fabe 	bl	8009c10 <_calloc_r>
 8009694:	b160      	cbz	r0, 80096b0 <_Balloc+0x56>
 8009696:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800969a:	e00e      	b.n	80096ba <_Balloc+0x60>
 800969c:	2221      	movs	r2, #33	; 0x21
 800969e:	2104      	movs	r1, #4
 80096a0:	4620      	mov	r0, r4
 80096a2:	f000 fab5 	bl	8009c10 <_calloc_r>
 80096a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096a8:	60e8      	str	r0, [r5, #12]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1e4      	bne.n	800967a <_Balloc+0x20>
 80096b0:	2000      	movs	r0, #0
 80096b2:	bd70      	pop	{r4, r5, r6, pc}
 80096b4:	6802      	ldr	r2, [r0, #0]
 80096b6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80096ba:	2300      	movs	r3, #0
 80096bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096c0:	e7f7      	b.n	80096b2 <_Balloc+0x58>

080096c2 <_Bfree>:
 80096c2:	b570      	push	{r4, r5, r6, lr}
 80096c4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80096c6:	4606      	mov	r6, r0
 80096c8:	460d      	mov	r5, r1
 80096ca:	b93c      	cbnz	r4, 80096dc <_Bfree+0x1a>
 80096cc:	2010      	movs	r0, #16
 80096ce:	f7fe fbcd 	bl	8007e6c <malloc>
 80096d2:	6270      	str	r0, [r6, #36]	; 0x24
 80096d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096d8:	6004      	str	r4, [r0, #0]
 80096da:	60c4      	str	r4, [r0, #12]
 80096dc:	b13d      	cbz	r5, 80096ee <_Bfree+0x2c>
 80096de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80096e0:	686a      	ldr	r2, [r5, #4]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096e8:	6029      	str	r1, [r5, #0]
 80096ea:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80096ee:	bd70      	pop	{r4, r5, r6, pc}

080096f0 <__multadd>:
 80096f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f4:	690d      	ldr	r5, [r1, #16]
 80096f6:	461f      	mov	r7, r3
 80096f8:	4606      	mov	r6, r0
 80096fa:	460c      	mov	r4, r1
 80096fc:	f101 0c14 	add.w	ip, r1, #20
 8009700:	2300      	movs	r3, #0
 8009702:	f8dc 0000 	ldr.w	r0, [ip]
 8009706:	b281      	uxth	r1, r0
 8009708:	fb02 7101 	mla	r1, r2, r1, r7
 800970c:	0c0f      	lsrs	r7, r1, #16
 800970e:	0c00      	lsrs	r0, r0, #16
 8009710:	fb02 7000 	mla	r0, r2, r0, r7
 8009714:	b289      	uxth	r1, r1
 8009716:	3301      	adds	r3, #1
 8009718:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800971c:	429d      	cmp	r5, r3
 800971e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009722:	f84c 1b04 	str.w	r1, [ip], #4
 8009726:	dcec      	bgt.n	8009702 <__multadd+0x12>
 8009728:	b1d7      	cbz	r7, 8009760 <__multadd+0x70>
 800972a:	68a3      	ldr	r3, [r4, #8]
 800972c:	42ab      	cmp	r3, r5
 800972e:	dc12      	bgt.n	8009756 <__multadd+0x66>
 8009730:	6861      	ldr	r1, [r4, #4]
 8009732:	4630      	mov	r0, r6
 8009734:	3101      	adds	r1, #1
 8009736:	f7ff ff90 	bl	800965a <_Balloc>
 800973a:	6922      	ldr	r2, [r4, #16]
 800973c:	3202      	adds	r2, #2
 800973e:	f104 010c 	add.w	r1, r4, #12
 8009742:	4680      	mov	r8, r0
 8009744:	0092      	lsls	r2, r2, #2
 8009746:	300c      	adds	r0, #12
 8009748:	f7ff ff7a 	bl	8009640 <memcpy>
 800974c:	4621      	mov	r1, r4
 800974e:	4630      	mov	r0, r6
 8009750:	f7ff ffb7 	bl	80096c2 <_Bfree>
 8009754:	4644      	mov	r4, r8
 8009756:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800975a:	3501      	adds	r5, #1
 800975c:	615f      	str	r7, [r3, #20]
 800975e:	6125      	str	r5, [r4, #16]
 8009760:	4620      	mov	r0, r4
 8009762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009766 <__hi0bits>:
 8009766:	0c02      	lsrs	r2, r0, #16
 8009768:	0412      	lsls	r2, r2, #16
 800976a:	4603      	mov	r3, r0
 800976c:	b9b2      	cbnz	r2, 800979c <__hi0bits+0x36>
 800976e:	0403      	lsls	r3, r0, #16
 8009770:	2010      	movs	r0, #16
 8009772:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009776:	bf04      	itt	eq
 8009778:	021b      	lsleq	r3, r3, #8
 800977a:	3008      	addeq	r0, #8
 800977c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009780:	bf04      	itt	eq
 8009782:	011b      	lsleq	r3, r3, #4
 8009784:	3004      	addeq	r0, #4
 8009786:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800978a:	bf04      	itt	eq
 800978c:	009b      	lsleq	r3, r3, #2
 800978e:	3002      	addeq	r0, #2
 8009790:	2b00      	cmp	r3, #0
 8009792:	db06      	blt.n	80097a2 <__hi0bits+0x3c>
 8009794:	005b      	lsls	r3, r3, #1
 8009796:	d503      	bpl.n	80097a0 <__hi0bits+0x3a>
 8009798:	3001      	adds	r0, #1
 800979a:	4770      	bx	lr
 800979c:	2000      	movs	r0, #0
 800979e:	e7e8      	b.n	8009772 <__hi0bits+0xc>
 80097a0:	2020      	movs	r0, #32
 80097a2:	4770      	bx	lr

080097a4 <__lo0bits>:
 80097a4:	6803      	ldr	r3, [r0, #0]
 80097a6:	f013 0207 	ands.w	r2, r3, #7
 80097aa:	4601      	mov	r1, r0
 80097ac:	d00b      	beq.n	80097c6 <__lo0bits+0x22>
 80097ae:	07da      	lsls	r2, r3, #31
 80097b0:	d423      	bmi.n	80097fa <__lo0bits+0x56>
 80097b2:	0798      	lsls	r0, r3, #30
 80097b4:	bf49      	itett	mi
 80097b6:	085b      	lsrmi	r3, r3, #1
 80097b8:	089b      	lsrpl	r3, r3, #2
 80097ba:	2001      	movmi	r0, #1
 80097bc:	600b      	strmi	r3, [r1, #0]
 80097be:	bf5c      	itt	pl
 80097c0:	600b      	strpl	r3, [r1, #0]
 80097c2:	2002      	movpl	r0, #2
 80097c4:	4770      	bx	lr
 80097c6:	b298      	uxth	r0, r3
 80097c8:	b9a8      	cbnz	r0, 80097f6 <__lo0bits+0x52>
 80097ca:	0c1b      	lsrs	r3, r3, #16
 80097cc:	2010      	movs	r0, #16
 80097ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80097d2:	bf04      	itt	eq
 80097d4:	0a1b      	lsreq	r3, r3, #8
 80097d6:	3008      	addeq	r0, #8
 80097d8:	071a      	lsls	r2, r3, #28
 80097da:	bf04      	itt	eq
 80097dc:	091b      	lsreq	r3, r3, #4
 80097de:	3004      	addeq	r0, #4
 80097e0:	079a      	lsls	r2, r3, #30
 80097e2:	bf04      	itt	eq
 80097e4:	089b      	lsreq	r3, r3, #2
 80097e6:	3002      	addeq	r0, #2
 80097e8:	07da      	lsls	r2, r3, #31
 80097ea:	d402      	bmi.n	80097f2 <__lo0bits+0x4e>
 80097ec:	085b      	lsrs	r3, r3, #1
 80097ee:	d006      	beq.n	80097fe <__lo0bits+0x5a>
 80097f0:	3001      	adds	r0, #1
 80097f2:	600b      	str	r3, [r1, #0]
 80097f4:	4770      	bx	lr
 80097f6:	4610      	mov	r0, r2
 80097f8:	e7e9      	b.n	80097ce <__lo0bits+0x2a>
 80097fa:	2000      	movs	r0, #0
 80097fc:	4770      	bx	lr
 80097fe:	2020      	movs	r0, #32
 8009800:	4770      	bx	lr

08009802 <__i2b>:
 8009802:	b510      	push	{r4, lr}
 8009804:	460c      	mov	r4, r1
 8009806:	2101      	movs	r1, #1
 8009808:	f7ff ff27 	bl	800965a <_Balloc>
 800980c:	2201      	movs	r2, #1
 800980e:	6144      	str	r4, [r0, #20]
 8009810:	6102      	str	r2, [r0, #16]
 8009812:	bd10      	pop	{r4, pc}

08009814 <__multiply>:
 8009814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009818:	4614      	mov	r4, r2
 800981a:	690a      	ldr	r2, [r1, #16]
 800981c:	6923      	ldr	r3, [r4, #16]
 800981e:	429a      	cmp	r2, r3
 8009820:	bfb8      	it	lt
 8009822:	460b      	movlt	r3, r1
 8009824:	4688      	mov	r8, r1
 8009826:	bfbc      	itt	lt
 8009828:	46a0      	movlt	r8, r4
 800982a:	461c      	movlt	r4, r3
 800982c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009830:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009834:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009838:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800983c:	eb07 0609 	add.w	r6, r7, r9
 8009840:	42b3      	cmp	r3, r6
 8009842:	bfb8      	it	lt
 8009844:	3101      	addlt	r1, #1
 8009846:	f7ff ff08 	bl	800965a <_Balloc>
 800984a:	f100 0514 	add.w	r5, r0, #20
 800984e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009852:	462b      	mov	r3, r5
 8009854:	2200      	movs	r2, #0
 8009856:	4573      	cmp	r3, lr
 8009858:	d316      	bcc.n	8009888 <__multiply+0x74>
 800985a:	f104 0214 	add.w	r2, r4, #20
 800985e:	f108 0114 	add.w	r1, r8, #20
 8009862:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009866:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	9b00      	ldr	r3, [sp, #0]
 800986e:	9201      	str	r2, [sp, #4]
 8009870:	4293      	cmp	r3, r2
 8009872:	d80c      	bhi.n	800988e <__multiply+0x7a>
 8009874:	2e00      	cmp	r6, #0
 8009876:	dd03      	ble.n	8009880 <__multiply+0x6c>
 8009878:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800987c:	2b00      	cmp	r3, #0
 800987e:	d05d      	beq.n	800993c <__multiply+0x128>
 8009880:	6106      	str	r6, [r0, #16]
 8009882:	b003      	add	sp, #12
 8009884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009888:	f843 2b04 	str.w	r2, [r3], #4
 800988c:	e7e3      	b.n	8009856 <__multiply+0x42>
 800988e:	f8b2 b000 	ldrh.w	fp, [r2]
 8009892:	f1bb 0f00 	cmp.w	fp, #0
 8009896:	d023      	beq.n	80098e0 <__multiply+0xcc>
 8009898:	4689      	mov	r9, r1
 800989a:	46ac      	mov	ip, r5
 800989c:	f04f 0800 	mov.w	r8, #0
 80098a0:	f859 4b04 	ldr.w	r4, [r9], #4
 80098a4:	f8dc a000 	ldr.w	sl, [ip]
 80098a8:	b2a3      	uxth	r3, r4
 80098aa:	fa1f fa8a 	uxth.w	sl, sl
 80098ae:	fb0b a303 	mla	r3, fp, r3, sl
 80098b2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80098b6:	f8dc 4000 	ldr.w	r4, [ip]
 80098ba:	4443      	add	r3, r8
 80098bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80098c0:	fb0b 840a 	mla	r4, fp, sl, r8
 80098c4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80098c8:	46e2      	mov	sl, ip
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80098d0:	454f      	cmp	r7, r9
 80098d2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80098d6:	f84a 3b04 	str.w	r3, [sl], #4
 80098da:	d82b      	bhi.n	8009934 <__multiply+0x120>
 80098dc:	f8cc 8004 	str.w	r8, [ip, #4]
 80098e0:	9b01      	ldr	r3, [sp, #4]
 80098e2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80098e6:	3204      	adds	r2, #4
 80098e8:	f1ba 0f00 	cmp.w	sl, #0
 80098ec:	d020      	beq.n	8009930 <__multiply+0x11c>
 80098ee:	682b      	ldr	r3, [r5, #0]
 80098f0:	4689      	mov	r9, r1
 80098f2:	46a8      	mov	r8, r5
 80098f4:	f04f 0b00 	mov.w	fp, #0
 80098f8:	f8b9 c000 	ldrh.w	ip, [r9]
 80098fc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009900:	fb0a 440c 	mla	r4, sl, ip, r4
 8009904:	445c      	add	r4, fp
 8009906:	46c4      	mov	ip, r8
 8009908:	b29b      	uxth	r3, r3
 800990a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800990e:	f84c 3b04 	str.w	r3, [ip], #4
 8009912:	f859 3b04 	ldr.w	r3, [r9], #4
 8009916:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800991a:	0c1b      	lsrs	r3, r3, #16
 800991c:	fb0a b303 	mla	r3, sl, r3, fp
 8009920:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009924:	454f      	cmp	r7, r9
 8009926:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800992a:	d805      	bhi.n	8009938 <__multiply+0x124>
 800992c:	f8c8 3004 	str.w	r3, [r8, #4]
 8009930:	3504      	adds	r5, #4
 8009932:	e79b      	b.n	800986c <__multiply+0x58>
 8009934:	46d4      	mov	ip, sl
 8009936:	e7b3      	b.n	80098a0 <__multiply+0x8c>
 8009938:	46e0      	mov	r8, ip
 800993a:	e7dd      	b.n	80098f8 <__multiply+0xe4>
 800993c:	3e01      	subs	r6, #1
 800993e:	e799      	b.n	8009874 <__multiply+0x60>

08009940 <__pow5mult>:
 8009940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009944:	4615      	mov	r5, r2
 8009946:	f012 0203 	ands.w	r2, r2, #3
 800994a:	4606      	mov	r6, r0
 800994c:	460f      	mov	r7, r1
 800994e:	d007      	beq.n	8009960 <__pow5mult+0x20>
 8009950:	3a01      	subs	r2, #1
 8009952:	4c21      	ldr	r4, [pc, #132]	; (80099d8 <__pow5mult+0x98>)
 8009954:	2300      	movs	r3, #0
 8009956:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800995a:	f7ff fec9 	bl	80096f0 <__multadd>
 800995e:	4607      	mov	r7, r0
 8009960:	10ad      	asrs	r5, r5, #2
 8009962:	d035      	beq.n	80099d0 <__pow5mult+0x90>
 8009964:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009966:	b93c      	cbnz	r4, 8009978 <__pow5mult+0x38>
 8009968:	2010      	movs	r0, #16
 800996a:	f7fe fa7f 	bl	8007e6c <malloc>
 800996e:	6270      	str	r0, [r6, #36]	; 0x24
 8009970:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009974:	6004      	str	r4, [r0, #0]
 8009976:	60c4      	str	r4, [r0, #12]
 8009978:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800997c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009980:	b94c      	cbnz	r4, 8009996 <__pow5mult+0x56>
 8009982:	f240 2171 	movw	r1, #625	; 0x271
 8009986:	4630      	mov	r0, r6
 8009988:	f7ff ff3b 	bl	8009802 <__i2b>
 800998c:	2300      	movs	r3, #0
 800998e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009992:	4604      	mov	r4, r0
 8009994:	6003      	str	r3, [r0, #0]
 8009996:	f04f 0800 	mov.w	r8, #0
 800999a:	07eb      	lsls	r3, r5, #31
 800999c:	d50a      	bpl.n	80099b4 <__pow5mult+0x74>
 800999e:	4639      	mov	r1, r7
 80099a0:	4622      	mov	r2, r4
 80099a2:	4630      	mov	r0, r6
 80099a4:	f7ff ff36 	bl	8009814 <__multiply>
 80099a8:	4639      	mov	r1, r7
 80099aa:	4681      	mov	r9, r0
 80099ac:	4630      	mov	r0, r6
 80099ae:	f7ff fe88 	bl	80096c2 <_Bfree>
 80099b2:	464f      	mov	r7, r9
 80099b4:	106d      	asrs	r5, r5, #1
 80099b6:	d00b      	beq.n	80099d0 <__pow5mult+0x90>
 80099b8:	6820      	ldr	r0, [r4, #0]
 80099ba:	b938      	cbnz	r0, 80099cc <__pow5mult+0x8c>
 80099bc:	4622      	mov	r2, r4
 80099be:	4621      	mov	r1, r4
 80099c0:	4630      	mov	r0, r6
 80099c2:	f7ff ff27 	bl	8009814 <__multiply>
 80099c6:	6020      	str	r0, [r4, #0]
 80099c8:	f8c0 8000 	str.w	r8, [r0]
 80099cc:	4604      	mov	r4, r0
 80099ce:	e7e4      	b.n	800999a <__pow5mult+0x5a>
 80099d0:	4638      	mov	r0, r7
 80099d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099d6:	bf00      	nop
 80099d8:	0800b9b8 	.word	0x0800b9b8

080099dc <__lshift>:
 80099dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e0:	460c      	mov	r4, r1
 80099e2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099e6:	6923      	ldr	r3, [r4, #16]
 80099e8:	6849      	ldr	r1, [r1, #4]
 80099ea:	eb0a 0903 	add.w	r9, sl, r3
 80099ee:	68a3      	ldr	r3, [r4, #8]
 80099f0:	4607      	mov	r7, r0
 80099f2:	4616      	mov	r6, r2
 80099f4:	f109 0501 	add.w	r5, r9, #1
 80099f8:	42ab      	cmp	r3, r5
 80099fa:	db32      	blt.n	8009a62 <__lshift+0x86>
 80099fc:	4638      	mov	r0, r7
 80099fe:	f7ff fe2c 	bl	800965a <_Balloc>
 8009a02:	2300      	movs	r3, #0
 8009a04:	4680      	mov	r8, r0
 8009a06:	f100 0114 	add.w	r1, r0, #20
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	4553      	cmp	r3, sl
 8009a0e:	db2b      	blt.n	8009a68 <__lshift+0x8c>
 8009a10:	6920      	ldr	r0, [r4, #16]
 8009a12:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a16:	f104 0314 	add.w	r3, r4, #20
 8009a1a:	f016 021f 	ands.w	r2, r6, #31
 8009a1e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a22:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a26:	d025      	beq.n	8009a74 <__lshift+0x98>
 8009a28:	f1c2 0e20 	rsb	lr, r2, #32
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	681e      	ldr	r6, [r3, #0]
 8009a30:	468a      	mov	sl, r1
 8009a32:	4096      	lsls	r6, r2
 8009a34:	4330      	orrs	r0, r6
 8009a36:	f84a 0b04 	str.w	r0, [sl], #4
 8009a3a:	f853 0b04 	ldr.w	r0, [r3], #4
 8009a3e:	459c      	cmp	ip, r3
 8009a40:	fa20 f00e 	lsr.w	r0, r0, lr
 8009a44:	d814      	bhi.n	8009a70 <__lshift+0x94>
 8009a46:	6048      	str	r0, [r1, #4]
 8009a48:	b108      	cbz	r0, 8009a4e <__lshift+0x72>
 8009a4a:	f109 0502 	add.w	r5, r9, #2
 8009a4e:	3d01      	subs	r5, #1
 8009a50:	4638      	mov	r0, r7
 8009a52:	f8c8 5010 	str.w	r5, [r8, #16]
 8009a56:	4621      	mov	r1, r4
 8009a58:	f7ff fe33 	bl	80096c2 <_Bfree>
 8009a5c:	4640      	mov	r0, r8
 8009a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a62:	3101      	adds	r1, #1
 8009a64:	005b      	lsls	r3, r3, #1
 8009a66:	e7c7      	b.n	80099f8 <__lshift+0x1c>
 8009a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	e7cd      	b.n	8009a0c <__lshift+0x30>
 8009a70:	4651      	mov	r1, sl
 8009a72:	e7dc      	b.n	8009a2e <__lshift+0x52>
 8009a74:	3904      	subs	r1, #4
 8009a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a7a:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a7e:	459c      	cmp	ip, r3
 8009a80:	d8f9      	bhi.n	8009a76 <__lshift+0x9a>
 8009a82:	e7e4      	b.n	8009a4e <__lshift+0x72>

08009a84 <__mcmp>:
 8009a84:	6903      	ldr	r3, [r0, #16]
 8009a86:	690a      	ldr	r2, [r1, #16]
 8009a88:	1a9b      	subs	r3, r3, r2
 8009a8a:	b530      	push	{r4, r5, lr}
 8009a8c:	d10c      	bne.n	8009aa8 <__mcmp+0x24>
 8009a8e:	0092      	lsls	r2, r2, #2
 8009a90:	3014      	adds	r0, #20
 8009a92:	3114      	adds	r1, #20
 8009a94:	1884      	adds	r4, r0, r2
 8009a96:	4411      	add	r1, r2
 8009a98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009aa0:	4295      	cmp	r5, r2
 8009aa2:	d003      	beq.n	8009aac <__mcmp+0x28>
 8009aa4:	d305      	bcc.n	8009ab2 <__mcmp+0x2e>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	bd30      	pop	{r4, r5, pc}
 8009aac:	42a0      	cmp	r0, r4
 8009aae:	d3f3      	bcc.n	8009a98 <__mcmp+0x14>
 8009ab0:	e7fa      	b.n	8009aa8 <__mcmp+0x24>
 8009ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab6:	e7f7      	b.n	8009aa8 <__mcmp+0x24>

08009ab8 <__mdiff>:
 8009ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009abc:	460d      	mov	r5, r1
 8009abe:	4607      	mov	r7, r0
 8009ac0:	4611      	mov	r1, r2
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	4614      	mov	r4, r2
 8009ac6:	f7ff ffdd 	bl	8009a84 <__mcmp>
 8009aca:	1e06      	subs	r6, r0, #0
 8009acc:	d108      	bne.n	8009ae0 <__mdiff+0x28>
 8009ace:	4631      	mov	r1, r6
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	f7ff fdc2 	bl	800965a <_Balloc>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae0:	bfa4      	itt	ge
 8009ae2:	4623      	movge	r3, r4
 8009ae4:	462c      	movge	r4, r5
 8009ae6:	4638      	mov	r0, r7
 8009ae8:	6861      	ldr	r1, [r4, #4]
 8009aea:	bfa6      	itte	ge
 8009aec:	461d      	movge	r5, r3
 8009aee:	2600      	movge	r6, #0
 8009af0:	2601      	movlt	r6, #1
 8009af2:	f7ff fdb2 	bl	800965a <_Balloc>
 8009af6:	692b      	ldr	r3, [r5, #16]
 8009af8:	60c6      	str	r6, [r0, #12]
 8009afa:	6926      	ldr	r6, [r4, #16]
 8009afc:	f105 0914 	add.w	r9, r5, #20
 8009b00:	f104 0214 	add.w	r2, r4, #20
 8009b04:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009b08:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009b0c:	f100 0514 	add.w	r5, r0, #20
 8009b10:	f04f 0e00 	mov.w	lr, #0
 8009b14:	f852 ab04 	ldr.w	sl, [r2], #4
 8009b18:	f859 4b04 	ldr.w	r4, [r9], #4
 8009b1c:	fa1e f18a 	uxtah	r1, lr, sl
 8009b20:	b2a3      	uxth	r3, r4
 8009b22:	1ac9      	subs	r1, r1, r3
 8009b24:	0c23      	lsrs	r3, r4, #16
 8009b26:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009b2a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009b2e:	b289      	uxth	r1, r1
 8009b30:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009b34:	45c8      	cmp	r8, r9
 8009b36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009b3a:	4694      	mov	ip, r2
 8009b3c:	f845 3b04 	str.w	r3, [r5], #4
 8009b40:	d8e8      	bhi.n	8009b14 <__mdiff+0x5c>
 8009b42:	45bc      	cmp	ip, r7
 8009b44:	d304      	bcc.n	8009b50 <__mdiff+0x98>
 8009b46:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009b4a:	b183      	cbz	r3, 8009b6e <__mdiff+0xb6>
 8009b4c:	6106      	str	r6, [r0, #16]
 8009b4e:	e7c5      	b.n	8009adc <__mdiff+0x24>
 8009b50:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009b54:	fa1e f381 	uxtah	r3, lr, r1
 8009b58:	141a      	asrs	r2, r3, #16
 8009b5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b64:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009b68:	f845 3b04 	str.w	r3, [r5], #4
 8009b6c:	e7e9      	b.n	8009b42 <__mdiff+0x8a>
 8009b6e:	3e01      	subs	r6, #1
 8009b70:	e7e9      	b.n	8009b46 <__mdiff+0x8e>

08009b72 <__d2b>:
 8009b72:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b76:	460e      	mov	r6, r1
 8009b78:	2101      	movs	r1, #1
 8009b7a:	ec59 8b10 	vmov	r8, r9, d0
 8009b7e:	4615      	mov	r5, r2
 8009b80:	f7ff fd6b 	bl	800965a <_Balloc>
 8009b84:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009b88:	4607      	mov	r7, r0
 8009b8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b8e:	bb34      	cbnz	r4, 8009bde <__d2b+0x6c>
 8009b90:	9301      	str	r3, [sp, #4]
 8009b92:	f1b8 0300 	subs.w	r3, r8, #0
 8009b96:	d027      	beq.n	8009be8 <__d2b+0x76>
 8009b98:	a802      	add	r0, sp, #8
 8009b9a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009b9e:	f7ff fe01 	bl	80097a4 <__lo0bits>
 8009ba2:	9900      	ldr	r1, [sp, #0]
 8009ba4:	b1f0      	cbz	r0, 8009be4 <__d2b+0x72>
 8009ba6:	9a01      	ldr	r2, [sp, #4]
 8009ba8:	f1c0 0320 	rsb	r3, r0, #32
 8009bac:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb0:	430b      	orrs	r3, r1
 8009bb2:	40c2      	lsrs	r2, r0
 8009bb4:	617b      	str	r3, [r7, #20]
 8009bb6:	9201      	str	r2, [sp, #4]
 8009bb8:	9b01      	ldr	r3, [sp, #4]
 8009bba:	61bb      	str	r3, [r7, #24]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	bf14      	ite	ne
 8009bc0:	2102      	movne	r1, #2
 8009bc2:	2101      	moveq	r1, #1
 8009bc4:	6139      	str	r1, [r7, #16]
 8009bc6:	b1c4      	cbz	r4, 8009bfa <__d2b+0x88>
 8009bc8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009bcc:	4404      	add	r4, r0
 8009bce:	6034      	str	r4, [r6, #0]
 8009bd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009bd4:	6028      	str	r0, [r5, #0]
 8009bd6:	4638      	mov	r0, r7
 8009bd8:	b003      	add	sp, #12
 8009bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009be2:	e7d5      	b.n	8009b90 <__d2b+0x1e>
 8009be4:	6179      	str	r1, [r7, #20]
 8009be6:	e7e7      	b.n	8009bb8 <__d2b+0x46>
 8009be8:	a801      	add	r0, sp, #4
 8009bea:	f7ff fddb 	bl	80097a4 <__lo0bits>
 8009bee:	9b01      	ldr	r3, [sp, #4]
 8009bf0:	617b      	str	r3, [r7, #20]
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	6139      	str	r1, [r7, #16]
 8009bf6:	3020      	adds	r0, #32
 8009bf8:	e7e5      	b.n	8009bc6 <__d2b+0x54>
 8009bfa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009bfe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c02:	6030      	str	r0, [r6, #0]
 8009c04:	6918      	ldr	r0, [r3, #16]
 8009c06:	f7ff fdae 	bl	8009766 <__hi0bits>
 8009c0a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009c0e:	e7e1      	b.n	8009bd4 <__d2b+0x62>

08009c10 <_calloc_r>:
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	fb02 f401 	mul.w	r4, r2, r1
 8009c16:	4621      	mov	r1, r4
 8009c18:	f7fe f986 	bl	8007f28 <_malloc_r>
 8009c1c:	4605      	mov	r5, r0
 8009c1e:	b118      	cbz	r0, 8009c28 <_calloc_r+0x18>
 8009c20:	4622      	mov	r2, r4
 8009c22:	2100      	movs	r1, #0
 8009c24:	f7fe f92a 	bl	8007e7c <memset>
 8009c28:	4628      	mov	r0, r5
 8009c2a:	bd38      	pop	{r3, r4, r5, pc}

08009c2c <__ssputs_r>:
 8009c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c30:	688e      	ldr	r6, [r1, #8]
 8009c32:	429e      	cmp	r6, r3
 8009c34:	4682      	mov	sl, r0
 8009c36:	460c      	mov	r4, r1
 8009c38:	4690      	mov	r8, r2
 8009c3a:	4699      	mov	r9, r3
 8009c3c:	d837      	bhi.n	8009cae <__ssputs_r+0x82>
 8009c3e:	898a      	ldrh	r2, [r1, #12]
 8009c40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c44:	d031      	beq.n	8009caa <__ssputs_r+0x7e>
 8009c46:	6825      	ldr	r5, [r4, #0]
 8009c48:	6909      	ldr	r1, [r1, #16]
 8009c4a:	1a6f      	subs	r7, r5, r1
 8009c4c:	6965      	ldr	r5, [r4, #20]
 8009c4e:	2302      	movs	r3, #2
 8009c50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c54:	fb95 f5f3 	sdiv	r5, r5, r3
 8009c58:	f109 0301 	add.w	r3, r9, #1
 8009c5c:	443b      	add	r3, r7
 8009c5e:	429d      	cmp	r5, r3
 8009c60:	bf38      	it	cc
 8009c62:	461d      	movcc	r5, r3
 8009c64:	0553      	lsls	r3, r2, #21
 8009c66:	d530      	bpl.n	8009cca <__ssputs_r+0x9e>
 8009c68:	4629      	mov	r1, r5
 8009c6a:	f7fe f95d 	bl	8007f28 <_malloc_r>
 8009c6e:	4606      	mov	r6, r0
 8009c70:	b950      	cbnz	r0, 8009c88 <__ssputs_r+0x5c>
 8009c72:	230c      	movs	r3, #12
 8009c74:	f8ca 3000 	str.w	r3, [sl]
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c7e:	81a3      	strh	r3, [r4, #12]
 8009c80:	f04f 30ff 	mov.w	r0, #4294967295
 8009c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c88:	463a      	mov	r2, r7
 8009c8a:	6921      	ldr	r1, [r4, #16]
 8009c8c:	f7ff fcd8 	bl	8009640 <memcpy>
 8009c90:	89a3      	ldrh	r3, [r4, #12]
 8009c92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c9a:	81a3      	strh	r3, [r4, #12]
 8009c9c:	6126      	str	r6, [r4, #16]
 8009c9e:	6165      	str	r5, [r4, #20]
 8009ca0:	443e      	add	r6, r7
 8009ca2:	1bed      	subs	r5, r5, r7
 8009ca4:	6026      	str	r6, [r4, #0]
 8009ca6:	60a5      	str	r5, [r4, #8]
 8009ca8:	464e      	mov	r6, r9
 8009caa:	454e      	cmp	r6, r9
 8009cac:	d900      	bls.n	8009cb0 <__ssputs_r+0x84>
 8009cae:	464e      	mov	r6, r9
 8009cb0:	4632      	mov	r2, r6
 8009cb2:	4641      	mov	r1, r8
 8009cb4:	6820      	ldr	r0, [r4, #0]
 8009cb6:	f000 fca9 	bl	800a60c <memmove>
 8009cba:	68a3      	ldr	r3, [r4, #8]
 8009cbc:	1b9b      	subs	r3, r3, r6
 8009cbe:	60a3      	str	r3, [r4, #8]
 8009cc0:	6823      	ldr	r3, [r4, #0]
 8009cc2:	441e      	add	r6, r3
 8009cc4:	6026      	str	r6, [r4, #0]
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	e7dc      	b.n	8009c84 <__ssputs_r+0x58>
 8009cca:	462a      	mov	r2, r5
 8009ccc:	f000 fcb7 	bl	800a63e <_realloc_r>
 8009cd0:	4606      	mov	r6, r0
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d1e2      	bne.n	8009c9c <__ssputs_r+0x70>
 8009cd6:	6921      	ldr	r1, [r4, #16]
 8009cd8:	4650      	mov	r0, sl
 8009cda:	f7fe f8d7 	bl	8007e8c <_free_r>
 8009cde:	e7c8      	b.n	8009c72 <__ssputs_r+0x46>

08009ce0 <_svfiprintf_r>:
 8009ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce4:	461d      	mov	r5, r3
 8009ce6:	898b      	ldrh	r3, [r1, #12]
 8009ce8:	061f      	lsls	r7, r3, #24
 8009cea:	b09d      	sub	sp, #116	; 0x74
 8009cec:	4680      	mov	r8, r0
 8009cee:	460c      	mov	r4, r1
 8009cf0:	4616      	mov	r6, r2
 8009cf2:	d50f      	bpl.n	8009d14 <_svfiprintf_r+0x34>
 8009cf4:	690b      	ldr	r3, [r1, #16]
 8009cf6:	b96b      	cbnz	r3, 8009d14 <_svfiprintf_r+0x34>
 8009cf8:	2140      	movs	r1, #64	; 0x40
 8009cfa:	f7fe f915 	bl	8007f28 <_malloc_r>
 8009cfe:	6020      	str	r0, [r4, #0]
 8009d00:	6120      	str	r0, [r4, #16]
 8009d02:	b928      	cbnz	r0, 8009d10 <_svfiprintf_r+0x30>
 8009d04:	230c      	movs	r3, #12
 8009d06:	f8c8 3000 	str.w	r3, [r8]
 8009d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0e:	e0c8      	b.n	8009ea2 <_svfiprintf_r+0x1c2>
 8009d10:	2340      	movs	r3, #64	; 0x40
 8009d12:	6163      	str	r3, [r4, #20]
 8009d14:	2300      	movs	r3, #0
 8009d16:	9309      	str	r3, [sp, #36]	; 0x24
 8009d18:	2320      	movs	r3, #32
 8009d1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d1e:	2330      	movs	r3, #48	; 0x30
 8009d20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d24:	9503      	str	r5, [sp, #12]
 8009d26:	f04f 0b01 	mov.w	fp, #1
 8009d2a:	4637      	mov	r7, r6
 8009d2c:	463d      	mov	r5, r7
 8009d2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d32:	b10b      	cbz	r3, 8009d38 <_svfiprintf_r+0x58>
 8009d34:	2b25      	cmp	r3, #37	; 0x25
 8009d36:	d13e      	bne.n	8009db6 <_svfiprintf_r+0xd6>
 8009d38:	ebb7 0a06 	subs.w	sl, r7, r6
 8009d3c:	d00b      	beq.n	8009d56 <_svfiprintf_r+0x76>
 8009d3e:	4653      	mov	r3, sl
 8009d40:	4632      	mov	r2, r6
 8009d42:	4621      	mov	r1, r4
 8009d44:	4640      	mov	r0, r8
 8009d46:	f7ff ff71 	bl	8009c2c <__ssputs_r>
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	f000 80a4 	beq.w	8009e98 <_svfiprintf_r+0x1b8>
 8009d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d52:	4453      	add	r3, sl
 8009d54:	9309      	str	r3, [sp, #36]	; 0x24
 8009d56:	783b      	ldrb	r3, [r7, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f000 809d 	beq.w	8009e98 <_svfiprintf_r+0x1b8>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	f04f 32ff 	mov.w	r2, #4294967295
 8009d64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d68:	9304      	str	r3, [sp, #16]
 8009d6a:	9307      	str	r3, [sp, #28]
 8009d6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d70:	931a      	str	r3, [sp, #104]	; 0x68
 8009d72:	462f      	mov	r7, r5
 8009d74:	2205      	movs	r2, #5
 8009d76:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009d7a:	4850      	ldr	r0, [pc, #320]	; (8009ebc <_svfiprintf_r+0x1dc>)
 8009d7c:	f7f6 fab8 	bl	80002f0 <memchr>
 8009d80:	9b04      	ldr	r3, [sp, #16]
 8009d82:	b9d0      	cbnz	r0, 8009dba <_svfiprintf_r+0xda>
 8009d84:	06d9      	lsls	r1, r3, #27
 8009d86:	bf44      	itt	mi
 8009d88:	2220      	movmi	r2, #32
 8009d8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d8e:	071a      	lsls	r2, r3, #28
 8009d90:	bf44      	itt	mi
 8009d92:	222b      	movmi	r2, #43	; 0x2b
 8009d94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d98:	782a      	ldrb	r2, [r5, #0]
 8009d9a:	2a2a      	cmp	r2, #42	; 0x2a
 8009d9c:	d015      	beq.n	8009dca <_svfiprintf_r+0xea>
 8009d9e:	9a07      	ldr	r2, [sp, #28]
 8009da0:	462f      	mov	r7, r5
 8009da2:	2000      	movs	r0, #0
 8009da4:	250a      	movs	r5, #10
 8009da6:	4639      	mov	r1, r7
 8009da8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dac:	3b30      	subs	r3, #48	; 0x30
 8009dae:	2b09      	cmp	r3, #9
 8009db0:	d94d      	bls.n	8009e4e <_svfiprintf_r+0x16e>
 8009db2:	b1b8      	cbz	r0, 8009de4 <_svfiprintf_r+0x104>
 8009db4:	e00f      	b.n	8009dd6 <_svfiprintf_r+0xf6>
 8009db6:	462f      	mov	r7, r5
 8009db8:	e7b8      	b.n	8009d2c <_svfiprintf_r+0x4c>
 8009dba:	4a40      	ldr	r2, [pc, #256]	; (8009ebc <_svfiprintf_r+0x1dc>)
 8009dbc:	1a80      	subs	r0, r0, r2
 8009dbe:	fa0b f000 	lsl.w	r0, fp, r0
 8009dc2:	4318      	orrs	r0, r3
 8009dc4:	9004      	str	r0, [sp, #16]
 8009dc6:	463d      	mov	r5, r7
 8009dc8:	e7d3      	b.n	8009d72 <_svfiprintf_r+0x92>
 8009dca:	9a03      	ldr	r2, [sp, #12]
 8009dcc:	1d11      	adds	r1, r2, #4
 8009dce:	6812      	ldr	r2, [r2, #0]
 8009dd0:	9103      	str	r1, [sp, #12]
 8009dd2:	2a00      	cmp	r2, #0
 8009dd4:	db01      	blt.n	8009dda <_svfiprintf_r+0xfa>
 8009dd6:	9207      	str	r2, [sp, #28]
 8009dd8:	e004      	b.n	8009de4 <_svfiprintf_r+0x104>
 8009dda:	4252      	negs	r2, r2
 8009ddc:	f043 0302 	orr.w	r3, r3, #2
 8009de0:	9207      	str	r2, [sp, #28]
 8009de2:	9304      	str	r3, [sp, #16]
 8009de4:	783b      	ldrb	r3, [r7, #0]
 8009de6:	2b2e      	cmp	r3, #46	; 0x2e
 8009de8:	d10c      	bne.n	8009e04 <_svfiprintf_r+0x124>
 8009dea:	787b      	ldrb	r3, [r7, #1]
 8009dec:	2b2a      	cmp	r3, #42	; 0x2a
 8009dee:	d133      	bne.n	8009e58 <_svfiprintf_r+0x178>
 8009df0:	9b03      	ldr	r3, [sp, #12]
 8009df2:	1d1a      	adds	r2, r3, #4
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	9203      	str	r2, [sp, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	bfb8      	it	lt
 8009dfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e00:	3702      	adds	r7, #2
 8009e02:	9305      	str	r3, [sp, #20]
 8009e04:	4d2e      	ldr	r5, [pc, #184]	; (8009ec0 <_svfiprintf_r+0x1e0>)
 8009e06:	7839      	ldrb	r1, [r7, #0]
 8009e08:	2203      	movs	r2, #3
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	f7f6 fa70 	bl	80002f0 <memchr>
 8009e10:	b138      	cbz	r0, 8009e22 <_svfiprintf_r+0x142>
 8009e12:	2340      	movs	r3, #64	; 0x40
 8009e14:	1b40      	subs	r0, r0, r5
 8009e16:	fa03 f000 	lsl.w	r0, r3, r0
 8009e1a:	9b04      	ldr	r3, [sp, #16]
 8009e1c:	4303      	orrs	r3, r0
 8009e1e:	3701      	adds	r7, #1
 8009e20:	9304      	str	r3, [sp, #16]
 8009e22:	7839      	ldrb	r1, [r7, #0]
 8009e24:	4827      	ldr	r0, [pc, #156]	; (8009ec4 <_svfiprintf_r+0x1e4>)
 8009e26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e2a:	2206      	movs	r2, #6
 8009e2c:	1c7e      	adds	r6, r7, #1
 8009e2e:	f7f6 fa5f 	bl	80002f0 <memchr>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d038      	beq.n	8009ea8 <_svfiprintf_r+0x1c8>
 8009e36:	4b24      	ldr	r3, [pc, #144]	; (8009ec8 <_svfiprintf_r+0x1e8>)
 8009e38:	bb13      	cbnz	r3, 8009e80 <_svfiprintf_r+0x1a0>
 8009e3a:	9b03      	ldr	r3, [sp, #12]
 8009e3c:	3307      	adds	r3, #7
 8009e3e:	f023 0307 	bic.w	r3, r3, #7
 8009e42:	3308      	adds	r3, #8
 8009e44:	9303      	str	r3, [sp, #12]
 8009e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e48:	444b      	add	r3, r9
 8009e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e4c:	e76d      	b.n	8009d2a <_svfiprintf_r+0x4a>
 8009e4e:	fb05 3202 	mla	r2, r5, r2, r3
 8009e52:	2001      	movs	r0, #1
 8009e54:	460f      	mov	r7, r1
 8009e56:	e7a6      	b.n	8009da6 <_svfiprintf_r+0xc6>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	3701      	adds	r7, #1
 8009e5c:	9305      	str	r3, [sp, #20]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	250a      	movs	r5, #10
 8009e62:	4638      	mov	r0, r7
 8009e64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e68:	3a30      	subs	r2, #48	; 0x30
 8009e6a:	2a09      	cmp	r2, #9
 8009e6c:	d903      	bls.n	8009e76 <_svfiprintf_r+0x196>
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d0c8      	beq.n	8009e04 <_svfiprintf_r+0x124>
 8009e72:	9105      	str	r1, [sp, #20]
 8009e74:	e7c6      	b.n	8009e04 <_svfiprintf_r+0x124>
 8009e76:	fb05 2101 	mla	r1, r5, r1, r2
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	4607      	mov	r7, r0
 8009e7e:	e7f0      	b.n	8009e62 <_svfiprintf_r+0x182>
 8009e80:	ab03      	add	r3, sp, #12
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	4622      	mov	r2, r4
 8009e86:	4b11      	ldr	r3, [pc, #68]	; (8009ecc <_svfiprintf_r+0x1ec>)
 8009e88:	a904      	add	r1, sp, #16
 8009e8a:	4640      	mov	r0, r8
 8009e8c:	f7fe f92c 	bl	80080e8 <_printf_float>
 8009e90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009e94:	4681      	mov	r9, r0
 8009e96:	d1d6      	bne.n	8009e46 <_svfiprintf_r+0x166>
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	065b      	lsls	r3, r3, #25
 8009e9c:	f53f af35 	bmi.w	8009d0a <_svfiprintf_r+0x2a>
 8009ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ea2:	b01d      	add	sp, #116	; 0x74
 8009ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea8:	ab03      	add	r3, sp, #12
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	4622      	mov	r2, r4
 8009eae:	4b07      	ldr	r3, [pc, #28]	; (8009ecc <_svfiprintf_r+0x1ec>)
 8009eb0:	a904      	add	r1, sp, #16
 8009eb2:	4640      	mov	r0, r8
 8009eb4:	f7fe fbba 	bl	800862c <_printf_i>
 8009eb8:	e7ea      	b.n	8009e90 <_svfiprintf_r+0x1b0>
 8009eba:	bf00      	nop
 8009ebc:	0800b9c4 	.word	0x0800b9c4
 8009ec0:	0800b9ca 	.word	0x0800b9ca
 8009ec4:	0800b9ce 	.word	0x0800b9ce
 8009ec8:	080080e9 	.word	0x080080e9
 8009ecc:	08009c2d 	.word	0x08009c2d

08009ed0 <__sfputc_r>:
 8009ed0:	6893      	ldr	r3, [r2, #8]
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	b410      	push	{r4}
 8009ed8:	6093      	str	r3, [r2, #8]
 8009eda:	da08      	bge.n	8009eee <__sfputc_r+0x1e>
 8009edc:	6994      	ldr	r4, [r2, #24]
 8009ede:	42a3      	cmp	r3, r4
 8009ee0:	db01      	blt.n	8009ee6 <__sfputc_r+0x16>
 8009ee2:	290a      	cmp	r1, #10
 8009ee4:	d103      	bne.n	8009eee <__sfputc_r+0x1e>
 8009ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eea:	f000 b975 	b.w	800a1d8 <__swbuf_r>
 8009eee:	6813      	ldr	r3, [r2, #0]
 8009ef0:	1c58      	adds	r0, r3, #1
 8009ef2:	6010      	str	r0, [r2, #0]
 8009ef4:	7019      	strb	r1, [r3, #0]
 8009ef6:	4608      	mov	r0, r1
 8009ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009efc:	4770      	bx	lr

08009efe <__sfputs_r>:
 8009efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f00:	4606      	mov	r6, r0
 8009f02:	460f      	mov	r7, r1
 8009f04:	4614      	mov	r4, r2
 8009f06:	18d5      	adds	r5, r2, r3
 8009f08:	42ac      	cmp	r4, r5
 8009f0a:	d101      	bne.n	8009f10 <__sfputs_r+0x12>
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	e007      	b.n	8009f20 <__sfputs_r+0x22>
 8009f10:	463a      	mov	r2, r7
 8009f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f16:	4630      	mov	r0, r6
 8009f18:	f7ff ffda 	bl	8009ed0 <__sfputc_r>
 8009f1c:	1c43      	adds	r3, r0, #1
 8009f1e:	d1f3      	bne.n	8009f08 <__sfputs_r+0xa>
 8009f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f24 <_vfiprintf_r>:
 8009f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f28:	460c      	mov	r4, r1
 8009f2a:	b09d      	sub	sp, #116	; 0x74
 8009f2c:	4617      	mov	r7, r2
 8009f2e:	461d      	mov	r5, r3
 8009f30:	4606      	mov	r6, r0
 8009f32:	b118      	cbz	r0, 8009f3c <_vfiprintf_r+0x18>
 8009f34:	6983      	ldr	r3, [r0, #24]
 8009f36:	b90b      	cbnz	r3, 8009f3c <_vfiprintf_r+0x18>
 8009f38:	f7ff faea 	bl	8009510 <__sinit>
 8009f3c:	4b7c      	ldr	r3, [pc, #496]	; (800a130 <_vfiprintf_r+0x20c>)
 8009f3e:	429c      	cmp	r4, r3
 8009f40:	d158      	bne.n	8009ff4 <_vfiprintf_r+0xd0>
 8009f42:	6874      	ldr	r4, [r6, #4]
 8009f44:	89a3      	ldrh	r3, [r4, #12]
 8009f46:	0718      	lsls	r0, r3, #28
 8009f48:	d55e      	bpl.n	800a008 <_vfiprintf_r+0xe4>
 8009f4a:	6923      	ldr	r3, [r4, #16]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d05b      	beq.n	800a008 <_vfiprintf_r+0xe4>
 8009f50:	2300      	movs	r3, #0
 8009f52:	9309      	str	r3, [sp, #36]	; 0x24
 8009f54:	2320      	movs	r3, #32
 8009f56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f5a:	2330      	movs	r3, #48	; 0x30
 8009f5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f60:	9503      	str	r5, [sp, #12]
 8009f62:	f04f 0b01 	mov.w	fp, #1
 8009f66:	46b8      	mov	r8, r7
 8009f68:	4645      	mov	r5, r8
 8009f6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009f6e:	b10b      	cbz	r3, 8009f74 <_vfiprintf_r+0x50>
 8009f70:	2b25      	cmp	r3, #37	; 0x25
 8009f72:	d154      	bne.n	800a01e <_vfiprintf_r+0xfa>
 8009f74:	ebb8 0a07 	subs.w	sl, r8, r7
 8009f78:	d00b      	beq.n	8009f92 <_vfiprintf_r+0x6e>
 8009f7a:	4653      	mov	r3, sl
 8009f7c:	463a      	mov	r2, r7
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4630      	mov	r0, r6
 8009f82:	f7ff ffbc 	bl	8009efe <__sfputs_r>
 8009f86:	3001      	adds	r0, #1
 8009f88:	f000 80c2 	beq.w	800a110 <_vfiprintf_r+0x1ec>
 8009f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f8e:	4453      	add	r3, sl
 8009f90:	9309      	str	r3, [sp, #36]	; 0x24
 8009f92:	f898 3000 	ldrb.w	r3, [r8]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f000 80ba 	beq.w	800a110 <_vfiprintf_r+0x1ec>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fa6:	9304      	str	r3, [sp, #16]
 8009fa8:	9307      	str	r3, [sp, #28]
 8009faa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fae:	931a      	str	r3, [sp, #104]	; 0x68
 8009fb0:	46a8      	mov	r8, r5
 8009fb2:	2205      	movs	r2, #5
 8009fb4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009fb8:	485e      	ldr	r0, [pc, #376]	; (800a134 <_vfiprintf_r+0x210>)
 8009fba:	f7f6 f999 	bl	80002f0 <memchr>
 8009fbe:	9b04      	ldr	r3, [sp, #16]
 8009fc0:	bb78      	cbnz	r0, 800a022 <_vfiprintf_r+0xfe>
 8009fc2:	06d9      	lsls	r1, r3, #27
 8009fc4:	bf44      	itt	mi
 8009fc6:	2220      	movmi	r2, #32
 8009fc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009fcc:	071a      	lsls	r2, r3, #28
 8009fce:	bf44      	itt	mi
 8009fd0:	222b      	movmi	r2, #43	; 0x2b
 8009fd2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009fd6:	782a      	ldrb	r2, [r5, #0]
 8009fd8:	2a2a      	cmp	r2, #42	; 0x2a
 8009fda:	d02a      	beq.n	800a032 <_vfiprintf_r+0x10e>
 8009fdc:	9a07      	ldr	r2, [sp, #28]
 8009fde:	46a8      	mov	r8, r5
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	250a      	movs	r5, #10
 8009fe4:	4641      	mov	r1, r8
 8009fe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fea:	3b30      	subs	r3, #48	; 0x30
 8009fec:	2b09      	cmp	r3, #9
 8009fee:	d969      	bls.n	800a0c4 <_vfiprintf_r+0x1a0>
 8009ff0:	b360      	cbz	r0, 800a04c <_vfiprintf_r+0x128>
 8009ff2:	e024      	b.n	800a03e <_vfiprintf_r+0x11a>
 8009ff4:	4b50      	ldr	r3, [pc, #320]	; (800a138 <_vfiprintf_r+0x214>)
 8009ff6:	429c      	cmp	r4, r3
 8009ff8:	d101      	bne.n	8009ffe <_vfiprintf_r+0xda>
 8009ffa:	68b4      	ldr	r4, [r6, #8]
 8009ffc:	e7a2      	b.n	8009f44 <_vfiprintf_r+0x20>
 8009ffe:	4b4f      	ldr	r3, [pc, #316]	; (800a13c <_vfiprintf_r+0x218>)
 800a000:	429c      	cmp	r4, r3
 800a002:	bf08      	it	eq
 800a004:	68f4      	ldreq	r4, [r6, #12]
 800a006:	e79d      	b.n	8009f44 <_vfiprintf_r+0x20>
 800a008:	4621      	mov	r1, r4
 800a00a:	4630      	mov	r0, r6
 800a00c:	f000 f948 	bl	800a2a0 <__swsetup_r>
 800a010:	2800      	cmp	r0, #0
 800a012:	d09d      	beq.n	8009f50 <_vfiprintf_r+0x2c>
 800a014:	f04f 30ff 	mov.w	r0, #4294967295
 800a018:	b01d      	add	sp, #116	; 0x74
 800a01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a01e:	46a8      	mov	r8, r5
 800a020:	e7a2      	b.n	8009f68 <_vfiprintf_r+0x44>
 800a022:	4a44      	ldr	r2, [pc, #272]	; (800a134 <_vfiprintf_r+0x210>)
 800a024:	1a80      	subs	r0, r0, r2
 800a026:	fa0b f000 	lsl.w	r0, fp, r0
 800a02a:	4318      	orrs	r0, r3
 800a02c:	9004      	str	r0, [sp, #16]
 800a02e:	4645      	mov	r5, r8
 800a030:	e7be      	b.n	8009fb0 <_vfiprintf_r+0x8c>
 800a032:	9a03      	ldr	r2, [sp, #12]
 800a034:	1d11      	adds	r1, r2, #4
 800a036:	6812      	ldr	r2, [r2, #0]
 800a038:	9103      	str	r1, [sp, #12]
 800a03a:	2a00      	cmp	r2, #0
 800a03c:	db01      	blt.n	800a042 <_vfiprintf_r+0x11e>
 800a03e:	9207      	str	r2, [sp, #28]
 800a040:	e004      	b.n	800a04c <_vfiprintf_r+0x128>
 800a042:	4252      	negs	r2, r2
 800a044:	f043 0302 	orr.w	r3, r3, #2
 800a048:	9207      	str	r2, [sp, #28]
 800a04a:	9304      	str	r3, [sp, #16]
 800a04c:	f898 3000 	ldrb.w	r3, [r8]
 800a050:	2b2e      	cmp	r3, #46	; 0x2e
 800a052:	d10e      	bne.n	800a072 <_vfiprintf_r+0x14e>
 800a054:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a058:	2b2a      	cmp	r3, #42	; 0x2a
 800a05a:	d138      	bne.n	800a0ce <_vfiprintf_r+0x1aa>
 800a05c:	9b03      	ldr	r3, [sp, #12]
 800a05e:	1d1a      	adds	r2, r3, #4
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	9203      	str	r2, [sp, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	bfb8      	it	lt
 800a068:	f04f 33ff 	movlt.w	r3, #4294967295
 800a06c:	f108 0802 	add.w	r8, r8, #2
 800a070:	9305      	str	r3, [sp, #20]
 800a072:	4d33      	ldr	r5, [pc, #204]	; (800a140 <_vfiprintf_r+0x21c>)
 800a074:	f898 1000 	ldrb.w	r1, [r8]
 800a078:	2203      	movs	r2, #3
 800a07a:	4628      	mov	r0, r5
 800a07c:	f7f6 f938 	bl	80002f0 <memchr>
 800a080:	b140      	cbz	r0, 800a094 <_vfiprintf_r+0x170>
 800a082:	2340      	movs	r3, #64	; 0x40
 800a084:	1b40      	subs	r0, r0, r5
 800a086:	fa03 f000 	lsl.w	r0, r3, r0
 800a08a:	9b04      	ldr	r3, [sp, #16]
 800a08c:	4303      	orrs	r3, r0
 800a08e:	f108 0801 	add.w	r8, r8, #1
 800a092:	9304      	str	r3, [sp, #16]
 800a094:	f898 1000 	ldrb.w	r1, [r8]
 800a098:	482a      	ldr	r0, [pc, #168]	; (800a144 <_vfiprintf_r+0x220>)
 800a09a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a09e:	2206      	movs	r2, #6
 800a0a0:	f108 0701 	add.w	r7, r8, #1
 800a0a4:	f7f6 f924 	bl	80002f0 <memchr>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d037      	beq.n	800a11c <_vfiprintf_r+0x1f8>
 800a0ac:	4b26      	ldr	r3, [pc, #152]	; (800a148 <_vfiprintf_r+0x224>)
 800a0ae:	bb1b      	cbnz	r3, 800a0f8 <_vfiprintf_r+0x1d4>
 800a0b0:	9b03      	ldr	r3, [sp, #12]
 800a0b2:	3307      	adds	r3, #7
 800a0b4:	f023 0307 	bic.w	r3, r3, #7
 800a0b8:	3308      	adds	r3, #8
 800a0ba:	9303      	str	r3, [sp, #12]
 800a0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0be:	444b      	add	r3, r9
 800a0c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0c2:	e750      	b.n	8009f66 <_vfiprintf_r+0x42>
 800a0c4:	fb05 3202 	mla	r2, r5, r2, r3
 800a0c8:	2001      	movs	r0, #1
 800a0ca:	4688      	mov	r8, r1
 800a0cc:	e78a      	b.n	8009fe4 <_vfiprintf_r+0xc0>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f108 0801 	add.w	r8, r8, #1
 800a0d4:	9305      	str	r3, [sp, #20]
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	250a      	movs	r5, #10
 800a0da:	4640      	mov	r0, r8
 800a0dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0e0:	3a30      	subs	r2, #48	; 0x30
 800a0e2:	2a09      	cmp	r2, #9
 800a0e4:	d903      	bls.n	800a0ee <_vfiprintf_r+0x1ca>
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d0c3      	beq.n	800a072 <_vfiprintf_r+0x14e>
 800a0ea:	9105      	str	r1, [sp, #20]
 800a0ec:	e7c1      	b.n	800a072 <_vfiprintf_r+0x14e>
 800a0ee:	fb05 2101 	mla	r1, r5, r1, r2
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	4680      	mov	r8, r0
 800a0f6:	e7f0      	b.n	800a0da <_vfiprintf_r+0x1b6>
 800a0f8:	ab03      	add	r3, sp, #12
 800a0fa:	9300      	str	r3, [sp, #0]
 800a0fc:	4622      	mov	r2, r4
 800a0fe:	4b13      	ldr	r3, [pc, #76]	; (800a14c <_vfiprintf_r+0x228>)
 800a100:	a904      	add	r1, sp, #16
 800a102:	4630      	mov	r0, r6
 800a104:	f7fd fff0 	bl	80080e8 <_printf_float>
 800a108:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a10c:	4681      	mov	r9, r0
 800a10e:	d1d5      	bne.n	800a0bc <_vfiprintf_r+0x198>
 800a110:	89a3      	ldrh	r3, [r4, #12]
 800a112:	065b      	lsls	r3, r3, #25
 800a114:	f53f af7e 	bmi.w	800a014 <_vfiprintf_r+0xf0>
 800a118:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a11a:	e77d      	b.n	800a018 <_vfiprintf_r+0xf4>
 800a11c:	ab03      	add	r3, sp, #12
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	4622      	mov	r2, r4
 800a122:	4b0a      	ldr	r3, [pc, #40]	; (800a14c <_vfiprintf_r+0x228>)
 800a124:	a904      	add	r1, sp, #16
 800a126:	4630      	mov	r0, r6
 800a128:	f7fe fa80 	bl	800862c <_printf_i>
 800a12c:	e7ec      	b.n	800a108 <_vfiprintf_r+0x1e4>
 800a12e:	bf00      	nop
 800a130:	0800b888 	.word	0x0800b888
 800a134:	0800b9c4 	.word	0x0800b9c4
 800a138:	0800b8a8 	.word	0x0800b8a8
 800a13c:	0800b868 	.word	0x0800b868
 800a140:	0800b9ca 	.word	0x0800b9ca
 800a144:	0800b9ce 	.word	0x0800b9ce
 800a148:	080080e9 	.word	0x080080e9
 800a14c:	08009eff 	.word	0x08009eff

0800a150 <__sread>:
 800a150:	b510      	push	{r4, lr}
 800a152:	460c      	mov	r4, r1
 800a154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a158:	f000 fa98 	bl	800a68c <_read_r>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	bfab      	itete	ge
 800a160:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a162:	89a3      	ldrhlt	r3, [r4, #12]
 800a164:	181b      	addge	r3, r3, r0
 800a166:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a16a:	bfac      	ite	ge
 800a16c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a16e:	81a3      	strhlt	r3, [r4, #12]
 800a170:	bd10      	pop	{r4, pc}

0800a172 <__swrite>:
 800a172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a176:	461f      	mov	r7, r3
 800a178:	898b      	ldrh	r3, [r1, #12]
 800a17a:	05db      	lsls	r3, r3, #23
 800a17c:	4605      	mov	r5, r0
 800a17e:	460c      	mov	r4, r1
 800a180:	4616      	mov	r6, r2
 800a182:	d505      	bpl.n	800a190 <__swrite+0x1e>
 800a184:	2302      	movs	r3, #2
 800a186:	2200      	movs	r2, #0
 800a188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a18c:	f000 f9b6 	bl	800a4fc <_lseek_r>
 800a190:	89a3      	ldrh	r3, [r4, #12]
 800a192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a19a:	81a3      	strh	r3, [r4, #12]
 800a19c:	4632      	mov	r2, r6
 800a19e:	463b      	mov	r3, r7
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a6:	f000 b869 	b.w	800a27c <_write_r>

0800a1aa <__sseek>:
 800a1aa:	b510      	push	{r4, lr}
 800a1ac:	460c      	mov	r4, r1
 800a1ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b2:	f000 f9a3 	bl	800a4fc <_lseek_r>
 800a1b6:	1c43      	adds	r3, r0, #1
 800a1b8:	89a3      	ldrh	r3, [r4, #12]
 800a1ba:	bf15      	itete	ne
 800a1bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1c6:	81a3      	strheq	r3, [r4, #12]
 800a1c8:	bf18      	it	ne
 800a1ca:	81a3      	strhne	r3, [r4, #12]
 800a1cc:	bd10      	pop	{r4, pc}

0800a1ce <__sclose>:
 800a1ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d2:	f000 b8d3 	b.w	800a37c <_close_r>
	...

0800a1d8 <__swbuf_r>:
 800a1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1da:	460e      	mov	r6, r1
 800a1dc:	4614      	mov	r4, r2
 800a1de:	4605      	mov	r5, r0
 800a1e0:	b118      	cbz	r0, 800a1ea <__swbuf_r+0x12>
 800a1e2:	6983      	ldr	r3, [r0, #24]
 800a1e4:	b90b      	cbnz	r3, 800a1ea <__swbuf_r+0x12>
 800a1e6:	f7ff f993 	bl	8009510 <__sinit>
 800a1ea:	4b21      	ldr	r3, [pc, #132]	; (800a270 <__swbuf_r+0x98>)
 800a1ec:	429c      	cmp	r4, r3
 800a1ee:	d12a      	bne.n	800a246 <__swbuf_r+0x6e>
 800a1f0:	686c      	ldr	r4, [r5, #4]
 800a1f2:	69a3      	ldr	r3, [r4, #24]
 800a1f4:	60a3      	str	r3, [r4, #8]
 800a1f6:	89a3      	ldrh	r3, [r4, #12]
 800a1f8:	071a      	lsls	r2, r3, #28
 800a1fa:	d52e      	bpl.n	800a25a <__swbuf_r+0x82>
 800a1fc:	6923      	ldr	r3, [r4, #16]
 800a1fe:	b363      	cbz	r3, 800a25a <__swbuf_r+0x82>
 800a200:	6923      	ldr	r3, [r4, #16]
 800a202:	6820      	ldr	r0, [r4, #0]
 800a204:	1ac0      	subs	r0, r0, r3
 800a206:	6963      	ldr	r3, [r4, #20]
 800a208:	b2f6      	uxtb	r6, r6
 800a20a:	4283      	cmp	r3, r0
 800a20c:	4637      	mov	r7, r6
 800a20e:	dc04      	bgt.n	800a21a <__swbuf_r+0x42>
 800a210:	4621      	mov	r1, r4
 800a212:	4628      	mov	r0, r5
 800a214:	f000 f948 	bl	800a4a8 <_fflush_r>
 800a218:	bb28      	cbnz	r0, 800a266 <__swbuf_r+0x8e>
 800a21a:	68a3      	ldr	r3, [r4, #8]
 800a21c:	3b01      	subs	r3, #1
 800a21e:	60a3      	str	r3, [r4, #8]
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	1c5a      	adds	r2, r3, #1
 800a224:	6022      	str	r2, [r4, #0]
 800a226:	701e      	strb	r6, [r3, #0]
 800a228:	6963      	ldr	r3, [r4, #20]
 800a22a:	3001      	adds	r0, #1
 800a22c:	4283      	cmp	r3, r0
 800a22e:	d004      	beq.n	800a23a <__swbuf_r+0x62>
 800a230:	89a3      	ldrh	r3, [r4, #12]
 800a232:	07db      	lsls	r3, r3, #31
 800a234:	d519      	bpl.n	800a26a <__swbuf_r+0x92>
 800a236:	2e0a      	cmp	r6, #10
 800a238:	d117      	bne.n	800a26a <__swbuf_r+0x92>
 800a23a:	4621      	mov	r1, r4
 800a23c:	4628      	mov	r0, r5
 800a23e:	f000 f933 	bl	800a4a8 <_fflush_r>
 800a242:	b190      	cbz	r0, 800a26a <__swbuf_r+0x92>
 800a244:	e00f      	b.n	800a266 <__swbuf_r+0x8e>
 800a246:	4b0b      	ldr	r3, [pc, #44]	; (800a274 <__swbuf_r+0x9c>)
 800a248:	429c      	cmp	r4, r3
 800a24a:	d101      	bne.n	800a250 <__swbuf_r+0x78>
 800a24c:	68ac      	ldr	r4, [r5, #8]
 800a24e:	e7d0      	b.n	800a1f2 <__swbuf_r+0x1a>
 800a250:	4b09      	ldr	r3, [pc, #36]	; (800a278 <__swbuf_r+0xa0>)
 800a252:	429c      	cmp	r4, r3
 800a254:	bf08      	it	eq
 800a256:	68ec      	ldreq	r4, [r5, #12]
 800a258:	e7cb      	b.n	800a1f2 <__swbuf_r+0x1a>
 800a25a:	4621      	mov	r1, r4
 800a25c:	4628      	mov	r0, r5
 800a25e:	f000 f81f 	bl	800a2a0 <__swsetup_r>
 800a262:	2800      	cmp	r0, #0
 800a264:	d0cc      	beq.n	800a200 <__swbuf_r+0x28>
 800a266:	f04f 37ff 	mov.w	r7, #4294967295
 800a26a:	4638      	mov	r0, r7
 800a26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a26e:	bf00      	nop
 800a270:	0800b888 	.word	0x0800b888
 800a274:	0800b8a8 	.word	0x0800b8a8
 800a278:	0800b868 	.word	0x0800b868

0800a27c <_write_r>:
 800a27c:	b538      	push	{r3, r4, r5, lr}
 800a27e:	4c07      	ldr	r4, [pc, #28]	; (800a29c <_write_r+0x20>)
 800a280:	4605      	mov	r5, r0
 800a282:	4608      	mov	r0, r1
 800a284:	4611      	mov	r1, r2
 800a286:	2200      	movs	r2, #0
 800a288:	6022      	str	r2, [r4, #0]
 800a28a:	461a      	mov	r2, r3
 800a28c:	f7f8 fc11 	bl	8002ab2 <_write>
 800a290:	1c43      	adds	r3, r0, #1
 800a292:	d102      	bne.n	800a29a <_write_r+0x1e>
 800a294:	6823      	ldr	r3, [r4, #0]
 800a296:	b103      	cbz	r3, 800a29a <_write_r+0x1e>
 800a298:	602b      	str	r3, [r5, #0]
 800a29a:	bd38      	pop	{r3, r4, r5, pc}
 800a29c:	200003b8 	.word	0x200003b8

0800a2a0 <__swsetup_r>:
 800a2a0:	4b32      	ldr	r3, [pc, #200]	; (800a36c <__swsetup_r+0xcc>)
 800a2a2:	b570      	push	{r4, r5, r6, lr}
 800a2a4:	681d      	ldr	r5, [r3, #0]
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	460c      	mov	r4, r1
 800a2aa:	b125      	cbz	r5, 800a2b6 <__swsetup_r+0x16>
 800a2ac:	69ab      	ldr	r3, [r5, #24]
 800a2ae:	b913      	cbnz	r3, 800a2b6 <__swsetup_r+0x16>
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	f7ff f92d 	bl	8009510 <__sinit>
 800a2b6:	4b2e      	ldr	r3, [pc, #184]	; (800a370 <__swsetup_r+0xd0>)
 800a2b8:	429c      	cmp	r4, r3
 800a2ba:	d10f      	bne.n	800a2dc <__swsetup_r+0x3c>
 800a2bc:	686c      	ldr	r4, [r5, #4]
 800a2be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	0715      	lsls	r5, r2, #28
 800a2c6:	d42c      	bmi.n	800a322 <__swsetup_r+0x82>
 800a2c8:	06d0      	lsls	r0, r2, #27
 800a2ca:	d411      	bmi.n	800a2f0 <__swsetup_r+0x50>
 800a2cc:	2209      	movs	r2, #9
 800a2ce:	6032      	str	r2, [r6, #0]
 800a2d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2d4:	81a3      	strh	r3, [r4, #12]
 800a2d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2da:	e03e      	b.n	800a35a <__swsetup_r+0xba>
 800a2dc:	4b25      	ldr	r3, [pc, #148]	; (800a374 <__swsetup_r+0xd4>)
 800a2de:	429c      	cmp	r4, r3
 800a2e0:	d101      	bne.n	800a2e6 <__swsetup_r+0x46>
 800a2e2:	68ac      	ldr	r4, [r5, #8]
 800a2e4:	e7eb      	b.n	800a2be <__swsetup_r+0x1e>
 800a2e6:	4b24      	ldr	r3, [pc, #144]	; (800a378 <__swsetup_r+0xd8>)
 800a2e8:	429c      	cmp	r4, r3
 800a2ea:	bf08      	it	eq
 800a2ec:	68ec      	ldreq	r4, [r5, #12]
 800a2ee:	e7e6      	b.n	800a2be <__swsetup_r+0x1e>
 800a2f0:	0751      	lsls	r1, r2, #29
 800a2f2:	d512      	bpl.n	800a31a <__swsetup_r+0x7a>
 800a2f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2f6:	b141      	cbz	r1, 800a30a <__swsetup_r+0x6a>
 800a2f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2fc:	4299      	cmp	r1, r3
 800a2fe:	d002      	beq.n	800a306 <__swsetup_r+0x66>
 800a300:	4630      	mov	r0, r6
 800a302:	f7fd fdc3 	bl	8007e8c <_free_r>
 800a306:	2300      	movs	r3, #0
 800a308:	6363      	str	r3, [r4, #52]	; 0x34
 800a30a:	89a3      	ldrh	r3, [r4, #12]
 800a30c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a310:	81a3      	strh	r3, [r4, #12]
 800a312:	2300      	movs	r3, #0
 800a314:	6063      	str	r3, [r4, #4]
 800a316:	6923      	ldr	r3, [r4, #16]
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	89a3      	ldrh	r3, [r4, #12]
 800a31c:	f043 0308 	orr.w	r3, r3, #8
 800a320:	81a3      	strh	r3, [r4, #12]
 800a322:	6923      	ldr	r3, [r4, #16]
 800a324:	b94b      	cbnz	r3, 800a33a <__swsetup_r+0x9a>
 800a326:	89a3      	ldrh	r3, [r4, #12]
 800a328:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a32c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a330:	d003      	beq.n	800a33a <__swsetup_r+0x9a>
 800a332:	4621      	mov	r1, r4
 800a334:	4630      	mov	r0, r6
 800a336:	f000 f917 	bl	800a568 <__smakebuf_r>
 800a33a:	89a2      	ldrh	r2, [r4, #12]
 800a33c:	f012 0301 	ands.w	r3, r2, #1
 800a340:	d00c      	beq.n	800a35c <__swsetup_r+0xbc>
 800a342:	2300      	movs	r3, #0
 800a344:	60a3      	str	r3, [r4, #8]
 800a346:	6963      	ldr	r3, [r4, #20]
 800a348:	425b      	negs	r3, r3
 800a34a:	61a3      	str	r3, [r4, #24]
 800a34c:	6923      	ldr	r3, [r4, #16]
 800a34e:	b953      	cbnz	r3, 800a366 <__swsetup_r+0xc6>
 800a350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a354:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a358:	d1ba      	bne.n	800a2d0 <__swsetup_r+0x30>
 800a35a:	bd70      	pop	{r4, r5, r6, pc}
 800a35c:	0792      	lsls	r2, r2, #30
 800a35e:	bf58      	it	pl
 800a360:	6963      	ldrpl	r3, [r4, #20]
 800a362:	60a3      	str	r3, [r4, #8]
 800a364:	e7f2      	b.n	800a34c <__swsetup_r+0xac>
 800a366:	2000      	movs	r0, #0
 800a368:	e7f7      	b.n	800a35a <__swsetup_r+0xba>
 800a36a:	bf00      	nop
 800a36c:	20000010 	.word	0x20000010
 800a370:	0800b888 	.word	0x0800b888
 800a374:	0800b8a8 	.word	0x0800b8a8
 800a378:	0800b868 	.word	0x0800b868

0800a37c <_close_r>:
 800a37c:	b538      	push	{r3, r4, r5, lr}
 800a37e:	4c06      	ldr	r4, [pc, #24]	; (800a398 <_close_r+0x1c>)
 800a380:	2300      	movs	r3, #0
 800a382:	4605      	mov	r5, r0
 800a384:	4608      	mov	r0, r1
 800a386:	6023      	str	r3, [r4, #0]
 800a388:	f7f8 fbaf 	bl	8002aea <_close>
 800a38c:	1c43      	adds	r3, r0, #1
 800a38e:	d102      	bne.n	800a396 <_close_r+0x1a>
 800a390:	6823      	ldr	r3, [r4, #0]
 800a392:	b103      	cbz	r3, 800a396 <_close_r+0x1a>
 800a394:	602b      	str	r3, [r5, #0]
 800a396:	bd38      	pop	{r3, r4, r5, pc}
 800a398:	200003b8 	.word	0x200003b8

0800a39c <__sflush_r>:
 800a39c:	898a      	ldrh	r2, [r1, #12]
 800a39e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a2:	4605      	mov	r5, r0
 800a3a4:	0710      	lsls	r0, r2, #28
 800a3a6:	460c      	mov	r4, r1
 800a3a8:	d458      	bmi.n	800a45c <__sflush_r+0xc0>
 800a3aa:	684b      	ldr	r3, [r1, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	dc05      	bgt.n	800a3bc <__sflush_r+0x20>
 800a3b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	dc02      	bgt.n	800a3bc <__sflush_r+0x20>
 800a3b6:	2000      	movs	r0, #0
 800a3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3be:	2e00      	cmp	r6, #0
 800a3c0:	d0f9      	beq.n	800a3b6 <__sflush_r+0x1a>
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3c8:	682f      	ldr	r7, [r5, #0]
 800a3ca:	6a21      	ldr	r1, [r4, #32]
 800a3cc:	602b      	str	r3, [r5, #0]
 800a3ce:	d032      	beq.n	800a436 <__sflush_r+0x9a>
 800a3d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3d2:	89a3      	ldrh	r3, [r4, #12]
 800a3d4:	075a      	lsls	r2, r3, #29
 800a3d6:	d505      	bpl.n	800a3e4 <__sflush_r+0x48>
 800a3d8:	6863      	ldr	r3, [r4, #4]
 800a3da:	1ac0      	subs	r0, r0, r3
 800a3dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3de:	b10b      	cbz	r3, 800a3e4 <__sflush_r+0x48>
 800a3e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3e2:	1ac0      	subs	r0, r0, r3
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3ea:	6a21      	ldr	r1, [r4, #32]
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	47b0      	blx	r6
 800a3f0:	1c43      	adds	r3, r0, #1
 800a3f2:	89a3      	ldrh	r3, [r4, #12]
 800a3f4:	d106      	bne.n	800a404 <__sflush_r+0x68>
 800a3f6:	6829      	ldr	r1, [r5, #0]
 800a3f8:	291d      	cmp	r1, #29
 800a3fa:	d848      	bhi.n	800a48e <__sflush_r+0xf2>
 800a3fc:	4a29      	ldr	r2, [pc, #164]	; (800a4a4 <__sflush_r+0x108>)
 800a3fe:	40ca      	lsrs	r2, r1
 800a400:	07d6      	lsls	r6, r2, #31
 800a402:	d544      	bpl.n	800a48e <__sflush_r+0xf2>
 800a404:	2200      	movs	r2, #0
 800a406:	6062      	str	r2, [r4, #4]
 800a408:	04d9      	lsls	r1, r3, #19
 800a40a:	6922      	ldr	r2, [r4, #16]
 800a40c:	6022      	str	r2, [r4, #0]
 800a40e:	d504      	bpl.n	800a41a <__sflush_r+0x7e>
 800a410:	1c42      	adds	r2, r0, #1
 800a412:	d101      	bne.n	800a418 <__sflush_r+0x7c>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	b903      	cbnz	r3, 800a41a <__sflush_r+0x7e>
 800a418:	6560      	str	r0, [r4, #84]	; 0x54
 800a41a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a41c:	602f      	str	r7, [r5, #0]
 800a41e:	2900      	cmp	r1, #0
 800a420:	d0c9      	beq.n	800a3b6 <__sflush_r+0x1a>
 800a422:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a426:	4299      	cmp	r1, r3
 800a428:	d002      	beq.n	800a430 <__sflush_r+0x94>
 800a42a:	4628      	mov	r0, r5
 800a42c:	f7fd fd2e 	bl	8007e8c <_free_r>
 800a430:	2000      	movs	r0, #0
 800a432:	6360      	str	r0, [r4, #52]	; 0x34
 800a434:	e7c0      	b.n	800a3b8 <__sflush_r+0x1c>
 800a436:	2301      	movs	r3, #1
 800a438:	4628      	mov	r0, r5
 800a43a:	47b0      	blx	r6
 800a43c:	1c41      	adds	r1, r0, #1
 800a43e:	d1c8      	bne.n	800a3d2 <__sflush_r+0x36>
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d0c5      	beq.n	800a3d2 <__sflush_r+0x36>
 800a446:	2b1d      	cmp	r3, #29
 800a448:	d001      	beq.n	800a44e <__sflush_r+0xb2>
 800a44a:	2b16      	cmp	r3, #22
 800a44c:	d101      	bne.n	800a452 <__sflush_r+0xb6>
 800a44e:	602f      	str	r7, [r5, #0]
 800a450:	e7b1      	b.n	800a3b6 <__sflush_r+0x1a>
 800a452:	89a3      	ldrh	r3, [r4, #12]
 800a454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a458:	81a3      	strh	r3, [r4, #12]
 800a45a:	e7ad      	b.n	800a3b8 <__sflush_r+0x1c>
 800a45c:	690f      	ldr	r7, [r1, #16]
 800a45e:	2f00      	cmp	r7, #0
 800a460:	d0a9      	beq.n	800a3b6 <__sflush_r+0x1a>
 800a462:	0793      	lsls	r3, r2, #30
 800a464:	680e      	ldr	r6, [r1, #0]
 800a466:	bf08      	it	eq
 800a468:	694b      	ldreq	r3, [r1, #20]
 800a46a:	600f      	str	r7, [r1, #0]
 800a46c:	bf18      	it	ne
 800a46e:	2300      	movne	r3, #0
 800a470:	eba6 0807 	sub.w	r8, r6, r7
 800a474:	608b      	str	r3, [r1, #8]
 800a476:	f1b8 0f00 	cmp.w	r8, #0
 800a47a:	dd9c      	ble.n	800a3b6 <__sflush_r+0x1a>
 800a47c:	4643      	mov	r3, r8
 800a47e:	463a      	mov	r2, r7
 800a480:	6a21      	ldr	r1, [r4, #32]
 800a482:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a484:	4628      	mov	r0, r5
 800a486:	47b0      	blx	r6
 800a488:	2800      	cmp	r0, #0
 800a48a:	dc06      	bgt.n	800a49a <__sflush_r+0xfe>
 800a48c:	89a3      	ldrh	r3, [r4, #12]
 800a48e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a492:	81a3      	strh	r3, [r4, #12]
 800a494:	f04f 30ff 	mov.w	r0, #4294967295
 800a498:	e78e      	b.n	800a3b8 <__sflush_r+0x1c>
 800a49a:	4407      	add	r7, r0
 800a49c:	eba8 0800 	sub.w	r8, r8, r0
 800a4a0:	e7e9      	b.n	800a476 <__sflush_r+0xda>
 800a4a2:	bf00      	nop
 800a4a4:	20400001 	.word	0x20400001

0800a4a8 <_fflush_r>:
 800a4a8:	b538      	push	{r3, r4, r5, lr}
 800a4aa:	690b      	ldr	r3, [r1, #16]
 800a4ac:	4605      	mov	r5, r0
 800a4ae:	460c      	mov	r4, r1
 800a4b0:	b1db      	cbz	r3, 800a4ea <_fflush_r+0x42>
 800a4b2:	b118      	cbz	r0, 800a4bc <_fflush_r+0x14>
 800a4b4:	6983      	ldr	r3, [r0, #24]
 800a4b6:	b90b      	cbnz	r3, 800a4bc <_fflush_r+0x14>
 800a4b8:	f7ff f82a 	bl	8009510 <__sinit>
 800a4bc:	4b0c      	ldr	r3, [pc, #48]	; (800a4f0 <_fflush_r+0x48>)
 800a4be:	429c      	cmp	r4, r3
 800a4c0:	d109      	bne.n	800a4d6 <_fflush_r+0x2e>
 800a4c2:	686c      	ldr	r4, [r5, #4]
 800a4c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4c8:	b17b      	cbz	r3, 800a4ea <_fflush_r+0x42>
 800a4ca:	4621      	mov	r1, r4
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4d2:	f7ff bf63 	b.w	800a39c <__sflush_r>
 800a4d6:	4b07      	ldr	r3, [pc, #28]	; (800a4f4 <_fflush_r+0x4c>)
 800a4d8:	429c      	cmp	r4, r3
 800a4da:	d101      	bne.n	800a4e0 <_fflush_r+0x38>
 800a4dc:	68ac      	ldr	r4, [r5, #8]
 800a4de:	e7f1      	b.n	800a4c4 <_fflush_r+0x1c>
 800a4e0:	4b05      	ldr	r3, [pc, #20]	; (800a4f8 <_fflush_r+0x50>)
 800a4e2:	429c      	cmp	r4, r3
 800a4e4:	bf08      	it	eq
 800a4e6:	68ec      	ldreq	r4, [r5, #12]
 800a4e8:	e7ec      	b.n	800a4c4 <_fflush_r+0x1c>
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	bd38      	pop	{r3, r4, r5, pc}
 800a4ee:	bf00      	nop
 800a4f0:	0800b888 	.word	0x0800b888
 800a4f4:	0800b8a8 	.word	0x0800b8a8
 800a4f8:	0800b868 	.word	0x0800b868

0800a4fc <_lseek_r>:
 800a4fc:	b538      	push	{r3, r4, r5, lr}
 800a4fe:	4c07      	ldr	r4, [pc, #28]	; (800a51c <_lseek_r+0x20>)
 800a500:	4605      	mov	r5, r0
 800a502:	4608      	mov	r0, r1
 800a504:	4611      	mov	r1, r2
 800a506:	2200      	movs	r2, #0
 800a508:	6022      	str	r2, [r4, #0]
 800a50a:	461a      	mov	r2, r3
 800a50c:	f7f8 fb14 	bl	8002b38 <_lseek>
 800a510:	1c43      	adds	r3, r0, #1
 800a512:	d102      	bne.n	800a51a <_lseek_r+0x1e>
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	b103      	cbz	r3, 800a51a <_lseek_r+0x1e>
 800a518:	602b      	str	r3, [r5, #0]
 800a51a:	bd38      	pop	{r3, r4, r5, pc}
 800a51c:	200003b8 	.word	0x200003b8

0800a520 <__swhatbuf_r>:
 800a520:	b570      	push	{r4, r5, r6, lr}
 800a522:	460e      	mov	r6, r1
 800a524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a528:	2900      	cmp	r1, #0
 800a52a:	b096      	sub	sp, #88	; 0x58
 800a52c:	4614      	mov	r4, r2
 800a52e:	461d      	mov	r5, r3
 800a530:	da07      	bge.n	800a542 <__swhatbuf_r+0x22>
 800a532:	2300      	movs	r3, #0
 800a534:	602b      	str	r3, [r5, #0]
 800a536:	89b3      	ldrh	r3, [r6, #12]
 800a538:	061a      	lsls	r2, r3, #24
 800a53a:	d410      	bmi.n	800a55e <__swhatbuf_r+0x3e>
 800a53c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a540:	e00e      	b.n	800a560 <__swhatbuf_r+0x40>
 800a542:	466a      	mov	r2, sp
 800a544:	f000 f8c2 	bl	800a6cc <_fstat_r>
 800a548:	2800      	cmp	r0, #0
 800a54a:	dbf2      	blt.n	800a532 <__swhatbuf_r+0x12>
 800a54c:	9a01      	ldr	r2, [sp, #4]
 800a54e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a552:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a556:	425a      	negs	r2, r3
 800a558:	415a      	adcs	r2, r3
 800a55a:	602a      	str	r2, [r5, #0]
 800a55c:	e7ee      	b.n	800a53c <__swhatbuf_r+0x1c>
 800a55e:	2340      	movs	r3, #64	; 0x40
 800a560:	2000      	movs	r0, #0
 800a562:	6023      	str	r3, [r4, #0]
 800a564:	b016      	add	sp, #88	; 0x58
 800a566:	bd70      	pop	{r4, r5, r6, pc}

0800a568 <__smakebuf_r>:
 800a568:	898b      	ldrh	r3, [r1, #12]
 800a56a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a56c:	079d      	lsls	r5, r3, #30
 800a56e:	4606      	mov	r6, r0
 800a570:	460c      	mov	r4, r1
 800a572:	d507      	bpl.n	800a584 <__smakebuf_r+0x1c>
 800a574:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a578:	6023      	str	r3, [r4, #0]
 800a57a:	6123      	str	r3, [r4, #16]
 800a57c:	2301      	movs	r3, #1
 800a57e:	6163      	str	r3, [r4, #20]
 800a580:	b002      	add	sp, #8
 800a582:	bd70      	pop	{r4, r5, r6, pc}
 800a584:	ab01      	add	r3, sp, #4
 800a586:	466a      	mov	r2, sp
 800a588:	f7ff ffca 	bl	800a520 <__swhatbuf_r>
 800a58c:	9900      	ldr	r1, [sp, #0]
 800a58e:	4605      	mov	r5, r0
 800a590:	4630      	mov	r0, r6
 800a592:	f7fd fcc9 	bl	8007f28 <_malloc_r>
 800a596:	b948      	cbnz	r0, 800a5ac <__smakebuf_r+0x44>
 800a598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a59c:	059a      	lsls	r2, r3, #22
 800a59e:	d4ef      	bmi.n	800a580 <__smakebuf_r+0x18>
 800a5a0:	f023 0303 	bic.w	r3, r3, #3
 800a5a4:	f043 0302 	orr.w	r3, r3, #2
 800a5a8:	81a3      	strh	r3, [r4, #12]
 800a5aa:	e7e3      	b.n	800a574 <__smakebuf_r+0xc>
 800a5ac:	4b0d      	ldr	r3, [pc, #52]	; (800a5e4 <__smakebuf_r+0x7c>)
 800a5ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800a5b0:	89a3      	ldrh	r3, [r4, #12]
 800a5b2:	6020      	str	r0, [r4, #0]
 800a5b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5b8:	81a3      	strh	r3, [r4, #12]
 800a5ba:	9b00      	ldr	r3, [sp, #0]
 800a5bc:	6163      	str	r3, [r4, #20]
 800a5be:	9b01      	ldr	r3, [sp, #4]
 800a5c0:	6120      	str	r0, [r4, #16]
 800a5c2:	b15b      	cbz	r3, 800a5dc <__smakebuf_r+0x74>
 800a5c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	f000 f891 	bl	800a6f0 <_isatty_r>
 800a5ce:	b128      	cbz	r0, 800a5dc <__smakebuf_r+0x74>
 800a5d0:	89a3      	ldrh	r3, [r4, #12]
 800a5d2:	f023 0303 	bic.w	r3, r3, #3
 800a5d6:	f043 0301 	orr.w	r3, r3, #1
 800a5da:	81a3      	strh	r3, [r4, #12]
 800a5dc:	89a3      	ldrh	r3, [r4, #12]
 800a5de:	431d      	orrs	r5, r3
 800a5e0:	81a5      	strh	r5, [r4, #12]
 800a5e2:	e7cd      	b.n	800a580 <__smakebuf_r+0x18>
 800a5e4:	080094d9 	.word	0x080094d9

0800a5e8 <__ascii_mbtowc>:
 800a5e8:	b082      	sub	sp, #8
 800a5ea:	b901      	cbnz	r1, 800a5ee <__ascii_mbtowc+0x6>
 800a5ec:	a901      	add	r1, sp, #4
 800a5ee:	b142      	cbz	r2, 800a602 <__ascii_mbtowc+0x1a>
 800a5f0:	b14b      	cbz	r3, 800a606 <__ascii_mbtowc+0x1e>
 800a5f2:	7813      	ldrb	r3, [r2, #0]
 800a5f4:	600b      	str	r3, [r1, #0]
 800a5f6:	7812      	ldrb	r2, [r2, #0]
 800a5f8:	1c10      	adds	r0, r2, #0
 800a5fa:	bf18      	it	ne
 800a5fc:	2001      	movne	r0, #1
 800a5fe:	b002      	add	sp, #8
 800a600:	4770      	bx	lr
 800a602:	4610      	mov	r0, r2
 800a604:	e7fb      	b.n	800a5fe <__ascii_mbtowc+0x16>
 800a606:	f06f 0001 	mvn.w	r0, #1
 800a60a:	e7f8      	b.n	800a5fe <__ascii_mbtowc+0x16>

0800a60c <memmove>:
 800a60c:	4288      	cmp	r0, r1
 800a60e:	b510      	push	{r4, lr}
 800a610:	eb01 0302 	add.w	r3, r1, r2
 800a614:	d807      	bhi.n	800a626 <memmove+0x1a>
 800a616:	1e42      	subs	r2, r0, #1
 800a618:	4299      	cmp	r1, r3
 800a61a:	d00a      	beq.n	800a632 <memmove+0x26>
 800a61c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a620:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a624:	e7f8      	b.n	800a618 <memmove+0xc>
 800a626:	4283      	cmp	r3, r0
 800a628:	d9f5      	bls.n	800a616 <memmove+0xa>
 800a62a:	1881      	adds	r1, r0, r2
 800a62c:	1ad2      	subs	r2, r2, r3
 800a62e:	42d3      	cmn	r3, r2
 800a630:	d100      	bne.n	800a634 <memmove+0x28>
 800a632:	bd10      	pop	{r4, pc}
 800a634:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a638:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a63c:	e7f7      	b.n	800a62e <memmove+0x22>

0800a63e <_realloc_r>:
 800a63e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a640:	4607      	mov	r7, r0
 800a642:	4614      	mov	r4, r2
 800a644:	460e      	mov	r6, r1
 800a646:	b921      	cbnz	r1, 800a652 <_realloc_r+0x14>
 800a648:	4611      	mov	r1, r2
 800a64a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a64e:	f7fd bc6b 	b.w	8007f28 <_malloc_r>
 800a652:	b922      	cbnz	r2, 800a65e <_realloc_r+0x20>
 800a654:	f7fd fc1a 	bl	8007e8c <_free_r>
 800a658:	4625      	mov	r5, r4
 800a65a:	4628      	mov	r0, r5
 800a65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a65e:	f000 f857 	bl	800a710 <_malloc_usable_size_r>
 800a662:	42a0      	cmp	r0, r4
 800a664:	d20f      	bcs.n	800a686 <_realloc_r+0x48>
 800a666:	4621      	mov	r1, r4
 800a668:	4638      	mov	r0, r7
 800a66a:	f7fd fc5d 	bl	8007f28 <_malloc_r>
 800a66e:	4605      	mov	r5, r0
 800a670:	2800      	cmp	r0, #0
 800a672:	d0f2      	beq.n	800a65a <_realloc_r+0x1c>
 800a674:	4631      	mov	r1, r6
 800a676:	4622      	mov	r2, r4
 800a678:	f7fe ffe2 	bl	8009640 <memcpy>
 800a67c:	4631      	mov	r1, r6
 800a67e:	4638      	mov	r0, r7
 800a680:	f7fd fc04 	bl	8007e8c <_free_r>
 800a684:	e7e9      	b.n	800a65a <_realloc_r+0x1c>
 800a686:	4635      	mov	r5, r6
 800a688:	e7e7      	b.n	800a65a <_realloc_r+0x1c>
	...

0800a68c <_read_r>:
 800a68c:	b538      	push	{r3, r4, r5, lr}
 800a68e:	4c07      	ldr	r4, [pc, #28]	; (800a6ac <_read_r+0x20>)
 800a690:	4605      	mov	r5, r0
 800a692:	4608      	mov	r0, r1
 800a694:	4611      	mov	r1, r2
 800a696:	2200      	movs	r2, #0
 800a698:	6022      	str	r2, [r4, #0]
 800a69a:	461a      	mov	r2, r3
 800a69c:	f7f8 f9ec 	bl	8002a78 <_read>
 800a6a0:	1c43      	adds	r3, r0, #1
 800a6a2:	d102      	bne.n	800a6aa <_read_r+0x1e>
 800a6a4:	6823      	ldr	r3, [r4, #0]
 800a6a6:	b103      	cbz	r3, 800a6aa <_read_r+0x1e>
 800a6a8:	602b      	str	r3, [r5, #0]
 800a6aa:	bd38      	pop	{r3, r4, r5, pc}
 800a6ac:	200003b8 	.word	0x200003b8

0800a6b0 <__ascii_wctomb>:
 800a6b0:	b149      	cbz	r1, 800a6c6 <__ascii_wctomb+0x16>
 800a6b2:	2aff      	cmp	r2, #255	; 0xff
 800a6b4:	bf85      	ittet	hi
 800a6b6:	238a      	movhi	r3, #138	; 0x8a
 800a6b8:	6003      	strhi	r3, [r0, #0]
 800a6ba:	700a      	strbls	r2, [r1, #0]
 800a6bc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6c0:	bf98      	it	ls
 800a6c2:	2001      	movls	r0, #1
 800a6c4:	4770      	bx	lr
 800a6c6:	4608      	mov	r0, r1
 800a6c8:	4770      	bx	lr
	...

0800a6cc <_fstat_r>:
 800a6cc:	b538      	push	{r3, r4, r5, lr}
 800a6ce:	4c07      	ldr	r4, [pc, #28]	; (800a6ec <_fstat_r+0x20>)
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	4608      	mov	r0, r1
 800a6d6:	4611      	mov	r1, r2
 800a6d8:	6023      	str	r3, [r4, #0]
 800a6da:	f7f8 fa12 	bl	8002b02 <_fstat>
 800a6de:	1c43      	adds	r3, r0, #1
 800a6e0:	d102      	bne.n	800a6e8 <_fstat_r+0x1c>
 800a6e2:	6823      	ldr	r3, [r4, #0]
 800a6e4:	b103      	cbz	r3, 800a6e8 <_fstat_r+0x1c>
 800a6e6:	602b      	str	r3, [r5, #0]
 800a6e8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ea:	bf00      	nop
 800a6ec:	200003b8 	.word	0x200003b8

0800a6f0 <_isatty_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	4c06      	ldr	r4, [pc, #24]	; (800a70c <_isatty_r+0x1c>)
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	4605      	mov	r5, r0
 800a6f8:	4608      	mov	r0, r1
 800a6fa:	6023      	str	r3, [r4, #0]
 800a6fc:	f7f8 fa11 	bl	8002b22 <_isatty>
 800a700:	1c43      	adds	r3, r0, #1
 800a702:	d102      	bne.n	800a70a <_isatty_r+0x1a>
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	b103      	cbz	r3, 800a70a <_isatty_r+0x1a>
 800a708:	602b      	str	r3, [r5, #0]
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	200003b8 	.word	0x200003b8

0800a710 <_malloc_usable_size_r>:
 800a710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a714:	1f18      	subs	r0, r3, #4
 800a716:	2b00      	cmp	r3, #0
 800a718:	bfbc      	itt	lt
 800a71a:	580b      	ldrlt	r3, [r1, r0]
 800a71c:	18c0      	addlt	r0, r0, r3
 800a71e:	4770      	bx	lr

0800a720 <pow>:
 800a720:	b570      	push	{r4, r5, r6, lr}
 800a722:	ed2d 8b0a 	vpush	{d8-d12}
 800a726:	eeb0 9b40 	vmov.f64	d9, d0
 800a72a:	eeb0 8b41 	vmov.f64	d8, d1
 800a72e:	4c8c      	ldr	r4, [pc, #560]	; (800a960 <pow+0x240>)
 800a730:	b08a      	sub	sp, #40	; 0x28
 800a732:	f000 f925 	bl	800a980 <__ieee754_pow>
 800a736:	f994 3000 	ldrsb.w	r3, [r4]
 800a73a:	eeb0 ab40 	vmov.f64	d10, d0
 800a73e:	1c5a      	adds	r2, r3, #1
 800a740:	4626      	mov	r6, r4
 800a742:	d04b      	beq.n	800a7dc <pow+0xbc>
 800a744:	eeb4 8b48 	vcmp.f64	d8, d8
 800a748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a74c:	d646      	bvs.n	800a7dc <pow+0xbc>
 800a74e:	eeb4 9b49 	vcmp.f64	d9, d9
 800a752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a756:	d719      	bvc.n	800a78c <pow+0x6c>
 800a758:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a760:	d13c      	bne.n	800a7dc <pow+0xbc>
 800a762:	2201      	movs	r2, #1
 800a764:	9200      	str	r2, [sp, #0]
 800a766:	497f      	ldr	r1, [pc, #508]	; (800a964 <pow+0x244>)
 800a768:	4a7f      	ldr	r2, [pc, #508]	; (800a968 <pow+0x248>)
 800a76a:	9201      	str	r2, [sp, #4]
 800a76c:	2000      	movs	r0, #0
 800a76e:	2200      	movs	r2, #0
 800a770:	2b02      	cmp	r3, #2
 800a772:	9208      	str	r2, [sp, #32]
 800a774:	ed8d 9b02 	vstr	d9, [sp, #8]
 800a778:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a77c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a780:	d02a      	beq.n	800a7d8 <pow+0xb8>
 800a782:	4668      	mov	r0, sp
 800a784:	f000 fc96 	bl	800b0b4 <matherr>
 800a788:	bb00      	cbnz	r0, 800a7cc <pow+0xac>
 800a78a:	e04e      	b.n	800a82a <pow+0x10a>
 800a78c:	ed9f bb72 	vldr	d11, [pc, #456]	; 800a958 <pow+0x238>
 800a790:	eeb4 9b4b 	vcmp.f64	d9, d11
 800a794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a798:	eeb0 cb4b 	vmov.f64	d12, d11
 800a79c:	d14a      	bne.n	800a834 <pow+0x114>
 800a79e:	eeb4 8b4b 	vcmp.f64	d8, d11
 800a7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a6:	d11f      	bne.n	800a7e8 <pow+0xc8>
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	9200      	str	r2, [sp, #0]
 800a7ac:	4a6e      	ldr	r2, [pc, #440]	; (800a968 <pow+0x248>)
 800a7ae:	9201      	str	r2, [sp, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	9208      	str	r2, [sp, #32]
 800a7b4:	ed8d 9b02 	vstr	d9, [sp, #8]
 800a7b8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a7bc:	ed8d bb06 	vstr	d11, [sp, #24]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d0de      	beq.n	800a782 <pow+0x62>
 800a7c4:	4b67      	ldr	r3, [pc, #412]	; (800a964 <pow+0x244>)
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a7cc:	9b08      	ldr	r3, [sp, #32]
 800a7ce:	b11b      	cbz	r3, 800a7d8 <pow+0xb8>
 800a7d0:	f7fd fb22 	bl	8007e18 <__errno>
 800a7d4:	9b08      	ldr	r3, [sp, #32]
 800a7d6:	6003      	str	r3, [r0, #0]
 800a7d8:	ed9d ab06 	vldr	d10, [sp, #24]
 800a7dc:	eeb0 0b4a 	vmov.f64	d0, d10
 800a7e0:	b00a      	add	sp, #40	; 0x28
 800a7e2:	ecbd 8b0a 	vpop	{d8-d12}
 800a7e6:	bd70      	pop	{r4, r5, r6, pc}
 800a7e8:	eeb0 0b48 	vmov.f64	d0, d8
 800a7ec:	f000 fc5a 	bl	800b0a4 <finite>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d0f3      	beq.n	800a7dc <pow+0xbc>
 800a7f4:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800a7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7fc:	d5ee      	bpl.n	800a7dc <pow+0xbc>
 800a7fe:	2301      	movs	r3, #1
 800a800:	9300      	str	r3, [sp, #0]
 800a802:	4b59      	ldr	r3, [pc, #356]	; (800a968 <pow+0x248>)
 800a804:	9301      	str	r3, [sp, #4]
 800a806:	2300      	movs	r3, #0
 800a808:	9308      	str	r3, [sp, #32]
 800a80a:	f994 3000 	ldrsb.w	r3, [r4]
 800a80e:	ed8d 9b02 	vstr	d9, [sp, #8]
 800a812:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a816:	b913      	cbnz	r3, 800a81e <pow+0xfe>
 800a818:	ed8d bb06 	vstr	d11, [sp, #24]
 800a81c:	e7b1      	b.n	800a782 <pow+0x62>
 800a81e:	4953      	ldr	r1, [pc, #332]	; (800a96c <pow+0x24c>)
 800a820:	2000      	movs	r0, #0
 800a822:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a826:	2b02      	cmp	r3, #2
 800a828:	d1ab      	bne.n	800a782 <pow+0x62>
 800a82a:	f7fd faf5 	bl	8007e18 <__errno>
 800a82e:	2321      	movs	r3, #33	; 0x21
 800a830:	6003      	str	r3, [r0, #0]
 800a832:	e7cb      	b.n	800a7cc <pow+0xac>
 800a834:	f000 fc36 	bl	800b0a4 <finite>
 800a838:	4605      	mov	r5, r0
 800a83a:	2800      	cmp	r0, #0
 800a83c:	d164      	bne.n	800a908 <pow+0x1e8>
 800a83e:	eeb0 0b49 	vmov.f64	d0, d9
 800a842:	f000 fc2f 	bl	800b0a4 <finite>
 800a846:	2800      	cmp	r0, #0
 800a848:	d05e      	beq.n	800a908 <pow+0x1e8>
 800a84a:	eeb0 0b48 	vmov.f64	d0, d8
 800a84e:	f000 fc29 	bl	800b0a4 <finite>
 800a852:	2800      	cmp	r0, #0
 800a854:	d058      	beq.n	800a908 <pow+0x1e8>
 800a856:	eeb4 ab4a 	vcmp.f64	d10, d10
 800a85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a85e:	f994 3000 	ldrsb.w	r3, [r4]
 800a862:	4a41      	ldr	r2, [pc, #260]	; (800a968 <pow+0x248>)
 800a864:	d70e      	bvc.n	800a884 <pow+0x164>
 800a866:	2101      	movs	r1, #1
 800a868:	e9cd 1200 	strd	r1, r2, [sp]
 800a86c:	9508      	str	r5, [sp, #32]
 800a86e:	ed8d 9b02 	vstr	d9, [sp, #8]
 800a872:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d0ce      	beq.n	800a818 <pow+0xf8>
 800a87a:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 800a87e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a882:	e7d0      	b.n	800a826 <pow+0x106>
 800a884:	2103      	movs	r1, #3
 800a886:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a88a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a88e:	ee28 8b07 	vmul.f64	d8, d8, d7
 800a892:	e9cd 1200 	strd	r1, r2, [sp]
 800a896:	9508      	str	r5, [sp, #32]
 800a898:	ed8d 9b02 	vstr	d9, [sp, #8]
 800a89c:	b9fb      	cbnz	r3, 800a8de <pow+0x1be>
 800a89e:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800a8a2:	4b33      	ldr	r3, [pc, #204]	; (800a970 <pow+0x250>)
 800a8a4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a8b0:	d54b      	bpl.n	800a94a <pow+0x22a>
 800a8b2:	eeb0 0b48 	vmov.f64	d0, d8
 800a8b6:	f000 fc07 	bl	800b0c8 <rint>
 800a8ba:	eeb4 0b48 	vcmp.f64	d0, d8
 800a8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8c2:	d004      	beq.n	800a8ce <pow+0x1ae>
 800a8c4:	4b2b      	ldr	r3, [pc, #172]	; (800a974 <pow+0x254>)
 800a8c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a8ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a8ce:	f996 3000 	ldrsb.w	r3, [r6]
 800a8d2:	2b02      	cmp	r3, #2
 800a8d4:	d139      	bne.n	800a94a <pow+0x22a>
 800a8d6:	f7fd fa9f 	bl	8007e18 <__errno>
 800a8da:	2322      	movs	r3, #34	; 0x22
 800a8dc:	e7a8      	b.n	800a830 <pow+0x110>
 800a8de:	4b26      	ldr	r3, [pc, #152]	; (800a978 <pow+0x258>)
 800a8e0:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a8ee:	d5ee      	bpl.n	800a8ce <pow+0x1ae>
 800a8f0:	eeb0 0b48 	vmov.f64	d0, d8
 800a8f4:	f000 fbe8 	bl	800b0c8 <rint>
 800a8f8:	eeb4 0b48 	vcmp.f64	d0, d8
 800a8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a900:	d0e5      	beq.n	800a8ce <pow+0x1ae>
 800a902:	2200      	movs	r2, #0
 800a904:	4b19      	ldr	r3, [pc, #100]	; (800a96c <pow+0x24c>)
 800a906:	e7e0      	b.n	800a8ca <pow+0x1aa>
 800a908:	eeb5 ab40 	vcmp.f64	d10, #0.0
 800a90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a910:	f47f af64 	bne.w	800a7dc <pow+0xbc>
 800a914:	eeb0 0b49 	vmov.f64	d0, d9
 800a918:	f000 fbc4 	bl	800b0a4 <finite>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	f43f af5d 	beq.w	800a7dc <pow+0xbc>
 800a922:	eeb0 0b48 	vmov.f64	d0, d8
 800a926:	f000 fbbd 	bl	800b0a4 <finite>
 800a92a:	2800      	cmp	r0, #0
 800a92c:	f43f af56 	beq.w	800a7dc <pow+0xbc>
 800a930:	2304      	movs	r3, #4
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	4b0c      	ldr	r3, [pc, #48]	; (800a968 <pow+0x248>)
 800a936:	9301      	str	r3, [sp, #4]
 800a938:	2300      	movs	r3, #0
 800a93a:	9308      	str	r3, [sp, #32]
 800a93c:	ed8d 9b02 	vstr	d9, [sp, #8]
 800a940:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a944:	ed8d cb06 	vstr	d12, [sp, #24]
 800a948:	e7c1      	b.n	800a8ce <pow+0x1ae>
 800a94a:	4668      	mov	r0, sp
 800a94c:	f000 fbb2 	bl	800b0b4 <matherr>
 800a950:	2800      	cmp	r0, #0
 800a952:	f47f af3b 	bne.w	800a7cc <pow+0xac>
 800a956:	e7be      	b.n	800a8d6 <pow+0x1b6>
	...
 800a960:	200001e0 	.word	0x200001e0
 800a964:	3ff00000 	.word	0x3ff00000
 800a968:	0800bae0 	.word	0x0800bae0
 800a96c:	fff00000 	.word	0xfff00000
 800a970:	47efffff 	.word	0x47efffff
 800a974:	c7efffff 	.word	0xc7efffff
 800a978:	7ff00000 	.word	0x7ff00000
 800a97c:	00000000 	.word	0x00000000

0800a980 <__ieee754_pow>:
 800a980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a984:	ec57 6b11 	vmov	r6, r7, d1
 800a988:	ed2d 8b02 	vpush	{d8}
 800a98c:	eeb0 8b40 	vmov.f64	d8, d0
 800a990:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a994:	ea58 0306 	orrs.w	r3, r8, r6
 800a998:	b085      	sub	sp, #20
 800a99a:	46b9      	mov	r9, r7
 800a99c:	ee11 2a10 	vmov	r2, s2
 800a9a0:	f000 8306 	beq.w	800afb0 <__ieee754_pow+0x630>
 800a9a4:	ee18 aa90 	vmov	sl, s17
 800a9a8:	4bb9      	ldr	r3, [pc, #740]	; (800ac90 <__ieee754_pow+0x310>)
 800a9aa:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 800a9ae:	429c      	cmp	r4, r3
 800a9b0:	ee10 ba10 	vmov	fp, s0
 800a9b4:	dc0b      	bgt.n	800a9ce <__ieee754_pow+0x4e>
 800a9b6:	d105      	bne.n	800a9c4 <__ieee754_pow+0x44>
 800a9b8:	f1bb 0f00 	cmp.w	fp, #0
 800a9bc:	d107      	bne.n	800a9ce <__ieee754_pow+0x4e>
 800a9be:	45a0      	cmp	r8, r4
 800a9c0:	dc0d      	bgt.n	800a9de <__ieee754_pow+0x5e>
 800a9c2:	e001      	b.n	800a9c8 <__ieee754_pow+0x48>
 800a9c4:	4598      	cmp	r8, r3
 800a9c6:	dc02      	bgt.n	800a9ce <__ieee754_pow+0x4e>
 800a9c8:	4598      	cmp	r8, r3
 800a9ca:	d110      	bne.n	800a9ee <__ieee754_pow+0x6e>
 800a9cc:	b17a      	cbz	r2, 800a9ee <__ieee754_pow+0x6e>
 800a9ce:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a9d2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a9d6:	ea54 030b 	orrs.w	r3, r4, fp
 800a9da:	f000 82e9 	beq.w	800afb0 <__ieee754_pow+0x630>
 800a9de:	48ad      	ldr	r0, [pc, #692]	; (800ac94 <__ieee754_pow+0x314>)
 800a9e0:	b005      	add	sp, #20
 800a9e2:	ecbd 8b02 	vpop	{d8}
 800a9e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ea:	f000 bb65 	b.w	800b0b8 <nan>
 800a9ee:	f1ba 0f00 	cmp.w	sl, #0
 800a9f2:	da4e      	bge.n	800aa92 <__ieee754_pow+0x112>
 800a9f4:	4ba8      	ldr	r3, [pc, #672]	; (800ac98 <__ieee754_pow+0x318>)
 800a9f6:	4598      	cmp	r8, r3
 800a9f8:	dc49      	bgt.n	800aa8e <__ieee754_pow+0x10e>
 800a9fa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a9fe:	4598      	cmp	r8, r3
 800aa00:	dd47      	ble.n	800aa92 <__ieee754_pow+0x112>
 800aa02:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aa06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aa0a:	2b14      	cmp	r3, #20
 800aa0c:	dd24      	ble.n	800aa58 <__ieee754_pow+0xd8>
 800aa0e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800aa12:	fa22 f503 	lsr.w	r5, r2, r3
 800aa16:	fa05 f303 	lsl.w	r3, r5, r3
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d139      	bne.n	800aa92 <__ieee754_pow+0x112>
 800aa1e:	f005 0501 	and.w	r5, r5, #1
 800aa22:	f1c5 0502 	rsb	r5, r5, #2
 800aa26:	2a00      	cmp	r2, #0
 800aa28:	d15a      	bne.n	800aae0 <__ieee754_pow+0x160>
 800aa2a:	4b99      	ldr	r3, [pc, #612]	; (800ac90 <__ieee754_pow+0x310>)
 800aa2c:	4598      	cmp	r8, r3
 800aa2e:	d122      	bne.n	800aa76 <__ieee754_pow+0xf6>
 800aa30:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800aa34:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800aa38:	ea53 030b 	orrs.w	r3, r3, fp
 800aa3c:	f000 82b8 	beq.w	800afb0 <__ieee754_pow+0x630>
 800aa40:	4b96      	ldr	r3, [pc, #600]	; (800ac9c <__ieee754_pow+0x31c>)
 800aa42:	429c      	cmp	r4, r3
 800aa44:	dd27      	ble.n	800aa96 <__ieee754_pow+0x116>
 800aa46:	f1b9 0f00 	cmp.w	r9, #0
 800aa4a:	f280 82b4 	bge.w	800afb6 <__ieee754_pow+0x636>
 800aa4e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 800ac60 <__ieee754_pow+0x2e0>
 800aa52:	ed8d 7b00 	vstr	d7, [sp]
 800aa56:	e026      	b.n	800aaa6 <__ieee754_pow+0x126>
 800aa58:	2a00      	cmp	r2, #0
 800aa5a:	d140      	bne.n	800aade <__ieee754_pow+0x15e>
 800aa5c:	f1c3 0314 	rsb	r3, r3, #20
 800aa60:	fa48 f503 	asr.w	r5, r8, r3
 800aa64:	fa05 f303 	lsl.w	r3, r5, r3
 800aa68:	4543      	cmp	r3, r8
 800aa6a:	f040 82aa 	bne.w	800afc2 <__ieee754_pow+0x642>
 800aa6e:	f005 0501 	and.w	r5, r5, #1
 800aa72:	f1c5 0502 	rsb	r5, r5, #2
 800aa76:	4b8a      	ldr	r3, [pc, #552]	; (800aca0 <__ieee754_pow+0x320>)
 800aa78:	4598      	cmp	r8, r3
 800aa7a:	d11b      	bne.n	800aab4 <__ieee754_pow+0x134>
 800aa7c:	f1b9 0f00 	cmp.w	r9, #0
 800aa80:	f280 829c 	bge.w	800afbc <__ieee754_pow+0x63c>
 800aa84:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800aa88:	ee87 7b08 	vdiv.f64	d7, d7, d8
 800aa8c:	e7e1      	b.n	800aa52 <__ieee754_pow+0xd2>
 800aa8e:	2502      	movs	r5, #2
 800aa90:	e7c9      	b.n	800aa26 <__ieee754_pow+0xa6>
 800aa92:	2500      	movs	r5, #0
 800aa94:	e7c7      	b.n	800aa26 <__ieee754_pow+0xa6>
 800aa96:	f1b9 0f00 	cmp.w	r9, #0
 800aa9a:	dad8      	bge.n	800aa4e <__ieee754_pow+0xce>
 800aa9c:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 800aaa0:	4633      	mov	r3, r6
 800aaa2:	e9cd 3400 	strd	r3, r4, [sp]
 800aaa6:	ed9d 0b00 	vldr	d0, [sp]
 800aaaa:	b005      	add	sp, #20
 800aaac:	ecbd 8b02 	vpop	{d8}
 800aab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800aab8:	d102      	bne.n	800aac0 <__ieee754_pow+0x140>
 800aaba:	ee28 7b08 	vmul.f64	d7, d8, d8
 800aabe:	e7c8      	b.n	800aa52 <__ieee754_pow+0xd2>
 800aac0:	4b78      	ldr	r3, [pc, #480]	; (800aca4 <__ieee754_pow+0x324>)
 800aac2:	4599      	cmp	r9, r3
 800aac4:	d10c      	bne.n	800aae0 <__ieee754_pow+0x160>
 800aac6:	f1ba 0f00 	cmp.w	sl, #0
 800aaca:	db09      	blt.n	800aae0 <__ieee754_pow+0x160>
 800aacc:	eeb0 0b48 	vmov.f64	d0, d8
 800aad0:	b005      	add	sp, #20
 800aad2:	ecbd 8b02 	vpop	{d8}
 800aad6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aada:	f000 bad7 	b.w	800b08c <__ieee754_sqrt>
 800aade:	2500      	movs	r5, #0
 800aae0:	eeb0 0b48 	vmov.f64	d0, d8
 800aae4:	f000 fad5 	bl	800b092 <fabs>
 800aae8:	ed8d 0b00 	vstr	d0, [sp]
 800aaec:	f1bb 0f00 	cmp.w	fp, #0
 800aaf0:	d128      	bne.n	800ab44 <__ieee754_pow+0x1c4>
 800aaf2:	b124      	cbz	r4, 800aafe <__ieee754_pow+0x17e>
 800aaf4:	4b6a      	ldr	r3, [pc, #424]	; (800aca0 <__ieee754_pow+0x320>)
 800aaf6:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d122      	bne.n	800ab44 <__ieee754_pow+0x1c4>
 800aafe:	f1b9 0f00 	cmp.w	r9, #0
 800ab02:	da07      	bge.n	800ab14 <__ieee754_pow+0x194>
 800ab04:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800ab08:	ed9d 6b00 	vldr	d6, [sp]
 800ab0c:	ee87 7b06 	vdiv.f64	d7, d7, d6
 800ab10:	ed8d 7b00 	vstr	d7, [sp]
 800ab14:	f1ba 0f00 	cmp.w	sl, #0
 800ab18:	dac5      	bge.n	800aaa6 <__ieee754_pow+0x126>
 800ab1a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ab1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ab22:	ea54 0305 	orrs.w	r3, r4, r5
 800ab26:	d106      	bne.n	800ab36 <__ieee754_pow+0x1b6>
 800ab28:	ed9d 7b00 	vldr	d7, [sp]
 800ab2c:	ee37 7b47 	vsub.f64	d7, d7, d7
 800ab30:	ee87 7b07 	vdiv.f64	d7, d7, d7
 800ab34:	e78d      	b.n	800aa52 <__ieee754_pow+0xd2>
 800ab36:	2d01      	cmp	r5, #1
 800ab38:	d1b5      	bne.n	800aaa6 <__ieee754_pow+0x126>
 800ab3a:	ed9d 7b00 	vldr	d7, [sp]
 800ab3e:	eeb1 7b47 	vneg.f64	d7, d7
 800ab42:	e786      	b.n	800aa52 <__ieee754_pow+0xd2>
 800ab44:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800ab48:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab4c:	ea55 030a 	orrs.w	r3, r5, sl
 800ab50:	d104      	bne.n	800ab5c <__ieee754_pow+0x1dc>
 800ab52:	ee38 8b48 	vsub.f64	d8, d8, d8
 800ab56:	ee88 7b08 	vdiv.f64	d7, d8, d8
 800ab5a:	e77a      	b.n	800aa52 <__ieee754_pow+0xd2>
 800ab5c:	4b52      	ldr	r3, [pc, #328]	; (800aca8 <__ieee754_pow+0x328>)
 800ab5e:	4598      	cmp	r8, r3
 800ab60:	f340 80a8 	ble.w	800acb4 <__ieee754_pow+0x334>
 800ab64:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ab68:	4598      	cmp	r8, r3
 800ab6a:	dd0b      	ble.n	800ab84 <__ieee754_pow+0x204>
 800ab6c:	4b4b      	ldr	r3, [pc, #300]	; (800ac9c <__ieee754_pow+0x31c>)
 800ab6e:	429c      	cmp	r4, r3
 800ab70:	dc0e      	bgt.n	800ab90 <__ieee754_pow+0x210>
 800ab72:	f1b9 0f00 	cmp.w	r9, #0
 800ab76:	f6bf af6a 	bge.w	800aa4e <__ieee754_pow+0xce>
 800ab7a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800ac68 <__ieee754_pow+0x2e8>
 800ab7e:	ee27 7b07 	vmul.f64	d7, d7, d7
 800ab82:	e766      	b.n	800aa52 <__ieee754_pow+0xd2>
 800ab84:	4b49      	ldr	r3, [pc, #292]	; (800acac <__ieee754_pow+0x32c>)
 800ab86:	429c      	cmp	r4, r3
 800ab88:	ddf3      	ble.n	800ab72 <__ieee754_pow+0x1f2>
 800ab8a:	4b45      	ldr	r3, [pc, #276]	; (800aca0 <__ieee754_pow+0x320>)
 800ab8c:	429c      	cmp	r4, r3
 800ab8e:	dd03      	ble.n	800ab98 <__ieee754_pow+0x218>
 800ab90:	f1b9 0f00 	cmp.w	r9, #0
 800ab94:	dcf1      	bgt.n	800ab7a <__ieee754_pow+0x1fa>
 800ab96:	e75a      	b.n	800aa4e <__ieee754_pow+0xce>
 800ab98:	ed9d 7b00 	vldr	d7, [sp]
 800ab9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800aba0:	ed9f 5b33 	vldr	d5, [pc, #204]	; 800ac70 <__ieee754_pow+0x2f0>
 800aba4:	ee37 6b46 	vsub.f64	d6, d7, d6
 800aba8:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 800abac:	eeb1 3b46 	vneg.f64	d3, d6
 800abb0:	eea3 5b07 	vfma.f64	d5, d3, d7
 800abb4:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800abb8:	eea5 7b46 	vfms.f64	d7, d5, d6
 800abbc:	ee26 5b06 	vmul.f64	d5, d6, d6
 800abc0:	ee27 5b05 	vmul.f64	d5, d7, d5
 800abc4:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800ac78 <__ieee754_pow+0x2f8>
 800abc8:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800abcc:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800ac80 <__ieee754_pow+0x300>
 800abd0:	eea6 7b05 	vfma.f64	d7, d6, d5
 800abd4:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800ac88 <__ieee754_pow+0x308>
 800abd8:	eeb0 4b47 	vmov.f64	d4, d7
 800abdc:	eea6 4b05 	vfma.f64	d4, d6, d5
 800abe0:	ec53 2b14 	vmov	r2, r3, d4
 800abe4:	2200      	movs	r2, #0
 800abe6:	ec43 2b14 	vmov	d4, r2, r3
 800abea:	eeb0 6b44 	vmov.f64	d6, d4
 800abee:	eea3 6b05 	vfma.f64	d6, d3, d5
 800abf2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800abf6:	3d01      	subs	r5, #1
 800abf8:	ea55 030a 	orrs.w	r3, r5, sl
 800abfc:	f04f 0200 	mov.w	r2, #0
 800ac00:	463b      	mov	r3, r7
 800ac02:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800ac06:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800ac0a:	ec47 6b15 	vmov	d5, r6, r7
 800ac0e:	fe06 8b08 	vseleq.f64	d8, d6, d8
 800ac12:	ec47 6b13 	vmov	d3, r6, r7
 800ac16:	ec43 2b16 	vmov	d6, r2, r3
 800ac1a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ac1e:	ee35 5b46 	vsub.f64	d5, d5, d6
 800ac22:	4b23      	ldr	r3, [pc, #140]	; (800acb0 <__ieee754_pow+0x330>)
 800ac24:	eea5 7b04 	vfma.f64	d7, d5, d4
 800ac28:	ee24 6b06 	vmul.f64	d6, d4, d6
 800ac2c:	ee37 5b06 	vadd.f64	d5, d7, d6
 800ac30:	ee15 1a90 	vmov	r1, s11
 800ac34:	4299      	cmp	r1, r3
 800ac36:	ee15 2a10 	vmov	r2, s10
 800ac3a:	f340 819b 	ble.w	800af74 <__ieee754_pow+0x5f4>
 800ac3e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ac42:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ac46:	4313      	orrs	r3, r2
 800ac48:	f000 810a 	beq.w	800ae60 <__ieee754_pow+0x4e0>
 800ac4c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 800ac68 <__ieee754_pow+0x2e8>
 800ac50:	ee28 8b07 	vmul.f64	d8, d8, d7
 800ac54:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ac58:	e6fb      	b.n	800aa52 <__ieee754_pow+0xd2>
 800ac5a:	bf00      	nop
 800ac5c:	f3af 8000 	nop.w
	...
 800ac68:	8800759c 	.word	0x8800759c
 800ac6c:	7e37e43c 	.word	0x7e37e43c
 800ac70:	55555555 	.word	0x55555555
 800ac74:	3fd55555 	.word	0x3fd55555
 800ac78:	652b82fe 	.word	0x652b82fe
 800ac7c:	3ff71547 	.word	0x3ff71547
 800ac80:	f85ddf44 	.word	0xf85ddf44
 800ac84:	3e54ae0b 	.word	0x3e54ae0b
 800ac88:	60000000 	.word	0x60000000
 800ac8c:	3ff71547 	.word	0x3ff71547
 800ac90:	7ff00000 	.word	0x7ff00000
 800ac94:	0800b9c9 	.word	0x0800b9c9
 800ac98:	433fffff 	.word	0x433fffff
 800ac9c:	3fefffff 	.word	0x3fefffff
 800aca0:	3ff00000 	.word	0x3ff00000
 800aca4:	3fe00000 	.word	0x3fe00000
 800aca8:	41e00000 	.word	0x41e00000
 800acac:	3feffffe 	.word	0x3feffffe
 800acb0:	408fffff 	.word	0x408fffff
 800acb4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800acb8:	f280 80ce 	bge.w	800ae58 <__ieee754_pow+0x4d8>
 800acbc:	ed9d 6b00 	vldr	d6, [sp]
 800acc0:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 800afc8 <__ieee754_pow+0x648>
 800acc4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800acc8:	ed8d 7b00 	vstr	d7, [sp]
 800accc:	9c01      	ldr	r4, [sp, #4]
 800acce:	f06f 0334 	mvn.w	r3, #52	; 0x34
 800acd2:	1521      	asrs	r1, r4, #20
 800acd4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800acd8:	4419      	add	r1, r3
 800acda:	4be3      	ldr	r3, [pc, #908]	; (800b068 <__ieee754_pow+0x6e8>)
 800acdc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ace0:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 800ace4:	429c      	cmp	r4, r3
 800ace6:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 800acea:	dd06      	ble.n	800acfa <__ieee754_pow+0x37a>
 800acec:	4bdf      	ldr	r3, [pc, #892]	; (800b06c <__ieee754_pow+0x6ec>)
 800acee:	429c      	cmp	r4, r3
 800acf0:	f340 80b4 	ble.w	800ae5c <__ieee754_pow+0x4dc>
 800acf4:	3101      	adds	r1, #1
 800acf6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800acfa:	2400      	movs	r4, #0
 800acfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad00:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800ad04:	4603      	mov	r3, r0
 800ad06:	ec43 2b17 	vmov	d7, r2, r3
 800ad0a:	4bd9      	ldr	r3, [pc, #868]	; (800b070 <__ieee754_pow+0x6f0>)
 800ad0c:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 800ad10:	4463      	add	r3, ip
 800ad12:	ed93 5b00 	vldr	d5, [r3]
 800ad16:	1040      	asrs	r0, r0, #1
 800ad18:	ee37 2b45 	vsub.f64	d2, d7, d5
 800ad1c:	ee35 6b07 	vadd.f64	d6, d5, d7
 800ad20:	ee84 1b06 	vdiv.f64	d1, d4, d6
 800ad24:	ee22 6b01 	vmul.f64	d6, d2, d1
 800ad28:	ed8d 6b00 	vstr	d6, [sp]
 800ad2c:	e9dd 8900 	ldrd	r8, r9, [sp]
 800ad30:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800ad34:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 800ad38:	f04f 0800 	mov.w	r8, #0
 800ad3c:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 800ad40:	2200      	movs	r2, #0
 800ad42:	ec49 8b14 	vmov	d4, r8, r9
 800ad46:	ec43 2b16 	vmov	d6, r2, r3
 800ad4a:	eeb1 3b44 	vneg.f64	d3, d4
 800ad4e:	eea3 2b06 	vfma.f64	d2, d3, d6
 800ad52:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ad56:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ad5a:	eea3 2b07 	vfma.f64	d2, d3, d7
 800ad5e:	ed9d 7b00 	vldr	d7, [sp]
 800ad62:	ee22 2b01 	vmul.f64	d2, d2, d1
 800ad66:	ee27 5b07 	vmul.f64	d5, d7, d7
 800ad6a:	ee37 6b04 	vadd.f64	d6, d7, d4
 800ad6e:	ed9f 1b98 	vldr	d1, [pc, #608]	; 800afd0 <__ieee754_pow+0x650>
 800ad72:	ee25 0b05 	vmul.f64	d0, d5, d5
 800ad76:	ee26 6b02 	vmul.f64	d6, d6, d2
 800ad7a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800afd8 <__ieee754_pow+0x658>
 800ad7e:	eea5 7b01 	vfma.f64	d7, d5, d1
 800ad82:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800afe0 <__ieee754_pow+0x660>
 800ad86:	eea7 1b05 	vfma.f64	d1, d7, d5
 800ad8a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800afe8 <__ieee754_pow+0x668>
 800ad8e:	eea1 7b05 	vfma.f64	d7, d1, d5
 800ad92:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800aff0 <__ieee754_pow+0x670>
 800ad96:	eea7 1b05 	vfma.f64	d1, d7, d5
 800ad9a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800aff8 <__ieee754_pow+0x678>
 800ad9e:	eea1 7b05 	vfma.f64	d7, d1, d5
 800ada2:	eea0 6b07 	vfma.f64	d6, d0, d7
 800ada6:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 800adaa:	eeb0 5b47 	vmov.f64	d5, d7
 800adae:	eea4 5b04 	vfma.f64	d5, d4, d4
 800adb2:	ee35 5b06 	vadd.f64	d5, d5, d6
 800adb6:	ed8d 5b02 	vstr	d5, [sp, #8]
 800adba:	f8cd 8008 	str.w	r8, [sp, #8]
 800adbe:	ed9d 5b02 	vldr	d5, [sp, #8]
 800adc2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800adc6:	eea3 7b04 	vfma.f64	d7, d3, d4
 800adca:	ee36 7b47 	vsub.f64	d7, d6, d7
 800adce:	ed9d 6b00 	vldr	d6, [sp]
 800add2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800add6:	eea2 7b05 	vfma.f64	d7, d2, d5
 800adda:	eeb0 6b47 	vmov.f64	d6, d7
 800adde:	eea4 6b05 	vfma.f64	d6, d4, d5
 800ade2:	ed8d 6b00 	vstr	d6, [sp]
 800ade6:	f8cd 8000 	str.w	r8, [sp]
 800adea:	ed9d 2b00 	vldr	d2, [sp]
 800adee:	eeb0 6b42 	vmov.f64	d6, d2
 800adf2:	eea3 6b05 	vfma.f64	d6, d3, d5
 800adf6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800adfa:	ed9f 6b81 	vldr	d6, [pc, #516]	; 800b000 <__ieee754_pow+0x680>
 800adfe:	4b9d      	ldr	r3, [pc, #628]	; (800b074 <__ieee754_pow+0x6f4>)
 800ae00:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ae04:	ed9f 6b80 	vldr	d6, [pc, #512]	; 800b008 <__ieee754_pow+0x688>
 800ae08:	4463      	add	r3, ip
 800ae0a:	eea2 7b06 	vfma.f64	d7, d2, d6
 800ae0e:	ed93 6b00 	vldr	d6, [r3]
 800ae12:	4b99      	ldr	r3, [pc, #612]	; (800b078 <__ieee754_pow+0x6f8>)
 800ae14:	ee37 6b06 	vadd.f64	d6, d7, d6
 800ae18:	449c      	add	ip, r3
 800ae1a:	ed9c 1b00 	vldr	d1, [ip]
 800ae1e:	eeb0 4b46 	vmov.f64	d4, d6
 800ae22:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 800b010 <__ieee754_pow+0x690>
 800ae26:	ee07 1a90 	vmov	s15, r1
 800ae2a:	eea2 4b03 	vfma.f64	d4, d2, d3
 800ae2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ae32:	ee34 4b01 	vadd.f64	d4, d4, d1
 800ae36:	ee34 5b07 	vadd.f64	d5, d4, d7
 800ae3a:	ed8d 5b00 	vstr	d5, [sp]
 800ae3e:	f8cd 8000 	str.w	r8, [sp]
 800ae42:	ed9d 4b00 	vldr	d4, [sp]
 800ae46:	ee34 7b47 	vsub.f64	d7, d4, d7
 800ae4a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800ae4e:	eea2 7b43 	vfms.f64	d7, d2, d3
 800ae52:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ae56:	e6ce      	b.n	800abf6 <__ieee754_pow+0x276>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	e73a      	b.n	800acd2 <__ieee754_pow+0x352>
 800ae5c:	2401      	movs	r4, #1
 800ae5e:	e74d      	b.n	800acfc <__ieee754_pow+0x37c>
 800ae60:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800b018 <__ieee754_pow+0x698>
 800ae64:	ee35 5b46 	vsub.f64	d5, d5, d6
 800ae68:	ee37 4b04 	vadd.f64	d4, d7, d4
 800ae6c:	eeb4 4bc5 	vcmpe.f64	d4, d5
 800ae70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae74:	f73f aeea 	bgt.w	800ac4c <__ieee754_pow+0x2cc>
 800ae78:	4a80      	ldr	r2, [pc, #512]	; (800b07c <__ieee754_pow+0x6fc>)
 800ae7a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	f340 808e 	ble.w	800afa0 <__ieee754_pow+0x620>
 800ae84:	151b      	asrs	r3, r3, #20
 800ae86:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 800ae8a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ae8e:	4103      	asrs	r3, r0
 800ae90:	440b      	add	r3, r1
 800ae92:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ae96:	487a      	ldr	r0, [pc, #488]	; (800b080 <__ieee754_pow+0x700>)
 800ae98:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ae9c:	4110      	asrs	r0, r2
 800ae9e:	ea23 0500 	bic.w	r5, r3, r0
 800aea2:	f3c3 0013 	ubfx	r0, r3, #0, #20
 800aea6:	2400      	movs	r4, #0
 800aea8:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800aeac:	f1c2 0214 	rsb	r2, r2, #20
 800aeb0:	ec45 4b15 	vmov	d5, r4, r5
 800aeb4:	4110      	asrs	r0, r2
 800aeb6:	2900      	cmp	r1, #0
 800aeb8:	bfb8      	it	lt
 800aeba:	4240      	neglt	r0, r0
 800aebc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800aec0:	ee36 5b07 	vadd.f64	d5, d6, d7
 800aec4:	ec53 2b15 	vmov	r2, r3, d5
 800aec8:	2200      	movs	r2, #0
 800aeca:	ec43 2b15 	vmov	d5, r2, r3
 800aece:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800b020 <__ieee754_pow+0x6a0>
 800aed2:	ee35 6b46 	vsub.f64	d6, d5, d6
 800aed6:	ee37 6b46 	vsub.f64	d6, d7, d6
 800aeda:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800b028 <__ieee754_pow+0x6a8>
 800aede:	ee25 7b07 	vmul.f64	d7, d5, d7
 800aee2:	eea6 7b04 	vfma.f64	d7, d6, d4
 800aee6:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800b030 <__ieee754_pow+0x6b0>
 800aeea:	eeb0 4b47 	vmov.f64	d4, d7
 800aeee:	eea5 4b06 	vfma.f64	d4, d5, d6
 800aef2:	eeb0 3b44 	vmov.f64	d3, d4
 800aef6:	eea5 3b46 	vfms.f64	d3, d5, d6
 800aefa:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 800b038 <__ieee754_pow+0x6b8>
 800aefe:	ee37 7b43 	vsub.f64	d7, d7, d3
 800af02:	ee24 6b04 	vmul.f64	d6, d4, d4
 800af06:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 800b040 <__ieee754_pow+0x6c0>
 800af0a:	eea4 7b07 	vfma.f64	d7, d4, d7
 800af0e:	eea6 3b05 	vfma.f64	d3, d6, d5
 800af12:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800b048 <__ieee754_pow+0x6c8>
 800af16:	eea3 5b06 	vfma.f64	d5, d3, d6
 800af1a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800b050 <__ieee754_pow+0x6d0>
 800af1e:	eea5 3b06 	vfma.f64	d3, d5, d6
 800af22:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800b058 <__ieee754_pow+0x6d8>
 800af26:	eea3 5b06 	vfma.f64	d5, d3, d6
 800af2a:	eeb0 3b44 	vmov.f64	d3, d4
 800af2e:	eea5 3b46 	vfms.f64	d3, d5, d6
 800af32:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800af36:	eeb0 6b43 	vmov.f64	d6, d3
 800af3a:	ee24 3b03 	vmul.f64	d3, d4, d3
 800af3e:	ee36 5b45 	vsub.f64	d5, d6, d5
 800af42:	ee83 6b05 	vdiv.f64	d6, d3, d5
 800af46:	ee36 7b47 	vsub.f64	d7, d6, d7
 800af4a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800af4e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800af52:	ee36 7b47 	vsub.f64	d7, d6, d7
 800af56:	ed8d 7b00 	vstr	d7, [sp]
 800af5a:	9901      	ldr	r1, [sp, #4]
 800af5c:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 800af60:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800af64:	da1e      	bge.n	800afa4 <__ieee754_pow+0x624>
 800af66:	eeb0 0b47 	vmov.f64	d0, d7
 800af6a:	f000 f939 	bl	800b1e0 <scalbn>
 800af6e:	ee20 7b08 	vmul.f64	d7, d0, d8
 800af72:	e56e      	b.n	800aa52 <__ieee754_pow+0xd2>
 800af74:	4b43      	ldr	r3, [pc, #268]	; (800b084 <__ieee754_pow+0x704>)
 800af76:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800af7a:	4298      	cmp	r0, r3
 800af7c:	f77f af7c 	ble.w	800ae78 <__ieee754_pow+0x4f8>
 800af80:	4b41      	ldr	r3, [pc, #260]	; (800b088 <__ieee754_pow+0x708>)
 800af82:	440b      	add	r3, r1
 800af84:	4313      	orrs	r3, r2
 800af86:	d002      	beq.n	800af8e <__ieee754_pow+0x60e>
 800af88:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800b060 <__ieee754_pow+0x6e0>
 800af8c:	e660      	b.n	800ac50 <__ieee754_pow+0x2d0>
 800af8e:	ee35 5b46 	vsub.f64	d5, d5, d6
 800af92:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800af96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af9a:	f6ff af6d 	blt.w	800ae78 <__ieee754_pow+0x4f8>
 800af9e:	e7f3      	b.n	800af88 <__ieee754_pow+0x608>
 800afa0:	2000      	movs	r0, #0
 800afa2:	e78d      	b.n	800aec0 <__ieee754_pow+0x540>
 800afa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afa8:	460b      	mov	r3, r1
 800afaa:	ec43 2b10 	vmov	d0, r2, r3
 800afae:	e7de      	b.n	800af6e <__ieee754_pow+0x5ee>
 800afb0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800afb4:	e54d      	b.n	800aa52 <__ieee754_pow+0xd2>
 800afb6:	e9cd 6700 	strd	r6, r7, [sp]
 800afba:	e574      	b.n	800aaa6 <__ieee754_pow+0x126>
 800afbc:	ed8d 8b00 	vstr	d8, [sp]
 800afc0:	e571      	b.n	800aaa6 <__ieee754_pow+0x126>
 800afc2:	4615      	mov	r5, r2
 800afc4:	e557      	b.n	800aa76 <__ieee754_pow+0xf6>
 800afc6:	bf00      	nop
 800afc8:	00000000 	.word	0x00000000
 800afcc:	43400000 	.word	0x43400000
 800afd0:	4a454eef 	.word	0x4a454eef
 800afd4:	3fca7e28 	.word	0x3fca7e28
 800afd8:	93c9db65 	.word	0x93c9db65
 800afdc:	3fcd864a 	.word	0x3fcd864a
 800afe0:	a91d4101 	.word	0xa91d4101
 800afe4:	3fd17460 	.word	0x3fd17460
 800afe8:	518f264d 	.word	0x518f264d
 800afec:	3fd55555 	.word	0x3fd55555
 800aff0:	db6fabff 	.word	0xdb6fabff
 800aff4:	3fdb6db6 	.word	0x3fdb6db6
 800aff8:	33333303 	.word	0x33333303
 800affc:	3fe33333 	.word	0x3fe33333
 800b000:	dc3a03fd 	.word	0xdc3a03fd
 800b004:	3feec709 	.word	0x3feec709
 800b008:	145b01f5 	.word	0x145b01f5
 800b00c:	be3e2fe0 	.word	0xbe3e2fe0
 800b010:	e0000000 	.word	0xe0000000
 800b014:	3feec709 	.word	0x3feec709
 800b018:	652b82fe 	.word	0x652b82fe
 800b01c:	3c971547 	.word	0x3c971547
 800b020:	fefa39ef 	.word	0xfefa39ef
 800b024:	3fe62e42 	.word	0x3fe62e42
 800b028:	0ca86c39 	.word	0x0ca86c39
 800b02c:	be205c61 	.word	0xbe205c61
 800b030:	00000000 	.word	0x00000000
 800b034:	3fe62e43 	.word	0x3fe62e43
 800b038:	72bea4d0 	.word	0x72bea4d0
 800b03c:	3e663769 	.word	0x3e663769
 800b040:	c5d26bf1 	.word	0xc5d26bf1
 800b044:	bebbbd41 	.word	0xbebbbd41
 800b048:	af25de2c 	.word	0xaf25de2c
 800b04c:	3f11566a 	.word	0x3f11566a
 800b050:	16bebd93 	.word	0x16bebd93
 800b054:	bf66c16c 	.word	0xbf66c16c
 800b058:	5555553e 	.word	0x5555553e
 800b05c:	3fc55555 	.word	0x3fc55555
 800b060:	c2f8f359 	.word	0xc2f8f359
 800b064:	01a56e1f 	.word	0x01a56e1f
 800b068:	0003988e 	.word	0x0003988e
 800b06c:	000bb679 	.word	0x000bb679
 800b070:	0800bae8 	.word	0x0800bae8
 800b074:	0800bb08 	.word	0x0800bb08
 800b078:	0800baf8 	.word	0x0800baf8
 800b07c:	3fe00000 	.word	0x3fe00000
 800b080:	000fffff 	.word	0x000fffff
 800b084:	4090cbff 	.word	0x4090cbff
 800b088:	3f6f3400 	.word	0x3f6f3400

0800b08c <__ieee754_sqrt>:
 800b08c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800b090:	4770      	bx	lr

0800b092 <fabs>:
 800b092:	ec51 0b10 	vmov	r0, r1, d0
 800b096:	ee10 2a10 	vmov	r2, s0
 800b09a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b09e:	ec43 2b10 	vmov	d0, r2, r3
 800b0a2:	4770      	bx	lr

0800b0a4 <finite>:
 800b0a4:	ee10 3a90 	vmov	r3, s1
 800b0a8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800b0ac:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b0b0:	0fc0      	lsrs	r0, r0, #31
 800b0b2:	4770      	bx	lr

0800b0b4 <matherr>:
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	4770      	bx	lr

0800b0b8 <nan>:
 800b0b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b0c0 <nan+0x8>
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	00000000 	.word	0x00000000
 800b0c4:	7ff80000 	.word	0x7ff80000

0800b0c8 <rint>:
 800b0c8:	b530      	push	{r4, r5, lr}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	ed8d 0b00 	vstr	d0, [sp]
 800b0d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0d4:	f3c3 510a 	ubfx	r1, r3, #20, #11
 800b0d8:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 800b0dc:	2813      	cmp	r0, #19
 800b0de:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 800b0e2:	dc5a      	bgt.n	800b19a <rint+0xd2>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	da2f      	bge.n	800b148 <rint+0x80>
 800b0e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b0ec:	4311      	orrs	r1, r2
 800b0ee:	d027      	beq.n	800b140 <rint+0x78>
 800b0f0:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800b0f4:	4315      	orrs	r5, r2
 800b0f6:	426a      	negs	r2, r5
 800b0f8:	432a      	orrs	r2, r5
 800b0fa:	0b12      	lsrs	r2, r2, #12
 800b0fc:	0c5b      	lsrs	r3, r3, #17
 800b0fe:	045b      	lsls	r3, r3, #17
 800b100:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800b104:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b108:	ea42 0103 	orr.w	r1, r2, r3
 800b10c:	4b31      	ldr	r3, [pc, #196]	; (800b1d4 <rint+0x10c>)
 800b10e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b112:	ed93 6b00 	vldr	d6, [r3]
 800b116:	ec41 0b17 	vmov	d7, r0, r1
 800b11a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b11e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b122:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b126:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b12a:	ed8d 7b00 	vstr	d7, [sp]
 800b12e:	9b01      	ldr	r3, [sp, #4]
 800b130:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b134:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b138:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 800b13c:	e9cd 0100 	strd	r0, r1, [sp]
 800b140:	ed9d 0b00 	vldr	d0, [sp]
 800b144:	b005      	add	sp, #20
 800b146:	bd30      	pop	{r4, r5, pc}
 800b148:	4923      	ldr	r1, [pc, #140]	; (800b1d8 <rint+0x110>)
 800b14a:	4101      	asrs	r1, r0
 800b14c:	ea03 0501 	and.w	r5, r3, r1
 800b150:	4315      	orrs	r5, r2
 800b152:	d0f5      	beq.n	800b140 <rint+0x78>
 800b154:	0849      	lsrs	r1, r1, #1
 800b156:	ea03 0501 	and.w	r5, r3, r1
 800b15a:	432a      	orrs	r2, r5
 800b15c:	d00b      	beq.n	800b176 <rint+0xae>
 800b15e:	ea23 0101 	bic.w	r1, r3, r1
 800b162:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b166:	2813      	cmp	r0, #19
 800b168:	fa43 f300 	asr.w	r3, r3, r0
 800b16c:	bf0c      	ite	eq
 800b16e:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800b172:	2200      	movne	r2, #0
 800b174:	430b      	orrs	r3, r1
 800b176:	4619      	mov	r1, r3
 800b178:	4b16      	ldr	r3, [pc, #88]	; (800b1d4 <rint+0x10c>)
 800b17a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b17e:	ed94 6b00 	vldr	d6, [r4]
 800b182:	4610      	mov	r0, r2
 800b184:	ec41 0b17 	vmov	d7, r0, r1
 800b188:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b18c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b190:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b194:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b198:	e008      	b.n	800b1ac <rint+0xe4>
 800b19a:	2833      	cmp	r0, #51	; 0x33
 800b19c:	dd09      	ble.n	800b1b2 <rint+0xea>
 800b19e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b1a2:	d1cd      	bne.n	800b140 <rint+0x78>
 800b1a4:	ed9d 7b00 	vldr	d7, [sp]
 800b1a8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b1ac:	ed8d 7b00 	vstr	d7, [sp]
 800b1b0:	e7c6      	b.n	800b140 <rint+0x78>
 800b1b2:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 800b1b6:	f04f 31ff 	mov.w	r1, #4294967295
 800b1ba:	40c1      	lsrs	r1, r0
 800b1bc:	420a      	tst	r2, r1
 800b1be:	d0bf      	beq.n	800b140 <rint+0x78>
 800b1c0:	0849      	lsrs	r1, r1, #1
 800b1c2:	420a      	tst	r2, r1
 800b1c4:	bf1f      	itttt	ne
 800b1c6:	ea22 0101 	bicne.w	r1, r2, r1
 800b1ca:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800b1ce:	4102      	asrne	r2, r0
 800b1d0:	430a      	orrne	r2, r1
 800b1d2:	e7d0      	b.n	800b176 <rint+0xae>
 800b1d4:	0800bb18 	.word	0x0800bb18
 800b1d8:	000fffff 	.word	0x000fffff
 800b1dc:	00000000 	.word	0x00000000

0800b1e0 <scalbn>:
 800b1e0:	b500      	push	{lr}
 800b1e2:	ed2d 8b02 	vpush	{d8}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	ed8d 0b00 	vstr	d0, [sp]
 800b1ec:	9b01      	ldr	r3, [sp, #4]
 800b1ee:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b1f2:	b9a2      	cbnz	r2, 800b21e <scalbn+0x3e>
 800b1f4:	9a00      	ldr	r2, [sp, #0]
 800b1f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	d03a      	beq.n	800b274 <scalbn+0x94>
 800b1fe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800b2b8 <scalbn+0xd8>
 800b202:	4b35      	ldr	r3, [pc, #212]	; (800b2d8 <scalbn+0xf8>)
 800b204:	ee20 7b07 	vmul.f64	d7, d0, d7
 800b208:	4298      	cmp	r0, r3
 800b20a:	ed8d 7b00 	vstr	d7, [sp]
 800b20e:	da11      	bge.n	800b234 <scalbn+0x54>
 800b210:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800b2c0 <scalbn+0xe0>
 800b214:	ed9d 6b00 	vldr	d6, [sp]
 800b218:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b21c:	e007      	b.n	800b22e <scalbn+0x4e>
 800b21e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b222:	428a      	cmp	r2, r1
 800b224:	d10a      	bne.n	800b23c <scalbn+0x5c>
 800b226:	ed9d 7b00 	vldr	d7, [sp]
 800b22a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b22e:	ed8d 7b00 	vstr	d7, [sp]
 800b232:	e01f      	b.n	800b274 <scalbn+0x94>
 800b234:	9b01      	ldr	r3, [sp, #4]
 800b236:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b23a:	3a36      	subs	r2, #54	; 0x36
 800b23c:	4402      	add	r2, r0
 800b23e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b242:	428a      	cmp	r2, r1
 800b244:	dd0a      	ble.n	800b25c <scalbn+0x7c>
 800b246:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800b2c8 <scalbn+0xe8>
 800b24a:	eeb0 0b48 	vmov.f64	d0, d8
 800b24e:	ed9d 1b00 	vldr	d1, [sp]
 800b252:	f000 f843 	bl	800b2dc <copysign>
 800b256:	ee20 7b08 	vmul.f64	d7, d0, d8
 800b25a:	e7e8      	b.n	800b22e <scalbn+0x4e>
 800b25c:	2a00      	cmp	r2, #0
 800b25e:	dd10      	ble.n	800b282 <scalbn+0xa2>
 800b260:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b264:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b268:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b26c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b270:	e9cd 0100 	strd	r0, r1, [sp]
 800b274:	ed9d 0b00 	vldr	d0, [sp]
 800b278:	b003      	add	sp, #12
 800b27a:	ecbd 8b02 	vpop	{d8}
 800b27e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b282:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b286:	da06      	bge.n	800b296 <scalbn+0xb6>
 800b288:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b28c:	4298      	cmp	r0, r3
 800b28e:	dcda      	bgt.n	800b246 <scalbn+0x66>
 800b290:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800b2c0 <scalbn+0xe0>
 800b294:	e7d9      	b.n	800b24a <scalbn+0x6a>
 800b296:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b29a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b29e:	3236      	adds	r2, #54	; 0x36
 800b2a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b2a4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b2a8:	ec41 0b17 	vmov	d7, r0, r1
 800b2ac:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800b2d0 <scalbn+0xf0>
 800b2b0:	e7b2      	b.n	800b218 <scalbn+0x38>
 800b2b2:	bf00      	nop
 800b2b4:	f3af 8000 	nop.w
 800b2b8:	00000000 	.word	0x00000000
 800b2bc:	43500000 	.word	0x43500000
 800b2c0:	c2f8f359 	.word	0xc2f8f359
 800b2c4:	01a56e1f 	.word	0x01a56e1f
 800b2c8:	8800759c 	.word	0x8800759c
 800b2cc:	7e37e43c 	.word	0x7e37e43c
 800b2d0:	00000000 	.word	0x00000000
 800b2d4:	3c900000 	.word	0x3c900000
 800b2d8:	ffff3cb0 	.word	0xffff3cb0

0800b2dc <copysign>:
 800b2dc:	ec51 0b10 	vmov	r0, r1, d0
 800b2e0:	ee11 0a90 	vmov	r0, s3
 800b2e4:	ee10 2a10 	vmov	r2, s0
 800b2e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b2ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800b2f0:	ea41 0300 	orr.w	r3, r1, r0
 800b2f4:	ec43 2b10 	vmov	d0, r2, r3
 800b2f8:	4770      	bx	lr
	...

0800b2fc <_init>:
 800b2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fe:	bf00      	nop
 800b300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b302:	bc08      	pop	{r3}
 800b304:	469e      	mov	lr, r3
 800b306:	4770      	bx	lr

0800b308 <_fini>:
 800b308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b30a:	bf00      	nop
 800b30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b30e:	bc08      	pop	{r3}
 800b310:	469e      	mov	lr, r3
 800b312:	4770      	bx	lr
