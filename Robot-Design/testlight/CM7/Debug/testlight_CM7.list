
testlight_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000731c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080075bc  080075bc  000175bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800764c  0800764c  0001764c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007654  08007654  00017654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007658  08007658  00017658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800765c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000120  20000074  080076d0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000194  080076d0  00020194  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019fa7  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002a6a  00000000  00000000  0003a049  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f10  00000000  00000000  0003cab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e08  00000000  00000000  0003d9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003a2b0  00000000  00000000  0003e7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e1df  00000000  00000000  00078a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00189259  00000000  00000000  00086c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0020feb8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004290  00000000  00000000  0020ff34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080075a4 	.word	0x080075a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	080075a4 	.word	0x080075a4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <SystemInit+0x104>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a3e      	ldr	r2, [pc, #248]	; (8000784 <SystemInit+0x104>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <SystemInit+0x104>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <SystemInit+0x104>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <SystemInit+0x108>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <SystemInit+0x108>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <SystemInit+0x10c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x10c>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <SystemInit+0x10c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <SystemInit+0x10c>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492e      	ldr	r1, [pc, #184]	; (800078c <SystemInit+0x10c>)
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x110>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemInit+0x108>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	d907      	bls.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemInit+0x108>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <SystemInit+0x108>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemInit+0x10c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemInit+0x10c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemInit+0x10c>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemInit+0x10c>)
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <SystemInit+0x114>)
 800070c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemInit+0x10c>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemInit+0x118>)
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <SystemInit+0x10c>)
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemInit+0x11c>)
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <SystemInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <SystemInit+0x10c>)
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <SystemInit+0x11c>)
 8000724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <SystemInit+0x10c>)
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <SystemInit+0x11c>)
 8000730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <SystemInit+0x10c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <SystemInit+0x10c>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <SystemInit+0x10c>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <SystemInit+0x120>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <SystemInit+0x120>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x124>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <SystemInit+0x128>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x12c>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x130>)
 800076c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000770:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x104>)
 8000774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000778:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	52002000 	.word	0x52002000
 800078c:	58024400 	.word	0x58024400
 8000790:	eaf6ed7f 	.word	0xeaf6ed7f
 8000794:	02020200 	.word	0x02020200
 8000798:	01ff0000 	.word	0x01ff0000
 800079c:	01010280 	.word	0x01010280
 80007a0:	580000c0 	.word	0x580000c0
 80007a4:	5c001000 	.word	0x5c001000
 80007a8:	ffff0000 	.word	0xffff0000
 80007ac:	51008108 	.word	0x51008108
 80007b0:	52004000 	.word	0x52004000
 80007b4:	00000000 	.word	0x00000000

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b0b8      	sub	sp, #224	; 0xe0
 80007bc:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007c6:	bf00      	nop
 80007c8:	4b59      	ldr	r3, [pc, #356]	; (8000930 <main+0x178>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d006      	beq.n	80007e2 <main+0x2a>
 80007d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80007de:	2b00      	cmp	r3, #0
 80007e0:	dcf2      	bgt.n	80007c8 <main+0x10>
  if ( timeout < 0 )
 80007e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	da01      	bge.n	80007ee <main+0x36>
  {
  Error_Handler();
 80007ea:	f000 fb29 	bl	8000e40 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 fc5f 	bl	80010b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f8ad 	bl	8000950 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007f6:	4b4e      	ldr	r3, [pc, #312]	; (8000930 <main+0x178>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	4a4c      	ldr	r2, [pc, #304]	; (8000930 <main+0x178>)
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000806:	4b4a      	ldr	r3, [pc, #296]	; (8000930 <main+0x178>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000814:	2000      	movs	r0, #0
 8000816:	f002 fa8f 	bl	8002d38 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800081a:	2100      	movs	r1, #0
 800081c:	2000      	movs	r0, #0
 800081e:	f002 faa5 	bl	8002d6c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000826:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800082a:	bf00      	nop
 800082c:	4b40      	ldr	r3, [pc, #256]	; (8000930 <main+0x178>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000834:	2b00      	cmp	r3, #0
 8000836:	d106      	bne.n	8000846 <main+0x8e>
 8000838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800083c:	1e5a      	subs	r2, r3, #1
 800083e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000842:	2b00      	cmp	r3, #0
 8000844:	dcf2      	bgt.n	800082c <main+0x74>
if ( timeout < 0 )
 8000846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800084a:	2b00      	cmp	r3, #0
 800084c:	da01      	bge.n	8000852 <main+0x9a>
{
Error_Handler();
 800084e:	f000 faf7 	bl	8000e40 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000852:	f000 fa0b 	bl	8000c6c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000856:	f000 f945 	bl	8000ae4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800085a:	f000 f9bb 	bl	8000bd4 <MX_USART3_UART_Init>
     char speech_analog_val[100];
     int speech_len;
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 800085e:	4835      	ldr	r0, [pc, #212]	; (8000934 <main+0x17c>)
 8000860:	f001 f868 	bl	8001934 <HAL_ADC_Start>
	          HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000864:	f04f 31ff 	mov.w	r1, #4294967295
 8000868:	4832      	ldr	r0, [pc, #200]	; (8000934 <main+0x17c>)
 800086a:	f001 f92d 	bl	8001ac8 <HAL_ADC_PollForConversion>
	          a_val = HAL_ADC_GetValue(&hadc1);
 800086e:	4831      	ldr	r0, [pc, #196]	; (8000934 <main+0x17c>)
 8000870:	f001 fa16 	bl	8001ca0 <HAL_ADC_GetValue>
 8000874:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
	          meas = (float)a_val / (1024 - 1) * 3.3;
 8000878:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800087c:	ee07 3a90 	vmov	s15, r3
 8000880:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000884:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8000938 <main+0x180>
 8000888:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800088c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000890:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8000928 <main+0x170>
 8000894:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000898:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800089c:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
	          if (meas < (float)0.9)
 80008a0:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80008a4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800093c <main+0x184>
 80008a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b0:	d505      	bpl.n	80008be <main+0x106>
	              HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	2102      	movs	r1, #2
 80008b6:	4822      	ldr	r0, [pc, #136]	; (8000940 <main+0x188>)
 80008b8:	f002 fa24 	bl	8002d04 <HAL_GPIO_WritePin>
 80008bc:	e004      	b.n	80008c8 <main+0x110>
	          else
	              HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2102      	movs	r1, #2
 80008c2:	481f      	ldr	r0, [pc, #124]	; (8000940 <main+0x188>)
 80008c4:	f002 fa1e 	bl	8002d04 <HAL_GPIO_WritePin>
	          speech_len = sprintf(speech_vol, "Vol_V = %.2f\r\n", meas);
 80008c8:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80008cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008d0:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80008d4:	ec53 2b17 	vmov	r2, r3, d7
 80008d8:	491a      	ldr	r1, [pc, #104]	; (8000944 <main+0x18c>)
 80008da:	f006 fa5d 	bl	8006d98 <siprintf>
 80008de:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
	          HAL_UART_Transmit(&huart3, speech_vol, speech_len, HAL_MAX_DELAY);
 80008e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	4815      	ldr	r0, [pc, #84]	; (8000948 <main+0x190>)
 80008f2:	f005 f951 	bl	8005b98 <HAL_UART_Transmit>
	          speech_len = sprintf(speech_analog_val, "Analog_Val = %d\r\n", a_val);
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80008fe:	4913      	ldr	r1, [pc, #76]	; (800094c <main+0x194>)
 8000900:	4618      	mov	r0, r3
 8000902:	f006 fa49 	bl	8006d98 <siprintf>
 8000906:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
	          HAL_UART_Transmit(&huart3, speech_analog_val, speech_len, HAL_MAX_DELAY);
 800090a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800090e:	b29a      	uxth	r2, r3
 8000910:	f107 0108 	add.w	r1, r7, #8
 8000914:	f04f 33ff 	mov.w	r3, #4294967295
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <main+0x190>)
 800091a:	f005 f93d 	bl	8005b98 <HAL_UART_Transmit>

	          HAL_Delay(500);
 800091e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000922:	f000 fc57 	bl	80011d4 <HAL_Delay>
  {
 8000926:	e79a      	b.n	800085e <main+0xa6>
 8000928:	66666666 	.word	0x66666666
 800092c:	400a6666 	.word	0x400a6666
 8000930:	58024400 	.word	0x58024400
 8000934:	20000128 	.word	0x20000128
 8000938:	447fc000 	.word	0x447fc000
 800093c:	3f666666 	.word	0x3f666666
 8000940:	58021000 	.word	0x58021000
 8000944:	080075bc 	.word	0x080075bc
 8000948:	2000009c 	.word	0x2000009c
 800094c:	080075cc 	.word	0x080075cc

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b0cc      	sub	sp, #304	; 0x130
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800095a:	224c      	movs	r2, #76	; 0x4c
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f006 fa12 	bl	8006d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000968:	2220      	movs	r2, #32
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f006 fa0b 	bl	8006d88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	4618      	mov	r0, r3
 8000978:	23bc      	movs	r3, #188	; 0xbc
 800097a:	461a      	mov	r2, r3
 800097c:	2100      	movs	r1, #0
 800097e:	f006 fa03 	bl	8006d88 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000982:	2004      	movs	r0, #4
 8000984:	f002 fa06 	bl	8002d94 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	4b51      	ldr	r3, [pc, #324]	; (8000ad4 <SystemClock_Config+0x184>)
 8000990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000992:	4a50      	ldr	r2, [pc, #320]	; (8000ad4 <SystemClock_Config+0x184>)
 8000994:	f023 0301 	bic.w	r3, r3, #1
 8000998:	62d3      	str	r3, [r2, #44]	; 0x2c
 800099a:	4b4e      	ldr	r3, [pc, #312]	; (8000ad4 <SystemClock_Config+0x184>)
 800099c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099e:	f003 0201 	and.w	r2, r3, #1
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	4b4c      	ldr	r3, [pc, #304]	; (8000ad8 <SystemClock_Config+0x188>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009ae:	4a4a      	ldr	r2, [pc, #296]	; (8000ad8 <SystemClock_Config+0x188>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b4:	6193      	str	r3, [r2, #24]
 80009b6:	4b48      	ldr	r3, [pc, #288]	; (8000ad8 <SystemClock_Config+0x188>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c6:	bf00      	nop
 80009c8:	4b43      	ldr	r3, [pc, #268]	; (8000ad8 <SystemClock_Config+0x188>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009d4:	d1f8      	bne.n	80009c8 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80009d6:	4b41      	ldr	r3, [pc, #260]	; (8000adc <SystemClock_Config+0x18c>)
 80009d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009da:	4a40      	ldr	r2, [pc, #256]	; (8000adc <SystemClock_Config+0x18c>)
 80009dc:	f023 0303 	bic.w	r3, r3, #3
 80009e0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e2:	2302      	movs	r3, #2
 80009e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a04:	4618      	mov	r0, r3
 8000a06:	f002 fa1f 	bl	8002e48 <HAL_RCC_OscConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a10:	f000 fa16 	bl	8000e40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a14:	233f      	movs	r3, #63	; 0x3f
 8000a16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fe0c 	bl	8003668 <HAL_RCC_ClockConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000a56:	f000 f9f3 	bl	8000e40 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC;
 8000a5a:	f107 0308 	add.w	r3, r7, #8
 8000a5e:	4a20      	ldr	r2, [pc, #128]	; (8000ae0 <SystemClock_Config+0x190>)
 8000a60:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	2220      	movs	r2, #32
 8000a68:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	2281      	movs	r2, #129	; 0x81
 8000a70:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	2202      	movs	r2, #2
 8000a78:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	2202      	movs	r2, #2
 8000a80:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	2202      	movs	r2, #2
 8000a88:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	2240      	movs	r2, #64	; 0x40
 8000a90:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab4:	f107 0308 	add.w	r3, r7, #8
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 f959 	bl	8003d70 <HAL_RCCEx_PeriphCLKConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x178>
  {
    Error_Handler();
 8000ac4:	f000 f9bc 	bl	8000e40 <Error_Handler>
  }
}
 8000ac8:	bf00      	nop
 8000aca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	58000400 	.word	0x58000400
 8000ad8:	58024800 	.word	0x58024800
 8000adc:	58024400 	.word	0x58024400
 8000ae0:	00080002 	.word	0x00080002

08000ae4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000af6:	463b      	mov	r3, r7
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
 8000b04:	615a      	str	r2, [r3, #20]
 8000b06:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b08:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <MX_ADC1_Init+0xe4>)
 8000b0a:	4a30      	ldr	r2, [pc, #192]	; (8000bcc <MX_ADC1_Init+0xe8>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b0e:	4b2e      	ldr	r3, [pc, #184]	; (8000bc8 <MX_ADC1_Init+0xe4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000b14:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <MX_ADC1_Init+0xe4>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b1a:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <MX_ADC1_Init+0xe4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b20:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <MX_ADC1_Init+0xe4>)
 8000b22:	2204      	movs	r2, #4
 8000b24:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b26:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <MX_ADC1_Init+0xe4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b2c:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <MX_ADC1_Init+0xe4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000b32:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <MX_ADC1_Init+0xe4>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b38:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <MX_ADC1_Init+0xe4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b3e:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <MX_ADC1_Init+0xe4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b44:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <MX_ADC1_Init+0xe4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b4a:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <MX_ADC1_Init+0xe4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b50:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <MX_ADC1_Init+0xe4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <MX_ADC1_Init+0xe4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <MX_ADC1_Init+0xe4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b64:	4818      	ldr	r0, [pc, #96]	; (8000bc8 <MX_ADC1_Init+0xe4>)
 8000b66:	f000 fd45 	bl	80015f4 <HAL_ADC_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b70:	f000 f966 	bl	8000e40 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4812      	ldr	r0, [pc, #72]	; (8000bc8 <MX_ADC1_Init+0xe4>)
 8000b80:	f001 fd52 	bl	8002628 <HAL_ADCEx_MultiModeConfigChannel>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000b8a:	f000 f959 	bl	8000e40 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_ADC1_Init+0xec>)
 8000b90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b92:	2306      	movs	r3, #6
 8000b94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b9a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b9e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bac:	463b      	mov	r3, r7
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_ADC1_Init+0xe4>)
 8000bb2:	f001 f883 	bl	8001cbc <HAL_ADC_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000bbc:	f000 f940 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	3728      	adds	r7, #40	; 0x28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000128 	.word	0x20000128
 8000bcc:	40022000 	.word	0x40022000
 8000bd0:	3ef08000 	.word	0x3ef08000

08000bd4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bd8:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <MX_USART3_UART_Init+0x90>)
 8000bda:	4a23      	ldr	r2, [pc, #140]	; (8000c68 <MX_USART3_UART_Init+0x94>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bde:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <MX_USART3_UART_Init+0x90>)
 8000be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <MX_USART3_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <MX_USART3_UART_Init+0x90>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <MX_USART3_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_USART3_UART_Init+0x90>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <MX_USART3_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_USART3_UART_Init+0x90>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <MX_USART3_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_USART3_UART_Init+0x90>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_USART3_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c1c:	4811      	ldr	r0, [pc, #68]	; (8000c64 <MX_USART3_UART_Init+0x90>)
 8000c1e:	f004 ff6b 	bl	8005af8 <HAL_UART_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c28:	f000 f90a 	bl	8000e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	480d      	ldr	r0, [pc, #52]	; (8000c64 <MX_USART3_UART_Init+0x90>)
 8000c30:	f005 ff9b 	bl	8006b6a <HAL_UARTEx_SetTxFifoThreshold>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c3a:	f000 f901 	bl	8000e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4808      	ldr	r0, [pc, #32]	; (8000c64 <MX_USART3_UART_Init+0x90>)
 8000c42:	f005 ffd0 	bl	8006be6 <HAL_UARTEx_SetRxFifoThreshold>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c4c:	f000 f8f8 	bl	8000e40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <MX_USART3_UART_Init+0x90>)
 8000c52:	f005 ff51 	bl	8006af8 <HAL_UARTEx_DisableFifoMode>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c5c:	f000 f8f0 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	2000009c 	.word	0x2000009c
 8000c68:	40004800 	.word	0x40004800

08000c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08c      	sub	sp, #48	; 0x30
 8000c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	4b69      	ldr	r3, [pc, #420]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	4a67      	ldr	r2, [pc, #412]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c92:	4b65      	ldr	r3, [pc, #404]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
 8000c9e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca0:	4b61      	ldr	r3, [pc, #388]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca6:	4a60      	ldr	r2, [pc, #384]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb0:	4b5d      	ldr	r3, [pc, #372]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b5a      	ldr	r3, [pc, #360]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc4:	4a58      	ldr	r2, [pc, #352]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cce:	4b56      	ldr	r3, [pc, #344]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b52      	ldr	r3, [pc, #328]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce2:	4a51      	ldr	r2, [pc, #324]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cec:	4b4e      	ldr	r3, [pc, #312]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfa:	4b4b      	ldr	r3, [pc, #300]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d00:	4a49      	ldr	r2, [pc, #292]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0a:	4b47      	ldr	r3, [pc, #284]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d18:	4b43      	ldr	r3, [pc, #268]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1e:	4a42      	ldr	r2, [pc, #264]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d28:	4b3f      	ldr	r3, [pc, #252]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d36:	4b3c      	ldr	r3, [pc, #240]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3c:	4a3a      	ldr	r2, [pc, #232]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000d3e:	f043 0310 	orr.w	r3, r3, #16
 8000d42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d46:	4b38      	ldr	r3, [pc, #224]	; (8000e28 <MX_GPIO_Init+0x1bc>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4c:	f003 0310 	and.w	r3, r3, #16
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2102      	movs	r1, #2
 8000d58:	4834      	ldr	r0, [pc, #208]	; (8000e2c <MX_GPIO_Init+0x1c0>)
 8000d5a:	f001 ffd3 	bl	8002d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d5e:	2332      	movs	r3, #50	; 0x32
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d6e:	230b      	movs	r3, #11
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4619      	mov	r1, r3
 8000d78:	482d      	ldr	r0, [pc, #180]	; (8000e30 <MX_GPIO_Init+0x1c4>)
 8000d7a:	f001 fe13 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d7e:	2386      	movs	r3, #134	; 0x86
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d8e:	230b      	movs	r3, #11
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4619      	mov	r1, r3
 8000d98:	4826      	ldr	r0, [pc, #152]	; (8000e34 <MX_GPIO_Init+0x1c8>)
 8000d9a:	f001 fe03 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db0:	230b      	movs	r3, #11
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	481f      	ldr	r0, [pc, #124]	; (8000e38 <MX_GPIO_Init+0x1cc>)
 8000dbc:	f001 fdf2 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000dc0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000dd2:	230a      	movs	r3, #10
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4815      	ldr	r0, [pc, #84]	; (8000e34 <MX_GPIO_Init+0x1c8>)
 8000dde:	f001 fde1 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000de2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df4:	230b      	movs	r3, #11
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480f      	ldr	r0, [pc, #60]	; (8000e3c <MX_GPIO_Init+0x1d0>)
 8000e00:	f001 fdd0 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e04:	2302      	movs	r3, #2
 8000e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_GPIO_Init+0x1c0>)
 8000e1c:	f001 fdc2 	bl	80029a4 <HAL_GPIO_Init>

}
 8000e20:	bf00      	nop
 8000e22:	3730      	adds	r7, #48	; 0x30
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	58021000 	.word	0x58021000
 8000e30:	58020800 	.word	0x58020800
 8000e34:	58020000 	.word	0x58020000
 8000e38:	58020400 	.word	0x58020400
 8000e3c:	58021800 	.word	0x58021800

08000e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <Error_Handler+0x6>

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_MspInit+0x30>)
 8000e50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e54:	4a08      	ldr	r2, [pc, #32]	; (8000e78 <HAL_MspInit+0x30>)
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_MspInit+0x30>)
 8000e60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	58024400 	.word	0x58024400

08000e7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a18      	ldr	r2, [pc, #96]	; (8000efc <HAL_ADC_MspInit+0x80>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d129      	bne.n	8000ef2 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <HAL_ADC_MspInit+0x84>)
 8000ea0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea4:	4a16      	ldr	r2, [pc, #88]	; (8000f00 <HAL_ADC_MspInit+0x84>)
 8000ea6:	f043 0320 	orr.w	r3, r3, #32
 8000eaa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <HAL_ADC_MspInit+0x84>)
 8000eb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb4:	f003 0320 	and.w	r3, r3, #32
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <HAL_ADC_MspInit+0x84>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec2:	4a0f      	ldr	r2, [pc, #60]	; (8000f00 <HAL_ADC_MspInit+0x84>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_ADC_MspInit+0x84>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000eda:	2308      	movs	r3, #8
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <HAL_ADC_MspInit+0x88>)
 8000eee:	f001 fd59 	bl	80029a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40022000 	.word	0x40022000
 8000f00:	58024400 	.word	0x58024400
 8000f04:	58020000 	.word	0x58020000

08000f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a1a      	ldr	r2, [pc, #104]	; (8000f90 <HAL_UART_MspInit+0x88>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d12e      	bne.n	8000f88 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <HAL_UART_MspInit+0x8c>)
 8000f2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f30:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <HAL_UART_MspInit+0x8c>)
 8000f32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <HAL_UART_MspInit+0x8c>)
 8000f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_UART_MspInit+0x8c>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4e:	4a11      	ldr	r2, [pc, #68]	; (8000f94 <HAL_UART_MspInit+0x8c>)
 8000f50:	f043 0308 	orr.w	r3, r3, #8
 8000f54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_UART_MspInit+0x8c>)
 8000f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f78:	2307      	movs	r3, #7
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <HAL_UART_MspInit+0x90>)
 8000f84:	f001 fd0e 	bl	80029a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f88:	bf00      	nop
 8000f8a:	3728      	adds	r7, #40	; 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40004800 	.word	0x40004800
 8000f94:	58024400 	.word	0x58024400
 8000f98:	58020c00 	.word	0x58020c00

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <MemManage_Handler+0x4>

08000fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe8:	f000 f8d4 	bl	8001194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	; (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d207      	bcs.n	8001030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001020:	f005 fe88 	bl	8006d34 <__errno>
 8001024:	4602      	mov	r2, r0
 8001026:	230c      	movs	r3, #12
 8001028:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	e009      	b.n	8001044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <_sbrk+0x64>)
 8001040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20020000 	.word	0x20020000
 8001050:	00000400 	.word	0x00000400
 8001054:	20000090 	.word	0x20000090
 8001058:	20000198 	.word	0x20000198

0800105c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800105c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001094 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001060:	f7ff fb0e 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001064:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001066:	e003      	b.n	8001070 <LoopCopyDataInit>

08001068 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800106a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800106c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800106e:	3104      	adds	r1, #4

08001070 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001070:	480a      	ldr	r0, [pc, #40]	; (800109c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001074:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001076:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001078:	d3f6      	bcc.n	8001068 <CopyDataInit>
  ldr  r2, =_sbss
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800107c:	e002      	b.n	8001084 <LoopFillZerobss>

0800107e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800107e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001080:	f842 3b04 	str.w	r3, [r2], #4

08001084 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001086:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001088:	d3f9      	bcc.n	800107e <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 800108a:	f005 fe59 	bl	8006d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108e:	f7ff fb93 	bl	80007b8 <main>
  bx  lr    
 8001092:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001094:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001098:	0800765c 	.word	0x0800765c
  ldr  r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010a0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80010a4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80010a8:	20000194 	.word	0x20000194

080010ac <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ac:	e7fe      	b.n	80010ac <ADC3_IRQHandler>
	...

080010b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b6:	2003      	movs	r0, #3
 80010b8:	f001 fc42 	bl	8002940 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010bc:	f002 fc8a 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 80010c0:	4601      	mov	r1, r0
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_Init+0x68>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	0a1b      	lsrs	r3, r3, #8
 80010c8:	f003 030f 	and.w	r3, r3, #15
 80010cc:	4a13      	ldr	r2, [pc, #76]	; (800111c <HAL_Init+0x6c>)
 80010ce:	5cd3      	ldrb	r3, [r2, r3]
 80010d0:	f003 031f 	and.w	r3, r3, #31
 80010d4:	fa21 f303 	lsr.w	r3, r1, r3
 80010d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_Init+0x68>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_Init+0x6c>)
 80010e4:	5cd3      	ldrb	r3, [r2, r3]
 80010e6:	f003 031f 	and.w	r3, r3, #31
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	fa22 f303 	lsr.w	r3, r2, r3
 80010f0:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <HAL_Init+0x70>)
 80010f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010f4:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <HAL_Init+0x74>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f814 	bl	8001128 <HAL_InitTick>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e002      	b.n	8001110 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800110a:	f7ff fe9d 	bl	8000e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	58024400 	.word	0x58024400
 800111c:	080075f0 	.word	0x080075f0
 8001120:	20000004 	.word	0x20000004
 8001124:	20000000 	.word	0x20000000

08001128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_InitTick+0x60>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e021      	b.n	8001180 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_InitTick+0x64>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_InitTick+0x60>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	fbb3 f3f1 	udiv	r3, r3, r1
 800114e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f001 fc19 	bl	800298a <HAL_SYSTICK_Config>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e00e      	b.n	8001180 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b0f      	cmp	r3, #15
 8001166:	d80a      	bhi.n	800117e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001168:	2200      	movs	r2, #0
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f001 fbf1 	bl	8002956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001174:	4a06      	ldr	r2, [pc, #24]	; (8001190 <HAL_InitTick+0x68>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e000      	b.n	8001180 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000000c 	.word	0x2000000c
 800118c:	20000000 	.word	0x20000000
 8001190:	20000008 	.word	0x20000008

08001194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x20>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x24>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <HAL_IncTick+0x24>)
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	2000000c 	.word	0x2000000c
 80011b8:	2000018c 	.word	0x2000018c

080011bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <HAL_GetTick+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	2000018c 	.word	0x2000018c

080011d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff ffee 	bl	80011bc <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d005      	beq.n	80011fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_Delay+0x40>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fa:	bf00      	nop
 80011fc:	f7ff ffde 	bl	80011bc <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8f7      	bhi.n	80011fc <HAL_Delay+0x28>
  {
  }
}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000000c 	.word	0x2000000c

08001218 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <HAL_GetREVID+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	0c1b      	lsrs	r3, r3, #16
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	5c001000 	.word	0x5c001000

08001230 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	609a      	str	r2, [r3, #8]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	609a      	str	r2, [r3, #8]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	3360      	adds	r3, #96	; 0x60
 80012aa:	461a      	mov	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	430b      	orrs	r3, r1
 80012c6:	431a      	orrs	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80012cc:	bf00      	nop
 80012ce:	371c      	adds	r7, #28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	f003 031f 	and.w	r3, r3, #31
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3
 80012f8:	431a      	orrs	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	611a      	str	r2, [r3, #16]
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800130a:	b480      	push	{r7}
 800130c:	b087      	sub	sp, #28
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	3360      	adds	r3, #96	; 0x60
 800131a:	461a      	mov	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	431a      	orrs	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	601a      	str	r2, [r3, #0]
  }
}
 8001334:	bf00      	nop
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001366:	b480      	push	{r7}
 8001368:	b087      	sub	sp, #28
 800136a:	af00      	add	r7, sp, #0
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3330      	adds	r3, #48	; 0x30
 8001376:	461a      	mov	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	0a1b      	lsrs	r3, r3, #8
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	4413      	add	r3, r2
 8001384:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	f003 031f 	and.w	r3, r3, #31
 8001390:	211f      	movs	r1, #31
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	401a      	ands	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	0e9b      	lsrs	r3, r3, #26
 800139e:	f003 011f 	and.w	r1, r3, #31
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	f003 031f 	and.w	r3, r3, #31
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	431a      	orrs	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013b2:	bf00      	nop
 80013b4:	371c      	adds	r7, #28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013be:	b480      	push	{r7}
 80013c0:	b087      	sub	sp, #28
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	3314      	adds	r3, #20
 80013ce:	461a      	mov	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	0e5b      	lsrs	r3, r3, #25
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	4413      	add	r3, r2
 80013dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	0d1b      	lsrs	r3, r3, #20
 80013e6:	f003 031f 	and.w	r3, r3, #31
 80013ea:	2107      	movs	r1, #7
 80013ec:	fa01 f303 	lsl.w	r3, r1, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	401a      	ands	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	0d1b      	lsrs	r3, r3, #20
 80013f8:	f003 031f 	and.w	r3, r3, #31
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	431a      	orrs	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001408:	bf00      	nop
 800140a:	371c      	adds	r7, #28
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800142c:	43db      	mvns	r3, r3
 800142e:	401a      	ands	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0318 	and.w	r3, r3, #24
 8001436:	4908      	ldr	r1, [pc, #32]	; (8001458 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001438:	40d9      	lsrs	r1, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	400b      	ands	r3, r1
 800143e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001442:	431a      	orrs	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	000fffff 	.word	0x000fffff

0800145c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 031f 	and.w	r3, r3, #31
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6093      	str	r3, [r2, #8]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	5fffffc0 	.word	0x5fffffc0

080014b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014cc:	d101      	bne.n	80014d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <LL_ADC_EnableInternalRegulator+0x24>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	6fffffc0 	.word	0x6fffffc0

08001508 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001518:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800151c:	d101      	bne.n	8001522 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <LL_ADC_Enable+0x24>)
 800153e:	4013      	ands	r3, r2
 8001540:	f043 0201 	orr.w	r2, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	7fffffc0 	.word	0x7fffffc0

08001558 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <LL_ADC_IsEnabled+0x18>
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <LL_ADC_IsEnabled+0x1a>
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <LL_ADC_REG_StartConversion+0x24>)
 800158e:	4013      	ands	r3, r2
 8001590:	f043 0204 	orr.w	r2, r3, #4
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	7fffffc0 	.word	0x7fffffc0

080015a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d101      	bne.n	80015c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d101      	bne.n	80015e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e18e      	b.n	800192c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001618:	2b00      	cmp	r3, #0
 800161a:	d109      	bne.n	8001630 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff fc2d 	bl	8000e7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff3f 	bl	80014b8 <LL_ADC_IsDeepPowerDownEnabled>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d004      	beq.n	800164a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff25 	bl	8001494 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff5a 	bl	8001508 <LL_ADC_IsInternalRegulatorEnabled>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d113      	bne.n	8001682 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ff3e 	bl	80014e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001664:	4b9a      	ldr	r3, [pc, #616]	; (80018d0 <HAL_ADC_Init+0x2dc>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	099b      	lsrs	r3, r3, #6
 800166a:	4a9a      	ldr	r2, [pc, #616]	; (80018d4 <HAL_ADC_Init+0x2e0>)
 800166c:	fba2 2303 	umull	r2, r3, r2, r3
 8001670:	099b      	lsrs	r3, r3, #6
 8001672:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001674:	e002      	b.n	800167c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	3b01      	subs	r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f9      	bne.n	8001676 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff3e 	bl	8001508 <LL_ADC_IsInternalRegulatorEnabled>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10d      	bne.n	80016ae <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001696:	f043 0210 	orr.w	r2, r3, #16
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a2:	f043 0201 	orr.w	r2, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff78 	bl	80015a8 <LL_ADC_REG_IsConversionOngoing>
 80016b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f040 8129 	bne.w	800191a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f040 8125 	bne.w	800191a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016d8:	f043 0202 	orr.w	r2, r3, #2
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff37 	bl	8001558 <LL_ADC_IsEnabled>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d136      	bne.n	800175e <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a78      	ldr	r2, [pc, #480]	; (80018d8 <HAL_ADC_Init+0x2e4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d004      	beq.n	8001704 <HAL_ADC_Init+0x110>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a77      	ldr	r2, [pc, #476]	; (80018dc <HAL_ADC_Init+0x2e8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d10e      	bne.n	8001722 <HAL_ADC_Init+0x12e>
 8001704:	4874      	ldr	r0, [pc, #464]	; (80018d8 <HAL_ADC_Init+0x2e4>)
 8001706:	f7ff ff27 	bl	8001558 <LL_ADC_IsEnabled>
 800170a:	4604      	mov	r4, r0
 800170c:	4873      	ldr	r0, [pc, #460]	; (80018dc <HAL_ADC_Init+0x2e8>)
 800170e:	f7ff ff23 	bl	8001558 <LL_ADC_IsEnabled>
 8001712:	4603      	mov	r3, r0
 8001714:	4323      	orrs	r3, r4
 8001716:	2b00      	cmp	r3, #0
 8001718:	bf0c      	ite	eq
 800171a:	2301      	moveq	r3, #1
 800171c:	2300      	movne	r3, #0
 800171e:	b2db      	uxtb	r3, r3
 8001720:	e008      	b.n	8001734 <HAL_ADC_Init+0x140>
 8001722:	486f      	ldr	r0, [pc, #444]	; (80018e0 <HAL_ADC_Init+0x2ec>)
 8001724:	f7ff ff18 	bl	8001558 <LL_ADC_IsEnabled>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	bf0c      	ite	eq
 800172e:	2301      	moveq	r3, #1
 8001730:	2300      	movne	r3, #0
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d012      	beq.n	800175e <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a66      	ldr	r2, [pc, #408]	; (80018d8 <HAL_ADC_Init+0x2e4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d004      	beq.n	800174c <HAL_ADC_Init+0x158>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a65      	ldr	r2, [pc, #404]	; (80018dc <HAL_ADC_Init+0x2e8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d101      	bne.n	8001750 <HAL_ADC_Init+0x15c>
 800174c:	4a65      	ldr	r2, [pc, #404]	; (80018e4 <HAL_ADC_Init+0x2f0>)
 800174e:	e000      	b.n	8001752 <HAL_ADC_Init+0x15e>
 8001750:	4a65      	ldr	r2, [pc, #404]	; (80018e8 <HAL_ADC_Init+0x2f4>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	4619      	mov	r1, r3
 8001758:	4610      	mov	r0, r2
 800175a:	f7ff fd69 	bl	8001230 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800175e:	f7ff fd5b 	bl	8001218 <HAL_GetREVID>
 8001762:	4602      	mov	r2, r0
 8001764:	f241 0303 	movw	r3, #4099	; 0x1003
 8001768:	429a      	cmp	r2, r3
 800176a:	d914      	bls.n	8001796 <HAL_ADC_Init+0x1a2>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b10      	cmp	r3, #16
 8001772:	d110      	bne.n	8001796 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7d5b      	ldrb	r3, [r3, #21]
 8001778:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800177e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001784:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	7f1b      	ldrb	r3, [r3, #28]
 800178a:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800178c:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800178e:	f043 030c 	orr.w	r3, r3, #12
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	e00d      	b.n	80017b2 <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7d5b      	ldrb	r3, [r3, #21]
 800179a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017a0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80017a6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7f1b      	ldrb	r3, [r3, #28]
 80017ac:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7f1b      	ldrb	r3, [r3, #28]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d106      	bne.n	80017c8 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	3b01      	subs	r3, #1
 80017c0:	045b      	lsls	r3, r3, #17
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d009      	beq.n	80017e4 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	4b40      	ldr	r3, [pc, #256]	; (80018ec <HAL_ADC_Init+0x2f8>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	69b9      	ldr	r1, [r7, #24]
 80017f4:	430b      	orrs	r3, r1
 80017f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fed3 	bl	80015a8 <LL_ADC_REG_IsConversionOngoing>
 8001802:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fee0 	bl	80015ce <LL_ADC_INJ_IsConversionOngoing>
 800180e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d14a      	bne.n	80018ac <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d147      	bne.n	80018ac <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	7d1b      	ldrb	r3, [r3, #20]
 8001820:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <HAL_ADC_Init+0x2fc>)
 8001832:	4013      	ands	r3, r2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	69b9      	ldr	r1, [r7, #24]
 800183a:	430b      	orrs	r3, r1
 800183c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001844:	2b01      	cmp	r3, #1
 8001846:	d11b      	bne.n	8001880 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <HAL_ADC_Init+0x300>)
 8001856:	4013      	ands	r3, r2
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800185c:	3a01      	subs	r2, #1
 800185e:	0411      	lsls	r1, r2, #16
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001864:	4311      	orrs	r1, r2
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800186a:	4311      	orrs	r1, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001870:	430a      	orrs	r2, r1
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 0201 	orr.w	r2, r2, #1
 800187c:	611a      	str	r2, [r3, #16]
 800187e:	e007      	b.n	8001890 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	691a      	ldr	r2, [r3, #16]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0201 	bic.w	r2, r2, #1
 800188e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 fda0 	bl	80023ec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d121      	bne.n	80018f8 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f023 010f 	bic.w	r1, r3, #15
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	1e5a      	subs	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30
 80018cc:	e01c      	b.n	8001908 <HAL_ADC_Init+0x314>
 80018ce:	bf00      	nop
 80018d0:	20000000 	.word	0x20000000
 80018d4:	053e2d63 	.word	0x053e2d63
 80018d8:	40022000 	.word	0x40022000
 80018dc:	40022100 	.word	0x40022100
 80018e0:	58026000 	.word	0x58026000
 80018e4:	40022300 	.word	0x40022300
 80018e8:	58026300 	.word	0x58026300
 80018ec:	fff0c003 	.word	0xfff0c003
 80018f0:	ffffbffc 	.word	0xffffbffc
 80018f4:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 020f 	bic.w	r2, r2, #15
 8001906:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190c:	f023 0303 	bic.w	r3, r3, #3
 8001910:	f043 0201 	orr.w	r2, r3, #1
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	655a      	str	r2, [r3, #84]	; 0x54
 8001918:	e007      	b.n	800192a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191e:	f043 0210 	orr.w	r2, r3, #16
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800192a:	7ffb      	ldrb	r3, [r7, #31]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3724      	adds	r7, #36	; 0x24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd90      	pop	{r4, r7, pc}

08001934 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a5c      	ldr	r2, [pc, #368]	; (8001ab4 <HAL_ADC_Start+0x180>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d004      	beq.n	8001950 <HAL_ADC_Start+0x1c>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a5b      	ldr	r2, [pc, #364]	; (8001ab8 <HAL_ADC_Start+0x184>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d101      	bne.n	8001954 <HAL_ADC_Start+0x20>
 8001950:	4b5a      	ldr	r3, [pc, #360]	; (8001abc <HAL_ADC_Start+0x188>)
 8001952:	e000      	b.n	8001956 <HAL_ADC_Start+0x22>
 8001954:	4b5a      	ldr	r3, [pc, #360]	; (8001ac0 <HAL_ADC_Start+0x18c>)
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fd80 	bl	800145c <LL_ADC_GetMultimode>
 800195c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fe20 	bl	80015a8 <LL_ADC_REG_IsConversionOngoing>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	f040 809a 	bne.w	8001aa4 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_ADC_Start+0x4a>
 800197a:	2302      	movs	r3, #2
 800197c:	e095      	b.n	8001aaa <HAL_ADC_Start+0x176>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fcac 	bl	80022e4 <ADC_Enable>
 800198c:	4603      	mov	r3, r0
 800198e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f040 8081 	bne.w	8001a9a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800199c:	4b49      	ldr	r3, [pc, #292]	; (8001ac4 <HAL_ADC_Start+0x190>)
 800199e:	4013      	ands	r3, r2
 80019a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a42      	ldr	r2, [pc, #264]	; (8001ab8 <HAL_ADC_Start+0x184>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d002      	beq.n	80019b8 <HAL_ADC_Start+0x84>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	e000      	b.n	80019ba <HAL_ADC_Start+0x86>
 80019b8:	4b3e      	ldr	r3, [pc, #248]	; (8001ab4 <HAL_ADC_Start+0x180>)
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	4293      	cmp	r3, r2
 80019c0:	d002      	beq.n	80019c8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d105      	bne.n	80019d4 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019e0:	d106      	bne.n	80019f0 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	f023 0206 	bic.w	r2, r3, #6
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	659a      	str	r2, [r3, #88]	; 0x58
 80019ee:	e002      	b.n	80019f6 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	221c      	movs	r2, #28
 80019fc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a2b      	ldr	r2, [pc, #172]	; (8001ab8 <HAL_ADC_Start+0x184>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d002      	beq.n	8001a16 <HAL_ADC_Start+0xe2>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	e000      	b.n	8001a18 <HAL_ADC_Start+0xe4>
 8001a16:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <HAL_ADC_Start+0x180>)
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d008      	beq.n	8001a32 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d002      	beq.n	8001a32 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	2b09      	cmp	r3, #9
 8001a30:	d114      	bne.n	8001a5c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d007      	beq.n	8001a50 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fd93 	bl	8001580 <LL_ADC_REG_StartConversion>
 8001a5a:	e025      	b.n	8001aa8 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a60:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <HAL_ADC_Start+0x184>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d002      	beq.n	8001a78 <HAL_ADC_Start+0x144>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	e000      	b.n	8001a7a <HAL_ADC_Start+0x146>
 8001a78:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_ADC_Start+0x180>)
 8001a7a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00f      	beq.n	8001aa8 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	655a      	str	r2, [r3, #84]	; 0x54
 8001a98:	e006      	b.n	8001aa8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001aa2:	e001      	b.n	8001aa8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40022000 	.word	0x40022000
 8001ab8:	40022100 	.word	0x40022100
 8001abc:	40022300 	.word	0x40022300
 8001ac0:	58026300 	.word	0x58026300
 8001ac4:	fffff0fe 	.word	0xfffff0fe

08001ac8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a6e      	ldr	r2, [pc, #440]	; (8001c90 <HAL_ADC_PollForConversion+0x1c8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d004      	beq.n	8001ae6 <HAL_ADC_PollForConversion+0x1e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a6c      	ldr	r2, [pc, #432]	; (8001c94 <HAL_ADC_PollForConversion+0x1cc>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d101      	bne.n	8001aea <HAL_ADC_PollForConversion+0x22>
 8001ae6:	4b6c      	ldr	r3, [pc, #432]	; (8001c98 <HAL_ADC_PollForConversion+0x1d0>)
 8001ae8:	e000      	b.n	8001aec <HAL_ADC_PollForConversion+0x24>
 8001aea:	4b6c      	ldr	r3, [pc, #432]	; (8001c9c <HAL_ADC_PollForConversion+0x1d4>)
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fcb5 	bl	800145c <LL_ADC_GetMultimode>
 8001af2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d102      	bne.n	8001b02 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001afc:	2308      	movs	r3, #8
 8001afe:	61fb      	str	r3, [r7, #28]
 8001b00:	e037      	b.n	8001b72 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	2b05      	cmp	r3, #5
 8001b0c:	d002      	beq.n	8001b14 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2b09      	cmp	r3, #9
 8001b12:	d111      	bne.n	8001b38 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d007      	beq.n	8001b32 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b26:	f043 0220 	orr.w	r2, r3, #32
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0aa      	b.n	8001c88 <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b32:	2304      	movs	r3, #4
 8001b34:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001b36:	e01c      	b.n	8001b72 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a54      	ldr	r2, [pc, #336]	; (8001c90 <HAL_ADC_PollForConversion+0x1c8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d004      	beq.n	8001b4c <HAL_ADC_PollForConversion+0x84>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a53      	ldr	r2, [pc, #332]	; (8001c94 <HAL_ADC_PollForConversion+0x1cc>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d101      	bne.n	8001b50 <HAL_ADC_PollForConversion+0x88>
 8001b4c:	4b52      	ldr	r3, [pc, #328]	; (8001c98 <HAL_ADC_PollForConversion+0x1d0>)
 8001b4e:	e000      	b.n	8001b52 <HAL_ADC_PollForConversion+0x8a>
 8001b50:	4b52      	ldr	r3, [pc, #328]	; (8001c9c <HAL_ADC_PollForConversion+0x1d4>)
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fc90 	bl	8001478 <LL_ADC_GetMultiDMATransfer>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b62:	f043 0220 	orr.w	r2, r3, #32
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e08c      	b.n	8001c88 <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b6e:	2304      	movs	r3, #4
 8001b70:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b72:	f7ff fb23 	bl	80011bc <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b78:	e01a      	b.n	8001bb0 <HAL_ADC_PollForConversion+0xe8>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d016      	beq.n	8001bb0 <HAL_ADC_PollForConversion+0xe8>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001b82:	f7ff fb1b 	bl	80011bc <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d302      	bcc.n	8001b98 <HAL_ADC_PollForConversion+0xd0>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10b      	bne.n	8001bb0 <HAL_ADC_PollForConversion+0xe8>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9c:	f043 0204 	orr.w	r2, r3, #4
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e06b      	b.n	8001c88 <HAL_ADC_PollForConversion+0x1c0>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0dd      	beq.n	8001b7a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fbb6 	bl	8001340 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d01c      	beq.n	8001c14 <HAL_ADC_PollForConversion+0x14c>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	7d5b      	ldrb	r3, [r3, #21]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d118      	bne.n	8001c14 <HAL_ADC_PollForConversion+0x14c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d111      	bne.n	8001c14 <HAL_ADC_PollForConversion+0x14c>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d105      	bne.n	8001c14 <HAL_ADC_PollForConversion+0x14c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0c:	f043 0201 	orr.w	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1e      	ldr	r2, [pc, #120]	; (8001c94 <HAL_ADC_PollForConversion+0x1cc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d002      	beq.n	8001c24 <HAL_ADC_PollForConversion+0x15c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	e000      	b.n	8001c26 <HAL_ADC_PollForConversion+0x15e>
 8001c24:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <HAL_ADC_PollForConversion+0x1c8>)
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d008      	beq.n	8001c40 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2b05      	cmp	r3, #5
 8001c38:	d002      	beq.n	8001c40 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2b09      	cmp	r3, #9
 8001c3e:	d104      	bne.n	8001c4a <HAL_ADC_PollForConversion+0x182>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	61bb      	str	r3, [r7, #24]
 8001c48:	e00c      	b.n	8001c64 <HAL_ADC_PollForConversion+0x19c>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a11      	ldr	r2, [pc, #68]	; (8001c94 <HAL_ADC_PollForConversion+0x1cc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d002      	beq.n	8001c5a <HAL_ADC_PollForConversion+0x192>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	e000      	b.n	8001c5c <HAL_ADC_PollForConversion+0x194>
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <HAL_ADC_PollForConversion+0x1c8>)
 8001c5c:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d104      	bne.n	8001c74 <HAL_ADC_PollForConversion+0x1ac>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2208      	movs	r2, #8
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	e008      	b.n	8001c86 <HAL_ADC_PollForConversion+0x1be>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d103      	bne.n	8001c86 <HAL_ADC_PollForConversion+0x1be>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	220c      	movs	r2, #12
 8001c84:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3720      	adds	r7, #32
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40022000 	.word	0x40022000
 8001c94:	40022100 	.word	0x40022100
 8001c98:	40022300 	.word	0x40022300
 8001c9c:	58026300 	.word	0x58026300

08001ca0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b099      	sub	sp, #100	; 0x64
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	4a99      	ldr	r2, [pc, #612]	; (8001f3c <HAL_ADC_ConfigChannel+0x280>)
 8001cd6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x2a>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e2e6      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x5f8>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fc58 	bl	80015a8 <LL_ADC_REG_IsConversionOngoing>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f040 82cb 	bne.w	8002296 <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d108      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x62>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0e9b      	lsrs	r3, r3, #26
 8001d12:	f003 031f 	and.w	r3, r3, #31
 8001d16:	2201      	movs	r2, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	e00f      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x82>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d2e:	fab3 f383 	clz	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	2201      	movs	r2, #1
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	69d1      	ldr	r1, [r2, #28]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	6859      	ldr	r1, [r3, #4]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f7ff fb04 	bl	8001366 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fc20 	bl	80015a8 <LL_ADC_REG_IsConversionOngoing>
 8001d68:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fc2d 	bl	80015ce <LL_ADC_INJ_IsConversionOngoing>
 8001d74:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 80b3 	bne.w	8001ee4 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f040 80af 	bne.w	8001ee4 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6819      	ldr	r1, [r3, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	461a      	mov	r2, r3
 8001d94:	f7ff fb13 	bl	80013be <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d98:	4b69      	ldr	r3, [pc, #420]	; (8001f40 <HAL_ADC_ConfigChannel+0x284>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001da4:	d10b      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x102>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	089b      	lsrs	r3, r3, #2
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	e01d      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x13e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0310 	and.w	r3, r3, #16
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10b      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x128>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	695a      	ldr	r2, [r3, #20]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	e00a      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x13e>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d027      	beq.n	8001e54 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	6919      	ldr	r1, [r3, #16]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e12:	f7ff fa41 	bl	8001298 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6919      	ldr	r1, [r3, #16]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	7e5b      	ldrb	r3, [r3, #25]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d102      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x170>
 8001e26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001e2a:	e000      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x172>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f7ff fa6b 	bl	800130a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	6919      	ldr	r1, [r3, #16]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	7e1b      	ldrb	r3, [r3, #24]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d102      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x18e>
 8001e44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e48:	e000      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x190>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	f7ff fa43 	bl	80012d8 <LL_ADC_SetDataRightShift>
 8001e52:	e047      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	069b      	lsls	r3, r3, #26
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d107      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e76:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	069b      	lsls	r3, r3, #26
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d107      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e9a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ea2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	069b      	lsls	r3, r3, #26
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d107      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ebe:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ec6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	069b      	lsls	r3, r3, #26
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d107      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ee2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fb35 	bl	8001558 <LL_ADC_IsEnabled>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f040 81d9 	bne.w	80022a8 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	6819      	ldr	r1, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	461a      	mov	r2, r3
 8001f04:	f7ff fa86 	bl	8001414 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <HAL_ADC_ConfigChannel+0x280>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	f040 8101 	bne.w	8002116 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10f      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x288>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	0e9b      	lsrs	r3, r3, #26
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	2b09      	cmp	r3, #9
 8001f32:	bf94      	ite	ls
 8001f34:	2301      	movls	r3, #1
 8001f36:	2300      	movhi	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	e016      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x2ae>
 8001f3c:	47ff0000 	.word	0x47ff0000
 8001f40:	5c001000 	.word	0x5c001000
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f54:	fab3 f383 	clz	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f003 031f 	and.w	r3, r3, #31
 8001f60:	2b09      	cmp	r3, #9
 8001f62:	bf94      	ite	ls
 8001f64:	2301      	movls	r3, #1
 8001f66:	2300      	movhi	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d064      	beq.n	8002038 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d107      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x2ce>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	0e9b      	lsrs	r3, r3, #26
 8001f80:	3301      	adds	r3, #1
 8001f82:	069b      	lsls	r3, r3, #26
 8001f84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f88:	e00e      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x2ec>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	069b      	lsls	r3, r3, #26
 8001fa4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d109      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x30c>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0e9b      	lsrs	r3, r3, #26
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	e010      	b.n	8001fea <HAL_ADC_ConfigChannel+0x32e>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	ea42 0103 	orr.w	r1, r2, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10a      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x354>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	0e9b      	lsrs	r3, r3, #26
 8002000:	3301      	adds	r3, #1
 8002002:	f003 021f 	and.w	r2, r3, #31
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	051b      	lsls	r3, r3, #20
 800200e:	e011      	b.n	8002034 <HAL_ADC_ConfigChannel+0x378>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	fab3 f383 	clz	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	3301      	adds	r3, #1
 8002028:	f003 021f 	and.w	r2, r3, #31
 800202c:	4613      	mov	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4413      	add	r3, r2
 8002032:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002034:	430b      	orrs	r3, r1
 8002036:	e069      	b.n	800210c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002040:	2b00      	cmp	r3, #0
 8002042:	d107      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x398>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0e9b      	lsrs	r3, r3, #26
 800204a:	3301      	adds	r3, #1
 800204c:	069b      	lsls	r3, r3, #26
 800204e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002052:	e00e      	b.n	8002072 <HAL_ADC_ConfigChannel+0x3b6>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	fa93 f3a3 	rbit	r3, r3
 8002060:	61fb      	str	r3, [r7, #28]
  return result;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fab3 f383 	clz	r3, r3
 8002068:	b2db      	uxtb	r3, r3
 800206a:	3301      	adds	r3, #1
 800206c:	069b      	lsls	r3, r3, #26
 800206e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800207a:	2b00      	cmp	r3, #0
 800207c:	d109      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x3d6>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	0e9b      	lsrs	r3, r3, #26
 8002084:	3301      	adds	r3, #1
 8002086:	f003 031f 	and.w	r3, r3, #31
 800208a:	2101      	movs	r1, #1
 800208c:	fa01 f303 	lsl.w	r3, r1, r3
 8002090:	e010      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x3f8>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	617b      	str	r3, [r7, #20]
  return result;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	3301      	adds	r3, #1
 80020aa:	f003 031f 	and.w	r3, r3, #31
 80020ae:	2101      	movs	r1, #1
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	ea42 0103 	orr.w	r1, r2, r3
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10d      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x424>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0e9b      	lsrs	r3, r3, #26
 80020ca:	3301      	adds	r3, #1
 80020cc:	f003 021f 	and.w	r2, r3, #31
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	3b1e      	subs	r3, #30
 80020d8:	051b      	lsls	r3, r3, #20
 80020da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020de:	e014      	b.n	800210a <HAL_ADC_ConfigChannel+0x44e>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	60fb      	str	r3, [r7, #12]
  return result;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	fab3 f383 	clz	r3, r3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	f003 021f 	and.w	r2, r3, #31
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	3b1e      	subs	r3, #30
 8002104:	051b      	lsls	r3, r3, #20
 8002106:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800210a:	430b      	orrs	r3, r1
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	6892      	ldr	r2, [r2, #8]
 8002110:	4619      	mov	r1, r3
 8002112:	f7ff f954 	bl	80013be <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	f280 80c4 	bge.w	80022a8 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a65      	ldr	r2, [pc, #404]	; (80022bc <HAL_ADC_ConfigChannel+0x600>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d004      	beq.n	8002134 <HAL_ADC_ConfigChannel+0x478>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a64      	ldr	r2, [pc, #400]	; (80022c0 <HAL_ADC_ConfigChannel+0x604>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d101      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x47c>
 8002134:	4b63      	ldr	r3, [pc, #396]	; (80022c4 <HAL_ADC_ConfigChannel+0x608>)
 8002136:	e000      	b.n	800213a <HAL_ADC_ConfigChannel+0x47e>
 8002138:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <HAL_ADC_ConfigChannel+0x60c>)
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff f89e 	bl	800127c <LL_ADC_GetCommonPathInternalCh>
 8002140:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a5d      	ldr	r2, [pc, #372]	; (80022bc <HAL_ADC_ConfigChannel+0x600>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d004      	beq.n	8002156 <HAL_ADC_ConfigChannel+0x49a>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a5b      	ldr	r2, [pc, #364]	; (80022c0 <HAL_ADC_ConfigChannel+0x604>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d10e      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x4b8>
 8002156:	4859      	ldr	r0, [pc, #356]	; (80022bc <HAL_ADC_ConfigChannel+0x600>)
 8002158:	f7ff f9fe 	bl	8001558 <LL_ADC_IsEnabled>
 800215c:	4604      	mov	r4, r0
 800215e:	4858      	ldr	r0, [pc, #352]	; (80022c0 <HAL_ADC_ConfigChannel+0x604>)
 8002160:	f7ff f9fa 	bl	8001558 <LL_ADC_IsEnabled>
 8002164:	4603      	mov	r3, r0
 8002166:	4323      	orrs	r3, r4
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	e008      	b.n	8002186 <HAL_ADC_ConfigChannel+0x4ca>
 8002174:	4855      	ldr	r0, [pc, #340]	; (80022cc <HAL_ADC_ConfigChannel+0x610>)
 8002176:	f7ff f9ef 	bl	8001558 <LL_ADC_IsEnabled>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d07b      	beq.n	8002282 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a50      	ldr	r2, [pc, #320]	; (80022d0 <HAL_ADC_ConfigChannel+0x614>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d12e      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x536>
 8002194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002196:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d129      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_ADC_ConfigChannel+0x610>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d17f      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a43      	ldr	r2, [pc, #268]	; (80022bc <HAL_ADC_ConfigChannel+0x600>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d004      	beq.n	80021bc <HAL_ADC_ConfigChannel+0x500>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a42      	ldr	r2, [pc, #264]	; (80022c0 <HAL_ADC_ConfigChannel+0x604>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d101      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x504>
 80021bc:	4a41      	ldr	r2, [pc, #260]	; (80022c4 <HAL_ADC_ConfigChannel+0x608>)
 80021be:	e000      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x506>
 80021c0:	4a41      	ldr	r2, [pc, #260]	; (80022c8 <HAL_ADC_ConfigChannel+0x60c>)
 80021c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021c8:	4619      	mov	r1, r3
 80021ca:	4610      	mov	r0, r2
 80021cc:	f7ff f843 	bl	8001256 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80021d0:	4b40      	ldr	r3, [pc, #256]	; (80022d4 <HAL_ADC_ConfigChannel+0x618>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	099b      	lsrs	r3, r3, #6
 80021d6:	4a40      	ldr	r2, [pc, #256]	; (80022d8 <HAL_ADC_ConfigChannel+0x61c>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	099b      	lsrs	r3, r3, #6
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80021e2:	e002      	b.n	80021ea <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f9      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021f0:	e05a      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a39      	ldr	r2, [pc, #228]	; (80022dc <HAL_ADC_ConfigChannel+0x620>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d11e      	bne.n	800223a <HAL_ADC_ConfigChannel+0x57e>
 80021fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d119      	bne.n	800223a <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a30      	ldr	r2, [pc, #192]	; (80022cc <HAL_ADC_ConfigChannel+0x610>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d14b      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a29      	ldr	r2, [pc, #164]	; (80022bc <HAL_ADC_ConfigChannel+0x600>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d004      	beq.n	8002224 <HAL_ADC_ConfigChannel+0x568>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a28      	ldr	r2, [pc, #160]	; (80022c0 <HAL_ADC_ConfigChannel+0x604>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d101      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x56c>
 8002224:	4a27      	ldr	r2, [pc, #156]	; (80022c4 <HAL_ADC_ConfigChannel+0x608>)
 8002226:	e000      	b.n	800222a <HAL_ADC_ConfigChannel+0x56e>
 8002228:	4a27      	ldr	r2, [pc, #156]	; (80022c8 <HAL_ADC_ConfigChannel+0x60c>)
 800222a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800222c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f7ff f80f 	bl	8001256 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002238:	e036      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a28      	ldr	r2, [pc, #160]	; (80022e0 <HAL_ADC_ConfigChannel+0x624>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d131      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x5ec>
 8002244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d12c      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a1e      	ldr	r2, [pc, #120]	; (80022cc <HAL_ADC_ConfigChannel+0x610>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d127      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a17      	ldr	r2, [pc, #92]	; (80022bc <HAL_ADC_ConfigChannel+0x600>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d004      	beq.n	800226c <HAL_ADC_ConfigChannel+0x5b0>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a16      	ldr	r2, [pc, #88]	; (80022c0 <HAL_ADC_ConfigChannel+0x604>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d101      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x5b4>
 800226c:	4a15      	ldr	r2, [pc, #84]	; (80022c4 <HAL_ADC_ConfigChannel+0x608>)
 800226e:	e000      	b.n	8002272 <HAL_ADC_ConfigChannel+0x5b6>
 8002270:	4a15      	ldr	r2, [pc, #84]	; (80022c8 <HAL_ADC_ConfigChannel+0x60c>)
 8002272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002274:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002278:	4619      	mov	r1, r3
 800227a:	4610      	mov	r0, r2
 800227c:	f7fe ffeb 	bl	8001256 <LL_ADC_SetCommonPathInternalCh>
 8002280:	e012      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002286:	f043 0220 	orr.w	r2, r3, #32
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002294:	e008      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229a:	f043 0220 	orr.w	r2, r3, #32
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80022b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3764      	adds	r7, #100	; 0x64
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd90      	pop	{r4, r7, pc}
 80022bc:	40022000 	.word	0x40022000
 80022c0:	40022100 	.word	0x40022100
 80022c4:	40022300 	.word	0x40022300
 80022c8:	58026300 	.word	0x58026300
 80022cc:	58026000 	.word	0x58026000
 80022d0:	cb840000 	.word	0xcb840000
 80022d4:	20000000 	.word	0x20000000
 80022d8:	053e2d63 	.word	0x053e2d63
 80022dc:	c7520000 	.word	0xc7520000
 80022e0:	cfb80000 	.word	0xcfb80000

080022e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff f931 	bl	8001558 <LL_ADC_IsEnabled>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d167      	bne.n	80023cc <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	4b35      	ldr	r3, [pc, #212]	; (80023d8 <ADC_Enable+0xf4>)
 8002304:	4013      	ands	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00d      	beq.n	8002326 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230e:	f043 0210 	orr.w	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	f043 0201 	orr.w	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e053      	b.n	80023ce <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f900 	bl	8001530 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002330:	f7fe ff44 	bl	80011bc <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a28      	ldr	r2, [pc, #160]	; (80023dc <ADC_Enable+0xf8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d004      	beq.n	800234a <ADC_Enable+0x66>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a26      	ldr	r2, [pc, #152]	; (80023e0 <ADC_Enable+0xfc>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d101      	bne.n	800234e <ADC_Enable+0x6a>
 800234a:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <ADC_Enable+0x100>)
 800234c:	e000      	b.n	8002350 <ADC_Enable+0x6c>
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <ADC_Enable+0x104>)
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff f883 	bl	800145c <LL_ADC_GetMultimode>
 8002356:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a20      	ldr	r2, [pc, #128]	; (80023e0 <ADC_Enable+0xfc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d002      	beq.n	8002368 <ADC_Enable+0x84>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	e000      	b.n	800236a <ADC_Enable+0x86>
 8002368:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <ADC_Enable+0xf8>)
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	4293      	cmp	r3, r2
 8002370:	d025      	beq.n	80023be <ADC_Enable+0xda>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d129      	bne.n	80023cc <ADC_Enable+0xe8>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002378:	e021      	b.n	80023be <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff f8ea 	bl	8001558 <LL_ADC_IsEnabled>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d104      	bne.n	8002394 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff f8ce 	bl	8001530 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002394:	f7fe ff12 	bl	80011bc <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d90d      	bls.n	80023be <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a6:	f043 0210 	orr.w	r2, r3, #16
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	f043 0201 	orr.w	r2, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e007      	b.n	80023ce <ADC_Enable+0xea>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d1d6      	bne.n	800237a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	8000003f 	.word	0x8000003f
 80023dc:	40022000 	.word	0x40022000
 80023e0:	40022100 	.word	0x40022100
 80023e4:	40022300 	.word	0x40022300
 80023e8:	58026300 	.word	0x58026300

080023ec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a70      	ldr	r2, [pc, #448]	; (80025bc <ADC_ConfigureBoostMode+0x1d0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d004      	beq.n	8002408 <ADC_ConfigureBoostMode+0x1c>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a6f      	ldr	r2, [pc, #444]	; (80025c0 <ADC_ConfigureBoostMode+0x1d4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d109      	bne.n	800241c <ADC_ConfigureBoostMode+0x30>
 8002408:	4b6e      	ldr	r3, [pc, #440]	; (80025c4 <ADC_ConfigureBoostMode+0x1d8>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf14      	ite	ne
 8002414:	2301      	movne	r3, #1
 8002416:	2300      	moveq	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	e008      	b.n	800242e <ADC_ConfigureBoostMode+0x42>
 800241c:	4b6a      	ldr	r3, [pc, #424]	; (80025c8 <ADC_ConfigureBoostMode+0x1dc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf14      	ite	ne
 8002428:	2301      	movne	r3, #1
 800242a:	2300      	moveq	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d01a      	beq.n	8002468 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002432:	f001 fc41 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8002436:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002440:	d006      	beq.n	8002450 <ADC_ConfigureBoostMode+0x64>
 8002442:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002446:	d00b      	beq.n	8002460 <ADC_ConfigureBoostMode+0x74>
 8002448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244c:	d000      	beq.n	8002450 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800244e:	e05d      	b.n	800250c <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	0c1b      	lsrs	r3, r3, #16
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	fbb2 f3f3 	udiv	r3, r2, r3
 800245c:	60fb      	str	r3, [r7, #12]
        break;
 800245e:	e055      	b.n	800250c <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	60fb      	str	r3, [r7, #12]
        break;
 8002466:	e051      	b.n	800250c <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002468:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800246c:	f002 fb6e 	bl	8004b4c <HAL_RCCEx_GetPeriphCLKFreq>
 8002470:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800247a:	d02a      	beq.n	80024d2 <ADC_ConfigureBoostMode+0xe6>
 800247c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002480:	d813      	bhi.n	80024aa <ADC_ConfigureBoostMode+0xbe>
 8002482:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002486:	d024      	beq.n	80024d2 <ADC_ConfigureBoostMode+0xe6>
 8002488:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800248c:	d806      	bhi.n	800249c <ADC_ConfigureBoostMode+0xb0>
 800248e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002492:	d01e      	beq.n	80024d2 <ADC_ConfigureBoostMode+0xe6>
 8002494:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002498:	d01b      	beq.n	80024d2 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 800249a:	e037      	b.n	800250c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 800249c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024a0:	d017      	beq.n	80024d2 <ADC_ConfigureBoostMode+0xe6>
 80024a2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80024a6:	d014      	beq.n	80024d2 <ADC_ConfigureBoostMode+0xe6>
        break;
 80024a8:	e030      	b.n	800250c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80024aa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80024ae:	d021      	beq.n	80024f4 <ADC_ConfigureBoostMode+0x108>
 80024b0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80024b4:	d806      	bhi.n	80024c4 <ADC_ConfigureBoostMode+0xd8>
 80024b6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80024ba:	d013      	beq.n	80024e4 <ADC_ConfigureBoostMode+0xf8>
 80024bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024c0:	d014      	beq.n	80024ec <ADC_ConfigureBoostMode+0x100>
        break;
 80024c2:	e023      	b.n	800250c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80024c4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80024c8:	d018      	beq.n	80024fc <ADC_ConfigureBoostMode+0x110>
 80024ca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80024ce:	d019      	beq.n	8002504 <ADC_ConfigureBoostMode+0x118>
        break;
 80024d0:	e01c      	b.n	800250c <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	0c9b      	lsrs	r3, r3, #18
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e0:	60fb      	str	r3, [r7, #12]
        break;
 80024e2:	e013      	b.n	800250c <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	60fb      	str	r3, [r7, #12]
        break;
 80024ea:	e00f      	b.n	800250c <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	60fb      	str	r3, [r7, #12]
        break;
 80024f2:	e00b      	b.n	800250c <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	099b      	lsrs	r3, r3, #6
 80024f8:	60fb      	str	r3, [r7, #12]
        break;
 80024fa:	e007      	b.n	800250c <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	09db      	lsrs	r3, r3, #7
 8002500:	60fb      	str	r3, [r7, #12]
        break;
 8002502:	e003      	b.n	800250c <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	60fb      	str	r3, [r7, #12]
        break;
 800250a:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800250c:	f7fe fe84 	bl	8001218 <HAL_GetREVID>
 8002510:	4602      	mov	r2, r0
 8002512:	f241 0303 	movw	r3, #4099	; 0x1003
 8002516:	429a      	cmp	r2, r3
 8002518:	d815      	bhi.n	8002546 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4a2b      	ldr	r2, [pc, #172]	; (80025cc <ADC_ConfigureBoostMode+0x1e0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d908      	bls.n	8002534 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002530:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002532:	e03e      	b.n	80025b2 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002542:	609a      	str	r2, [r3, #8]
}
 8002544:	e035      	b.n	80025b2 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	085b      	lsrs	r3, r3, #1
 800254a:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4a20      	ldr	r2, [pc, #128]	; (80025d0 <ADC_ConfigureBoostMode+0x1e4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d808      	bhi.n	8002566 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002562:	609a      	str	r2, [r3, #8]
}
 8002564:	e025      	b.n	80025b2 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4a1a      	ldr	r2, [pc, #104]	; (80025d4 <ADC_ConfigureBoostMode+0x1e8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d80a      	bhi.n	8002584 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002580:	609a      	str	r2, [r3, #8]
}
 8002582:	e016      	b.n	80025b2 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <ADC_ConfigureBoostMode+0x1ec>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d80a      	bhi.n	80025a2 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259e:	609a      	str	r2, [r3, #8]
}
 80025a0:	e007      	b.n	80025b2 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80025b0:	609a      	str	r2, [r3, #8]
}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40022000 	.word	0x40022000
 80025c0:	40022100 	.word	0x40022100
 80025c4:	40022300 	.word	0x40022300
 80025c8:	58026300 	.word	0x58026300
 80025cc:	01312d00 	.word	0x01312d00
 80025d0:	005f5e10 	.word	0x005f5e10
 80025d4:	00bebc20 	.word	0x00bebc20
 80025d8:	017d7840 	.word	0x017d7840

080025dc <LL_ADC_IsEnabled>:
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <LL_ADC_IsEnabled+0x18>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <LL_ADC_IsEnabled+0x1a>
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_ADC_REG_IsConversionOngoing>:
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b04      	cmp	r3, #4
 8002614:	d101      	bne.n	800261a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002628:	b590      	push	{r4, r7, lr}
 800262a:	b09f      	sub	sp, #124	; 0x7c
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002642:	2302      	movs	r3, #2
 8002644:	e0ba      	b.n	80027bc <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a5c      	ldr	r2, [pc, #368]	; (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d102      	bne.n	800265e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002658:	4b5b      	ldr	r3, [pc, #364]	; (80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	e001      	b.n	8002662 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800265e:	2300      	movs	r3, #0
 8002660:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10b      	bne.n	8002680 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266c:	f043 0220 	orr.w	r2, r3, #32
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e09d      	b.n	80027bc <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff ffbd 	bl	8002602 <LL_ADC_REG_IsConversionOngoing>
 8002688:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff ffb7 	bl	8002602 <LL_ADC_REG_IsConversionOngoing>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d17f      	bne.n	800279a <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800269a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800269c:	2b00      	cmp	r3, #0
 800269e:	d17c      	bne.n	800279a <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a47      	ldr	r2, [pc, #284]	; (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d004      	beq.n	80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a46      	ldr	r2, [pc, #280]	; (80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d101      	bne.n	80026b8 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80026b4:	4b45      	ldr	r3, [pc, #276]	; (80027cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80026b6:	e000      	b.n	80026ba <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80026b8:	4b45      	ldr	r3, [pc, #276]	; (80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80026ba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d039      	beq.n	8002738 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80026c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a3a      	ldr	r2, [pc, #232]	; (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d004      	beq.n	80026ea <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a38      	ldr	r2, [pc, #224]	; (80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d10e      	bne.n	8002708 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80026ea:	4836      	ldr	r0, [pc, #216]	; (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80026ec:	f7ff ff76 	bl	80025dc <LL_ADC_IsEnabled>
 80026f0:	4604      	mov	r4, r0
 80026f2:	4835      	ldr	r0, [pc, #212]	; (80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80026f4:	f7ff ff72 	bl	80025dc <LL_ADC_IsEnabled>
 80026f8:	4603      	mov	r3, r0
 80026fa:	4323      	orrs	r3, r4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf0c      	ite	eq
 8002700:	2301      	moveq	r3, #1
 8002702:	2300      	movne	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	e008      	b.n	800271a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002708:	4832      	ldr	r0, [pc, #200]	; (80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800270a:	f7ff ff67 	bl	80025dc <LL_ADC_IsEnabled>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf0c      	ite	eq
 8002714:	2301      	moveq	r3, #1
 8002716:	2300      	movne	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d047      	beq.n	80027ae <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800271e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002724:	4013      	ands	r3, r2
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	6811      	ldr	r1, [r2, #0]
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	6892      	ldr	r2, [r2, #8]
 800272e:	430a      	orrs	r2, r1
 8002730:	431a      	orrs	r2, r3
 8002732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002734:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002736:	e03a      	b.n	80027ae <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002742:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a1e      	ldr	r2, [pc, #120]	; (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d004      	beq.n	8002758 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d10e      	bne.n	8002776 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8002758:	481a      	ldr	r0, [pc, #104]	; (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800275a:	f7ff ff3f 	bl	80025dc <LL_ADC_IsEnabled>
 800275e:	4604      	mov	r4, r0
 8002760:	4819      	ldr	r0, [pc, #100]	; (80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002762:	f7ff ff3b 	bl	80025dc <LL_ADC_IsEnabled>
 8002766:	4603      	mov	r3, r0
 8002768:	4323      	orrs	r3, r4
 800276a:	2b00      	cmp	r3, #0
 800276c:	bf0c      	ite	eq
 800276e:	2301      	moveq	r3, #1
 8002770:	2300      	movne	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	e008      	b.n	8002788 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8002776:	4817      	ldr	r0, [pc, #92]	; (80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002778:	f7ff ff30 	bl	80025dc <LL_ADC_IsEnabled>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	bf0c      	ite	eq
 8002782:	2301      	moveq	r3, #1
 8002784:	2300      	movne	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d010      	beq.n	80027ae <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800278c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002792:	4013      	ands	r3, r2
 8002794:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002796:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002798:	e009      	b.n	80027ae <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279e:	f043 0220 	orr.w	r2, r3, #32
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80027ac:	e000      	b.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027ae:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027b8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80027bc:	4618      	mov	r0, r3
 80027be:	377c      	adds	r7, #124	; 0x7c
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd90      	pop	{r4, r7, pc}
 80027c4:	40022000 	.word	0x40022000
 80027c8:	40022100 	.word	0x40022100
 80027cc:	40022300 	.word	0x40022300
 80027d0:	58026300 	.word	0x58026300
 80027d4:	58026000 	.word	0x58026000
 80027d8:	fffff0e0 	.word	0xfffff0e0

080027dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <__NVIC_SetPriorityGrouping+0x40>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027f8:	4013      	ands	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 8002806:	4313      	orrs	r3, r2
 8002808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800280a:	4a04      	ldr	r2, [pc, #16]	; (800281c <__NVIC_SetPriorityGrouping+0x40>)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	60d3      	str	r3, [r2, #12]
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	e000ed00 	.word	0xe000ed00
 8002820:	05fa0000 	.word	0x05fa0000

08002824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <__NVIC_GetPriorityGrouping+0x18>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	f003 0307 	and.w	r3, r3, #7
}
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800284c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002850:	2b00      	cmp	r3, #0
 8002852:	db0a      	blt.n	800286a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	b2da      	uxtb	r2, r3
 8002858:	490c      	ldr	r1, [pc, #48]	; (800288c <__NVIC_SetPriority+0x4c>)
 800285a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800285e:	0112      	lsls	r2, r2, #4
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	440b      	add	r3, r1
 8002864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002868:	e00a      	b.n	8002880 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4908      	ldr	r1, [pc, #32]	; (8002890 <__NVIC_SetPriority+0x50>)
 8002870:	88fb      	ldrh	r3, [r7, #6]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	3b04      	subs	r3, #4
 8002878:	0112      	lsls	r2, r2, #4
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	440b      	add	r3, r1
 800287e:	761a      	strb	r2, [r3, #24]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000e100 	.word	0xe000e100
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	; 0x24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f1c3 0307 	rsb	r3, r3, #7
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	bf28      	it	cs
 80028b2:	2304      	movcs	r3, #4
 80028b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d902      	bls.n	80028c4 <NVIC_EncodePriority+0x30>
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3b03      	subs	r3, #3
 80028c2:	e000      	b.n	80028c6 <NVIC_EncodePriority+0x32>
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43da      	mvns	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	401a      	ands	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028dc:	f04f 31ff 	mov.w	r1, #4294967295
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	fa01 f303 	lsl.w	r3, r1, r3
 80028e6:	43d9      	mvns	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	4313      	orrs	r3, r2
         );
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3724      	adds	r7, #36	; 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800290c:	d301      	bcc.n	8002912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800290e:	2301      	movs	r3, #1
 8002910:	e00f      	b.n	8002932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002912:	4a0a      	ldr	r2, [pc, #40]	; (800293c <SysTick_Config+0x40>)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800291a:	210f      	movs	r1, #15
 800291c:	f04f 30ff 	mov.w	r0, #4294967295
 8002920:	f7ff ff8e 	bl	8002840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <SysTick_Config+0x40>)
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800292a:	4b04      	ldr	r3, [pc, #16]	; (800293c <SysTick_Config+0x40>)
 800292c:	2207      	movs	r2, #7
 800292e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	e000e010 	.word	0xe000e010

08002940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff47 	bl	80027dc <__NVIC_SetPriorityGrouping>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002964:	f7ff ff5e 	bl	8002824 <__NVIC_GetPriorityGrouping>
 8002968:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	6978      	ldr	r0, [r7, #20]
 8002970:	f7ff ff90 	bl	8002894 <NVIC_EncodePriority>
 8002974:	4602      	mov	r2, r0
 8002976:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff5f 	bl	8002840 <__NVIC_SetPriority>
}
 8002982:	bf00      	nop
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ffb2 	bl	80028fc <SysTick_Config>
 8002998:	4603      	mov	r3, r0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80029b2:	4b89      	ldr	r3, [pc, #548]	; (8002bd8 <HAL_GPIO_Init+0x234>)
 80029b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029b6:	e194      	b.n	8002ce2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2101      	movs	r1, #1
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8186 	beq.w	8002cdc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d00b      	beq.n	80029f0 <HAL_GPIO_Init+0x4c>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d007      	beq.n	80029f0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029e4:	2b11      	cmp	r3, #17
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b12      	cmp	r3, #18
 80029ee:	d130      	bne.n	8002a52 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a26:	2201      	movs	r2, #1
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	091b      	lsrs	r3, r3, #4
 8002a3c:	f003 0201 	and.w	r2, r3, #1
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_Init+0xee>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b12      	cmp	r3, #18
 8002a90:	d123      	bne.n	8002ada <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	08da      	lsrs	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3208      	adds	r2, #8
 8002a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	220f      	movs	r2, #15
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	691a      	ldr	r2, [r3, #16]
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	08da      	lsrs	r2, r3, #3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3208      	adds	r2, #8
 8002ad4:	69b9      	ldr	r1, [r7, #24]
 8002ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0203 	and.w	r2, r3, #3
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 80e0 	beq.w	8002cdc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1c:	4b2f      	ldr	r3, [pc, #188]	; (8002bdc <HAL_GPIO_Init+0x238>)
 8002b1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b22:	4a2e      	ldr	r2, [pc, #184]	; (8002bdc <HAL_GPIO_Init+0x238>)
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b2c:	4b2b      	ldr	r3, [pc, #172]	; (8002bdc <HAL_GPIO_Init+0x238>)
 8002b2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b3a:	4a29      	ldr	r2, [pc, #164]	; (8002be0 <HAL_GPIO_Init+0x23c>)
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	3302      	adds	r3, #2
 8002b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	220f      	movs	r2, #15
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a20      	ldr	r2, [pc, #128]	; (8002be4 <HAL_GPIO_Init+0x240>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d052      	beq.n	8002c0c <HAL_GPIO_Init+0x268>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a1f      	ldr	r2, [pc, #124]	; (8002be8 <HAL_GPIO_Init+0x244>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d031      	beq.n	8002bd2 <HAL_GPIO_Init+0x22e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a1e      	ldr	r2, [pc, #120]	; (8002bec <HAL_GPIO_Init+0x248>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d02b      	beq.n	8002bce <HAL_GPIO_Init+0x22a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a1d      	ldr	r2, [pc, #116]	; (8002bf0 <HAL_GPIO_Init+0x24c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d025      	beq.n	8002bca <HAL_GPIO_Init+0x226>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a1c      	ldr	r2, [pc, #112]	; (8002bf4 <HAL_GPIO_Init+0x250>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d01f      	beq.n	8002bc6 <HAL_GPIO_Init+0x222>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1b      	ldr	r2, [pc, #108]	; (8002bf8 <HAL_GPIO_Init+0x254>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d019      	beq.n	8002bc2 <HAL_GPIO_Init+0x21e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a1a      	ldr	r2, [pc, #104]	; (8002bfc <HAL_GPIO_Init+0x258>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d013      	beq.n	8002bbe <HAL_GPIO_Init+0x21a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a19      	ldr	r2, [pc, #100]	; (8002c00 <HAL_GPIO_Init+0x25c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00d      	beq.n	8002bba <HAL_GPIO_Init+0x216>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a18      	ldr	r2, [pc, #96]	; (8002c04 <HAL_GPIO_Init+0x260>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d007      	beq.n	8002bb6 <HAL_GPIO_Init+0x212>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a17      	ldr	r2, [pc, #92]	; (8002c08 <HAL_GPIO_Init+0x264>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d101      	bne.n	8002bb2 <HAL_GPIO_Init+0x20e>
 8002bae:	2309      	movs	r3, #9
 8002bb0:	e02d      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bb2:	230a      	movs	r3, #10
 8002bb4:	e02b      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bb6:	2308      	movs	r3, #8
 8002bb8:	e029      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bba:	2307      	movs	r3, #7
 8002bbc:	e027      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bbe:	2306      	movs	r3, #6
 8002bc0:	e025      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bc2:	2305      	movs	r3, #5
 8002bc4:	e023      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	e021      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e01f      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e01d      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e01b      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bd6:	bf00      	nop
 8002bd8:	58000080 	.word	0x58000080
 8002bdc:	58024400 	.word	0x58024400
 8002be0:	58000400 	.word	0x58000400
 8002be4:	58020000 	.word	0x58020000
 8002be8:	58020400 	.word	0x58020400
 8002bec:	58020800 	.word	0x58020800
 8002bf0:	58020c00 	.word	0x58020c00
 8002bf4:	58021000 	.word	0x58021000
 8002bf8:	58021400 	.word	0x58021400
 8002bfc:	58021800 	.word	0x58021800
 8002c00:	58021c00 	.word	0x58021c00
 8002c04:	58022000 	.word	0x58022000
 8002c08:	58022400 	.word	0x58022400
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	f002 0203 	and.w	r2, r2, #3
 8002c14:	0092      	lsls	r2, r2, #2
 8002c16:	4093      	lsls	r3, r2
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c1e:	4938      	ldr	r1, [pc, #224]	; (8002d00 <HAL_GPIO_Init+0x35c>)
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	3302      	adds	r3, #2
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002cd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f47f ae63 	bne.w	80029b8 <HAL_GPIO_Init+0x14>
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	3724      	adds	r7, #36	; 0x24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	58000400 	.word	0x58000400

08002d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	807b      	strh	r3, [r7, #2]
 8002d10:	4613      	mov	r3, r2
 8002d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d14:	787b      	ldrb	r3, [r7, #1]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d1a:	887a      	ldrh	r2, [r7, #2]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002d20:	e003      	b.n	8002d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d22:	887b      	ldrh	r3, [r7, #2]
 8002d24:	041a      	lsls	r2, r3, #16
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	619a      	str	r2, [r3, #24]
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
	...

08002d38 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002d40:	4a08      	ldr	r2, [pc, #32]	; (8002d64 <HAL_HSEM_FastTake+0x2c>)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3320      	adds	r3, #32
 8002d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4a:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <HAL_HSEM_FastTake+0x30>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d101      	bne.n	8002d54 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	e000      	b.n	8002d56 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	58026400 	.word	0x58026400
 8002d68:	80000300 	.word	0x80000300

08002d6c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002d76:	4906      	ldr	r1, [pc, #24]	; (8002d90 <HAL_HSEM_Release+0x24>)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	58026400 	.word	0x58026400

08002d94 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002d9c:	4b29      	ldr	r3, [pc, #164]	; (8002e44 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	2b06      	cmp	r3, #6
 8002da6:	d00a      	beq.n	8002dbe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002da8:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <HAL_PWREx_ConfigSupply+0xb0>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d001      	beq.n	8002dba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e040      	b.n	8002e3c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	e03e      	b.n	8002e3c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002dbe:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002dc6:	491f      	ldr	r1, [pc, #124]	; (8002e44 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002dce:	f7fe f9f5 	bl	80011bc <HAL_GetTick>
 8002dd2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dd4:	e009      	b.n	8002dea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002dd6:	f7fe f9f1 	bl	80011bc <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002de4:	d901      	bls.n	8002dea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e028      	b.n	8002e3c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dea:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df6:	d1ee      	bne.n	8002dd6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b1e      	cmp	r3, #30
 8002dfc:	d008      	beq.n	8002e10 <HAL_PWREx_ConfigSupply+0x7c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b2e      	cmp	r3, #46	; 0x2e
 8002e02:	d005      	beq.n	8002e10 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b1d      	cmp	r3, #29
 8002e08:	d002      	beq.n	8002e10 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b2d      	cmp	r3, #45	; 0x2d
 8002e0e:	d114      	bne.n	8002e3a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002e10:	f7fe f9d4 	bl	80011bc <HAL_GetTick>
 8002e14:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e16:	e009      	b.n	8002e2c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e18:	f7fe f9d0 	bl	80011bc <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e26:	d901      	bls.n	8002e2c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e007      	b.n	8002e3c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e38:	d1ee      	bne.n	8002e18 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	58024800 	.word	0x58024800

08002e48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08c      	sub	sp, #48	; 0x30
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e3ff      	b.n	800365a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8087 	beq.w	8002f76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e68:	4b99      	ldr	r3, [pc, #612]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e72:	4b97      	ldr	r3, [pc, #604]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	2b10      	cmp	r3, #16
 8002e7c:	d007      	beq.n	8002e8e <HAL_RCC_OscConfig+0x46>
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	2b18      	cmp	r3, #24
 8002e82:	d110      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x5e>
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d10b      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8e:	4b90      	ldr	r3, [pc, #576]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d06c      	beq.n	8002f74 <HAL_RCC_OscConfig+0x12c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d168      	bne.n	8002f74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e3d9      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x76>
 8002eb0:	4b87      	ldr	r3, [pc, #540]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a86      	ldr	r2, [pc, #536]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	e02e      	b.n	8002f1c <HAL_RCC_OscConfig+0xd4>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x98>
 8002ec6:	4b82      	ldr	r3, [pc, #520]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a81      	ldr	r2, [pc, #516]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	4b7f      	ldr	r3, [pc, #508]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a7e      	ldr	r2, [pc, #504]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002ed8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e01d      	b.n	8002f1c <HAL_RCC_OscConfig+0xd4>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0xbc>
 8002eea:	4b79      	ldr	r3, [pc, #484]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a78      	ldr	r2, [pc, #480]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b76      	ldr	r3, [pc, #472]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a75      	ldr	r2, [pc, #468]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	e00b      	b.n	8002f1c <HAL_RCC_OscConfig+0xd4>
 8002f04:	4b72      	ldr	r3, [pc, #456]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a71      	ldr	r2, [pc, #452]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	4b6f      	ldr	r3, [pc, #444]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a6e      	ldr	r2, [pc, #440]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d013      	beq.n	8002f4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe f94a 	bl	80011bc <HAL_GetTick>
 8002f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7fe f946 	bl	80011bc <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e38d      	b.n	800365a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f3e:	4b64      	ldr	r3, [pc, #400]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0xe4>
 8002f4a:	e014      	b.n	8002f76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe f936 	bl	80011bc <HAL_GetTick>
 8002f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f54:	f7fe f932 	bl	80011bc <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e379      	b.n	800365a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f66:	4b5a      	ldr	r3, [pc, #360]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x10c>
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 80ae 	beq.w	80030e0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f84:	4b52      	ldr	r3, [pc, #328]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f8e:	4b50      	ldr	r3, [pc, #320]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d007      	beq.n	8002faa <HAL_RCC_OscConfig+0x162>
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	2b18      	cmp	r3, #24
 8002f9e:	d13a      	bne.n	8003016 <HAL_RCC_OscConfig+0x1ce>
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d135      	bne.n	8003016 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002faa:	4b49      	ldr	r3, [pc, #292]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x17a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e34b      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc2:	f7fe f929 	bl	8001218 <HAL_GetREVID>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	f241 0303 	movw	r3, #4099	; 0x1003
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d817      	bhi.n	8003000 <HAL_RCC_OscConfig+0x1b8>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	2b40      	cmp	r3, #64	; 0x40
 8002fd6:	d108      	bne.n	8002fea <HAL_RCC_OscConfig+0x1a2>
 8002fd8:	4b3d      	ldr	r3, [pc, #244]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002fe0:	4a3b      	ldr	r2, [pc, #236]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe8:	e07a      	b.n	80030e0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fea:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	031b      	lsls	r3, r3, #12
 8002ff8:	4935      	ldr	r1, [pc, #212]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ffe:	e06f      	b.n	80030e0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003000:	4b33      	ldr	r3, [pc, #204]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	061b      	lsls	r3, r3, #24
 800300e:	4930      	ldr	r1, [pc, #192]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003014:	e064      	b.n	80030e0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d045      	beq.n	80030aa <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800301e:	4b2c      	ldr	r3, [pc, #176]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 0219 	bic.w	r2, r3, #25
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	4929      	ldr	r1, [pc, #164]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 800302c:	4313      	orrs	r3, r2
 800302e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe f8c4 	bl	80011bc <HAL_GetTick>
 8003034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003038:	f7fe f8c0 	bl	80011bc <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e307      	b.n	800365a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800304a:	4b21      	ldr	r3, [pc, #132]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003056:	f7fe f8df 	bl	8001218 <HAL_GetREVID>
 800305a:	4602      	mov	r2, r0
 800305c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003060:	429a      	cmp	r2, r3
 8003062:	d817      	bhi.n	8003094 <HAL_RCC_OscConfig+0x24c>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	2b40      	cmp	r3, #64	; 0x40
 800306a:	d108      	bne.n	800307e <HAL_RCC_OscConfig+0x236>
 800306c:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003074:	4a16      	ldr	r2, [pc, #88]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8003076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800307a:	6053      	str	r3, [r2, #4]
 800307c:	e030      	b.n	80030e0 <HAL_RCC_OscConfig+0x298>
 800307e:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	031b      	lsls	r3, r3, #12
 800308c:	4910      	ldr	r1, [pc, #64]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 800308e:	4313      	orrs	r3, r2
 8003090:	604b      	str	r3, [r1, #4]
 8003092:	e025      	b.n	80030e0 <HAL_RCC_OscConfig+0x298>
 8003094:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	061b      	lsls	r3, r3, #24
 80030a2:	490b      	ldr	r1, [pc, #44]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
 80030a8:	e01a      	b.n	80030e0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030aa:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a08      	ldr	r2, [pc, #32]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 80030b0:	f023 0301 	bic.w	r3, r3, #1
 80030b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b6:	f7fe f881 	bl	80011bc <HAL_GetTick>
 80030ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030bc:	e00a      	b.n	80030d4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030be:	f7fe f87d 	bl	80011bc <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d903      	bls.n	80030d4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e2c4      	b.n	800365a <HAL_RCC_OscConfig+0x812>
 80030d0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030d4:	4ba4      	ldr	r3, [pc, #656]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1ee      	bne.n	80030be <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80a9 	beq.w	8003240 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ee:	4b9e      	ldr	r3, [pc, #632]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030f8:	4b9b      	ldr	r3, [pc, #620]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b08      	cmp	r3, #8
 8003102:	d007      	beq.n	8003114 <HAL_RCC_OscConfig+0x2cc>
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	2b18      	cmp	r3, #24
 8003108:	d13a      	bne.n	8003180 <HAL_RCC_OscConfig+0x338>
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b01      	cmp	r3, #1
 8003112:	d135      	bne.n	8003180 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003114:	4b94      	ldr	r3, [pc, #592]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_OscConfig+0x2e4>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	2b80      	cmp	r3, #128	; 0x80
 8003126:	d001      	beq.n	800312c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e296      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800312c:	f7fe f874 	bl	8001218 <HAL_GetREVID>
 8003130:	4602      	mov	r2, r0
 8003132:	f241 0303 	movw	r3, #4099	; 0x1003
 8003136:	429a      	cmp	r2, r3
 8003138:	d817      	bhi.n	800316a <HAL_RCC_OscConfig+0x322>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	2b20      	cmp	r3, #32
 8003140:	d108      	bne.n	8003154 <HAL_RCC_OscConfig+0x30c>
 8003142:	4b89      	ldr	r3, [pc, #548]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800314a:	4a87      	ldr	r2, [pc, #540]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800314c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003150:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003152:	e075      	b.n	8003240 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003154:	4b84      	ldr	r3, [pc, #528]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	069b      	lsls	r3, r3, #26
 8003162:	4981      	ldr	r1, [pc, #516]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003168:	e06a      	b.n	8003240 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800316a:	4b7f      	ldr	r3, [pc, #508]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	061b      	lsls	r3, r3, #24
 8003178:	497b      	ldr	r1, [pc, #492]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800317a:	4313      	orrs	r3, r2
 800317c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800317e:	e05f      	b.n	8003240 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d042      	beq.n	800320e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003188:	4b77      	ldr	r3, [pc, #476]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a76      	ldr	r2, [pc, #472]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800318e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003194:	f7fe f812 	bl	80011bc <HAL_GetTick>
 8003198:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800319c:	f7fe f80e 	bl	80011bc <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e255      	b.n	800365a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031ae:	4b6e      	ldr	r3, [pc, #440]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031ba:	f7fe f82d 	bl	8001218 <HAL_GetREVID>
 80031be:	4602      	mov	r2, r0
 80031c0:	f241 0303 	movw	r3, #4099	; 0x1003
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d817      	bhi.n	80031f8 <HAL_RCC_OscConfig+0x3b0>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d108      	bne.n	80031e2 <HAL_RCC_OscConfig+0x39a>
 80031d0:	4b65      	ldr	r3, [pc, #404]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80031d8:	4a63      	ldr	r2, [pc, #396]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80031da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031de:	6053      	str	r3, [r2, #4]
 80031e0:	e02e      	b.n	8003240 <HAL_RCC_OscConfig+0x3f8>
 80031e2:	4b61      	ldr	r3, [pc, #388]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	069b      	lsls	r3, r3, #26
 80031f0:	495d      	ldr	r1, [pc, #372]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	604b      	str	r3, [r1, #4]
 80031f6:	e023      	b.n	8003240 <HAL_RCC_OscConfig+0x3f8>
 80031f8:	4b5b      	ldr	r3, [pc, #364]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	061b      	lsls	r3, r3, #24
 8003206:	4958      	ldr	r1, [pc, #352]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003208:	4313      	orrs	r3, r2
 800320a:	60cb      	str	r3, [r1, #12]
 800320c:	e018      	b.n	8003240 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800320e:	4b56      	ldr	r3, [pc, #344]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a55      	ldr	r2, [pc, #340]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7fd ffcf 	bl	80011bc <HAL_GetTick>
 800321e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003222:	f7fd ffcb 	bl	80011bc <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e212      	b.n	800365a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003234:	4b4c      	ldr	r3, [pc, #304]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f0      	bne.n	8003222 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d036      	beq.n	80032ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d019      	beq.n	8003288 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003254:	4b44      	ldr	r3, [pc, #272]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003258:	4a43      	ldr	r2, [pc, #268]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fd ffac 	bl	80011bc <HAL_GetTick>
 8003264:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003268:	f7fd ffa8 	bl	80011bc <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e1ef      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800327a:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800327c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x420>
 8003286:	e018      	b.n	80032ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003288:	4b37      	ldr	r3, [pc, #220]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800328a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328c:	4a36      	ldr	r2, [pc, #216]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800328e:	f023 0301 	bic.w	r3, r3, #1
 8003292:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7fd ff92 	bl	80011bc <HAL_GetTick>
 8003298:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800329c:	f7fd ff8e 	bl	80011bc <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e1d5      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032ae:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80032b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d036      	beq.n	8003334 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d019      	beq.n	8003302 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032ce:	4b26      	ldr	r3, [pc, #152]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a25      	ldr	r2, [pc, #148]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80032d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032da:	f7fd ff6f 	bl	80011bc <HAL_GetTick>
 80032de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80032e2:	f7fd ff6b 	bl	80011bc <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e1b2      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032f4:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x49a>
 8003300:	e018      	b.n	8003334 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003302:	4b19      	ldr	r3, [pc, #100]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a18      	ldr	r2, [pc, #96]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800330c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800330e:	f7fd ff55 	bl	80011bc <HAL_GetTick>
 8003312:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003316:	f7fd ff51 	bl	80011bc <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e198      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003328:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f0      	bne.n	8003316 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 8085 	beq.w	800344c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003342:	4b0a      	ldr	r3, [pc, #40]	; (800336c <HAL_RCC_OscConfig+0x524>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a09      	ldr	r2, [pc, #36]	; (800336c <HAL_RCC_OscConfig+0x524>)
 8003348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800334e:	f7fd ff35 	bl	80011bc <HAL_GetTick>
 8003352:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003354:	e00c      	b.n	8003370 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003356:	f7fd ff31 	bl	80011bc <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b64      	cmp	r3, #100	; 0x64
 8003362:	d905      	bls.n	8003370 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e178      	b.n	800365a <HAL_RCC_OscConfig+0x812>
 8003368:	58024400 	.word	0x58024400
 800336c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003370:	4b96      	ldr	r3, [pc, #600]	; (80035cc <HAL_RCC_OscConfig+0x784>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0ec      	beq.n	8003356 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d106      	bne.n	8003392 <HAL_RCC_OscConfig+0x54a>
 8003384:	4b92      	ldr	r3, [pc, #584]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003388:	4a91      	ldr	r2, [pc, #580]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6713      	str	r3, [r2, #112]	; 0x70
 8003390:	e02d      	b.n	80033ee <HAL_RCC_OscConfig+0x5a6>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x56c>
 800339a:	4b8d      	ldr	r3, [pc, #564]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4a8c      	ldr	r2, [pc, #560]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	6713      	str	r3, [r2, #112]	; 0x70
 80033a6:	4b8a      	ldr	r3, [pc, #552]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	4a89      	ldr	r2, [pc, #548]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033ac:	f023 0304 	bic.w	r3, r3, #4
 80033b0:	6713      	str	r3, [r2, #112]	; 0x70
 80033b2:	e01c      	b.n	80033ee <HAL_RCC_OscConfig+0x5a6>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b05      	cmp	r3, #5
 80033ba:	d10c      	bne.n	80033d6 <HAL_RCC_OscConfig+0x58e>
 80033bc:	4b84      	ldr	r3, [pc, #528]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a83      	ldr	r2, [pc, #524]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033c2:	f043 0304 	orr.w	r3, r3, #4
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
 80033c8:	4b81      	ldr	r3, [pc, #516]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a80      	ldr	r2, [pc, #512]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
 80033d4:	e00b      	b.n	80033ee <HAL_RCC_OscConfig+0x5a6>
 80033d6:	4b7e      	ldr	r3, [pc, #504]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	4a7d      	ldr	r2, [pc, #500]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	6713      	str	r3, [r2, #112]	; 0x70
 80033e2:	4b7b      	ldr	r3, [pc, #492]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	4a7a      	ldr	r2, [pc, #488]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033e8:	f023 0304 	bic.w	r3, r3, #4
 80033ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d015      	beq.n	8003422 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f6:	f7fd fee1 	bl	80011bc <HAL_GetTick>
 80033fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fd fedd 	bl	80011bc <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	; 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e122      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003414:	4b6e      	ldr	r3, [pc, #440]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0ee      	beq.n	80033fe <HAL_RCC_OscConfig+0x5b6>
 8003420:	e014      	b.n	800344c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003422:	f7fd fecb 	bl	80011bc <HAL_GetTick>
 8003426:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003428:	e00a      	b.n	8003440 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f7fd fec7 	bl	80011bc <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e10c      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003440:	4b63      	ldr	r3, [pc, #396]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1ee      	bne.n	800342a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 8101 	beq.w	8003658 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003456:	4b5e      	ldr	r3, [pc, #376]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800345e:	2b18      	cmp	r3, #24
 8003460:	f000 80bc 	beq.w	80035dc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	2b02      	cmp	r3, #2
 800346a:	f040 8095 	bne.w	8003598 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346e:	4b58      	ldr	r3, [pc, #352]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a57      	ldr	r2, [pc, #348]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003474:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347a:	f7fd fe9f 	bl	80011bc <HAL_GetTick>
 800347e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003482:	f7fd fe9b 	bl	80011bc <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e0e2      	b.n	800365a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003494:	4b4e      	ldr	r3, [pc, #312]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1f0      	bne.n	8003482 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a0:	4b4b      	ldr	r3, [pc, #300]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80034a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034a4:	4b4b      	ldr	r3, [pc, #300]	; (80035d4 <HAL_RCC_OscConfig+0x78c>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034b0:	0112      	lsls	r2, r2, #4
 80034b2:	430a      	orrs	r2, r1
 80034b4:	4946      	ldr	r1, [pc, #280]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	628b      	str	r3, [r1, #40]	; 0x28
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	3b01      	subs	r3, #1
 80034c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c8:	3b01      	subs	r3, #1
 80034ca:	025b      	lsls	r3, r3, #9
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	3b01      	subs	r3, #1
 80034d6:	041b      	lsls	r3, r3, #16
 80034d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e2:	3b01      	subs	r3, #1
 80034e4:	061b      	lsls	r3, r3, #24
 80034e6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80034ea:	4939      	ldr	r1, [pc, #228]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80034f0:	4b37      	ldr	r3, [pc, #220]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	4a36      	ldr	r2, [pc, #216]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80034f6:	f023 0301 	bic.w	r3, r3, #1
 80034fa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034fc:	4b34      	ldr	r3, [pc, #208]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80034fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003500:	4b35      	ldr	r3, [pc, #212]	; (80035d8 <HAL_RCC_OscConfig+0x790>)
 8003502:	4013      	ands	r3, r2
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003508:	00d2      	lsls	r2, r2, #3
 800350a:	4931      	ldr	r1, [pc, #196]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800350c:	4313      	orrs	r3, r2
 800350e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003510:	4b2f      	ldr	r3, [pc, #188]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	f023 020c 	bic.w	r2, r3, #12
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	492c      	ldr	r1, [pc, #176]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800351e:	4313      	orrs	r3, r2
 8003520:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003522:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	f023 0202 	bic.w	r2, r3, #2
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	4928      	ldr	r1, [pc, #160]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003530:	4313      	orrs	r3, r2
 8003532:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003534:	4b26      	ldr	r3, [pc, #152]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	4a25      	ldr	r2, [pc, #148]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800353a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003540:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	4a22      	ldr	r2, [pc, #136]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800354a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800354c:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003552:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003556:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003558:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	4a1c      	ldr	r2, [pc, #112]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003564:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a19      	ldr	r2, [pc, #100]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800356a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800356e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fd fe24 	bl	80011bc <HAL_GetTick>
 8003574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003578:	f7fd fe20 	bl	80011bc <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e067      	b.n	800365a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800358a:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x730>
 8003596:	e05f      	b.n	8003658 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003598:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a0c      	ldr	r2, [pc, #48]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800359e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fd fe0a 	bl	80011bc <HAL_GetTick>
 80035a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ac:	f7fd fe06 	bl	80011bc <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e04d      	b.n	800365a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035be:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x764>
 80035ca:	e045      	b.n	8003658 <HAL_RCC_OscConfig+0x810>
 80035cc:	58024800 	.word	0x58024800
 80035d0:	58024400 	.word	0x58024400
 80035d4:	fffffc0c 	.word	0xfffffc0c
 80035d8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80035dc:	4b21      	ldr	r3, [pc, #132]	; (8003664 <HAL_RCC_OscConfig+0x81c>)
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80035e2:	4b20      	ldr	r3, [pc, #128]	; (8003664 <HAL_RCC_OscConfig+0x81c>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d031      	beq.n	8003654 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f003 0203 	and.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d12a      	bne.n	8003654 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d122      	bne.n	8003654 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800361a:	429a      	cmp	r2, r3
 800361c:	d11a      	bne.n	8003654 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	0a5b      	lsrs	r3, r3, #9
 8003622:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800362c:	429a      	cmp	r2, r3
 800362e:	d111      	bne.n	8003654 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	0c1b      	lsrs	r3, r3, #16
 8003634:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800363e:	429a      	cmp	r2, r3
 8003640:	d108      	bne.n	8003654 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	0e1b      	lsrs	r3, r3, #24
 8003646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3730      	adds	r7, #48	; 0x30
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	58024400 	.word	0x58024400

08003668 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e19c      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800367c:	4b8a      	ldr	r3, [pc, #552]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d910      	bls.n	80036ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b87      	ldr	r3, [pc, #540]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 020f 	bic.w	r2, r3, #15
 8003692:	4985      	ldr	r1, [pc, #532]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800369a:	4b83      	ldr	r3, [pc, #524]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e184      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d010      	beq.n	80036da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	4b7b      	ldr	r3, [pc, #492]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d908      	bls.n	80036da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036c8:	4b78      	ldr	r3, [pc, #480]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	4975      	ldr	r1, [pc, #468]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d010      	beq.n	8003708 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695a      	ldr	r2, [r3, #20]
 80036ea:	4b70      	ldr	r3, [pc, #448]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d908      	bls.n	8003708 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036f6:	4b6d      	ldr	r3, [pc, #436]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	496a      	ldr	r1, [pc, #424]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003704:	4313      	orrs	r3, r2
 8003706:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	d010      	beq.n	8003736 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699a      	ldr	r2, [r3, #24]
 8003718:	4b64      	ldr	r3, [pc, #400]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003720:	429a      	cmp	r2, r3
 8003722:	d908      	bls.n	8003736 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003724:	4b61      	ldr	r3, [pc, #388]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	495e      	ldr	r1, [pc, #376]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003732:	4313      	orrs	r3, r2
 8003734:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d010      	beq.n	8003764 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	4b59      	ldr	r3, [pc, #356]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800374e:	429a      	cmp	r2, r3
 8003750:	d908      	bls.n	8003764 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003752:	4b56      	ldr	r3, [pc, #344]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	4953      	ldr	r1, [pc, #332]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003760:	4313      	orrs	r3, r2
 8003762:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d010      	beq.n	8003792 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	4b4d      	ldr	r3, [pc, #308]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	429a      	cmp	r2, r3
 800377e:	d908      	bls.n	8003792 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003780:	4b4a      	ldr	r3, [pc, #296]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f023 020f 	bic.w	r2, r3, #15
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	4947      	ldr	r1, [pc, #284]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 800378e:	4313      	orrs	r3, r2
 8003790:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d055      	beq.n	800384a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800379e:	4b43      	ldr	r3, [pc, #268]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	4940      	ldr	r1, [pc, #256]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d107      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037b8:	4b3c      	ldr	r3, [pc, #240]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d121      	bne.n	8003808 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0f6      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d107      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037d0:	4b36      	ldr	r3, [pc, #216]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d115      	bne.n	8003808 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0ea      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d107      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037e8:	4b30      	ldr	r3, [pc, #192]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d109      	bne.n	8003808 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0de      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037f8:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0d6      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003808:	4b28      	ldr	r3, [pc, #160]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f023 0207 	bic.w	r2, r3, #7
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4925      	ldr	r1, [pc, #148]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003816:	4313      	orrs	r3, r2
 8003818:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381a:	f7fd fccf 	bl	80011bc <HAL_GetTick>
 800381e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003820:	e00a      	b.n	8003838 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003822:	f7fd fccb 	bl	80011bc <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003830:	4293      	cmp	r3, r2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e0be      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003838:	4b1c      	ldr	r3, [pc, #112]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	429a      	cmp	r2, r3
 8003848:	d1eb      	bne.n	8003822 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d010      	beq.n	8003878 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	4b14      	ldr	r3, [pc, #80]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	429a      	cmp	r2, r3
 8003864:	d208      	bcs.n	8003878 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003866:	4b11      	ldr	r3, [pc, #68]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f023 020f 	bic.w	r2, r3, #15
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	490e      	ldr	r1, [pc, #56]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003874:	4313      	orrs	r3, r2
 8003876:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d214      	bcs.n	80038b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003886:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 020f 	bic.w	r2, r3, #15
 800388e:	4906      	ldr	r1, [pc, #24]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	4313      	orrs	r3, r2
 8003894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003896:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e086      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
 80038a8:	52002000 	.word	0x52002000
 80038ac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d010      	beq.n	80038de <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	4b3f      	ldr	r3, [pc, #252]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d208      	bcs.n	80038de <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038cc:	4b3c      	ldr	r3, [pc, #240]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	4939      	ldr	r1, [pc, #228]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d010      	beq.n	800390c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	4b34      	ldr	r3, [pc, #208]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d208      	bcs.n	800390c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038fa:	4b31      	ldr	r3, [pc, #196]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	492e      	ldr	r1, [pc, #184]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 8003908:	4313      	orrs	r3, r2
 800390a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0310 	and.w	r3, r3, #16
 8003914:	2b00      	cmp	r3, #0
 8003916:	d010      	beq.n	800393a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699a      	ldr	r2, [r3, #24]
 800391c:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003924:	429a      	cmp	r2, r3
 8003926:	d208      	bcs.n	800393a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003928:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	4922      	ldr	r1, [pc, #136]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 8003936:	4313      	orrs	r3, r2
 8003938:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d010      	beq.n	8003968 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69da      	ldr	r2, [r3, #28]
 800394a:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003952:	429a      	cmp	r2, r3
 8003954:	d208      	bcs.n	8003968 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003956:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	4917      	ldr	r1, [pc, #92]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 8003964:	4313      	orrs	r3, r2
 8003966:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003968:	f000 f834 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 800396c:	4601      	mov	r1, r0
 800396e:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	0a1b      	lsrs	r3, r3, #8
 8003974:	f003 030f 	and.w	r3, r3, #15
 8003978:	4a12      	ldr	r2, [pc, #72]	; (80039c4 <HAL_RCC_ClockConfig+0x35c>)
 800397a:	5cd3      	ldrb	r3, [r2, r3]
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	fa21 f303 	lsr.w	r3, r1, r3
 8003984:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003986:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	4a0d      	ldr	r2, [pc, #52]	; (80039c4 <HAL_RCC_ClockConfig+0x35c>)
 8003990:	5cd3      	ldrb	r3, [r2, r3]
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	fa22 f303 	lsr.w	r3, r2, r3
 800399c:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <HAL_RCC_ClockConfig+0x360>)
 800399e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039a0:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <HAL_RCC_ClockConfig+0x364>)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80039a6:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <HAL_RCC_ClockConfig+0x368>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fd fbbc 	bl	8001128 <HAL_InitTick>
 80039b0:	4603      	mov	r3, r0
 80039b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	58024400 	.word	0x58024400
 80039c4:	080075f0 	.word	0x080075f0
 80039c8:	20000004 	.word	0x20000004
 80039cc:	20000000 	.word	0x20000000
 80039d0:	20000008 	.word	0x20000008

080039d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039da:	4baf      	ldr	r3, [pc, #700]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039e2:	2b18      	cmp	r3, #24
 80039e4:	f200 814e 	bhi.w	8003c84 <HAL_RCC_GetSysClockFreq+0x2b0>
 80039e8:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80039ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ee:	bf00      	nop
 80039f0:	08003a55 	.word	0x08003a55
 80039f4:	08003c85 	.word	0x08003c85
 80039f8:	08003c85 	.word	0x08003c85
 80039fc:	08003c85 	.word	0x08003c85
 8003a00:	08003c85 	.word	0x08003c85
 8003a04:	08003c85 	.word	0x08003c85
 8003a08:	08003c85 	.word	0x08003c85
 8003a0c:	08003c85 	.word	0x08003c85
 8003a10:	08003a7b 	.word	0x08003a7b
 8003a14:	08003c85 	.word	0x08003c85
 8003a18:	08003c85 	.word	0x08003c85
 8003a1c:	08003c85 	.word	0x08003c85
 8003a20:	08003c85 	.word	0x08003c85
 8003a24:	08003c85 	.word	0x08003c85
 8003a28:	08003c85 	.word	0x08003c85
 8003a2c:	08003c85 	.word	0x08003c85
 8003a30:	08003a81 	.word	0x08003a81
 8003a34:	08003c85 	.word	0x08003c85
 8003a38:	08003c85 	.word	0x08003c85
 8003a3c:	08003c85 	.word	0x08003c85
 8003a40:	08003c85 	.word	0x08003c85
 8003a44:	08003c85 	.word	0x08003c85
 8003a48:	08003c85 	.word	0x08003c85
 8003a4c:	08003c85 	.word	0x08003c85
 8003a50:	08003a87 	.word	0x08003a87
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a54:	4b90      	ldr	r3, [pc, #576]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a60:	4b8d      	ldr	r3, [pc, #564]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	08db      	lsrs	r3, r3, #3
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	4a8c      	ldr	r2, [pc, #560]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003a72:	e10a      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a74:	4b89      	ldr	r3, [pc, #548]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003a76:	61bb      	str	r3, [r7, #24]
    break;
 8003a78:	e107      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003a7a:	4b89      	ldr	r3, [pc, #548]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003a7c:	61bb      	str	r3, [r7, #24]
    break;
 8003a7e:	e104      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003a80:	4b88      	ldr	r3, [pc, #544]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003a82:	61bb      	str	r3, [r7, #24]
    break;
 8003a84:	e101      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a86:	4b84      	ldr	r3, [pc, #528]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003a90:	4b81      	ldr	r3, [pc, #516]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a9a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a9c:	4b7e      	ldr	r3, [pc, #504]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003aa6:	4b7c      	ldr	r3, [pc, #496]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aaa:	08db      	lsrs	r3, r3, #3
 8003aac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80da 	beq.w	8003c7e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d05a      	beq.n	8003b86 <HAL_RCC_GetSysClockFreq+0x1b2>
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d302      	bcc.n	8003ada <HAL_RCC_GetSysClockFreq+0x106>
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d078      	beq.n	8003bca <HAL_RCC_GetSysClockFreq+0x1f6>
 8003ad8:	e099      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ada:	4b6f      	ldr	r3, [pc, #444]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d02d      	beq.n	8003b42 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ae6:	4b6c      	ldr	r3, [pc, #432]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	08db      	lsrs	r3, r3, #3
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	4a6a      	ldr	r2, [pc, #424]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003af2:	fa22 f303 	lsr.w	r3, r2, r3
 8003af6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	ee07 3a90 	vmov	s15, r3
 8003b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b10:	4b61      	ldr	r3, [pc, #388]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b18:	ee07 3a90 	vmov	s15, r3
 8003b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b20:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b24:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003b28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003b40:	e087      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	ee07 3a90 	vmov	s15, r3
 8003b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003cac <HAL_RCC_GetSysClockFreq+0x2d8>
 8003b50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b54:	4b50      	ldr	r3, [pc, #320]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5c:	ee07 3a90 	vmov	s15, r3
 8003b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b64:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b68:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003b6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b84:	e065      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	ee07 3a90 	vmov	s15, r3
 8003b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b90:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003cb0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003b94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b98:	4b3f      	ldr	r3, [pc, #252]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba0:	ee07 3a90 	vmov	s15, r3
 8003ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bac:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003bb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bc8:	e043      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	ee07 3a90 	vmov	s15, r3
 8003bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003cb4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003bd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bdc:	4b2e      	ldr	r3, [pc, #184]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be4:	ee07 3a90 	vmov	s15, r3
 8003be8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bec:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bf0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003bf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c0c:	e021      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	ee07 3a90 	vmov	s15, r3
 8003c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c18:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003cb0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003c1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c20:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c28:	ee07 3a90 	vmov	s15, r3
 8003c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c30:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c34:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003c38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c50:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003c52:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	0a5b      	lsrs	r3, r3, #9
 8003c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c76:	ee17 3a90 	vmov	r3, s15
 8003c7a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003c7c:	e005      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61bb      	str	r3, [r7, #24]
    break;
 8003c82:	e002      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003c86:	61bb      	str	r3, [r7, #24]
    break;
 8003c88:	bf00      	nop
  }

  return sysclockfreq;
 8003c8a:	69bb      	ldr	r3, [r7, #24]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3724      	adds	r7, #36	; 0x24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	58024400 	.word	0x58024400
 8003c9c:	03d09000 	.word	0x03d09000
 8003ca0:	003d0900 	.word	0x003d0900
 8003ca4:	017d7840 	.word	0x017d7840
 8003ca8:	46000000 	.word	0x46000000
 8003cac:	4c742400 	.word	0x4c742400
 8003cb0:	4a742400 	.word	0x4a742400
 8003cb4:	4bbebc20 	.word	0x4bbebc20

08003cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003cbe:	f7ff fe89 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 8003cc2:	4601      	mov	r1, r0
 8003cc4:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <HAL_RCC_GetHCLKFreq+0x50>)
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	0a1b      	lsrs	r3, r3, #8
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	4a0f      	ldr	r2, [pc, #60]	; (8003d0c <HAL_RCC_GetHCLKFreq+0x54>)
 8003cd0:	5cd3      	ldrb	r3, [r2, r3]
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	fa21 f303 	lsr.w	r3, r1, r3
 8003cda:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <HAL_RCC_GetHCLKFreq+0x50>)
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	4a09      	ldr	r2, [pc, #36]	; (8003d0c <HAL_RCC_GetHCLKFreq+0x54>)
 8003ce6:	5cd3      	ldrb	r3, [r2, r3]
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf2:	4a07      	ldr	r2, [pc, #28]	; (8003d10 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cf4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cf6:	4a07      	ldr	r2, [pc, #28]	; (8003d14 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003cfc:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	58024400 	.word	0x58024400
 8003d0c:	080075f0 	.word	0x080075f0
 8003d10:	20000004 	.word	0x20000004
 8003d14:	20000000 	.word	0x20000000

08003d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003d1c:	f7ff ffcc 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8003d20:	4601      	mov	r1, r0
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	091b      	lsrs	r3, r3, #4
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4a04      	ldr	r2, [pc, #16]	; (8003d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d2e:	5cd3      	ldrb	r3, [r2, r3]
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	58024400 	.word	0x58024400
 8003d40:	080075f0 	.word	0x080075f0

08003d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003d48:	f7ff ffb6 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8003d4c:	4601      	mov	r1, r0
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	4a04      	ldr	r2, [pc, #16]	; (8003d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d5a:	5cd3      	ldrb	r3, [r2, r3]
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	58024400 	.word	0x58024400
 8003d6c:	080075f0 	.word	0x080075f0

08003d70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d78:	2300      	movs	r3, #0
 8003d7a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d03d      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d94:	d013      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d9a:	d802      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d007      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003da0:	e01f      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003da2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003da6:	d013      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003da8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003dac:	d01c      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003dae:	e018      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db0:	4baf      	ldr	r3, [pc, #700]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	4aae      	ldr	r2, [pc, #696]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003dbc:	e015      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f001 fd33 	bl	8005830 <RCCEx_PLL2_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003dce:	e00c      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3324      	adds	r3, #36	; 0x24
 8003dd4:	2102      	movs	r1, #2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f001 fddc 	bl	8005994 <RCCEx_PLL3_Config>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003de0:	e003      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	75fb      	strb	r3, [r7, #23]
      break;
 8003de6:	e000      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d109      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003df0:	4b9f      	ldr	r3, [pc, #636]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dfc:	499c      	ldr	r1, [pc, #624]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	650b      	str	r3, [r1, #80]	; 0x50
 8003e02:	e001      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
 8003e06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d03d      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d826      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003e1c:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e22:	bf00      	nop
 8003e24:	08003e39 	.word	0x08003e39
 8003e28:	08003e47 	.word	0x08003e47
 8003e2c:	08003e59 	.word	0x08003e59
 8003e30:	08003e71 	.word	0x08003e71
 8003e34:	08003e71 	.word	0x08003e71
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e38:	4b8d      	ldr	r3, [pc, #564]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	4a8c      	ldr	r2, [pc, #560]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e44:	e015      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f001 fcef 	bl	8005830 <RCCEx_PLL2_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e56:	e00c      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3324      	adds	r3, #36	; 0x24
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f001 fd98 	bl	8005994 <RCCEx_PLL3_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e68:	e003      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e6e:	e000      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e72:	7dfb      	ldrb	r3, [r7, #23]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d109      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e78:	4b7d      	ldr	r3, [pc, #500]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7c:	f023 0207 	bic.w	r2, r3, #7
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e84:	497a      	ldr	r1, [pc, #488]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	650b      	str	r3, [r1, #80]	; 0x50
 8003e8a:	e001      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
 8003e8e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d03e      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea0:	2b80      	cmp	r3, #128	; 0x80
 8003ea2:	d01c      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003ea4:	2b80      	cmp	r3, #128	; 0x80
 8003ea6:	d804      	bhi.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d008      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003eac:	2b40      	cmp	r3, #64	; 0x40
 8003eae:	d00d      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003eb0:	e01e      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8003eb4:	d01f      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eba:	d01e      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003ebc:	e018      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ebe:	4b6c      	ldr	r3, [pc, #432]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	4a6b      	ldr	r2, [pc, #428]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003eca:	e017      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f001 fcac 	bl	8005830 <RCCEx_PLL2_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003edc:	e00e      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3324      	adds	r3, #36	; 0x24
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f001 fd55 	bl	8005994 <RCCEx_PLL3_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003eee:	e005      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef4:	e002      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e000      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003f02:	4b5b      	ldr	r3, [pc, #364]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f06:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	4958      	ldr	r1, [pc, #352]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	650b      	str	r3, [r1, #80]	; 0x50
 8003f14:	e001      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d044      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f30:	d01f      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f36:	d805      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003f3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f40:	d00e      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003f42:	e01f      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003f44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f48:	d01f      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003f4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f4e:	d01e      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003f50:	e018      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f52:	4b47      	ldr	r3, [pc, #284]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	4a46      	ldr	r2, [pc, #280]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f5e:	e017      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f001 fc62 	bl	8005830 <RCCEx_PLL2_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003f70:	e00e      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3324      	adds	r3, #36	; 0x24
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f001 fd0b 	bl	8005994 <RCCEx_PLL3_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f82:	e005      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	75fb      	strb	r3, [r7, #23]
      break;
 8003f88:	e002      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003f8a:	bf00      	nop
 8003f8c:	e000      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f90:	7dfb      	ldrb	r3, [r7, #23]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10a      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003f96:	4b36      	ldr	r3, [pc, #216]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fa4:	4932      	ldr	r1, [pc, #200]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	658b      	str	r3, [r1, #88]	; 0x58
 8003faa:	e001      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
 8003fae:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d044      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003fc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fc6:	d01f      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003fc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fcc:	d805      	bhi.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003fd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003fd8:	e01f      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003fda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fde:	d01f      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003fe0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fe4:	d01e      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003fe6:	e018      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe8:	4b21      	ldr	r3, [pc, #132]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	4a20      	ldr	r2, [pc, #128]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ff4:	e017      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f001 fc17 	bl	8005830 <RCCEx_PLL2_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004006:	e00e      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3324      	adds	r3, #36	; 0x24
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f001 fcc0 	bl	8005994 <RCCEx_PLL3_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004018:	e005      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	75fb      	strb	r3, [r7, #23]
      break;
 800401e:	e002      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004020:	bf00      	nop
 8004022:	e000      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004026:	7dfb      	ldrb	r3, [r7, #23]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800402c:	4b10      	ldr	r3, [pc, #64]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800402e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004030:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800403a:	490d      	ldr	r1, [pc, #52]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800403c:	4313      	orrs	r3, r2
 800403e:	658b      	str	r3, [r1, #88]	; 0x58
 8004040:	e001      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004042:	7dfb      	ldrb	r3, [r7, #23]
 8004044:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d035      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004056:	2b10      	cmp	r3, #16
 8004058:	d00c      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800405a:	2b10      	cmp	r3, #16
 800405c:	d802      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01b      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004062:	e017      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004064:	2b20      	cmp	r3, #32
 8004066:	d00c      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004068:	2b30      	cmp	r3, #48	; 0x30
 800406a:	d018      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800406c:	e012      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800406e:	bf00      	nop
 8004070:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004074:	4baf      	ldr	r3, [pc, #700]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	4aae      	ldr	r2, [pc, #696]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800407a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800407e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004080:	e00e      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3304      	adds	r3, #4
 8004086:	2102      	movs	r1, #2
 8004088:	4618      	mov	r0, r3
 800408a:	f001 fbd1 	bl	8005830 <RCCEx_PLL2_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004092:	e005      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	75fb      	strb	r3, [r7, #23]
      break;
 8004098:	e002      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800409a:	bf00      	nop
 800409c:	e000      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800409e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80040a6:	4ba3      	ldr	r3, [pc, #652]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b2:	49a0      	ldr	r1, [pc, #640]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80040b8:	e001      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ba:	7dfb      	ldrb	r3, [r7, #23]
 80040bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d042      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d2:	d01f      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80040d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d8:	d805      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80040de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e2:	d00e      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80040e4:	e01f      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80040e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040ea:	d01f      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80040ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f0:	d01e      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80040f2:	e018      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f4:	4b8f      	ldr	r3, [pc, #572]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	4a8e      	ldr	r2, [pc, #568]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004100:	e017      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3304      	adds	r3, #4
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f001 fb91 	bl	8005830 <RCCEx_PLL2_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004112:	e00e      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3324      	adds	r3, #36	; 0x24
 8004118:	2100      	movs	r1, #0
 800411a:	4618      	mov	r0, r3
 800411c:	f001 fc3a 	bl	8005994 <RCCEx_PLL3_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004124:	e005      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	75fb      	strb	r3, [r7, #23]
      break;
 800412a:	e002      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800412c:	bf00      	nop
 800412e:	e000      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004132:	7dfb      	ldrb	r3, [r7, #23]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d109      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004138:	4b7e      	ldr	r3, [pc, #504]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800413a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004144:	497b      	ldr	r1, [pc, #492]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004146:	4313      	orrs	r3, r2
 8004148:	650b      	str	r3, [r1, #80]	; 0x50
 800414a:	e001      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414c:	7dfb      	ldrb	r3, [r7, #23]
 800414e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d042      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004160:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004164:	d01b      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004166:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800416a:	d805      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800416c:	2b00      	cmp	r3, #0
 800416e:	d022      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004174:	d00a      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004176:	e01b      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004178:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800417c:	d01d      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800417e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004182:	d01c      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004184:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004188:	d01b      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800418a:	e011      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3304      	adds	r3, #4
 8004190:	2101      	movs	r1, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f001 fb4c 	bl	8005830 <RCCEx_PLL2_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800419c:	e012      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3324      	adds	r3, #36	; 0x24
 80041a2:	2101      	movs	r1, #1
 80041a4:	4618      	mov	r0, r3
 80041a6:	f001 fbf5 	bl	8005994 <RCCEx_PLL3_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80041ae:	e009      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	75fb      	strb	r3, [r7, #23]
      break;
 80041b4:	e006      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80041b6:	bf00      	nop
 80041b8:	e004      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80041ba:	bf00      	nop
 80041bc:	e002      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80041be:	bf00      	nop
 80041c0:	e000      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80041c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80041ca:	4b5a      	ldr	r3, [pc, #360]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ce:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d6:	4957      	ldr	r1, [pc, #348]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	650b      	str	r3, [r1, #80]	; 0x50
 80041dc:	e001      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041de:	7dfb      	ldrb	r3, [r7, #23]
 80041e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d044      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041f8:	d01b      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80041fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041fe:	d805      	bhi.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d022      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004204:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004208:	d00a      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800420a:	e01b      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800420c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004210:	d01d      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004212:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004216:	d01c      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004218:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800421c:	d01b      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800421e:	e011      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3304      	adds	r3, #4
 8004224:	2101      	movs	r1, #1
 8004226:	4618      	mov	r0, r3
 8004228:	f001 fb02 	bl	8005830 <RCCEx_PLL2_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004230:	e012      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3324      	adds	r3, #36	; 0x24
 8004236:	2101      	movs	r1, #1
 8004238:	4618      	mov	r0, r3
 800423a:	f001 fbab 	bl	8005994 <RCCEx_PLL3_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004242:	e009      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	75fb      	strb	r3, [r7, #23]
      break;
 8004248:	e006      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800424a:	bf00      	nop
 800424c:	e004      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800424e:	bf00      	nop
 8004250:	e002      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004252:	bf00      	nop
 8004254:	e000      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004258:	7dfb      	ldrb	r3, [r7, #23]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10a      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800425e:	4b35      	ldr	r3, [pc, #212]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004262:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800426c:	4931      	ldr	r1, [pc, #196]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800426e:	4313      	orrs	r3, r2
 8004270:	658b      	str	r3, [r1, #88]	; 0x58
 8004272:	e001      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004274:	7dfb      	ldrb	r3, [r7, #23]
 8004276:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d02d      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004288:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800428c:	d005      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800428e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004292:	d009      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d013      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004298:	e00f      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800429a:	4b26      	ldr	r3, [pc, #152]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	4a25      	ldr	r2, [pc, #148]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80042a6:	e00c      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3304      	adds	r3, #4
 80042ac:	2101      	movs	r1, #1
 80042ae:	4618      	mov	r0, r3
 80042b0:	f001 fabe 	bl	8005830 <RCCEx_PLL2_Config>
 80042b4:	4603      	mov	r3, r0
 80042b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80042b8:	e003      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	75fb      	strb	r3, [r7, #23]
      break;
 80042be:	e000      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80042c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042c2:	7dfb      	ldrb	r3, [r7, #23]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d109      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042c8:	4b1a      	ldr	r3, [pc, #104]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d4:	4917      	ldr	r1, [pc, #92]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	650b      	str	r3, [r1, #80]	; 0x50
 80042da:	e001      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042dc:	7dfb      	ldrb	r3, [r7, #23]
 80042de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d035      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d81b      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80042f4:	a201      	add	r2, pc, #4	; (adr r2, 80042fc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80042f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fa:	bf00      	nop
 80042fc:	08004339 	.word	0x08004339
 8004300:	0800430d 	.word	0x0800430d
 8004304:	0800431b 	.word	0x0800431b
 8004308:	08004339 	.word	0x08004339
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	4a08      	ldr	r2, [pc, #32]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004316:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004318:	e00f      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3304      	adds	r3, #4
 800431e:	2102      	movs	r1, #2
 8004320:	4618      	mov	r0, r3
 8004322:	f001 fa85 	bl	8005830 <RCCEx_PLL2_Config>
 8004326:	4603      	mov	r3, r0
 8004328:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800432a:	e006      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	75fb      	strb	r3, [r7, #23]
      break;
 8004330:	e003      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004332:	bf00      	nop
 8004334:	58024400 	.word	0x58024400
      break;
 8004338:	bf00      	nop
    }

    if(ret == HAL_OK)
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d109      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004340:	4bba      	ldr	r3, [pc, #744]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004344:	f023 0203 	bic.w	r2, r3, #3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434c:	49b7      	ldr	r1, [pc, #732]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004352:	e001      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8086 	beq.w	8004472 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004366:	4bb2      	ldr	r3, [pc, #712]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4ab1      	ldr	r2, [pc, #708]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800436c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004370:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004372:	f7fc ff23 	bl	80011bc <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004378:	e009      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800437a:	f7fc ff1f 	bl	80011bc <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b64      	cmp	r3, #100	; 0x64
 8004386:	d902      	bls.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	75fb      	strb	r3, [r7, #23]
        break;
 800438c:	e005      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800438e:	4ba8      	ldr	r3, [pc, #672]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0ef      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800439a:	7dfb      	ldrb	r3, [r7, #23]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d166      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80043a0:	4ba2      	ldr	r3, [pc, #648]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043aa:	4053      	eors	r3, r2
 80043ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d013      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043b4:	4b9d      	ldr	r3, [pc, #628]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043bc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043be:	4b9b      	ldr	r3, [pc, #620]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	4a9a      	ldr	r2, [pc, #616]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043ca:	4b98      	ldr	r3, [pc, #608]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ce:	4a97      	ldr	r2, [pc, #604]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80043d6:	4a95      	ldr	r2, [pc, #596]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e6:	d115      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fc fee8 	bl	80011bc <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043ee:	e00b      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f0:	f7fc fee4 	bl	80011bc <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d902      	bls.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	75fb      	strb	r3, [r7, #23]
            break;
 8004406:	e005      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004408:	4b88      	ldr	r3, [pc, #544]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800440a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0ed      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004414:	7dfb      	ldrb	r3, [r7, #23]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d126      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004424:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004428:	d10d      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800442a:	4b80      	ldr	r3, [pc, #512]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004438:	0919      	lsrs	r1, r3, #4
 800443a:	4b7e      	ldr	r3, [pc, #504]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800443c:	400b      	ands	r3, r1
 800443e:	497b      	ldr	r1, [pc, #492]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004440:	4313      	orrs	r3, r2
 8004442:	610b      	str	r3, [r1, #16]
 8004444:	e005      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004446:	4b79      	ldr	r3, [pc, #484]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	4a78      	ldr	r2, [pc, #480]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800444c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004450:	6113      	str	r3, [r2, #16]
 8004452:	4b76      	ldr	r3, [pc, #472]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004454:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800445c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004460:	4972      	ldr	r1, [pc, #456]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004462:	4313      	orrs	r3, r2
 8004464:	670b      	str	r3, [r1, #112]	; 0x70
 8004466:	e004      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004468:	7dfb      	ldrb	r3, [r7, #23]
 800446a:	75bb      	strb	r3, [r7, #22]
 800446c:	e001      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446e:	7dfb      	ldrb	r3, [r7, #23]
 8004470:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d07d      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004482:	2b28      	cmp	r3, #40	; 0x28
 8004484:	d866      	bhi.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004486:	a201      	add	r2, pc, #4	; (adr r2, 800448c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448c:	0800455b 	.word	0x0800455b
 8004490:	08004555 	.word	0x08004555
 8004494:	08004555 	.word	0x08004555
 8004498:	08004555 	.word	0x08004555
 800449c:	08004555 	.word	0x08004555
 80044a0:	08004555 	.word	0x08004555
 80044a4:	08004555 	.word	0x08004555
 80044a8:	08004555 	.word	0x08004555
 80044ac:	08004531 	.word	0x08004531
 80044b0:	08004555 	.word	0x08004555
 80044b4:	08004555 	.word	0x08004555
 80044b8:	08004555 	.word	0x08004555
 80044bc:	08004555 	.word	0x08004555
 80044c0:	08004555 	.word	0x08004555
 80044c4:	08004555 	.word	0x08004555
 80044c8:	08004555 	.word	0x08004555
 80044cc:	08004543 	.word	0x08004543
 80044d0:	08004555 	.word	0x08004555
 80044d4:	08004555 	.word	0x08004555
 80044d8:	08004555 	.word	0x08004555
 80044dc:	08004555 	.word	0x08004555
 80044e0:	08004555 	.word	0x08004555
 80044e4:	08004555 	.word	0x08004555
 80044e8:	08004555 	.word	0x08004555
 80044ec:	0800455b 	.word	0x0800455b
 80044f0:	08004555 	.word	0x08004555
 80044f4:	08004555 	.word	0x08004555
 80044f8:	08004555 	.word	0x08004555
 80044fc:	08004555 	.word	0x08004555
 8004500:	08004555 	.word	0x08004555
 8004504:	08004555 	.word	0x08004555
 8004508:	08004555 	.word	0x08004555
 800450c:	0800455b 	.word	0x0800455b
 8004510:	08004555 	.word	0x08004555
 8004514:	08004555 	.word	0x08004555
 8004518:	08004555 	.word	0x08004555
 800451c:	08004555 	.word	0x08004555
 8004520:	08004555 	.word	0x08004555
 8004524:	08004555 	.word	0x08004555
 8004528:	08004555 	.word	0x08004555
 800452c:	0800455b 	.word	0x0800455b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	2101      	movs	r1, #1
 8004536:	4618      	mov	r0, r3
 8004538:	f001 f97a 	bl	8005830 <RCCEx_PLL2_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004540:	e00c      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3324      	adds	r3, #36	; 0x24
 8004546:	2101      	movs	r1, #1
 8004548:	4618      	mov	r0, r3
 800454a:	f001 fa23 	bl	8005994 <RCCEx_PLL3_Config>
 800454e:	4603      	mov	r3, r0
 8004550:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004552:	e003      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	75fb      	strb	r3, [r7, #23]
      break;
 8004558:	e000      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800455a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800455c:	7dfb      	ldrb	r3, [r7, #23]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004562:	4b32      	ldr	r3, [pc, #200]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800456e:	492f      	ldr	r1, [pc, #188]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004570:	4313      	orrs	r3, r2
 8004572:	654b      	str	r3, [r1, #84]	; 0x54
 8004574:	e001      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004576:	7dfb      	ldrb	r3, [r7, #23]
 8004578:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d037      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458a:	2b05      	cmp	r3, #5
 800458c:	d820      	bhi.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800458e:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004594:	080045d7 	.word	0x080045d7
 8004598:	080045ad 	.word	0x080045ad
 800459c:	080045bf 	.word	0x080045bf
 80045a0:	080045d7 	.word	0x080045d7
 80045a4:	080045d7 	.word	0x080045d7
 80045a8:	080045d7 	.word	0x080045d7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3304      	adds	r3, #4
 80045b0:	2101      	movs	r1, #1
 80045b2:	4618      	mov	r0, r3
 80045b4:	f001 f93c 	bl	8005830 <RCCEx_PLL2_Config>
 80045b8:	4603      	mov	r3, r0
 80045ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80045bc:	e00c      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3324      	adds	r3, #36	; 0x24
 80045c2:	2101      	movs	r1, #1
 80045c4:	4618      	mov	r0, r3
 80045c6:	f001 f9e5 	bl	8005994 <RCCEx_PLL3_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80045ce:	e003      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	75fb      	strb	r3, [r7, #23]
      break;
 80045d4:	e000      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80045d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80045de:	4b13      	ldr	r3, [pc, #76]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	f023 0207 	bic.w	r2, r3, #7
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ea:	4910      	ldr	r1, [pc, #64]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	654b      	str	r3, [r1, #84]	; 0x54
 80045f0:	e001      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f2:	7dfb      	ldrb	r3, [r7, #23]
 80045f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d040      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004608:	2b05      	cmp	r3, #5
 800460a:	d827      	bhi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800460c:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800460e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004612:	bf00      	nop
 8004614:	08004663 	.word	0x08004663
 8004618:	08004639 	.word	0x08004639
 800461c:	0800464b 	.word	0x0800464b
 8004620:	08004663 	.word	0x08004663
 8004624:	08004663 	.word	0x08004663
 8004628:	08004663 	.word	0x08004663
 800462c:	58024400 	.word	0x58024400
 8004630:	58024800 	.word	0x58024800
 8004634:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3304      	adds	r3, #4
 800463c:	2101      	movs	r1, #1
 800463e:	4618      	mov	r0, r3
 8004640:	f001 f8f6 	bl	8005830 <RCCEx_PLL2_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004648:	e00c      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3324      	adds	r3, #36	; 0x24
 800464e:	2101      	movs	r1, #1
 8004650:	4618      	mov	r0, r3
 8004652:	f001 f99f 	bl	8005994 <RCCEx_PLL3_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800465a:	e003      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	75fb      	strb	r3, [r7, #23]
      break;
 8004660:	e000      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004664:	7dfb      	ldrb	r3, [r7, #23]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10a      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800466a:	4bb2      	ldr	r3, [pc, #712]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800466c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466e:	f023 0207 	bic.w	r2, r3, #7
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004678:	49ae      	ldr	r1, [pc, #696]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800467a:	4313      	orrs	r3, r2
 800467c:	658b      	str	r3, [r1, #88]	; 0x58
 800467e:	e001      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004680:	7dfb      	ldrb	r3, [r7, #23]
 8004682:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b00      	cmp	r3, #0
 800468e:	d044      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800469a:	d01b      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800469c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046a0:	d805      	bhi.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d022      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80046a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046aa:	d00a      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80046ac:	e01b      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80046ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b2:	d01d      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80046b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046b8:	d01c      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80046ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046be:	d01b      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80046c0:	e011      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3304      	adds	r3, #4
 80046c6:	2100      	movs	r1, #0
 80046c8:	4618      	mov	r0, r3
 80046ca:	f001 f8b1 	bl	8005830 <RCCEx_PLL2_Config>
 80046ce:	4603      	mov	r3, r0
 80046d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80046d2:	e012      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3324      	adds	r3, #36	; 0x24
 80046d8:	2102      	movs	r1, #2
 80046da:	4618      	mov	r0, r3
 80046dc:	f001 f95a 	bl	8005994 <RCCEx_PLL3_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80046e4:	e009      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	75fb      	strb	r3, [r7, #23]
      break;
 80046ea:	e006      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80046ec:	bf00      	nop
 80046ee:	e004      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80046f0:	bf00      	nop
 80046f2:	e002      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80046f4:	bf00      	nop
 80046f6:	e000      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80046f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046fa:	7dfb      	ldrb	r3, [r7, #23]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004700:	4b8c      	ldr	r3, [pc, #560]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004704:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800470e:	4989      	ldr	r1, [pc, #548]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004710:	4313      	orrs	r3, r2
 8004712:	654b      	str	r3, [r1, #84]	; 0x54
 8004714:	e001      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004716:	7dfb      	ldrb	r3, [r7, #23]
 8004718:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d044      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800472c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004730:	d01b      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004736:	d805      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004738:	2b00      	cmp	r3, #0
 800473a:	d022      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800473c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004740:	d00a      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004742:	e01b      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004748:	d01d      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800474a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800474e:	d01c      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004750:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004754:	d01b      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004756:	e011      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3304      	adds	r3, #4
 800475c:	2100      	movs	r1, #0
 800475e:	4618      	mov	r0, r3
 8004760:	f001 f866 	bl	8005830 <RCCEx_PLL2_Config>
 8004764:	4603      	mov	r3, r0
 8004766:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004768:	e012      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3324      	adds	r3, #36	; 0x24
 800476e:	2102      	movs	r1, #2
 8004770:	4618      	mov	r0, r3
 8004772:	f001 f90f 	bl	8005994 <RCCEx_PLL3_Config>
 8004776:	4603      	mov	r3, r0
 8004778:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800477a:	e009      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	75fb      	strb	r3, [r7, #23]
      break;
 8004780:	e006      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004782:	bf00      	nop
 8004784:	e004      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004786:	bf00      	nop
 8004788:	e002      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800478a:	bf00      	nop
 800478c:	e000      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800478e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004790:	7dfb      	ldrb	r3, [r7, #23]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10a      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004796:	4b67      	ldr	r3, [pc, #412]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047a4:	4963      	ldr	r1, [pc, #396]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	658b      	str	r3, [r1, #88]	; 0x58
 80047aa:	e001      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ac:	7dfb      	ldrb	r3, [r7, #23]
 80047ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d044      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047c6:	d01b      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80047c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047cc:	d805      	bhi.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d022      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80047d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d6:	d00a      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80047d8:	e01b      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80047da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047de:	d01d      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80047e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80047e4:	d01c      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80047e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80047ea:	d01b      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80047ec:	e011      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3304      	adds	r3, #4
 80047f2:	2100      	movs	r1, #0
 80047f4:	4618      	mov	r0, r3
 80047f6:	f001 f81b 	bl	8005830 <RCCEx_PLL2_Config>
 80047fa:	4603      	mov	r3, r0
 80047fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80047fe:	e012      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3324      	adds	r3, #36	; 0x24
 8004804:	2102      	movs	r1, #2
 8004806:	4618      	mov	r0, r3
 8004808:	f001 f8c4 	bl	8005994 <RCCEx_PLL3_Config>
 800480c:	4603      	mov	r3, r0
 800480e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004810:	e009      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	75fb      	strb	r3, [r7, #23]
      break;
 8004816:	e006      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004818:	bf00      	nop
 800481a:	e004      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800481c:	bf00      	nop
 800481e:	e002      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004820:	bf00      	nop
 8004822:	e000      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004824:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004826:	7dfb      	ldrb	r3, [r7, #23]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10a      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800482c:	4b41      	ldr	r3, [pc, #260]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004830:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800483a:	493e      	ldr	r1, [pc, #248]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800483c:	4313      	orrs	r3, r2
 800483e:	658b      	str	r3, [r1, #88]	; 0x58
 8004840:	e001      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004842:	7dfb      	ldrb	r3, [r7, #23]
 8004844:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800485c:	d10a      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3324      	adds	r3, #36	; 0x24
 8004862:	2102      	movs	r1, #2
 8004864:	4618      	mov	r0, r3
 8004866:	f001 f895 	bl	8005994 <RCCEx_PLL3_Config>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004874:	4b2f      	ldr	r3, [pc, #188]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004878:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004882:	492c      	ldr	r1, [pc, #176]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004884:	4313      	orrs	r3, r2
 8004886:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0310 	and.w	r3, r3, #16
 8004890:	2b00      	cmp	r3, #0
 8004892:	d01a      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800489a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489e:	d10a      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3324      	adds	r3, #36	; 0x24
 80048a4:	2102      	movs	r1, #2
 80048a6:	4618      	mov	r0, r3
 80048a8:	f001 f874 	bl	8005994 <RCCEx_PLL3_Config>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048b6:	4b1f      	ldr	r3, [pc, #124]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80048b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c4:	491b      	ldr	r1, [pc, #108]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d032      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e0:	d00d      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80048e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048e6:	d016      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d111      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3304      	adds	r3, #4
 80048f0:	2100      	movs	r1, #0
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 ff9c 	bl	8005830 <RCCEx_PLL2_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80048fc:	e00c      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3324      	adds	r3, #36	; 0x24
 8004902:	2102      	movs	r1, #2
 8004904:	4618      	mov	r0, r3
 8004906:	f001 f845 	bl	8005994 <RCCEx_PLL3_Config>
 800490a:	4603      	mov	r3, r0
 800490c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800490e:	e003      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	75fb      	strb	r3, [r7, #23]
      break;
 8004914:	e000      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8004916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004918:	7dfb      	ldrb	r3, [r7, #23]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10c      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800491e:	4b05      	ldr	r3, [pc, #20]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004922:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800492c:	4901      	ldr	r1, [pc, #4]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800492e:	4313      	orrs	r3, r2
 8004930:	658b      	str	r3, [r1, #88]	; 0x58
 8004932:	e003      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004934:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004938:	7dfb      	ldrb	r3, [r7, #23]
 800493a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d02f      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800494e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004952:	d00c      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004954:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004958:	d015      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800495a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800495e:	d10f      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004960:	4b79      	ldr	r3, [pc, #484]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	4a78      	ldr	r2, [pc, #480]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800496a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800496c:	e00c      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3324      	adds	r3, #36	; 0x24
 8004972:	2101      	movs	r1, #1
 8004974:	4618      	mov	r0, r3
 8004976:	f001 f80d 	bl	8005994 <RCCEx_PLL3_Config>
 800497a:	4603      	mov	r3, r0
 800497c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800497e:	e003      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	75fb      	strb	r3, [r7, #23]
      break;
 8004984:	e000      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004986:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004988:	7dfb      	ldrb	r3, [r7, #23]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800498e:	4b6e      	ldr	r3, [pc, #440]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499c:	496a      	ldr	r1, [pc, #424]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	654b      	str	r3, [r1, #84]	; 0x54
 80049a2:	e001      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a4:	7dfb      	ldrb	r3, [r7, #23]
 80049a6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d029      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80049bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c0:	d007      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80049c2:	e00f      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c4:	4b60      	ldr	r3, [pc, #384]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	4a5f      	ldr	r2, [pc, #380]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80049d0:	e00b      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3304      	adds	r3, #4
 80049d6:	2102      	movs	r1, #2
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 ff29 	bl	8005830 <RCCEx_PLL2_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80049e2:	e002      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	75fb      	strb	r3, [r7, #23]
      break;
 80049e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d109      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049f0:	4b55      	ldr	r3, [pc, #340]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fc:	4952      	ldr	r1, [pc, #328]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a02:	e001      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a04:	7dfb      	ldrb	r3, [r7, #23]
 8004a06:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3324      	adds	r3, #36	; 0x24
 8004a18:	2102      	movs	r1, #2
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 ffba 	bl	8005994 <RCCEx_PLL3_Config>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d02f      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a3e:	d00c      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a44:	d802      	bhi.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d011      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8004a4a:	e00d      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8004a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a50:	d00f      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004a52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a56:	d00e      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004a58:	e006      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a5a:	4b3b      	ldr	r3, [pc, #236]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	4a3a      	ldr	r2, [pc, #232]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004a66:	e007      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a6c:	e004      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004a6e:	bf00      	nop
 8004a70:	e002      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004a72:	bf00      	nop
 8004a74:	e000      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a7e:	4b32      	ldr	r3, [pc, #200]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a8a:	492f      	ldr	r1, [pc, #188]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	654b      	str	r3, [r1, #84]	; 0x54
 8004a90:	e001      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
 8004a94:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d008      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004aa2:	4b29      	ldr	r3, [pc, #164]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aae:	4926      	ldr	r1, [pc, #152]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d009      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004ac0:	4b21      	ldr	r3, [pc, #132]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ace:	491e      	ldr	r1, [pc, #120]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d008      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ae0:	4b19      	ldr	r3, [pc, #100]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aec:	4916      	ldr	r1, [pc, #88]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00d      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004afe:	4b12      	ldr	r3, [pc, #72]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	4a11      	ldr	r2, [pc, #68]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b08:	6113      	str	r3, [r2, #16]
 8004b0a:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004b14:	490c      	ldr	r1, [pc, #48]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	da08      	bge.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b22:	4b09      	ldr	r3, [pc, #36]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2e:	4906      	ldr	r1, [pc, #24]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004b34:	7dbb      	ldrb	r3, [r7, #22]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	e000      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	58024400 	.word	0x58024400

08004b4c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b090      	sub	sp, #64	; 0x40
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b5a:	d150      	bne.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004b5c:	4ba1      	ldr	r3, [pc, #644]	; (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d844      	bhi.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8004b6c:	a201      	add	r2, pc, #4	; (adr r2, 8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b72:	bf00      	nop
 8004b74:	08004b89 	.word	0x08004b89
 8004b78:	08004b99 	.word	0x08004b99
 8004b7c:	08004ba9 	.word	0x08004ba9
 8004b80:	08004bf1 	.word	0x08004bf1
 8004b84:	08004bb9 	.word	0x08004bb9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fd03 	bl	8005598 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b96:	e241      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b98:	f107 0318 	add.w	r3, r7, #24
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fa63 	bl	8005068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ba6:	e239      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ba8:	f107 030c 	add.w	r3, r7, #12
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 fba7 	bl	8005300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bb6:	e231      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004bb8:	4b8a      	ldr	r3, [pc, #552]	; (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bc0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d102      	bne.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004bc8:	4b87      	ldr	r3, [pc, #540]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004bca:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004bcc:	e226      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bd4:	d102      	bne.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8004bd6:	4b85      	ldr	r3, [pc, #532]	; (8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bda:	e21f      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004be2:	d102      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8004be4:	4b82      	ldr	r3, [pc, #520]	; (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004be8:	e218      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bee:	e215      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004bf0:	4b80      	ldr	r3, [pc, #512]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bf4:	e212      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bfa:	bf00      	nop
 8004bfc:	e20e      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c04:	d14f      	bne.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8004c06:	4b77      	ldr	r3, [pc, #476]	; (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004c0e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	2b80      	cmp	r3, #128	; 0x80
 8004c14:	d01c      	beq.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8004c16:	2b80      	cmp	r3, #128	; 0x80
 8004c18:	d804      	bhi.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d008      	beq.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8004c1e:	2b40      	cmp	r3, #64	; 0x40
 8004c20:	d00e      	beq.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004c22:	e03c      	b.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8004c24:	2bc0      	cmp	r3, #192	; 0xc0
 8004c26:	d037      	beq.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8004c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c2c:	d018      	beq.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8004c2e:	e036      	b.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fcaf 	bl	8005598 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c3e:	e1ed      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c40:	f107 0318 	add.w	r3, r7, #24
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fa0f 	bl	8005068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c4e:	e1e5      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c50:	f107 030c 	add.w	r3, r7, #12
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fb53 	bl	8005300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c5e:	e1dd      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c60:	4b60      	ldr	r3, [pc, #384]	; (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c68:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d102      	bne.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004c70:	4b5d      	ldr	r3, [pc, #372]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004c74:	e1d2      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c7c:	d102      	bne.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8004c7e:	4b5b      	ldr	r3, [pc, #364]	; (8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004c80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c82:	e1cb      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c8a:	d102      	bne.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8004c8c:	4b58      	ldr	r3, [pc, #352]	; (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c90:	e1c4      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c96:	e1c1      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c98:	4b56      	ldr	r3, [pc, #344]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c9c:	e1be      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ca2:	bf00      	nop
 8004ca4:	e1ba      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cac:	d153      	bne.n	8004d56 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004cae:	4b4d      	ldr	r3, [pc, #308]	; (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004cb6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cbe:	d01f      	beq.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8004cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cc4:	d805      	bhi.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8004cca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cce:	d00f      	beq.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004cd0:	e03d      	b.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8004cd2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004cd6:	d037      	beq.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8004cd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cdc:	d018      	beq.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8004cde:	e036      	b.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fc57 	bl	8005598 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cee:	e195      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cf0:	f107 0318 	add.w	r3, r7, #24
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 f9b7 	bl	8005068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cfe:	e18d      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d00:	f107 030c 	add.w	r3, r7, #12
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fafb 	bl	8005300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d0e:	e185      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d10:	4b34      	ldr	r3, [pc, #208]	; (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d18:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d102      	bne.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004d20:	4b31      	ldr	r3, [pc, #196]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004d22:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004d24:	e17a      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d2c:	d102      	bne.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8004d2e:	4b2f      	ldr	r3, [pc, #188]	; (8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004d30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d32:	e173      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d3a:	d102      	bne.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8004d3c:	4b2c      	ldr	r3, [pc, #176]	; (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d40:	e16c      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d46:	e169      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d48:	4b2a      	ldr	r3, [pc, #168]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d4c:	e166      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d52:	bf00      	nop
 8004d54:	e162      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d5c:	d15d      	bne.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004d5e:	4b21      	ldr	r3, [pc, #132]	; (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d62:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004d66:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d6e:	d01f      	beq.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004d70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d74:	d805      	bhi.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004d7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d7e:	d00f      	beq.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8004d80:	e047      	b.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8004d82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d86:	d041      	beq.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8004d88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d8c:	d018      	beq.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8004d8e:	e040      	b.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fbff 	bl	8005598 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d9e:	e13d      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004da0:	f107 0318 	add.w	r3, r7, #24
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 f95f 	bl	8005068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dae:	e135      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004db0:	f107 030c 	add.w	r3, r7, #12
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 faa3 	bl	8005300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dbe:	e12d      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004dc0:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004dd0:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004dd4:	e122      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ddc:	d10c      	bne.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8004dde:	4b03      	ldr	r3, [pc, #12]	; (8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004de0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004de2:	e11b      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004de4:	58024400 	.word	0x58024400
 8004de8:	03d09000 	.word	0x03d09000
 8004dec:	003d0900 	.word	0x003d0900
 8004df0:	017d7840 	.word	0x017d7840
 8004df4:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dfe:	d102      	bne.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8004e00:	4b89      	ldr	r3, [pc, #548]	; (8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8004e02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e04:	e10a      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e0a:	e107      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e0c:	4b87      	ldr	r3, [pc, #540]	; (800502c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8004e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e10:	e104      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e16:	bf00      	nop
 8004e18:	e100      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e20:	d153      	bne.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004e22:	4b83      	ldr	r3, [pc, #524]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8004e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e26:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004e2a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e32:	d01f      	beq.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e38:	d805      	bhi.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8004e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e42:	d00f      	beq.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8004e44:	e03d      	b.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8004e46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e4a:	d037      	beq.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8004e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e50:	d018      	beq.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004e52:	e036      	b.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 fb9d 	bl	8005598 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e62:	e0db      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e64:	f107 0318 	add.w	r3, r7, #24
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 f8fd 	bl	8005068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e72:	e0d3      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e74:	f107 030c 	add.w	r3, r7, #12
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fa41 	bl	8005300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e82:	e0cb      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004e84:	4b6a      	ldr	r3, [pc, #424]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8004e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e8c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d102      	bne.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004e94:	4b67      	ldr	r3, [pc, #412]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8004e96:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004e98:	e0c0      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ea0:	d102      	bne.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8004ea2:	4b65      	ldr	r3, [pc, #404]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ea6:	e0b9      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eae:	d102      	bne.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8004eb0:	4b5d      	ldr	r3, [pc, #372]	; (8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8004eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eb4:	e0b2      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eba:	e0af      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ebc:	4b5b      	ldr	r3, [pc, #364]	; (800502c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8004ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ec0:	e0ac      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ec6:	bf00      	nop
 8004ec8:	e0a8      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ed0:	d13d      	bne.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004ed2:	4b57      	ldr	r3, [pc, #348]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eda:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee2:	d00c      	beq.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8004ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ee8:	d011      	beq.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d12b      	bne.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004eee:	f107 0318 	add.w	r3, r7, #24
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 f8b8 	bl	8005068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004efc:	e08e      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004efe:	f107 030c 	add.w	r3, r7, #12
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 f9fc 	bl	8005300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f0c:	e086      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f0e:	4b48      	ldr	r3, [pc, #288]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f16:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d102      	bne.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004f1e:	4b45      	ldr	r3, [pc, #276]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8004f20:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004f22:	e07b      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f2a:	d102      	bne.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8004f2c:	4b42      	ldr	r3, [pc, #264]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f30:	e074      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f38:	d102      	bne.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8004f3a:	4b3b      	ldr	r3, [pc, #236]	; (8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8004f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f3e:	e06d      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f44:	e06a      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f4a:	bf00      	nop
 8004f4c:	e066      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f54:	d11f      	bne.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004f56:	4b36      	ldr	r3, [pc, #216]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8004f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f5e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6a:	d008      	beq.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8004f6c:	e00f      	b.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 fb10 	bl	8005598 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f7c:	e04e      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f7e:	f107 0318 	add.w	r3, r7, #24
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 f870 	bl	8005068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f8c:	e046      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f92:	bf00      	nop
 8004f94:	e042      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f9c:	d13c      	bne.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004f9e:	4b24      	ldr	r3, [pc, #144]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004fa6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fae:	d01e      	beq.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8004fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb4:	d805      	bhi.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00d      	beq.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8004fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fbe:	d00e      	beq.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8004fc0:	e026      	b.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8004fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc6:	d01d      	beq.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8004fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fcc:	d01d      	beq.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8004fce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fd2:	d014      	beq.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8004fd4:	e01c      	b.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004fd6:	f000 f831 	bl	800503c <HAL_RCCEx_GetD3PCLK1Freq>
 8004fda:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004fdc:	e01e      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fde:	f107 0318 	add.w	r3, r7, #24
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 f840 	bl	8005068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fec:	e016      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fee:	f107 030c 	add.w	r3, r7, #12
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 f984 	bl	8005300 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ffc:	e00e      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8004ffe:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005000:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005002:	e00b      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8005004:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005006:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005008:	e008      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800500a:	4b07      	ldr	r3, [pc, #28]	; (8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800500c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800500e:	e005      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005014:	bf00      	nop
 8005016:	e001      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8005018:	2300      	movs	r3, #0
 800501a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800501c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800501e:	4618      	mov	r0, r3
 8005020:	3740      	adds	r7, #64	; 0x40
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	017d7840 	.word	0x017d7840
 800502c:	00bb8000 	.word	0x00bb8000
 8005030:	58024400 	.word	0x58024400
 8005034:	03d09000 	.word	0x03d09000
 8005038:	003d0900 	.word	0x003d0900

0800503c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005040:	f7fe fe3a 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8005044:	4601      	mov	r1, r0
 8005046:	4b06      	ldr	r3, [pc, #24]	; (8005060 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	091b      	lsrs	r3, r3, #4
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	4a04      	ldr	r2, [pc, #16]	; (8005064 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005052:	5cd3      	ldrb	r3, [r2, r3]
 8005054:	f003 031f 	and.w	r3, r3, #31
 8005058:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800505c:	4618      	mov	r0, r3
 800505e:	bd80      	pop	{r7, pc}
 8005060:	58024400 	.word	0x58024400
 8005064:	080075f0 	.word	0x080075f0

08005068 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005068:	b480      	push	{r7}
 800506a:	b089      	sub	sp, #36	; 0x24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005070:	4b9d      	ldr	r3, [pc, #628]	; (80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800507a:	4b9b      	ldr	r3, [pc, #620]	; (80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800507c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507e:	0b1b      	lsrs	r3, r3, #12
 8005080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005084:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005086:	4b98      	ldr	r3, [pc, #608]	; (80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508a:	091b      	lsrs	r3, r3, #4
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005092:	4b95      	ldr	r3, [pc, #596]	; (80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005096:	08db      	lsrs	r3, r3, #3
 8005098:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 810a 	beq.w	80052ca <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d05a      	beq.n	8005172 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d302      	bcc.n	80050c6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d078      	beq.n	80051b6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80050c4:	e099      	b.n	80051fa <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050c6:	4b88      	ldr	r3, [pc, #544]	; (80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d02d      	beq.n	800512e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050d2:	4b85      	ldr	r3, [pc, #532]	; (80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	08db      	lsrs	r3, r3, #3
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	4a83      	ldr	r2, [pc, #524]	; (80052ec <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80050de:	fa22 f303 	lsr.w	r3, r2, r3
 80050e2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	ee07 3a90 	vmov	s15, r3
 80050f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050fc:	4b7a      	ldr	r3, [pc, #488]	; (80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005104:	ee07 3a90 	vmov	s15, r3
 8005108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800510c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005110:	eddf 5a77 	vldr	s11, [pc, #476]	; 80052f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005114:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800511c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005128:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800512c:	e087      	b.n	800523e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	ee07 3a90 	vmov	s15, r3
 8005134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005138:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80052f4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800513c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005140:	4b69      	ldr	r3, [pc, #420]	; (80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005148:	ee07 3a90 	vmov	s15, r3
 800514c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005150:	ed97 6a03 	vldr	s12, [r7, #12]
 8005154:	eddf 5a66 	vldr	s11, [pc, #408]	; 80052f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005158:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800515c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005160:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005164:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800516c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005170:	e065      	b.n	800523e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	ee07 3a90 	vmov	s15, r3
 8005178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005184:	4b58      	ldr	r3, [pc, #352]	; (80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518c:	ee07 3a90 	vmov	s15, r3
 8005190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005194:	ed97 6a03 	vldr	s12, [r7, #12]
 8005198:	eddf 5a55 	vldr	s11, [pc, #340]	; 80052f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800519c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051b4:	e043      	b.n	800523e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	ee07 3a90 	vmov	s15, r3
 80051bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80052fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80051c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051c8:	4b47      	ldr	r3, [pc, #284]	; (80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d0:	ee07 3a90 	vmov	s15, r3
 80051d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80051dc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80052f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80051e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051f8:	e021      	b.n	800523e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	ee07 3a90 	vmov	s15, r3
 8005200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005204:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005208:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800520c:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005214:	ee07 3a90 	vmov	s15, r3
 8005218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800521c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005220:	eddf 5a33 	vldr	s11, [pc, #204]	; 80052f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005224:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005228:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800522c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005230:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005238:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800523c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800523e:	4b2a      	ldr	r3, [pc, #168]	; (80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	0a5b      	lsrs	r3, r3, #9
 8005244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005248:	ee07 3a90 	vmov	s15, r3
 800524c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005254:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005258:	edd7 6a07 	vldr	s13, [r7, #28]
 800525c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005264:	ee17 2a90 	vmov	r2, s15
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800526c:	4b1e      	ldr	r3, [pc, #120]	; (80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	0c1b      	lsrs	r3, r3, #16
 8005272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005282:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005286:	edd7 6a07 	vldr	s13, [r7, #28]
 800528a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800528e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005292:	ee17 2a90 	vmov	r2, s15
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800529a:	4b13      	ldr	r3, [pc, #76]	; (80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	0e1b      	lsrs	r3, r3, #24
 80052a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052a4:	ee07 3a90 	vmov	s15, r3
 80052a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80052b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052c0:	ee17 2a90 	vmov	r2, s15
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80052c8:	e008      	b.n	80052dc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	609a      	str	r2, [r3, #8]
}
 80052dc:	bf00      	nop
 80052de:	3724      	adds	r7, #36	; 0x24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	58024400 	.word	0x58024400
 80052ec:	03d09000 	.word	0x03d09000
 80052f0:	46000000 	.word	0x46000000
 80052f4:	4c742400 	.word	0x4c742400
 80052f8:	4a742400 	.word	0x4a742400
 80052fc:	4bbebc20 	.word	0x4bbebc20

08005300 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005300:	b480      	push	{r7}
 8005302:	b089      	sub	sp, #36	; 0x24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005308:	4b9d      	ldr	r3, [pc, #628]	; (8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800530a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530c:	f003 0303 	and.w	r3, r3, #3
 8005310:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005312:	4b9b      	ldr	r3, [pc, #620]	; (8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005316:	0d1b      	lsrs	r3, r3, #20
 8005318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800531c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800531e:	4b98      	ldr	r3, [pc, #608]	; (8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	0a1b      	lsrs	r3, r3, #8
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800532a:	4b95      	ldr	r3, [pc, #596]	; (8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800532c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532e:	08db      	lsrs	r3, r3, #3
 8005330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	fb02 f303 	mul.w	r3, r2, r3
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005342:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 810a 	beq.w	8005562 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d05a      	beq.n	800540a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005354:	2b01      	cmp	r3, #1
 8005356:	d302      	bcc.n	800535e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005358:	2b02      	cmp	r3, #2
 800535a:	d078      	beq.n	800544e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800535c:	e099      	b.n	8005492 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800535e:	4b88      	ldr	r3, [pc, #544]	; (8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b00      	cmp	r3, #0
 8005368:	d02d      	beq.n	80053c6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800536a:	4b85      	ldr	r3, [pc, #532]	; (8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	08db      	lsrs	r3, r3, #3
 8005370:	f003 0303 	and.w	r3, r3, #3
 8005374:	4a83      	ldr	r2, [pc, #524]	; (8005584 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005376:	fa22 f303 	lsr.w	r3, r2, r3
 800537a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	ee07 3a90 	vmov	s15, r3
 800538c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005394:	4b7a      	ldr	r3, [pc, #488]	; (8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539c:	ee07 3a90 	vmov	s15, r3
 80053a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80053a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80053ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053c0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80053c4:	e087      	b.n	80054d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	ee07 3a90 	vmov	s15, r3
 80053cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800558c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80053d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d8:	4b69      	ldr	r3, [pc, #420]	; (8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80053da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e0:	ee07 3a90 	vmov	s15, r3
 80053e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80053f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005404:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005408:	e065      	b.n	80054d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	ee07 3a90 	vmov	s15, r3
 8005410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005414:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800541c:	4b58      	ldr	r3, [pc, #352]	; (8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005424:	ee07 3a90 	vmov	s15, r3
 8005428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800542c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005430:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005434:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005438:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800543c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005448:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800544c:	e043      	b.n	80054d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	ee07 3a90 	vmov	s15, r3
 8005454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005458:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005594 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800545c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005460:	4b47      	ldr	r3, [pc, #284]	; (8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005468:	ee07 3a90 	vmov	s15, r3
 800546c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005470:	ed97 6a03 	vldr	s12, [r7, #12]
 8005474:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005478:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800547c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005480:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005484:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005490:	e021      	b.n	80054d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	ee07 3a90 	vmov	s15, r3
 8005498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80054a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a4:	4b36      	ldr	r3, [pc, #216]	; (8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ac:	ee07 3a90 	vmov	s15, r3
 80054b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80054b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80054bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054d4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80054d6:	4b2a      	ldr	r3, [pc, #168]	; (8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	0a5b      	lsrs	r3, r3, #9
 80054dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054e0:	ee07 3a90 	vmov	s15, r3
 80054e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80054f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054fc:	ee17 2a90 	vmov	r2, s15
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005504:	4b1e      	ldr	r3, [pc, #120]	; (8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	0c1b      	lsrs	r3, r3, #16
 800550a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800550e:	ee07 3a90 	vmov	s15, r3
 8005512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800551a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800551e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800552a:	ee17 2a90 	vmov	r2, s15
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005532:	4b13      	ldr	r3, [pc, #76]	; (8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	0e1b      	lsrs	r3, r3, #24
 8005538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800553c:	ee07 3a90 	vmov	s15, r3
 8005540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005548:	ee37 7a87 	vadd.f32	s14, s15, s14
 800554c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005558:	ee17 2a90 	vmov	r2, s15
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005560:	e008      	b.n	8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	609a      	str	r2, [r3, #8]
}
 8005574:	bf00      	nop
 8005576:	3724      	adds	r7, #36	; 0x24
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	58024400 	.word	0x58024400
 8005584:	03d09000 	.word	0x03d09000
 8005588:	46000000 	.word	0x46000000
 800558c:	4c742400 	.word	0x4c742400
 8005590:	4a742400 	.word	0x4a742400
 8005594:	4bbebc20 	.word	0x4bbebc20

08005598 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005598:	b480      	push	{r7}
 800559a:	b089      	sub	sp, #36	; 0x24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055a0:	4b9d      	ldr	r3, [pc, #628]	; (8005818 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80055aa:	4b9b      	ldr	r3, [pc, #620]	; (8005818 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	091b      	lsrs	r3, r3, #4
 80055b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055b4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80055b6:	4b98      	ldr	r3, [pc, #608]	; (8005818 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80055c0:	4b95      	ldr	r3, [pc, #596]	; (8005818 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80055c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c4:	08db      	lsrs	r3, r3, #3
 80055c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	fb02 f303 	mul.w	r3, r2, r3
 80055d0:	ee07 3a90 	vmov	s15, r3
 80055d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 810a 	beq.w	80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d05a      	beq.n	80056a0 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d302      	bcc.n	80055f4 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d078      	beq.n	80056e4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80055f2:	e099      	b.n	8005728 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055f4:	4b88      	ldr	r3, [pc, #544]	; (8005818 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0320 	and.w	r3, r3, #32
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d02d      	beq.n	800565c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005600:	4b85      	ldr	r3, [pc, #532]	; (8005818 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	08db      	lsrs	r3, r3, #3
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	4a84      	ldr	r2, [pc, #528]	; (800581c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800560c:	fa22 f303 	lsr.w	r3, r2, r3
 8005610:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	ee07 3a90 	vmov	s15, r3
 8005618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	ee07 3a90 	vmov	s15, r3
 8005622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800562a:	4b7b      	ldr	r3, [pc, #492]	; (8005818 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800562c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005632:	ee07 3a90 	vmov	s15, r3
 8005636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563a:	ed97 6a03 	vldr	s12, [r7, #12]
 800563e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800564a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800564e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005656:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800565a:	e087      	b.n	800576c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	ee07 3a90 	vmov	s15, r3
 8005662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005666:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800566a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800566e:	4b6a      	ldr	r3, [pc, #424]	; (8005818 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005682:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800568a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800568e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800569e:	e065      	b.n	800576c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80056ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b2:	4b59      	ldr	r3, [pc, #356]	; (8005818 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ba:	ee07 3a90 	vmov	s15, r3
 80056be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80056c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80056ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056e2:	e043      	b.n	800576c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800582c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f6:	4b48      	ldr	r3, [pc, #288]	; (8005818 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fe:	ee07 3a90 	vmov	s15, r3
 8005702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005706:	ed97 6a03 	vldr	s12, [r7, #12]
 800570a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800570e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800571a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005722:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005726:	e021      	b.n	800576c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005732:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8005736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800573a:	4b37      	ldr	r3, [pc, #220]	; (8005818 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574a:	ed97 6a03 	vldr	s12, [r7, #12]
 800574e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800575a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800575e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005766:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800576a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800576c:	4b2a      	ldr	r3, [pc, #168]	; (8005818 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800576e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005770:	0a5b      	lsrs	r3, r3, #9
 8005772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005782:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005786:	edd7 6a07 	vldr	s13, [r7, #28]
 800578a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800578e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005792:	ee17 2a90 	vmov	r2, s15
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800579a:	4b1f      	ldr	r3, [pc, #124]	; (8005818 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	0c1b      	lsrs	r3, r3, #16
 80057a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057a4:	ee07 3a90 	vmov	s15, r3
 80057a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80057b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057c0:	ee17 2a90 	vmov	r2, s15
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80057c8:	4b13      	ldr	r3, [pc, #76]	; (8005818 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80057ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057cc:	0e1b      	lsrs	r3, r3, #24
 80057ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80057e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057ee:	ee17 2a90 	vmov	r2, s15
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80057f6:	e008      	b.n	800580a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	609a      	str	r2, [r3, #8]
}
 800580a:	bf00      	nop
 800580c:	3724      	adds	r7, #36	; 0x24
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	58024400 	.word	0x58024400
 800581c:	03d09000 	.word	0x03d09000
 8005820:	46000000 	.word	0x46000000
 8005824:	4c742400 	.word	0x4c742400
 8005828:	4a742400 	.word	0x4a742400
 800582c:	4bbebc20 	.word	0x4bbebc20

08005830 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800583e:	4b53      	ldr	r3, [pc, #332]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 8005840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	2b03      	cmp	r3, #3
 8005848:	d101      	bne.n	800584e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e099      	b.n	8005982 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800584e:	4b4f      	ldr	r3, [pc, #316]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a4e      	ldr	r2, [pc, #312]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 8005854:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800585a:	f7fb fcaf 	bl	80011bc <HAL_GetTick>
 800585e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005860:	e008      	b.n	8005874 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005862:	f7fb fcab 	bl	80011bc <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d901      	bls.n	8005874 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e086      	b.n	8005982 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005874:	4b45      	ldr	r3, [pc, #276]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1f0      	bne.n	8005862 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005880:	4b42      	ldr	r3, [pc, #264]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	031b      	lsls	r3, r3, #12
 800588e:	493f      	ldr	r1, [pc, #252]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 8005890:	4313      	orrs	r3, r2
 8005892:	628b      	str	r3, [r1, #40]	; 0x28
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	3b01      	subs	r3, #1
 800589a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	025b      	lsls	r3, r3, #9
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	041b      	lsls	r3, r3, #16
 80058b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	3b01      	subs	r3, #1
 80058be:	061b      	lsls	r3, r3, #24
 80058c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058c4:	4931      	ldr	r1, [pc, #196]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80058ca:	4b30      	ldr	r3, [pc, #192]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 80058cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	492d      	ldr	r1, [pc, #180]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80058dc:	4b2b      	ldr	r3, [pc, #172]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	f023 0220 	bic.w	r2, r3, #32
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	4928      	ldr	r1, [pc, #160]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058ee:	4b27      	ldr	r3, [pc, #156]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 80058f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f2:	4a26      	ldr	r2, [pc, #152]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 80058f4:	f023 0310 	bic.w	r3, r3, #16
 80058f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058fa:	4b24      	ldr	r3, [pc, #144]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 80058fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058fe:	4b24      	ldr	r3, [pc, #144]	; (8005990 <RCCEx_PLL2_Config+0x160>)
 8005900:	4013      	ands	r3, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	69d2      	ldr	r2, [r2, #28]
 8005906:	00d2      	lsls	r2, r2, #3
 8005908:	4920      	ldr	r1, [pc, #128]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 800590a:	4313      	orrs	r3, r2
 800590c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800590e:	4b1f      	ldr	r3, [pc, #124]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 8005910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005912:	4a1e      	ldr	r2, [pc, #120]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 8005914:	f043 0310 	orr.w	r3, r3, #16
 8005918:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d106      	bne.n	800592e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005920:	4b1a      	ldr	r3, [pc, #104]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	4a19      	ldr	r2, [pc, #100]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 8005926:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800592a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800592c:	e00f      	b.n	800594e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d106      	bne.n	8005942 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005934:	4b15      	ldr	r3, [pc, #84]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	4a14      	ldr	r2, [pc, #80]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 800593a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800593e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005940:	e005      	b.n	800594e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005942:	4b12      	ldr	r3, [pc, #72]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 8005944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005946:	4a11      	ldr	r2, [pc, #68]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 8005948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800594c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800594e:	4b0f      	ldr	r3, [pc, #60]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a0e      	ldr	r2, [pc, #56]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 8005954:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800595a:	f7fb fc2f 	bl	80011bc <HAL_GetTick>
 800595e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005960:	e008      	b.n	8005974 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005962:	f7fb fc2b 	bl	80011bc <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d901      	bls.n	8005974 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e006      	b.n	8005982 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005974:	4b05      	ldr	r3, [pc, #20]	; (800598c <RCCEx_PLL2_Config+0x15c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0f0      	beq.n	8005962 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005980:	7bfb      	ldrb	r3, [r7, #15]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	58024400 	.word	0x58024400
 8005990:	ffff0007 	.word	0xffff0007

08005994 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059a2:	4b53      	ldr	r3, [pc, #332]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 80059a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d101      	bne.n	80059b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e099      	b.n	8005ae6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80059b2:	4b4f      	ldr	r3, [pc, #316]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a4e      	ldr	r2, [pc, #312]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 80059b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059be:	f7fb fbfd 	bl	80011bc <HAL_GetTick>
 80059c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059c4:	e008      	b.n	80059d8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80059c6:	f7fb fbf9 	bl	80011bc <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e086      	b.n	8005ae6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059d8:	4b45      	ldr	r3, [pc, #276]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1f0      	bne.n	80059c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80059e4:	4b42      	ldr	r3, [pc, #264]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	051b      	lsls	r3, r3, #20
 80059f2:	493f      	ldr	r1, [pc, #252]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	628b      	str	r3, [r1, #40]	; 0x28
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	025b      	lsls	r3, r3, #9
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	041b      	lsls	r3, r3, #16
 8005a16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	3b01      	subs	r3, #1
 8005a22:	061b      	lsls	r3, r3, #24
 8005a24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a28:	4931      	ldr	r1, [pc, #196]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a2e:	4b30      	ldr	r3, [pc, #192]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	492d      	ldr	r1, [pc, #180]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a40:	4b2b      	ldr	r3, [pc, #172]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	4928      	ldr	r1, [pc, #160]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a52:	4b27      	ldr	r3, [pc, #156]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a56:	4a26      	ldr	r2, [pc, #152]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a5e:	4b24      	ldr	r3, [pc, #144]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a62:	4b24      	ldr	r3, [pc, #144]	; (8005af4 <RCCEx_PLL3_Config+0x160>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	69d2      	ldr	r2, [r2, #28]
 8005a6a:	00d2      	lsls	r2, r2, #3
 8005a6c:	4920      	ldr	r1, [pc, #128]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a72:	4b1f      	ldr	r3, [pc, #124]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a76:	4a1e      	ldr	r2, [pc, #120]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d106      	bne.n	8005a92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a84:	4b1a      	ldr	r3, [pc, #104]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	4a19      	ldr	r2, [pc, #100]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005a8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a90:	e00f      	b.n	8005ab2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d106      	bne.n	8005aa6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a98:	4b15      	ldr	r3, [pc, #84]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	4a14      	ldr	r2, [pc, #80]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005a9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005aa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005aa4:	e005      	b.n	8005ab2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005aa6:	4b12      	ldr	r3, [pc, #72]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	4a11      	ldr	r2, [pc, #68]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005aac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ab0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005ab2:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a0e      	ldr	r2, [pc, #56]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005abc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005abe:	f7fb fb7d 	bl	80011bc <HAL_GetTick>
 8005ac2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ac4:	e008      	b.n	8005ad8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005ac6:	f7fb fb79 	bl	80011bc <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d901      	bls.n	8005ad8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e006      	b.n	8005ae6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ad8:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <RCCEx_PLL3_Config+0x15c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0f0      	beq.n	8005ac6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	58024400 	.word	0x58024400
 8005af4:	ffff0007 	.word	0xffff0007

08005af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e042      	b.n	8005b90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d106      	bne.n	8005b22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7fb f9f3 	bl	8000f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2224      	movs	r2, #36	; 0x24
 8005b26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0201 	bic.w	r2, r2, #1
 8005b38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f8c2 	bl	8005cc4 <UART_SetConfig>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e022      	b.n	8005b90 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fe66 	bl	8006824 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0201 	orr.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 feed 	bl	8006968 <UART_CheckIdleState>
 8005b8e:	4603      	mov	r3, r0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b08a      	sub	sp, #40	; 0x28
 8005b9c:	af02      	add	r7, sp, #8
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	f040 8083 	bne.w	8005cba <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <HAL_UART_Transmit+0x28>
 8005bba:	88fb      	ldrh	r3, [r7, #6]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e07b      	b.n	8005cbc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d101      	bne.n	8005bd2 <HAL_UART_Transmit+0x3a>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e074      	b.n	8005cbc <HAL_UART_Transmit+0x124>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2221      	movs	r2, #33	; 0x21
 8005be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005bea:	f7fb fae7 	bl	80011bc <HAL_GetTick>
 8005bee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	88fa      	ldrh	r2, [r7, #6]
 8005bf4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	88fa      	ldrh	r2, [r7, #6]
 8005bfc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c08:	d108      	bne.n	8005c1c <HAL_UART_Transmit+0x84>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d104      	bne.n	8005c1c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	61bb      	str	r3, [r7, #24]
 8005c1a:	e003      	b.n	8005c24 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c20:	2300      	movs	r3, #0
 8005c22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005c2c:	e02c      	b.n	8005c88 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2200      	movs	r2, #0
 8005c36:	2180      	movs	r1, #128	; 0x80
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 fedd 	bl	80069f8 <UART_WaitOnFlagUntilTimeout>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e039      	b.n	8005cbc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10b      	bne.n	8005c66 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	3302      	adds	r3, #2
 8005c62:	61bb      	str	r3, [r7, #24]
 8005c64:	e007      	b.n	8005c76 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	781a      	ldrb	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	3301      	adds	r3, #1
 8005c74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1cc      	bne.n	8005c2e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2140      	movs	r1, #64	; 0x40
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 feaa 	bl	80069f8 <UART_WaitOnFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e006      	b.n	8005cbc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	e000      	b.n	8005cbc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005cba:	2302      	movs	r3, #2
  }
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3720      	adds	r7, #32
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cc4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005cc8:	b08e      	sub	sp, #56	; 0x38
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	4bc1      	ldr	r3, [pc, #772]	; (8006004 <UART_SetConfig+0x340>)
 8005cfe:	4013      	ands	r3, r2
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6812      	ldr	r2, [r2, #0]
 8005d04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d06:	430b      	orrs	r3, r1
 8005d08:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4ab7      	ldr	r2, [pc, #732]	; (8006008 <UART_SetConfig+0x344>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d004      	beq.n	8005d3a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d36:	4313      	orrs	r3, r2
 8005d38:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	4bb2      	ldr	r3, [pc, #712]	; (800600c <UART_SetConfig+0x348>)
 8005d42:	4013      	ands	r3, r2
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6812      	ldr	r2, [r2, #0]
 8005d48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	f023 010f 	bic.w	r1, r3, #15
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4aa9      	ldr	r2, [pc, #676]	; (8006010 <UART_SetConfig+0x34c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d177      	bne.n	8005e5e <UART_SetConfig+0x19a>
 8005d6e:	4ba9      	ldr	r3, [pc, #676]	; (8006014 <UART_SetConfig+0x350>)
 8005d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d76:	2b28      	cmp	r3, #40	; 0x28
 8005d78:	d86c      	bhi.n	8005e54 <UART_SetConfig+0x190>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <UART_SetConfig+0xbc>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005e25 	.word	0x08005e25
 8005d84:	08005e55 	.word	0x08005e55
 8005d88:	08005e55 	.word	0x08005e55
 8005d8c:	08005e55 	.word	0x08005e55
 8005d90:	08005e55 	.word	0x08005e55
 8005d94:	08005e55 	.word	0x08005e55
 8005d98:	08005e55 	.word	0x08005e55
 8005d9c:	08005e55 	.word	0x08005e55
 8005da0:	08005e2d 	.word	0x08005e2d
 8005da4:	08005e55 	.word	0x08005e55
 8005da8:	08005e55 	.word	0x08005e55
 8005dac:	08005e55 	.word	0x08005e55
 8005db0:	08005e55 	.word	0x08005e55
 8005db4:	08005e55 	.word	0x08005e55
 8005db8:	08005e55 	.word	0x08005e55
 8005dbc:	08005e55 	.word	0x08005e55
 8005dc0:	08005e35 	.word	0x08005e35
 8005dc4:	08005e55 	.word	0x08005e55
 8005dc8:	08005e55 	.word	0x08005e55
 8005dcc:	08005e55 	.word	0x08005e55
 8005dd0:	08005e55 	.word	0x08005e55
 8005dd4:	08005e55 	.word	0x08005e55
 8005dd8:	08005e55 	.word	0x08005e55
 8005ddc:	08005e55 	.word	0x08005e55
 8005de0:	08005e3d 	.word	0x08005e3d
 8005de4:	08005e55 	.word	0x08005e55
 8005de8:	08005e55 	.word	0x08005e55
 8005dec:	08005e55 	.word	0x08005e55
 8005df0:	08005e55 	.word	0x08005e55
 8005df4:	08005e55 	.word	0x08005e55
 8005df8:	08005e55 	.word	0x08005e55
 8005dfc:	08005e55 	.word	0x08005e55
 8005e00:	08005e45 	.word	0x08005e45
 8005e04:	08005e55 	.word	0x08005e55
 8005e08:	08005e55 	.word	0x08005e55
 8005e0c:	08005e55 	.word	0x08005e55
 8005e10:	08005e55 	.word	0x08005e55
 8005e14:	08005e55 	.word	0x08005e55
 8005e18:	08005e55 	.word	0x08005e55
 8005e1c:	08005e55 	.word	0x08005e55
 8005e20:	08005e4d 	.word	0x08005e4d
 8005e24:	2301      	movs	r3, #1
 8005e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2a:	e233      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005e2c:	2304      	movs	r3, #4
 8005e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e32:	e22f      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005e34:	2308      	movs	r3, #8
 8005e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3a:	e22b      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005e3c:	2310      	movs	r3, #16
 8005e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e42:	e227      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005e44:	2320      	movs	r3, #32
 8005e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e4a:	e223      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005e4c:	2340      	movs	r3, #64	; 0x40
 8005e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e52:	e21f      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005e54:	2380      	movs	r3, #128	; 0x80
 8005e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e5a:	bf00      	nop
 8005e5c:	e21a      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a6d      	ldr	r2, [pc, #436]	; (8006018 <UART_SetConfig+0x354>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d132      	bne.n	8005ece <UART_SetConfig+0x20a>
 8005e68:	4b6a      	ldr	r3, [pc, #424]	; (8006014 <UART_SetConfig+0x350>)
 8005e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6c:	f003 0307 	and.w	r3, r3, #7
 8005e70:	2b05      	cmp	r3, #5
 8005e72:	d827      	bhi.n	8005ec4 <UART_SetConfig+0x200>
 8005e74:	a201      	add	r2, pc, #4	; (adr r2, 8005e7c <UART_SetConfig+0x1b8>)
 8005e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7a:	bf00      	nop
 8005e7c:	08005e95 	.word	0x08005e95
 8005e80:	08005e9d 	.word	0x08005e9d
 8005e84:	08005ea5 	.word	0x08005ea5
 8005e88:	08005ead 	.word	0x08005ead
 8005e8c:	08005eb5 	.word	0x08005eb5
 8005e90:	08005ebd 	.word	0x08005ebd
 8005e94:	2300      	movs	r3, #0
 8005e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9a:	e1fb      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005e9c:	2304      	movs	r3, #4
 8005e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea2:	e1f7      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005ea4:	2308      	movs	r3, #8
 8005ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eaa:	e1f3      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005eac:	2310      	movs	r3, #16
 8005eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eb2:	e1ef      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005eb4:	2320      	movs	r3, #32
 8005eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eba:	e1eb      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005ebc:	2340      	movs	r3, #64	; 0x40
 8005ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ec2:	e1e7      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005ec4:	2380      	movs	r3, #128	; 0x80
 8005ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eca:	bf00      	nop
 8005ecc:	e1e2      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a52      	ldr	r2, [pc, #328]	; (800601c <UART_SetConfig+0x358>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d132      	bne.n	8005f3e <UART_SetConfig+0x27a>
 8005ed8:	4b4e      	ldr	r3, [pc, #312]	; (8006014 <UART_SetConfig+0x350>)
 8005eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	2b05      	cmp	r3, #5
 8005ee2:	d827      	bhi.n	8005f34 <UART_SetConfig+0x270>
 8005ee4:	a201      	add	r2, pc, #4	; (adr r2, 8005eec <UART_SetConfig+0x228>)
 8005ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eea:	bf00      	nop
 8005eec:	08005f05 	.word	0x08005f05
 8005ef0:	08005f0d 	.word	0x08005f0d
 8005ef4:	08005f15 	.word	0x08005f15
 8005ef8:	08005f1d 	.word	0x08005f1d
 8005efc:	08005f25 	.word	0x08005f25
 8005f00:	08005f2d 	.word	0x08005f2d
 8005f04:	2300      	movs	r3, #0
 8005f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f0a:	e1c3      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f12:	e1bf      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005f14:	2308      	movs	r3, #8
 8005f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f1a:	e1bb      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005f1c:	2310      	movs	r3, #16
 8005f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f22:	e1b7      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005f24:	2320      	movs	r3, #32
 8005f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f2a:	e1b3      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005f2c:	2340      	movs	r3, #64	; 0x40
 8005f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f32:	e1af      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005f34:	2380      	movs	r3, #128	; 0x80
 8005f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f3a:	bf00      	nop
 8005f3c:	e1aa      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a37      	ldr	r2, [pc, #220]	; (8006020 <UART_SetConfig+0x35c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d132      	bne.n	8005fae <UART_SetConfig+0x2ea>
 8005f48:	4b32      	ldr	r3, [pc, #200]	; (8006014 <UART_SetConfig+0x350>)
 8005f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	2b05      	cmp	r3, #5
 8005f52:	d827      	bhi.n	8005fa4 <UART_SetConfig+0x2e0>
 8005f54:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <UART_SetConfig+0x298>)
 8005f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5a:	bf00      	nop
 8005f5c:	08005f75 	.word	0x08005f75
 8005f60:	08005f7d 	.word	0x08005f7d
 8005f64:	08005f85 	.word	0x08005f85
 8005f68:	08005f8d 	.word	0x08005f8d
 8005f6c:	08005f95 	.word	0x08005f95
 8005f70:	08005f9d 	.word	0x08005f9d
 8005f74:	2300      	movs	r3, #0
 8005f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f7a:	e18b      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005f7c:	2304      	movs	r3, #4
 8005f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f82:	e187      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005f84:	2308      	movs	r3, #8
 8005f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f8a:	e183      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005f8c:	2310      	movs	r3, #16
 8005f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f92:	e17f      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005f94:	2320      	movs	r3, #32
 8005f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f9a:	e17b      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005f9c:	2340      	movs	r3, #64	; 0x40
 8005f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fa2:	e177      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005fa4:	2380      	movs	r3, #128	; 0x80
 8005fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005faa:	bf00      	nop
 8005fac:	e172      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a1c      	ldr	r2, [pc, #112]	; (8006024 <UART_SetConfig+0x360>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d144      	bne.n	8006042 <UART_SetConfig+0x37e>
 8005fb8:	4b16      	ldr	r3, [pc, #88]	; (8006014 <UART_SetConfig+0x350>)
 8005fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	2b05      	cmp	r3, #5
 8005fc2:	d839      	bhi.n	8006038 <UART_SetConfig+0x374>
 8005fc4:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <UART_SetConfig+0x308>)
 8005fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fca:	bf00      	nop
 8005fcc:	08005fe5 	.word	0x08005fe5
 8005fd0:	08005fed 	.word	0x08005fed
 8005fd4:	08005ff5 	.word	0x08005ff5
 8005fd8:	08005ffd 	.word	0x08005ffd
 8005fdc:	08006029 	.word	0x08006029
 8005fe0:	08006031 	.word	0x08006031
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fea:	e153      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005fec:	2304      	movs	r3, #4
 8005fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ff2:	e14f      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005ff4:	2308      	movs	r3, #8
 8005ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ffa:	e14b      	b.n	8006294 <UART_SetConfig+0x5d0>
 8005ffc:	2310      	movs	r3, #16
 8005ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006002:	e147      	b.n	8006294 <UART_SetConfig+0x5d0>
 8006004:	cfff69f3 	.word	0xcfff69f3
 8006008:	58000c00 	.word	0x58000c00
 800600c:	11fff4ff 	.word	0x11fff4ff
 8006010:	40011000 	.word	0x40011000
 8006014:	58024400 	.word	0x58024400
 8006018:	40004400 	.word	0x40004400
 800601c:	40004800 	.word	0x40004800
 8006020:	40004c00 	.word	0x40004c00
 8006024:	40005000 	.word	0x40005000
 8006028:	2320      	movs	r3, #32
 800602a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800602e:	e131      	b.n	8006294 <UART_SetConfig+0x5d0>
 8006030:	2340      	movs	r3, #64	; 0x40
 8006032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006036:	e12d      	b.n	8006294 <UART_SetConfig+0x5d0>
 8006038:	2380      	movs	r3, #128	; 0x80
 800603a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800603e:	bf00      	nop
 8006040:	e128      	b.n	8006294 <UART_SetConfig+0x5d0>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4ab6      	ldr	r2, [pc, #728]	; (8006320 <UART_SetConfig+0x65c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d178      	bne.n	800613e <UART_SetConfig+0x47a>
 800604c:	4bb5      	ldr	r3, [pc, #724]	; (8006324 <UART_SetConfig+0x660>)
 800604e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006050:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006054:	2b28      	cmp	r3, #40	; 0x28
 8006056:	d86d      	bhi.n	8006134 <UART_SetConfig+0x470>
 8006058:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <UART_SetConfig+0x39c>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	08006105 	.word	0x08006105
 8006064:	08006135 	.word	0x08006135
 8006068:	08006135 	.word	0x08006135
 800606c:	08006135 	.word	0x08006135
 8006070:	08006135 	.word	0x08006135
 8006074:	08006135 	.word	0x08006135
 8006078:	08006135 	.word	0x08006135
 800607c:	08006135 	.word	0x08006135
 8006080:	0800610d 	.word	0x0800610d
 8006084:	08006135 	.word	0x08006135
 8006088:	08006135 	.word	0x08006135
 800608c:	08006135 	.word	0x08006135
 8006090:	08006135 	.word	0x08006135
 8006094:	08006135 	.word	0x08006135
 8006098:	08006135 	.word	0x08006135
 800609c:	08006135 	.word	0x08006135
 80060a0:	08006115 	.word	0x08006115
 80060a4:	08006135 	.word	0x08006135
 80060a8:	08006135 	.word	0x08006135
 80060ac:	08006135 	.word	0x08006135
 80060b0:	08006135 	.word	0x08006135
 80060b4:	08006135 	.word	0x08006135
 80060b8:	08006135 	.word	0x08006135
 80060bc:	08006135 	.word	0x08006135
 80060c0:	0800611d 	.word	0x0800611d
 80060c4:	08006135 	.word	0x08006135
 80060c8:	08006135 	.word	0x08006135
 80060cc:	08006135 	.word	0x08006135
 80060d0:	08006135 	.word	0x08006135
 80060d4:	08006135 	.word	0x08006135
 80060d8:	08006135 	.word	0x08006135
 80060dc:	08006135 	.word	0x08006135
 80060e0:	08006125 	.word	0x08006125
 80060e4:	08006135 	.word	0x08006135
 80060e8:	08006135 	.word	0x08006135
 80060ec:	08006135 	.word	0x08006135
 80060f0:	08006135 	.word	0x08006135
 80060f4:	08006135 	.word	0x08006135
 80060f8:	08006135 	.word	0x08006135
 80060fc:	08006135 	.word	0x08006135
 8006100:	0800612d 	.word	0x0800612d
 8006104:	2301      	movs	r3, #1
 8006106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800610a:	e0c3      	b.n	8006294 <UART_SetConfig+0x5d0>
 800610c:	2304      	movs	r3, #4
 800610e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006112:	e0bf      	b.n	8006294 <UART_SetConfig+0x5d0>
 8006114:	2308      	movs	r3, #8
 8006116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800611a:	e0bb      	b.n	8006294 <UART_SetConfig+0x5d0>
 800611c:	2310      	movs	r3, #16
 800611e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006122:	e0b7      	b.n	8006294 <UART_SetConfig+0x5d0>
 8006124:	2320      	movs	r3, #32
 8006126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800612a:	e0b3      	b.n	8006294 <UART_SetConfig+0x5d0>
 800612c:	2340      	movs	r3, #64	; 0x40
 800612e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006132:	e0af      	b.n	8006294 <UART_SetConfig+0x5d0>
 8006134:	2380      	movs	r3, #128	; 0x80
 8006136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800613a:	bf00      	nop
 800613c:	e0aa      	b.n	8006294 <UART_SetConfig+0x5d0>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a79      	ldr	r2, [pc, #484]	; (8006328 <UART_SetConfig+0x664>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d132      	bne.n	80061ae <UART_SetConfig+0x4ea>
 8006148:	4b76      	ldr	r3, [pc, #472]	; (8006324 <UART_SetConfig+0x660>)
 800614a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	2b05      	cmp	r3, #5
 8006152:	d827      	bhi.n	80061a4 <UART_SetConfig+0x4e0>
 8006154:	a201      	add	r2, pc, #4	; (adr r2, 800615c <UART_SetConfig+0x498>)
 8006156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615a:	bf00      	nop
 800615c:	08006175 	.word	0x08006175
 8006160:	0800617d 	.word	0x0800617d
 8006164:	08006185 	.word	0x08006185
 8006168:	0800618d 	.word	0x0800618d
 800616c:	08006195 	.word	0x08006195
 8006170:	0800619d 	.word	0x0800619d
 8006174:	2300      	movs	r3, #0
 8006176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800617a:	e08b      	b.n	8006294 <UART_SetConfig+0x5d0>
 800617c:	2304      	movs	r3, #4
 800617e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006182:	e087      	b.n	8006294 <UART_SetConfig+0x5d0>
 8006184:	2308      	movs	r3, #8
 8006186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800618a:	e083      	b.n	8006294 <UART_SetConfig+0x5d0>
 800618c:	2310      	movs	r3, #16
 800618e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006192:	e07f      	b.n	8006294 <UART_SetConfig+0x5d0>
 8006194:	2320      	movs	r3, #32
 8006196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800619a:	e07b      	b.n	8006294 <UART_SetConfig+0x5d0>
 800619c:	2340      	movs	r3, #64	; 0x40
 800619e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061a2:	e077      	b.n	8006294 <UART_SetConfig+0x5d0>
 80061a4:	2380      	movs	r3, #128	; 0x80
 80061a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061aa:	bf00      	nop
 80061ac:	e072      	b.n	8006294 <UART_SetConfig+0x5d0>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a5e      	ldr	r2, [pc, #376]	; (800632c <UART_SetConfig+0x668>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d132      	bne.n	800621e <UART_SetConfig+0x55a>
 80061b8:	4b5a      	ldr	r3, [pc, #360]	; (8006324 <UART_SetConfig+0x660>)
 80061ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	2b05      	cmp	r3, #5
 80061c2:	d827      	bhi.n	8006214 <UART_SetConfig+0x550>
 80061c4:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <UART_SetConfig+0x508>)
 80061c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ca:	bf00      	nop
 80061cc:	080061e5 	.word	0x080061e5
 80061d0:	080061ed 	.word	0x080061ed
 80061d4:	080061f5 	.word	0x080061f5
 80061d8:	080061fd 	.word	0x080061fd
 80061dc:	08006205 	.word	0x08006205
 80061e0:	0800620d 	.word	0x0800620d
 80061e4:	2300      	movs	r3, #0
 80061e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ea:	e053      	b.n	8006294 <UART_SetConfig+0x5d0>
 80061ec:	2304      	movs	r3, #4
 80061ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061f2:	e04f      	b.n	8006294 <UART_SetConfig+0x5d0>
 80061f4:	2308      	movs	r3, #8
 80061f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061fa:	e04b      	b.n	8006294 <UART_SetConfig+0x5d0>
 80061fc:	2310      	movs	r3, #16
 80061fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006202:	e047      	b.n	8006294 <UART_SetConfig+0x5d0>
 8006204:	2320      	movs	r3, #32
 8006206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800620a:	e043      	b.n	8006294 <UART_SetConfig+0x5d0>
 800620c:	2340      	movs	r3, #64	; 0x40
 800620e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006212:	e03f      	b.n	8006294 <UART_SetConfig+0x5d0>
 8006214:	2380      	movs	r3, #128	; 0x80
 8006216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800621a:	bf00      	nop
 800621c:	e03a      	b.n	8006294 <UART_SetConfig+0x5d0>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a43      	ldr	r2, [pc, #268]	; (8006330 <UART_SetConfig+0x66c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d132      	bne.n	800628e <UART_SetConfig+0x5ca>
 8006228:	4b3e      	ldr	r3, [pc, #248]	; (8006324 <UART_SetConfig+0x660>)
 800622a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622c:	f003 0307 	and.w	r3, r3, #7
 8006230:	2b05      	cmp	r3, #5
 8006232:	d827      	bhi.n	8006284 <UART_SetConfig+0x5c0>
 8006234:	a201      	add	r2, pc, #4	; (adr r2, 800623c <UART_SetConfig+0x578>)
 8006236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623a:	bf00      	nop
 800623c:	08006255 	.word	0x08006255
 8006240:	0800625d 	.word	0x0800625d
 8006244:	08006265 	.word	0x08006265
 8006248:	0800626d 	.word	0x0800626d
 800624c:	08006275 	.word	0x08006275
 8006250:	0800627d 	.word	0x0800627d
 8006254:	2302      	movs	r3, #2
 8006256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800625a:	e01b      	b.n	8006294 <UART_SetConfig+0x5d0>
 800625c:	2304      	movs	r3, #4
 800625e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006262:	e017      	b.n	8006294 <UART_SetConfig+0x5d0>
 8006264:	2308      	movs	r3, #8
 8006266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800626a:	e013      	b.n	8006294 <UART_SetConfig+0x5d0>
 800626c:	2310      	movs	r3, #16
 800626e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006272:	e00f      	b.n	8006294 <UART_SetConfig+0x5d0>
 8006274:	2320      	movs	r3, #32
 8006276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800627a:	e00b      	b.n	8006294 <UART_SetConfig+0x5d0>
 800627c:	2340      	movs	r3, #64	; 0x40
 800627e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006282:	e007      	b.n	8006294 <UART_SetConfig+0x5d0>
 8006284:	2380      	movs	r3, #128	; 0x80
 8006286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800628a:	bf00      	nop
 800628c:	e002      	b.n	8006294 <UART_SetConfig+0x5d0>
 800628e:	2380      	movs	r3, #128	; 0x80
 8006290:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a25      	ldr	r2, [pc, #148]	; (8006330 <UART_SetConfig+0x66c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	f040 80b8 	bne.w	8006410 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d019      	beq.n	80062dc <UART_SetConfig+0x618>
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	dc04      	bgt.n	80062b6 <UART_SetConfig+0x5f2>
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d009      	beq.n	80062c4 <UART_SetConfig+0x600>
 80062b0:	2b04      	cmp	r3, #4
 80062b2:	d00b      	beq.n	80062cc <UART_SetConfig+0x608>
 80062b4:	e042      	b.n	800633c <UART_SetConfig+0x678>
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	d02b      	beq.n	8006312 <UART_SetConfig+0x64e>
 80062ba:	2b40      	cmp	r3, #64	; 0x40
 80062bc:	d02c      	beq.n	8006318 <UART_SetConfig+0x654>
 80062be:	2b10      	cmp	r3, #16
 80062c0:	d014      	beq.n	80062ec <UART_SetConfig+0x628>
 80062c2:	e03b      	b.n	800633c <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80062c4:	f7fe feba 	bl	800503c <HAL_RCCEx_GetD3PCLK1Freq>
 80062c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062ca:	e03d      	b.n	8006348 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062cc:	f107 0314 	add.w	r3, r7, #20
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fe fec9 	bl	8005068 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062da:	e035      	b.n	8006348 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062dc:	f107 0308 	add.w	r3, r7, #8
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7ff f80d 	bl	8005300 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062ea:	e02d      	b.n	8006348 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062ec:	4b0d      	ldr	r3, [pc, #52]	; (8006324 <UART_SetConfig+0x660>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d009      	beq.n	800630c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062f8:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <UART_SetConfig+0x660>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	08db      	lsrs	r3, r3, #3
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	4a0c      	ldr	r2, [pc, #48]	; (8006334 <UART_SetConfig+0x670>)
 8006304:	fa22 f303 	lsr.w	r3, r2, r3
 8006308:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800630a:	e01d      	b.n	8006348 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800630c:	4b09      	ldr	r3, [pc, #36]	; (8006334 <UART_SetConfig+0x670>)
 800630e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006310:	e01a      	b.n	8006348 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006312:	4b09      	ldr	r3, [pc, #36]	; (8006338 <UART_SetConfig+0x674>)
 8006314:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006316:	e017      	b.n	8006348 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800631c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800631e:	e013      	b.n	8006348 <UART_SetConfig+0x684>
 8006320:	40011400 	.word	0x40011400
 8006324:	58024400 	.word	0x58024400
 8006328:	40007800 	.word	0x40007800
 800632c:	40007c00 	.word	0x40007c00
 8006330:	58000c00 	.word	0x58000c00
 8006334:	03d09000 	.word	0x03d09000
 8006338:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006346:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 824d 	beq.w	80067ea <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	4aad      	ldr	r2, [pc, #692]	; (800660c <UART_SetConfig+0x948>)
 8006356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800635a:	461a      	mov	r2, r3
 800635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006362:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	4613      	mov	r3, r2
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	4413      	add	r3, r2
 800636e:	6a3a      	ldr	r2, [r7, #32]
 8006370:	429a      	cmp	r2, r3
 8006372:	d305      	bcc.n	8006380 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800637a:	6a3a      	ldr	r2, [r7, #32]
 800637c:	429a      	cmp	r2, r3
 800637e:	d903      	bls.n	8006388 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006386:	e230      	b.n	80067ea <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638a:	4618      	mov	r0, r3
 800638c:	f04f 0100 	mov.w	r1, #0
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	4a9d      	ldr	r2, [pc, #628]	; (800660c <UART_SetConfig+0x948>)
 8006396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f04f 0400 	mov.w	r4, #0
 80063a0:	461a      	mov	r2, r3
 80063a2:	4623      	mov	r3, r4
 80063a4:	f7f9 ffec 	bl	8000380 <__aeabi_uldivmod>
 80063a8:	4603      	mov	r3, r0
 80063aa:	460c      	mov	r4, r1
 80063ac:	4619      	mov	r1, r3
 80063ae:	4622      	mov	r2, r4
 80063b0:	f04f 0300 	mov.w	r3, #0
 80063b4:	f04f 0400 	mov.w	r4, #0
 80063b8:	0214      	lsls	r4, r2, #8
 80063ba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80063be:	020b      	lsls	r3, r1, #8
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6852      	ldr	r2, [r2, #4]
 80063c4:	0852      	lsrs	r2, r2, #1
 80063c6:	4611      	mov	r1, r2
 80063c8:	f04f 0200 	mov.w	r2, #0
 80063cc:	eb13 0b01 	adds.w	fp, r3, r1
 80063d0:	eb44 0c02 	adc.w	ip, r4, r2
 80063d4:	4658      	mov	r0, fp
 80063d6:	4661      	mov	r1, ip
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f04f 0400 	mov.w	r4, #0
 80063e0:	461a      	mov	r2, r3
 80063e2:	4623      	mov	r3, r4
 80063e4:	f7f9 ffcc 	bl	8000380 <__aeabi_uldivmod>
 80063e8:	4603      	mov	r3, r0
 80063ea:	460c      	mov	r4, r1
 80063ec:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063f4:	d308      	bcc.n	8006408 <UART_SetConfig+0x744>
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063fc:	d204      	bcs.n	8006408 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006404:	60da      	str	r2, [r3, #12]
 8006406:	e1f0      	b.n	80067ea <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800640e:	e1ec      	b.n	80067ea <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006418:	f040 8100 	bne.w	800661c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800641c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	f200 80b7 	bhi.w	8006594 <UART_SetConfig+0x8d0>
 8006426:	a201      	add	r2, pc, #4	; (adr r2, 800642c <UART_SetConfig+0x768>)
 8006428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642c:	08006531 	.word	0x08006531
 8006430:	08006539 	.word	0x08006539
 8006434:	08006595 	.word	0x08006595
 8006438:	08006595 	.word	0x08006595
 800643c:	08006541 	.word	0x08006541
 8006440:	08006595 	.word	0x08006595
 8006444:	08006595 	.word	0x08006595
 8006448:	08006595 	.word	0x08006595
 800644c:	08006551 	.word	0x08006551
 8006450:	08006595 	.word	0x08006595
 8006454:	08006595 	.word	0x08006595
 8006458:	08006595 	.word	0x08006595
 800645c:	08006595 	.word	0x08006595
 8006460:	08006595 	.word	0x08006595
 8006464:	08006595 	.word	0x08006595
 8006468:	08006595 	.word	0x08006595
 800646c:	08006561 	.word	0x08006561
 8006470:	08006595 	.word	0x08006595
 8006474:	08006595 	.word	0x08006595
 8006478:	08006595 	.word	0x08006595
 800647c:	08006595 	.word	0x08006595
 8006480:	08006595 	.word	0x08006595
 8006484:	08006595 	.word	0x08006595
 8006488:	08006595 	.word	0x08006595
 800648c:	08006595 	.word	0x08006595
 8006490:	08006595 	.word	0x08006595
 8006494:	08006595 	.word	0x08006595
 8006498:	08006595 	.word	0x08006595
 800649c:	08006595 	.word	0x08006595
 80064a0:	08006595 	.word	0x08006595
 80064a4:	08006595 	.word	0x08006595
 80064a8:	08006595 	.word	0x08006595
 80064ac:	08006587 	.word	0x08006587
 80064b0:	08006595 	.word	0x08006595
 80064b4:	08006595 	.word	0x08006595
 80064b8:	08006595 	.word	0x08006595
 80064bc:	08006595 	.word	0x08006595
 80064c0:	08006595 	.word	0x08006595
 80064c4:	08006595 	.word	0x08006595
 80064c8:	08006595 	.word	0x08006595
 80064cc:	08006595 	.word	0x08006595
 80064d0:	08006595 	.word	0x08006595
 80064d4:	08006595 	.word	0x08006595
 80064d8:	08006595 	.word	0x08006595
 80064dc:	08006595 	.word	0x08006595
 80064e0:	08006595 	.word	0x08006595
 80064e4:	08006595 	.word	0x08006595
 80064e8:	08006595 	.word	0x08006595
 80064ec:	08006595 	.word	0x08006595
 80064f0:	08006595 	.word	0x08006595
 80064f4:	08006595 	.word	0x08006595
 80064f8:	08006595 	.word	0x08006595
 80064fc:	08006595 	.word	0x08006595
 8006500:	08006595 	.word	0x08006595
 8006504:	08006595 	.word	0x08006595
 8006508:	08006595 	.word	0x08006595
 800650c:	08006595 	.word	0x08006595
 8006510:	08006595 	.word	0x08006595
 8006514:	08006595 	.word	0x08006595
 8006518:	08006595 	.word	0x08006595
 800651c:	08006595 	.word	0x08006595
 8006520:	08006595 	.word	0x08006595
 8006524:	08006595 	.word	0x08006595
 8006528:	08006595 	.word	0x08006595
 800652c:	0800658d 	.word	0x0800658d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006530:	f7fd fbf2 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 8006534:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006536:	e033      	b.n	80065a0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006538:	f7fd fc04 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 800653c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800653e:	e02f      	b.n	80065a0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006540:	f107 0314 	add.w	r3, r7, #20
 8006544:	4618      	mov	r0, r3
 8006546:	f7fe fd8f 	bl	8005068 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800654e:	e027      	b.n	80065a0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006550:	f107 0308 	add.w	r3, r7, #8
 8006554:	4618      	mov	r0, r3
 8006556:	f7fe fed3 	bl	8005300 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800655e:	e01f      	b.n	80065a0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006560:	4b2b      	ldr	r3, [pc, #172]	; (8006610 <UART_SetConfig+0x94c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0320 	and.w	r3, r3, #32
 8006568:	2b00      	cmp	r3, #0
 800656a:	d009      	beq.n	8006580 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800656c:	4b28      	ldr	r3, [pc, #160]	; (8006610 <UART_SetConfig+0x94c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	08db      	lsrs	r3, r3, #3
 8006572:	f003 0303 	and.w	r3, r3, #3
 8006576:	4a27      	ldr	r2, [pc, #156]	; (8006614 <UART_SetConfig+0x950>)
 8006578:	fa22 f303 	lsr.w	r3, r2, r3
 800657c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800657e:	e00f      	b.n	80065a0 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8006580:	4b24      	ldr	r3, [pc, #144]	; (8006614 <UART_SetConfig+0x950>)
 8006582:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006584:	e00c      	b.n	80065a0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006586:	4b24      	ldr	r3, [pc, #144]	; (8006618 <UART_SetConfig+0x954>)
 8006588:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800658a:	e009      	b.n	80065a0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800658c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006590:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006592:	e005      	b.n	80065a0 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8006594:	2300      	movs	r3, #0
 8006596:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800659e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 8121 	beq.w	80067ea <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	4a17      	ldr	r2, [pc, #92]	; (800660c <UART_SetConfig+0x948>)
 80065ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065b2:	461a      	mov	r2, r3
 80065b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80065ba:	005a      	lsls	r2, r3, #1
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	085b      	lsrs	r3, r3, #1
 80065c2:	441a      	add	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	2b0f      	cmp	r3, #15
 80065d4:	d916      	bls.n	8006604 <UART_SetConfig+0x940>
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065dc:	d212      	bcs.n	8006604 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f023 030f 	bic.w	r3, r3, #15
 80065e6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	f003 0307 	and.w	r3, r3, #7
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065f6:	4313      	orrs	r3, r2
 80065f8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006600:	60da      	str	r2, [r3, #12]
 8006602:	e0f2      	b.n	80067ea <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800660a:	e0ee      	b.n	80067ea <UART_SetConfig+0xb26>
 800660c:	08007600 	.word	0x08007600
 8006610:	58024400 	.word	0x58024400
 8006614:	03d09000 	.word	0x03d09000
 8006618:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800661c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006620:	2b40      	cmp	r3, #64	; 0x40
 8006622:	f200 80b7 	bhi.w	8006794 <UART_SetConfig+0xad0>
 8006626:	a201      	add	r2, pc, #4	; (adr r2, 800662c <UART_SetConfig+0x968>)
 8006628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662c:	08006731 	.word	0x08006731
 8006630:	08006739 	.word	0x08006739
 8006634:	08006795 	.word	0x08006795
 8006638:	08006795 	.word	0x08006795
 800663c:	08006741 	.word	0x08006741
 8006640:	08006795 	.word	0x08006795
 8006644:	08006795 	.word	0x08006795
 8006648:	08006795 	.word	0x08006795
 800664c:	08006751 	.word	0x08006751
 8006650:	08006795 	.word	0x08006795
 8006654:	08006795 	.word	0x08006795
 8006658:	08006795 	.word	0x08006795
 800665c:	08006795 	.word	0x08006795
 8006660:	08006795 	.word	0x08006795
 8006664:	08006795 	.word	0x08006795
 8006668:	08006795 	.word	0x08006795
 800666c:	08006761 	.word	0x08006761
 8006670:	08006795 	.word	0x08006795
 8006674:	08006795 	.word	0x08006795
 8006678:	08006795 	.word	0x08006795
 800667c:	08006795 	.word	0x08006795
 8006680:	08006795 	.word	0x08006795
 8006684:	08006795 	.word	0x08006795
 8006688:	08006795 	.word	0x08006795
 800668c:	08006795 	.word	0x08006795
 8006690:	08006795 	.word	0x08006795
 8006694:	08006795 	.word	0x08006795
 8006698:	08006795 	.word	0x08006795
 800669c:	08006795 	.word	0x08006795
 80066a0:	08006795 	.word	0x08006795
 80066a4:	08006795 	.word	0x08006795
 80066a8:	08006795 	.word	0x08006795
 80066ac:	08006787 	.word	0x08006787
 80066b0:	08006795 	.word	0x08006795
 80066b4:	08006795 	.word	0x08006795
 80066b8:	08006795 	.word	0x08006795
 80066bc:	08006795 	.word	0x08006795
 80066c0:	08006795 	.word	0x08006795
 80066c4:	08006795 	.word	0x08006795
 80066c8:	08006795 	.word	0x08006795
 80066cc:	08006795 	.word	0x08006795
 80066d0:	08006795 	.word	0x08006795
 80066d4:	08006795 	.word	0x08006795
 80066d8:	08006795 	.word	0x08006795
 80066dc:	08006795 	.word	0x08006795
 80066e0:	08006795 	.word	0x08006795
 80066e4:	08006795 	.word	0x08006795
 80066e8:	08006795 	.word	0x08006795
 80066ec:	08006795 	.word	0x08006795
 80066f0:	08006795 	.word	0x08006795
 80066f4:	08006795 	.word	0x08006795
 80066f8:	08006795 	.word	0x08006795
 80066fc:	08006795 	.word	0x08006795
 8006700:	08006795 	.word	0x08006795
 8006704:	08006795 	.word	0x08006795
 8006708:	08006795 	.word	0x08006795
 800670c:	08006795 	.word	0x08006795
 8006710:	08006795 	.word	0x08006795
 8006714:	08006795 	.word	0x08006795
 8006718:	08006795 	.word	0x08006795
 800671c:	08006795 	.word	0x08006795
 8006720:	08006795 	.word	0x08006795
 8006724:	08006795 	.word	0x08006795
 8006728:	08006795 	.word	0x08006795
 800672c:	0800678d 	.word	0x0800678d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006730:	f7fd faf2 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 8006734:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006736:	e033      	b.n	80067a0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006738:	f7fd fb04 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 800673c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800673e:	e02f      	b.n	80067a0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006740:	f107 0314 	add.w	r3, r7, #20
 8006744:	4618      	mov	r0, r3
 8006746:	f7fe fc8f 	bl	8005068 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800674e:	e027      	b.n	80067a0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006750:	f107 0308 	add.w	r3, r7, #8
 8006754:	4618      	mov	r0, r3
 8006756:	f7fe fdd3 	bl	8005300 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800675e:	e01f      	b.n	80067a0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006760:	4b2c      	ldr	r3, [pc, #176]	; (8006814 <UART_SetConfig+0xb50>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0320 	and.w	r3, r3, #32
 8006768:	2b00      	cmp	r3, #0
 800676a:	d009      	beq.n	8006780 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800676c:	4b29      	ldr	r3, [pc, #164]	; (8006814 <UART_SetConfig+0xb50>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	08db      	lsrs	r3, r3, #3
 8006772:	f003 0303 	and.w	r3, r3, #3
 8006776:	4a28      	ldr	r2, [pc, #160]	; (8006818 <UART_SetConfig+0xb54>)
 8006778:	fa22 f303 	lsr.w	r3, r2, r3
 800677c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800677e:	e00f      	b.n	80067a0 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8006780:	4b25      	ldr	r3, [pc, #148]	; (8006818 <UART_SetConfig+0xb54>)
 8006782:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006784:	e00c      	b.n	80067a0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006786:	4b25      	ldr	r3, [pc, #148]	; (800681c <UART_SetConfig+0xb58>)
 8006788:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800678a:	e009      	b.n	80067a0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800678c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006790:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006792:	e005      	b.n	80067a0 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800679e:	bf00      	nop
    }

    if (pclk != 0U)
 80067a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d021      	beq.n	80067ea <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	4a1d      	ldr	r2, [pc, #116]	; (8006820 <UART_SetConfig+0xb5c>)
 80067ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067b0:	461a      	mov	r2, r3
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	085b      	lsrs	r3, r3, #1
 80067be:	441a      	add	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ce:	2b0f      	cmp	r3, #15
 80067d0:	d908      	bls.n	80067e4 <UART_SetConfig+0xb20>
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d8:	d204      	bcs.n	80067e4 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067e0:	60da      	str	r2, [r3, #12]
 80067e2:	e002      	b.n	80067ea <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006806:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800680a:	4618      	mov	r0, r3
 800680c:	3738      	adds	r7, #56	; 0x38
 800680e:	46bd      	mov	sp, r7
 8006810:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006814:	58024400 	.word	0x58024400
 8006818:	03d09000 	.word	0x03d09000
 800681c:	003d0900 	.word	0x003d0900
 8006820:	08007600 	.word	0x08007600

08006824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00a      	beq.n	800684e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00a      	beq.n	8006892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006896:	f003 0308 	and.w	r3, r3, #8
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b8:	f003 0310 	and.w	r3, r3, #16
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00a      	beq.n	80068d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01a      	beq.n	800693a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006922:	d10a      	bne.n	800693a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	605a      	str	r2, [r3, #4]
  }
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af02      	add	r7, sp, #8
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006978:	f7fa fc20 	bl	80011bc <HAL_GetTick>
 800697c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b08      	cmp	r3, #8
 800698a:	d10e      	bne.n	80069aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800698c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f82c 	bl	80069f8 <UART_WaitOnFlagUntilTimeout>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e022      	b.n	80069f0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d10e      	bne.n	80069d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f816 	bl	80069f8 <UART_WaitOnFlagUntilTimeout>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e00c      	b.n	80069f0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2220      	movs	r2, #32
 80069e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	603b      	str	r3, [r7, #0]
 8006a04:	4613      	mov	r3, r2
 8006a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a08:	e062      	b.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a10:	d05e      	beq.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a12:	f7fa fbd3 	bl	80011bc <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d302      	bcc.n	8006a28 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d11d      	bne.n	8006a64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a36:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 0201 	bic.w	r2, r2, #1
 8006a46:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2220      	movs	r2, #32
 8006a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e045      	b.n	8006af0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0304 	and.w	r3, r3, #4
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d02e      	beq.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a80:	d126      	bne.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a8a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a9a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0201 	bic.w	r2, r2, #1
 8006aaa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e00f      	b.n	8006af0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69da      	ldr	r2, [r3, #28]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	4013      	ands	r3, r2
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	bf0c      	ite	eq
 8006ae0:	2301      	moveq	r3, #1
 8006ae2:	2300      	movne	r3, #0
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	79fb      	ldrb	r3, [r7, #7]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d08d      	beq.n	8006a0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <HAL_UARTEx_DisableFifoMode+0x16>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e027      	b.n	8006b5e <HAL_UARTEx_DisableFifoMode+0x66>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2224      	movs	r2, #36	; 0x24
 8006b1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 0201 	bic.w	r2, r2, #1
 8006b34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d101      	bne.n	8006b82 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b7e:	2302      	movs	r3, #2
 8006b80:	e02d      	b.n	8006bde <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2224      	movs	r2, #36	; 0x24
 8006b8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0201 	bic.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f850 	bl	8006c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e02d      	b.n	8006c5a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2224      	movs	r2, #36	; 0x24
 8006c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0201 	bic.w	r2, r2, #1
 8006c24:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f812 	bl	8006c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
	...

08006c64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b089      	sub	sp, #36	; 0x24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006c6c:	4a2f      	ldr	r2, [pc, #188]	; (8006d2c <UARTEx_SetNbDataToProcess+0xc8>)
 8006c6e:	f107 0314 	add.w	r3, r7, #20
 8006c72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c76:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006c7a:	4a2d      	ldr	r2, [pc, #180]	; (8006d30 <UARTEx_SetNbDataToProcess+0xcc>)
 8006c7c:	f107 030c 	add.w	r3, r7, #12
 8006c80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c84:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d108      	bne.n	8006ca2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ca0:	e03d      	b.n	8006d1e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ca2:	2310      	movs	r3, #16
 8006ca4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ca6:	2310      	movs	r3, #16
 8006ca8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	0e5b      	lsrs	r3, r3, #25
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	f003 0307 	and.w	r3, r3, #7
 8006cb8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	0f5b      	lsrs	r3, r3, #29
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006cca:	7fbb      	ldrb	r3, [r7, #30]
 8006ccc:	7f3a      	ldrb	r2, [r7, #28]
 8006cce:	f107 0120 	add.w	r1, r7, #32
 8006cd2:	440a      	add	r2, r1
 8006cd4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006cd8:	fb02 f303 	mul.w	r3, r2, r3
 8006cdc:	7f3a      	ldrb	r2, [r7, #28]
 8006cde:	f107 0120 	add.w	r1, r7, #32
 8006ce2:	440a      	add	r2, r1
 8006ce4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006ce8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006cf4:	7ffb      	ldrb	r3, [r7, #31]
 8006cf6:	7f7a      	ldrb	r2, [r7, #29]
 8006cf8:	f107 0120 	add.w	r1, r7, #32
 8006cfc:	440a      	add	r2, r1
 8006cfe:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006d02:	fb02 f303 	mul.w	r3, r2, r3
 8006d06:	7f7a      	ldrb	r2, [r7, #29]
 8006d08:	f107 0120 	add.w	r1, r7, #32
 8006d0c:	440a      	add	r2, r1
 8006d0e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006d12:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d1e:	bf00      	nop
 8006d20:	3724      	adds	r7, #36	; 0x24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	080075e0 	.word	0x080075e0
 8006d30:	080075e8 	.word	0x080075e8

08006d34 <__errno>:
 8006d34:	4b01      	ldr	r3, [pc, #4]	; (8006d3c <__errno+0x8>)
 8006d36:	6818      	ldr	r0, [r3, #0]
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	20000010 	.word	0x20000010

08006d40 <__libc_init_array>:
 8006d40:	b570      	push	{r4, r5, r6, lr}
 8006d42:	4e0d      	ldr	r6, [pc, #52]	; (8006d78 <__libc_init_array+0x38>)
 8006d44:	4c0d      	ldr	r4, [pc, #52]	; (8006d7c <__libc_init_array+0x3c>)
 8006d46:	1ba4      	subs	r4, r4, r6
 8006d48:	10a4      	asrs	r4, r4, #2
 8006d4a:	2500      	movs	r5, #0
 8006d4c:	42a5      	cmp	r5, r4
 8006d4e:	d109      	bne.n	8006d64 <__libc_init_array+0x24>
 8006d50:	4e0b      	ldr	r6, [pc, #44]	; (8006d80 <__libc_init_array+0x40>)
 8006d52:	4c0c      	ldr	r4, [pc, #48]	; (8006d84 <__libc_init_array+0x44>)
 8006d54:	f000 fc26 	bl	80075a4 <_init>
 8006d58:	1ba4      	subs	r4, r4, r6
 8006d5a:	10a4      	asrs	r4, r4, #2
 8006d5c:	2500      	movs	r5, #0
 8006d5e:	42a5      	cmp	r5, r4
 8006d60:	d105      	bne.n	8006d6e <__libc_init_array+0x2e>
 8006d62:	bd70      	pop	{r4, r5, r6, pc}
 8006d64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d68:	4798      	blx	r3
 8006d6a:	3501      	adds	r5, #1
 8006d6c:	e7ee      	b.n	8006d4c <__libc_init_array+0xc>
 8006d6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d72:	4798      	blx	r3
 8006d74:	3501      	adds	r5, #1
 8006d76:	e7f2      	b.n	8006d5e <__libc_init_array+0x1e>
 8006d78:	08007654 	.word	0x08007654
 8006d7c:	08007654 	.word	0x08007654
 8006d80:	08007654 	.word	0x08007654
 8006d84:	08007658 	.word	0x08007658

08006d88 <memset>:
 8006d88:	4402      	add	r2, r0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d100      	bne.n	8006d92 <memset+0xa>
 8006d90:	4770      	bx	lr
 8006d92:	f803 1b01 	strb.w	r1, [r3], #1
 8006d96:	e7f9      	b.n	8006d8c <memset+0x4>

08006d98 <siprintf>:
 8006d98:	b40e      	push	{r1, r2, r3}
 8006d9a:	b500      	push	{lr}
 8006d9c:	b09c      	sub	sp, #112	; 0x70
 8006d9e:	ab1d      	add	r3, sp, #116	; 0x74
 8006da0:	9002      	str	r0, [sp, #8]
 8006da2:	9006      	str	r0, [sp, #24]
 8006da4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006da8:	4809      	ldr	r0, [pc, #36]	; (8006dd0 <siprintf+0x38>)
 8006daa:	9107      	str	r1, [sp, #28]
 8006dac:	9104      	str	r1, [sp, #16]
 8006dae:	4909      	ldr	r1, [pc, #36]	; (8006dd4 <siprintf+0x3c>)
 8006db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006db4:	9105      	str	r1, [sp, #20]
 8006db6:	6800      	ldr	r0, [r0, #0]
 8006db8:	9301      	str	r3, [sp, #4]
 8006dba:	a902      	add	r1, sp, #8
 8006dbc:	f000 f866 	bl	8006e8c <_svfiprintf_r>
 8006dc0:	9b02      	ldr	r3, [sp, #8]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	b01c      	add	sp, #112	; 0x70
 8006dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dcc:	b003      	add	sp, #12
 8006dce:	4770      	bx	lr
 8006dd0:	20000010 	.word	0x20000010
 8006dd4:	ffff0208 	.word	0xffff0208

08006dd8 <__ssputs_r>:
 8006dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ddc:	688e      	ldr	r6, [r1, #8]
 8006dde:	429e      	cmp	r6, r3
 8006de0:	4682      	mov	sl, r0
 8006de2:	460c      	mov	r4, r1
 8006de4:	4690      	mov	r8, r2
 8006de6:	4699      	mov	r9, r3
 8006de8:	d837      	bhi.n	8006e5a <__ssputs_r+0x82>
 8006dea:	898a      	ldrh	r2, [r1, #12]
 8006dec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006df0:	d031      	beq.n	8006e56 <__ssputs_r+0x7e>
 8006df2:	6825      	ldr	r5, [r4, #0]
 8006df4:	6909      	ldr	r1, [r1, #16]
 8006df6:	1a6f      	subs	r7, r5, r1
 8006df8:	6965      	ldr	r5, [r4, #20]
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e00:	fb95 f5f3 	sdiv	r5, r5, r3
 8006e04:	f109 0301 	add.w	r3, r9, #1
 8006e08:	443b      	add	r3, r7
 8006e0a:	429d      	cmp	r5, r3
 8006e0c:	bf38      	it	cc
 8006e0e:	461d      	movcc	r5, r3
 8006e10:	0553      	lsls	r3, r2, #21
 8006e12:	d530      	bpl.n	8006e76 <__ssputs_r+0x9e>
 8006e14:	4629      	mov	r1, r5
 8006e16:	f000 fb2b 	bl	8007470 <_malloc_r>
 8006e1a:	4606      	mov	r6, r0
 8006e1c:	b950      	cbnz	r0, 8006e34 <__ssputs_r+0x5c>
 8006e1e:	230c      	movs	r3, #12
 8006e20:	f8ca 3000 	str.w	r3, [sl]
 8006e24:	89a3      	ldrh	r3, [r4, #12]
 8006e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e2a:	81a3      	strh	r3, [r4, #12]
 8006e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e34:	463a      	mov	r2, r7
 8006e36:	6921      	ldr	r1, [r4, #16]
 8006e38:	f000 faa8 	bl	800738c <memcpy>
 8006e3c:	89a3      	ldrh	r3, [r4, #12]
 8006e3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e46:	81a3      	strh	r3, [r4, #12]
 8006e48:	6126      	str	r6, [r4, #16]
 8006e4a:	6165      	str	r5, [r4, #20]
 8006e4c:	443e      	add	r6, r7
 8006e4e:	1bed      	subs	r5, r5, r7
 8006e50:	6026      	str	r6, [r4, #0]
 8006e52:	60a5      	str	r5, [r4, #8]
 8006e54:	464e      	mov	r6, r9
 8006e56:	454e      	cmp	r6, r9
 8006e58:	d900      	bls.n	8006e5c <__ssputs_r+0x84>
 8006e5a:	464e      	mov	r6, r9
 8006e5c:	4632      	mov	r2, r6
 8006e5e:	4641      	mov	r1, r8
 8006e60:	6820      	ldr	r0, [r4, #0]
 8006e62:	f000 fa9e 	bl	80073a2 <memmove>
 8006e66:	68a3      	ldr	r3, [r4, #8]
 8006e68:	1b9b      	subs	r3, r3, r6
 8006e6a:	60a3      	str	r3, [r4, #8]
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	441e      	add	r6, r3
 8006e70:	6026      	str	r6, [r4, #0]
 8006e72:	2000      	movs	r0, #0
 8006e74:	e7dc      	b.n	8006e30 <__ssputs_r+0x58>
 8006e76:	462a      	mov	r2, r5
 8006e78:	f000 fb54 	bl	8007524 <_realloc_r>
 8006e7c:	4606      	mov	r6, r0
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	d1e2      	bne.n	8006e48 <__ssputs_r+0x70>
 8006e82:	6921      	ldr	r1, [r4, #16]
 8006e84:	4650      	mov	r0, sl
 8006e86:	f000 faa5 	bl	80073d4 <_free_r>
 8006e8a:	e7c8      	b.n	8006e1e <__ssputs_r+0x46>

08006e8c <_svfiprintf_r>:
 8006e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e90:	461d      	mov	r5, r3
 8006e92:	898b      	ldrh	r3, [r1, #12]
 8006e94:	061f      	lsls	r7, r3, #24
 8006e96:	b09d      	sub	sp, #116	; 0x74
 8006e98:	4680      	mov	r8, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	4616      	mov	r6, r2
 8006e9e:	d50f      	bpl.n	8006ec0 <_svfiprintf_r+0x34>
 8006ea0:	690b      	ldr	r3, [r1, #16]
 8006ea2:	b96b      	cbnz	r3, 8006ec0 <_svfiprintf_r+0x34>
 8006ea4:	2140      	movs	r1, #64	; 0x40
 8006ea6:	f000 fae3 	bl	8007470 <_malloc_r>
 8006eaa:	6020      	str	r0, [r4, #0]
 8006eac:	6120      	str	r0, [r4, #16]
 8006eae:	b928      	cbnz	r0, 8006ebc <_svfiprintf_r+0x30>
 8006eb0:	230c      	movs	r3, #12
 8006eb2:	f8c8 3000 	str.w	r3, [r8]
 8006eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eba:	e0c8      	b.n	800704e <_svfiprintf_r+0x1c2>
 8006ebc:	2340      	movs	r3, #64	; 0x40
 8006ebe:	6163      	str	r3, [r4, #20]
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ec4:	2320      	movs	r3, #32
 8006ec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006eca:	2330      	movs	r3, #48	; 0x30
 8006ecc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ed0:	9503      	str	r5, [sp, #12]
 8006ed2:	f04f 0b01 	mov.w	fp, #1
 8006ed6:	4637      	mov	r7, r6
 8006ed8:	463d      	mov	r5, r7
 8006eda:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006ede:	b10b      	cbz	r3, 8006ee4 <_svfiprintf_r+0x58>
 8006ee0:	2b25      	cmp	r3, #37	; 0x25
 8006ee2:	d13e      	bne.n	8006f62 <_svfiprintf_r+0xd6>
 8006ee4:	ebb7 0a06 	subs.w	sl, r7, r6
 8006ee8:	d00b      	beq.n	8006f02 <_svfiprintf_r+0x76>
 8006eea:	4653      	mov	r3, sl
 8006eec:	4632      	mov	r2, r6
 8006eee:	4621      	mov	r1, r4
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	f7ff ff71 	bl	8006dd8 <__ssputs_r>
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	f000 80a4 	beq.w	8007044 <_svfiprintf_r+0x1b8>
 8006efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006efe:	4453      	add	r3, sl
 8006f00:	9309      	str	r3, [sp, #36]	; 0x24
 8006f02:	783b      	ldrb	r3, [r7, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 809d 	beq.w	8007044 <_svfiprintf_r+0x1b8>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f14:	9304      	str	r3, [sp, #16]
 8006f16:	9307      	str	r3, [sp, #28]
 8006f18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f1c:	931a      	str	r3, [sp, #104]	; 0x68
 8006f1e:	462f      	mov	r7, r5
 8006f20:	2205      	movs	r2, #5
 8006f22:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006f26:	4850      	ldr	r0, [pc, #320]	; (8007068 <_svfiprintf_r+0x1dc>)
 8006f28:	f7f9 f9da 	bl	80002e0 <memchr>
 8006f2c:	9b04      	ldr	r3, [sp, #16]
 8006f2e:	b9d0      	cbnz	r0, 8006f66 <_svfiprintf_r+0xda>
 8006f30:	06d9      	lsls	r1, r3, #27
 8006f32:	bf44      	itt	mi
 8006f34:	2220      	movmi	r2, #32
 8006f36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f3a:	071a      	lsls	r2, r3, #28
 8006f3c:	bf44      	itt	mi
 8006f3e:	222b      	movmi	r2, #43	; 0x2b
 8006f40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f44:	782a      	ldrb	r2, [r5, #0]
 8006f46:	2a2a      	cmp	r2, #42	; 0x2a
 8006f48:	d015      	beq.n	8006f76 <_svfiprintf_r+0xea>
 8006f4a:	9a07      	ldr	r2, [sp, #28]
 8006f4c:	462f      	mov	r7, r5
 8006f4e:	2000      	movs	r0, #0
 8006f50:	250a      	movs	r5, #10
 8006f52:	4639      	mov	r1, r7
 8006f54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f58:	3b30      	subs	r3, #48	; 0x30
 8006f5a:	2b09      	cmp	r3, #9
 8006f5c:	d94d      	bls.n	8006ffa <_svfiprintf_r+0x16e>
 8006f5e:	b1b8      	cbz	r0, 8006f90 <_svfiprintf_r+0x104>
 8006f60:	e00f      	b.n	8006f82 <_svfiprintf_r+0xf6>
 8006f62:	462f      	mov	r7, r5
 8006f64:	e7b8      	b.n	8006ed8 <_svfiprintf_r+0x4c>
 8006f66:	4a40      	ldr	r2, [pc, #256]	; (8007068 <_svfiprintf_r+0x1dc>)
 8006f68:	1a80      	subs	r0, r0, r2
 8006f6a:	fa0b f000 	lsl.w	r0, fp, r0
 8006f6e:	4318      	orrs	r0, r3
 8006f70:	9004      	str	r0, [sp, #16]
 8006f72:	463d      	mov	r5, r7
 8006f74:	e7d3      	b.n	8006f1e <_svfiprintf_r+0x92>
 8006f76:	9a03      	ldr	r2, [sp, #12]
 8006f78:	1d11      	adds	r1, r2, #4
 8006f7a:	6812      	ldr	r2, [r2, #0]
 8006f7c:	9103      	str	r1, [sp, #12]
 8006f7e:	2a00      	cmp	r2, #0
 8006f80:	db01      	blt.n	8006f86 <_svfiprintf_r+0xfa>
 8006f82:	9207      	str	r2, [sp, #28]
 8006f84:	e004      	b.n	8006f90 <_svfiprintf_r+0x104>
 8006f86:	4252      	negs	r2, r2
 8006f88:	f043 0302 	orr.w	r3, r3, #2
 8006f8c:	9207      	str	r2, [sp, #28]
 8006f8e:	9304      	str	r3, [sp, #16]
 8006f90:	783b      	ldrb	r3, [r7, #0]
 8006f92:	2b2e      	cmp	r3, #46	; 0x2e
 8006f94:	d10c      	bne.n	8006fb0 <_svfiprintf_r+0x124>
 8006f96:	787b      	ldrb	r3, [r7, #1]
 8006f98:	2b2a      	cmp	r3, #42	; 0x2a
 8006f9a:	d133      	bne.n	8007004 <_svfiprintf_r+0x178>
 8006f9c:	9b03      	ldr	r3, [sp, #12]
 8006f9e:	1d1a      	adds	r2, r3, #4
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	9203      	str	r2, [sp, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	bfb8      	it	lt
 8006fa8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fac:	3702      	adds	r7, #2
 8006fae:	9305      	str	r3, [sp, #20]
 8006fb0:	4d2e      	ldr	r5, [pc, #184]	; (800706c <_svfiprintf_r+0x1e0>)
 8006fb2:	7839      	ldrb	r1, [r7, #0]
 8006fb4:	2203      	movs	r2, #3
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f7f9 f992 	bl	80002e0 <memchr>
 8006fbc:	b138      	cbz	r0, 8006fce <_svfiprintf_r+0x142>
 8006fbe:	2340      	movs	r3, #64	; 0x40
 8006fc0:	1b40      	subs	r0, r0, r5
 8006fc2:	fa03 f000 	lsl.w	r0, r3, r0
 8006fc6:	9b04      	ldr	r3, [sp, #16]
 8006fc8:	4303      	orrs	r3, r0
 8006fca:	3701      	adds	r7, #1
 8006fcc:	9304      	str	r3, [sp, #16]
 8006fce:	7839      	ldrb	r1, [r7, #0]
 8006fd0:	4827      	ldr	r0, [pc, #156]	; (8007070 <_svfiprintf_r+0x1e4>)
 8006fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fd6:	2206      	movs	r2, #6
 8006fd8:	1c7e      	adds	r6, r7, #1
 8006fda:	f7f9 f981 	bl	80002e0 <memchr>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d038      	beq.n	8007054 <_svfiprintf_r+0x1c8>
 8006fe2:	4b24      	ldr	r3, [pc, #144]	; (8007074 <_svfiprintf_r+0x1e8>)
 8006fe4:	bb13      	cbnz	r3, 800702c <_svfiprintf_r+0x1a0>
 8006fe6:	9b03      	ldr	r3, [sp, #12]
 8006fe8:	3307      	adds	r3, #7
 8006fea:	f023 0307 	bic.w	r3, r3, #7
 8006fee:	3308      	adds	r3, #8
 8006ff0:	9303      	str	r3, [sp, #12]
 8006ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff4:	444b      	add	r3, r9
 8006ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff8:	e76d      	b.n	8006ed6 <_svfiprintf_r+0x4a>
 8006ffa:	fb05 3202 	mla	r2, r5, r2, r3
 8006ffe:	2001      	movs	r0, #1
 8007000:	460f      	mov	r7, r1
 8007002:	e7a6      	b.n	8006f52 <_svfiprintf_r+0xc6>
 8007004:	2300      	movs	r3, #0
 8007006:	3701      	adds	r7, #1
 8007008:	9305      	str	r3, [sp, #20]
 800700a:	4619      	mov	r1, r3
 800700c:	250a      	movs	r5, #10
 800700e:	4638      	mov	r0, r7
 8007010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007014:	3a30      	subs	r2, #48	; 0x30
 8007016:	2a09      	cmp	r2, #9
 8007018:	d903      	bls.n	8007022 <_svfiprintf_r+0x196>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0c8      	beq.n	8006fb0 <_svfiprintf_r+0x124>
 800701e:	9105      	str	r1, [sp, #20]
 8007020:	e7c6      	b.n	8006fb0 <_svfiprintf_r+0x124>
 8007022:	fb05 2101 	mla	r1, r5, r1, r2
 8007026:	2301      	movs	r3, #1
 8007028:	4607      	mov	r7, r0
 800702a:	e7f0      	b.n	800700e <_svfiprintf_r+0x182>
 800702c:	ab03      	add	r3, sp, #12
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	4622      	mov	r2, r4
 8007032:	4b11      	ldr	r3, [pc, #68]	; (8007078 <_svfiprintf_r+0x1ec>)
 8007034:	a904      	add	r1, sp, #16
 8007036:	4640      	mov	r0, r8
 8007038:	f3af 8000 	nop.w
 800703c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007040:	4681      	mov	r9, r0
 8007042:	d1d6      	bne.n	8006ff2 <_svfiprintf_r+0x166>
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	065b      	lsls	r3, r3, #25
 8007048:	f53f af35 	bmi.w	8006eb6 <_svfiprintf_r+0x2a>
 800704c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800704e:	b01d      	add	sp, #116	; 0x74
 8007050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007054:	ab03      	add	r3, sp, #12
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	4622      	mov	r2, r4
 800705a:	4b07      	ldr	r3, [pc, #28]	; (8007078 <_svfiprintf_r+0x1ec>)
 800705c:	a904      	add	r1, sp, #16
 800705e:	4640      	mov	r0, r8
 8007060:	f000 f882 	bl	8007168 <_printf_i>
 8007064:	e7ea      	b.n	800703c <_svfiprintf_r+0x1b0>
 8007066:	bf00      	nop
 8007068:	08007618 	.word	0x08007618
 800706c:	0800761e 	.word	0x0800761e
 8007070:	08007622 	.word	0x08007622
 8007074:	00000000 	.word	0x00000000
 8007078:	08006dd9 	.word	0x08006dd9

0800707c <_printf_common>:
 800707c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007080:	4691      	mov	r9, r2
 8007082:	461f      	mov	r7, r3
 8007084:	688a      	ldr	r2, [r1, #8]
 8007086:	690b      	ldr	r3, [r1, #16]
 8007088:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800708c:	4293      	cmp	r3, r2
 800708e:	bfb8      	it	lt
 8007090:	4613      	movlt	r3, r2
 8007092:	f8c9 3000 	str.w	r3, [r9]
 8007096:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800709a:	4606      	mov	r6, r0
 800709c:	460c      	mov	r4, r1
 800709e:	b112      	cbz	r2, 80070a6 <_printf_common+0x2a>
 80070a0:	3301      	adds	r3, #1
 80070a2:	f8c9 3000 	str.w	r3, [r9]
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	0699      	lsls	r1, r3, #26
 80070aa:	bf42      	ittt	mi
 80070ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80070b0:	3302      	addmi	r3, #2
 80070b2:	f8c9 3000 	strmi.w	r3, [r9]
 80070b6:	6825      	ldr	r5, [r4, #0]
 80070b8:	f015 0506 	ands.w	r5, r5, #6
 80070bc:	d107      	bne.n	80070ce <_printf_common+0x52>
 80070be:	f104 0a19 	add.w	sl, r4, #25
 80070c2:	68e3      	ldr	r3, [r4, #12]
 80070c4:	f8d9 2000 	ldr.w	r2, [r9]
 80070c8:	1a9b      	subs	r3, r3, r2
 80070ca:	42ab      	cmp	r3, r5
 80070cc:	dc28      	bgt.n	8007120 <_printf_common+0xa4>
 80070ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80070d2:	6822      	ldr	r2, [r4, #0]
 80070d4:	3300      	adds	r3, #0
 80070d6:	bf18      	it	ne
 80070d8:	2301      	movne	r3, #1
 80070da:	0692      	lsls	r2, r2, #26
 80070dc:	d42d      	bmi.n	800713a <_printf_common+0xbe>
 80070de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070e2:	4639      	mov	r1, r7
 80070e4:	4630      	mov	r0, r6
 80070e6:	47c0      	blx	r8
 80070e8:	3001      	adds	r0, #1
 80070ea:	d020      	beq.n	800712e <_printf_common+0xb2>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	68e5      	ldr	r5, [r4, #12]
 80070f0:	f8d9 2000 	ldr.w	r2, [r9]
 80070f4:	f003 0306 	and.w	r3, r3, #6
 80070f8:	2b04      	cmp	r3, #4
 80070fa:	bf08      	it	eq
 80070fc:	1aad      	subeq	r5, r5, r2
 80070fe:	68a3      	ldr	r3, [r4, #8]
 8007100:	6922      	ldr	r2, [r4, #16]
 8007102:	bf0c      	ite	eq
 8007104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007108:	2500      	movne	r5, #0
 800710a:	4293      	cmp	r3, r2
 800710c:	bfc4      	itt	gt
 800710e:	1a9b      	subgt	r3, r3, r2
 8007110:	18ed      	addgt	r5, r5, r3
 8007112:	f04f 0900 	mov.w	r9, #0
 8007116:	341a      	adds	r4, #26
 8007118:	454d      	cmp	r5, r9
 800711a:	d11a      	bne.n	8007152 <_printf_common+0xd6>
 800711c:	2000      	movs	r0, #0
 800711e:	e008      	b.n	8007132 <_printf_common+0xb6>
 8007120:	2301      	movs	r3, #1
 8007122:	4652      	mov	r2, sl
 8007124:	4639      	mov	r1, r7
 8007126:	4630      	mov	r0, r6
 8007128:	47c0      	blx	r8
 800712a:	3001      	adds	r0, #1
 800712c:	d103      	bne.n	8007136 <_printf_common+0xba>
 800712e:	f04f 30ff 	mov.w	r0, #4294967295
 8007132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007136:	3501      	adds	r5, #1
 8007138:	e7c3      	b.n	80070c2 <_printf_common+0x46>
 800713a:	18e1      	adds	r1, r4, r3
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	2030      	movs	r0, #48	; 0x30
 8007140:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007144:	4422      	add	r2, r4
 8007146:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800714a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800714e:	3302      	adds	r3, #2
 8007150:	e7c5      	b.n	80070de <_printf_common+0x62>
 8007152:	2301      	movs	r3, #1
 8007154:	4622      	mov	r2, r4
 8007156:	4639      	mov	r1, r7
 8007158:	4630      	mov	r0, r6
 800715a:	47c0      	blx	r8
 800715c:	3001      	adds	r0, #1
 800715e:	d0e6      	beq.n	800712e <_printf_common+0xb2>
 8007160:	f109 0901 	add.w	r9, r9, #1
 8007164:	e7d8      	b.n	8007118 <_printf_common+0x9c>
	...

08007168 <_printf_i>:
 8007168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800716c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007170:	460c      	mov	r4, r1
 8007172:	7e09      	ldrb	r1, [r1, #24]
 8007174:	b085      	sub	sp, #20
 8007176:	296e      	cmp	r1, #110	; 0x6e
 8007178:	4617      	mov	r7, r2
 800717a:	4606      	mov	r6, r0
 800717c:	4698      	mov	r8, r3
 800717e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007180:	f000 80b3 	beq.w	80072ea <_printf_i+0x182>
 8007184:	d822      	bhi.n	80071cc <_printf_i+0x64>
 8007186:	2963      	cmp	r1, #99	; 0x63
 8007188:	d036      	beq.n	80071f8 <_printf_i+0x90>
 800718a:	d80a      	bhi.n	80071a2 <_printf_i+0x3a>
 800718c:	2900      	cmp	r1, #0
 800718e:	f000 80b9 	beq.w	8007304 <_printf_i+0x19c>
 8007192:	2958      	cmp	r1, #88	; 0x58
 8007194:	f000 8083 	beq.w	800729e <_printf_i+0x136>
 8007198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800719c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80071a0:	e032      	b.n	8007208 <_printf_i+0xa0>
 80071a2:	2964      	cmp	r1, #100	; 0x64
 80071a4:	d001      	beq.n	80071aa <_printf_i+0x42>
 80071a6:	2969      	cmp	r1, #105	; 0x69
 80071a8:	d1f6      	bne.n	8007198 <_printf_i+0x30>
 80071aa:	6820      	ldr	r0, [r4, #0]
 80071ac:	6813      	ldr	r3, [r2, #0]
 80071ae:	0605      	lsls	r5, r0, #24
 80071b0:	f103 0104 	add.w	r1, r3, #4
 80071b4:	d52a      	bpl.n	800720c <_printf_i+0xa4>
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6011      	str	r1, [r2, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	da03      	bge.n	80071c6 <_printf_i+0x5e>
 80071be:	222d      	movs	r2, #45	; 0x2d
 80071c0:	425b      	negs	r3, r3
 80071c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80071c6:	486f      	ldr	r0, [pc, #444]	; (8007384 <_printf_i+0x21c>)
 80071c8:	220a      	movs	r2, #10
 80071ca:	e039      	b.n	8007240 <_printf_i+0xd8>
 80071cc:	2973      	cmp	r1, #115	; 0x73
 80071ce:	f000 809d 	beq.w	800730c <_printf_i+0x1a4>
 80071d2:	d808      	bhi.n	80071e6 <_printf_i+0x7e>
 80071d4:	296f      	cmp	r1, #111	; 0x6f
 80071d6:	d020      	beq.n	800721a <_printf_i+0xb2>
 80071d8:	2970      	cmp	r1, #112	; 0x70
 80071da:	d1dd      	bne.n	8007198 <_printf_i+0x30>
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	f043 0320 	orr.w	r3, r3, #32
 80071e2:	6023      	str	r3, [r4, #0]
 80071e4:	e003      	b.n	80071ee <_printf_i+0x86>
 80071e6:	2975      	cmp	r1, #117	; 0x75
 80071e8:	d017      	beq.n	800721a <_printf_i+0xb2>
 80071ea:	2978      	cmp	r1, #120	; 0x78
 80071ec:	d1d4      	bne.n	8007198 <_printf_i+0x30>
 80071ee:	2378      	movs	r3, #120	; 0x78
 80071f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071f4:	4864      	ldr	r0, [pc, #400]	; (8007388 <_printf_i+0x220>)
 80071f6:	e055      	b.n	80072a4 <_printf_i+0x13c>
 80071f8:	6813      	ldr	r3, [r2, #0]
 80071fa:	1d19      	adds	r1, r3, #4
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6011      	str	r1, [r2, #0]
 8007200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007204:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007208:	2301      	movs	r3, #1
 800720a:	e08c      	b.n	8007326 <_printf_i+0x1be>
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6011      	str	r1, [r2, #0]
 8007210:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007214:	bf18      	it	ne
 8007216:	b21b      	sxthne	r3, r3
 8007218:	e7cf      	b.n	80071ba <_printf_i+0x52>
 800721a:	6813      	ldr	r3, [r2, #0]
 800721c:	6825      	ldr	r5, [r4, #0]
 800721e:	1d18      	adds	r0, r3, #4
 8007220:	6010      	str	r0, [r2, #0]
 8007222:	0628      	lsls	r0, r5, #24
 8007224:	d501      	bpl.n	800722a <_printf_i+0xc2>
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	e002      	b.n	8007230 <_printf_i+0xc8>
 800722a:	0668      	lsls	r0, r5, #25
 800722c:	d5fb      	bpl.n	8007226 <_printf_i+0xbe>
 800722e:	881b      	ldrh	r3, [r3, #0]
 8007230:	4854      	ldr	r0, [pc, #336]	; (8007384 <_printf_i+0x21c>)
 8007232:	296f      	cmp	r1, #111	; 0x6f
 8007234:	bf14      	ite	ne
 8007236:	220a      	movne	r2, #10
 8007238:	2208      	moveq	r2, #8
 800723a:	2100      	movs	r1, #0
 800723c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007240:	6865      	ldr	r5, [r4, #4]
 8007242:	60a5      	str	r5, [r4, #8]
 8007244:	2d00      	cmp	r5, #0
 8007246:	f2c0 8095 	blt.w	8007374 <_printf_i+0x20c>
 800724a:	6821      	ldr	r1, [r4, #0]
 800724c:	f021 0104 	bic.w	r1, r1, #4
 8007250:	6021      	str	r1, [r4, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d13d      	bne.n	80072d2 <_printf_i+0x16a>
 8007256:	2d00      	cmp	r5, #0
 8007258:	f040 808e 	bne.w	8007378 <_printf_i+0x210>
 800725c:	4665      	mov	r5, ip
 800725e:	2a08      	cmp	r2, #8
 8007260:	d10b      	bne.n	800727a <_printf_i+0x112>
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	07db      	lsls	r3, r3, #31
 8007266:	d508      	bpl.n	800727a <_printf_i+0x112>
 8007268:	6923      	ldr	r3, [r4, #16]
 800726a:	6862      	ldr	r2, [r4, #4]
 800726c:	429a      	cmp	r2, r3
 800726e:	bfde      	ittt	le
 8007270:	2330      	movle	r3, #48	; 0x30
 8007272:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007276:	f105 35ff 	addle.w	r5, r5, #4294967295
 800727a:	ebac 0305 	sub.w	r3, ip, r5
 800727e:	6123      	str	r3, [r4, #16]
 8007280:	f8cd 8000 	str.w	r8, [sp]
 8007284:	463b      	mov	r3, r7
 8007286:	aa03      	add	r2, sp, #12
 8007288:	4621      	mov	r1, r4
 800728a:	4630      	mov	r0, r6
 800728c:	f7ff fef6 	bl	800707c <_printf_common>
 8007290:	3001      	adds	r0, #1
 8007292:	d14d      	bne.n	8007330 <_printf_i+0x1c8>
 8007294:	f04f 30ff 	mov.w	r0, #4294967295
 8007298:	b005      	add	sp, #20
 800729a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800729e:	4839      	ldr	r0, [pc, #228]	; (8007384 <_printf_i+0x21c>)
 80072a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80072a4:	6813      	ldr	r3, [r2, #0]
 80072a6:	6821      	ldr	r1, [r4, #0]
 80072a8:	1d1d      	adds	r5, r3, #4
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6015      	str	r5, [r2, #0]
 80072ae:	060a      	lsls	r2, r1, #24
 80072b0:	d50b      	bpl.n	80072ca <_printf_i+0x162>
 80072b2:	07ca      	lsls	r2, r1, #31
 80072b4:	bf44      	itt	mi
 80072b6:	f041 0120 	orrmi.w	r1, r1, #32
 80072ba:	6021      	strmi	r1, [r4, #0]
 80072bc:	b91b      	cbnz	r3, 80072c6 <_printf_i+0x15e>
 80072be:	6822      	ldr	r2, [r4, #0]
 80072c0:	f022 0220 	bic.w	r2, r2, #32
 80072c4:	6022      	str	r2, [r4, #0]
 80072c6:	2210      	movs	r2, #16
 80072c8:	e7b7      	b.n	800723a <_printf_i+0xd2>
 80072ca:	064d      	lsls	r5, r1, #25
 80072cc:	bf48      	it	mi
 80072ce:	b29b      	uxthmi	r3, r3
 80072d0:	e7ef      	b.n	80072b2 <_printf_i+0x14a>
 80072d2:	4665      	mov	r5, ip
 80072d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80072d8:	fb02 3311 	mls	r3, r2, r1, r3
 80072dc:	5cc3      	ldrb	r3, [r0, r3]
 80072de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80072e2:	460b      	mov	r3, r1
 80072e4:	2900      	cmp	r1, #0
 80072e6:	d1f5      	bne.n	80072d4 <_printf_i+0x16c>
 80072e8:	e7b9      	b.n	800725e <_printf_i+0xf6>
 80072ea:	6813      	ldr	r3, [r2, #0]
 80072ec:	6825      	ldr	r5, [r4, #0]
 80072ee:	6961      	ldr	r1, [r4, #20]
 80072f0:	1d18      	adds	r0, r3, #4
 80072f2:	6010      	str	r0, [r2, #0]
 80072f4:	0628      	lsls	r0, r5, #24
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	d501      	bpl.n	80072fe <_printf_i+0x196>
 80072fa:	6019      	str	r1, [r3, #0]
 80072fc:	e002      	b.n	8007304 <_printf_i+0x19c>
 80072fe:	066a      	lsls	r2, r5, #25
 8007300:	d5fb      	bpl.n	80072fa <_printf_i+0x192>
 8007302:	8019      	strh	r1, [r3, #0]
 8007304:	2300      	movs	r3, #0
 8007306:	6123      	str	r3, [r4, #16]
 8007308:	4665      	mov	r5, ip
 800730a:	e7b9      	b.n	8007280 <_printf_i+0x118>
 800730c:	6813      	ldr	r3, [r2, #0]
 800730e:	1d19      	adds	r1, r3, #4
 8007310:	6011      	str	r1, [r2, #0]
 8007312:	681d      	ldr	r5, [r3, #0]
 8007314:	6862      	ldr	r2, [r4, #4]
 8007316:	2100      	movs	r1, #0
 8007318:	4628      	mov	r0, r5
 800731a:	f7f8 ffe1 	bl	80002e0 <memchr>
 800731e:	b108      	cbz	r0, 8007324 <_printf_i+0x1bc>
 8007320:	1b40      	subs	r0, r0, r5
 8007322:	6060      	str	r0, [r4, #4]
 8007324:	6863      	ldr	r3, [r4, #4]
 8007326:	6123      	str	r3, [r4, #16]
 8007328:	2300      	movs	r3, #0
 800732a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800732e:	e7a7      	b.n	8007280 <_printf_i+0x118>
 8007330:	6923      	ldr	r3, [r4, #16]
 8007332:	462a      	mov	r2, r5
 8007334:	4639      	mov	r1, r7
 8007336:	4630      	mov	r0, r6
 8007338:	47c0      	blx	r8
 800733a:	3001      	adds	r0, #1
 800733c:	d0aa      	beq.n	8007294 <_printf_i+0x12c>
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	079b      	lsls	r3, r3, #30
 8007342:	d413      	bmi.n	800736c <_printf_i+0x204>
 8007344:	68e0      	ldr	r0, [r4, #12]
 8007346:	9b03      	ldr	r3, [sp, #12]
 8007348:	4298      	cmp	r0, r3
 800734a:	bfb8      	it	lt
 800734c:	4618      	movlt	r0, r3
 800734e:	e7a3      	b.n	8007298 <_printf_i+0x130>
 8007350:	2301      	movs	r3, #1
 8007352:	464a      	mov	r2, r9
 8007354:	4639      	mov	r1, r7
 8007356:	4630      	mov	r0, r6
 8007358:	47c0      	blx	r8
 800735a:	3001      	adds	r0, #1
 800735c:	d09a      	beq.n	8007294 <_printf_i+0x12c>
 800735e:	3501      	adds	r5, #1
 8007360:	68e3      	ldr	r3, [r4, #12]
 8007362:	9a03      	ldr	r2, [sp, #12]
 8007364:	1a9b      	subs	r3, r3, r2
 8007366:	42ab      	cmp	r3, r5
 8007368:	dcf2      	bgt.n	8007350 <_printf_i+0x1e8>
 800736a:	e7eb      	b.n	8007344 <_printf_i+0x1dc>
 800736c:	2500      	movs	r5, #0
 800736e:	f104 0919 	add.w	r9, r4, #25
 8007372:	e7f5      	b.n	8007360 <_printf_i+0x1f8>
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1ac      	bne.n	80072d2 <_printf_i+0x16a>
 8007378:	7803      	ldrb	r3, [r0, #0]
 800737a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800737e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007382:	e76c      	b.n	800725e <_printf_i+0xf6>
 8007384:	08007629 	.word	0x08007629
 8007388:	0800763a 	.word	0x0800763a

0800738c <memcpy>:
 800738c:	b510      	push	{r4, lr}
 800738e:	1e43      	subs	r3, r0, #1
 8007390:	440a      	add	r2, r1
 8007392:	4291      	cmp	r1, r2
 8007394:	d100      	bne.n	8007398 <memcpy+0xc>
 8007396:	bd10      	pop	{r4, pc}
 8007398:	f811 4b01 	ldrb.w	r4, [r1], #1
 800739c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073a0:	e7f7      	b.n	8007392 <memcpy+0x6>

080073a2 <memmove>:
 80073a2:	4288      	cmp	r0, r1
 80073a4:	b510      	push	{r4, lr}
 80073a6:	eb01 0302 	add.w	r3, r1, r2
 80073aa:	d807      	bhi.n	80073bc <memmove+0x1a>
 80073ac:	1e42      	subs	r2, r0, #1
 80073ae:	4299      	cmp	r1, r3
 80073b0:	d00a      	beq.n	80073c8 <memmove+0x26>
 80073b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073b6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80073ba:	e7f8      	b.n	80073ae <memmove+0xc>
 80073bc:	4283      	cmp	r3, r0
 80073be:	d9f5      	bls.n	80073ac <memmove+0xa>
 80073c0:	1881      	adds	r1, r0, r2
 80073c2:	1ad2      	subs	r2, r2, r3
 80073c4:	42d3      	cmn	r3, r2
 80073c6:	d100      	bne.n	80073ca <memmove+0x28>
 80073c8:	bd10      	pop	{r4, pc}
 80073ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073ce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80073d2:	e7f7      	b.n	80073c4 <memmove+0x22>

080073d4 <_free_r>:
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	4605      	mov	r5, r0
 80073d8:	2900      	cmp	r1, #0
 80073da:	d045      	beq.n	8007468 <_free_r+0x94>
 80073dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073e0:	1f0c      	subs	r4, r1, #4
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	bfb8      	it	lt
 80073e6:	18e4      	addlt	r4, r4, r3
 80073e8:	f000 f8d2 	bl	8007590 <__malloc_lock>
 80073ec:	4a1f      	ldr	r2, [pc, #124]	; (800746c <_free_r+0x98>)
 80073ee:	6813      	ldr	r3, [r2, #0]
 80073f0:	4610      	mov	r0, r2
 80073f2:	b933      	cbnz	r3, 8007402 <_free_r+0x2e>
 80073f4:	6063      	str	r3, [r4, #4]
 80073f6:	6014      	str	r4, [r2, #0]
 80073f8:	4628      	mov	r0, r5
 80073fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073fe:	f000 b8c8 	b.w	8007592 <__malloc_unlock>
 8007402:	42a3      	cmp	r3, r4
 8007404:	d90c      	bls.n	8007420 <_free_r+0x4c>
 8007406:	6821      	ldr	r1, [r4, #0]
 8007408:	1862      	adds	r2, r4, r1
 800740a:	4293      	cmp	r3, r2
 800740c:	bf04      	itt	eq
 800740e:	681a      	ldreq	r2, [r3, #0]
 8007410:	685b      	ldreq	r3, [r3, #4]
 8007412:	6063      	str	r3, [r4, #4]
 8007414:	bf04      	itt	eq
 8007416:	1852      	addeq	r2, r2, r1
 8007418:	6022      	streq	r2, [r4, #0]
 800741a:	6004      	str	r4, [r0, #0]
 800741c:	e7ec      	b.n	80073f8 <_free_r+0x24>
 800741e:	4613      	mov	r3, r2
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	b10a      	cbz	r2, 8007428 <_free_r+0x54>
 8007424:	42a2      	cmp	r2, r4
 8007426:	d9fa      	bls.n	800741e <_free_r+0x4a>
 8007428:	6819      	ldr	r1, [r3, #0]
 800742a:	1858      	adds	r0, r3, r1
 800742c:	42a0      	cmp	r0, r4
 800742e:	d10b      	bne.n	8007448 <_free_r+0x74>
 8007430:	6820      	ldr	r0, [r4, #0]
 8007432:	4401      	add	r1, r0
 8007434:	1858      	adds	r0, r3, r1
 8007436:	4282      	cmp	r2, r0
 8007438:	6019      	str	r1, [r3, #0]
 800743a:	d1dd      	bne.n	80073f8 <_free_r+0x24>
 800743c:	6810      	ldr	r0, [r2, #0]
 800743e:	6852      	ldr	r2, [r2, #4]
 8007440:	605a      	str	r2, [r3, #4]
 8007442:	4401      	add	r1, r0
 8007444:	6019      	str	r1, [r3, #0]
 8007446:	e7d7      	b.n	80073f8 <_free_r+0x24>
 8007448:	d902      	bls.n	8007450 <_free_r+0x7c>
 800744a:	230c      	movs	r3, #12
 800744c:	602b      	str	r3, [r5, #0]
 800744e:	e7d3      	b.n	80073f8 <_free_r+0x24>
 8007450:	6820      	ldr	r0, [r4, #0]
 8007452:	1821      	adds	r1, r4, r0
 8007454:	428a      	cmp	r2, r1
 8007456:	bf04      	itt	eq
 8007458:	6811      	ldreq	r1, [r2, #0]
 800745a:	6852      	ldreq	r2, [r2, #4]
 800745c:	6062      	str	r2, [r4, #4]
 800745e:	bf04      	itt	eq
 8007460:	1809      	addeq	r1, r1, r0
 8007462:	6021      	streq	r1, [r4, #0]
 8007464:	605c      	str	r4, [r3, #4]
 8007466:	e7c7      	b.n	80073f8 <_free_r+0x24>
 8007468:	bd38      	pop	{r3, r4, r5, pc}
 800746a:	bf00      	nop
 800746c:	20000094 	.word	0x20000094

08007470 <_malloc_r>:
 8007470:	b570      	push	{r4, r5, r6, lr}
 8007472:	1ccd      	adds	r5, r1, #3
 8007474:	f025 0503 	bic.w	r5, r5, #3
 8007478:	3508      	adds	r5, #8
 800747a:	2d0c      	cmp	r5, #12
 800747c:	bf38      	it	cc
 800747e:	250c      	movcc	r5, #12
 8007480:	2d00      	cmp	r5, #0
 8007482:	4606      	mov	r6, r0
 8007484:	db01      	blt.n	800748a <_malloc_r+0x1a>
 8007486:	42a9      	cmp	r1, r5
 8007488:	d903      	bls.n	8007492 <_malloc_r+0x22>
 800748a:	230c      	movs	r3, #12
 800748c:	6033      	str	r3, [r6, #0]
 800748e:	2000      	movs	r0, #0
 8007490:	bd70      	pop	{r4, r5, r6, pc}
 8007492:	f000 f87d 	bl	8007590 <__malloc_lock>
 8007496:	4a21      	ldr	r2, [pc, #132]	; (800751c <_malloc_r+0xac>)
 8007498:	6814      	ldr	r4, [r2, #0]
 800749a:	4621      	mov	r1, r4
 800749c:	b991      	cbnz	r1, 80074c4 <_malloc_r+0x54>
 800749e:	4c20      	ldr	r4, [pc, #128]	; (8007520 <_malloc_r+0xb0>)
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	b91b      	cbnz	r3, 80074ac <_malloc_r+0x3c>
 80074a4:	4630      	mov	r0, r6
 80074a6:	f000 f863 	bl	8007570 <_sbrk_r>
 80074aa:	6020      	str	r0, [r4, #0]
 80074ac:	4629      	mov	r1, r5
 80074ae:	4630      	mov	r0, r6
 80074b0:	f000 f85e 	bl	8007570 <_sbrk_r>
 80074b4:	1c43      	adds	r3, r0, #1
 80074b6:	d124      	bne.n	8007502 <_malloc_r+0x92>
 80074b8:	230c      	movs	r3, #12
 80074ba:	6033      	str	r3, [r6, #0]
 80074bc:	4630      	mov	r0, r6
 80074be:	f000 f868 	bl	8007592 <__malloc_unlock>
 80074c2:	e7e4      	b.n	800748e <_malloc_r+0x1e>
 80074c4:	680b      	ldr	r3, [r1, #0]
 80074c6:	1b5b      	subs	r3, r3, r5
 80074c8:	d418      	bmi.n	80074fc <_malloc_r+0x8c>
 80074ca:	2b0b      	cmp	r3, #11
 80074cc:	d90f      	bls.n	80074ee <_malloc_r+0x7e>
 80074ce:	600b      	str	r3, [r1, #0]
 80074d0:	50cd      	str	r5, [r1, r3]
 80074d2:	18cc      	adds	r4, r1, r3
 80074d4:	4630      	mov	r0, r6
 80074d6:	f000 f85c 	bl	8007592 <__malloc_unlock>
 80074da:	f104 000b 	add.w	r0, r4, #11
 80074de:	1d23      	adds	r3, r4, #4
 80074e0:	f020 0007 	bic.w	r0, r0, #7
 80074e4:	1ac3      	subs	r3, r0, r3
 80074e6:	d0d3      	beq.n	8007490 <_malloc_r+0x20>
 80074e8:	425a      	negs	r2, r3
 80074ea:	50e2      	str	r2, [r4, r3]
 80074ec:	e7d0      	b.n	8007490 <_malloc_r+0x20>
 80074ee:	428c      	cmp	r4, r1
 80074f0:	684b      	ldr	r3, [r1, #4]
 80074f2:	bf16      	itet	ne
 80074f4:	6063      	strne	r3, [r4, #4]
 80074f6:	6013      	streq	r3, [r2, #0]
 80074f8:	460c      	movne	r4, r1
 80074fa:	e7eb      	b.n	80074d4 <_malloc_r+0x64>
 80074fc:	460c      	mov	r4, r1
 80074fe:	6849      	ldr	r1, [r1, #4]
 8007500:	e7cc      	b.n	800749c <_malloc_r+0x2c>
 8007502:	1cc4      	adds	r4, r0, #3
 8007504:	f024 0403 	bic.w	r4, r4, #3
 8007508:	42a0      	cmp	r0, r4
 800750a:	d005      	beq.n	8007518 <_malloc_r+0xa8>
 800750c:	1a21      	subs	r1, r4, r0
 800750e:	4630      	mov	r0, r6
 8007510:	f000 f82e 	bl	8007570 <_sbrk_r>
 8007514:	3001      	adds	r0, #1
 8007516:	d0cf      	beq.n	80074b8 <_malloc_r+0x48>
 8007518:	6025      	str	r5, [r4, #0]
 800751a:	e7db      	b.n	80074d4 <_malloc_r+0x64>
 800751c:	20000094 	.word	0x20000094
 8007520:	20000098 	.word	0x20000098

08007524 <_realloc_r>:
 8007524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007526:	4607      	mov	r7, r0
 8007528:	4614      	mov	r4, r2
 800752a:	460e      	mov	r6, r1
 800752c:	b921      	cbnz	r1, 8007538 <_realloc_r+0x14>
 800752e:	4611      	mov	r1, r2
 8007530:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007534:	f7ff bf9c 	b.w	8007470 <_malloc_r>
 8007538:	b922      	cbnz	r2, 8007544 <_realloc_r+0x20>
 800753a:	f7ff ff4b 	bl	80073d4 <_free_r>
 800753e:	4625      	mov	r5, r4
 8007540:	4628      	mov	r0, r5
 8007542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007544:	f000 f826 	bl	8007594 <_malloc_usable_size_r>
 8007548:	42a0      	cmp	r0, r4
 800754a:	d20f      	bcs.n	800756c <_realloc_r+0x48>
 800754c:	4621      	mov	r1, r4
 800754e:	4638      	mov	r0, r7
 8007550:	f7ff ff8e 	bl	8007470 <_malloc_r>
 8007554:	4605      	mov	r5, r0
 8007556:	2800      	cmp	r0, #0
 8007558:	d0f2      	beq.n	8007540 <_realloc_r+0x1c>
 800755a:	4631      	mov	r1, r6
 800755c:	4622      	mov	r2, r4
 800755e:	f7ff ff15 	bl	800738c <memcpy>
 8007562:	4631      	mov	r1, r6
 8007564:	4638      	mov	r0, r7
 8007566:	f7ff ff35 	bl	80073d4 <_free_r>
 800756a:	e7e9      	b.n	8007540 <_realloc_r+0x1c>
 800756c:	4635      	mov	r5, r6
 800756e:	e7e7      	b.n	8007540 <_realloc_r+0x1c>

08007570 <_sbrk_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4c06      	ldr	r4, [pc, #24]	; (800758c <_sbrk_r+0x1c>)
 8007574:	2300      	movs	r3, #0
 8007576:	4605      	mov	r5, r0
 8007578:	4608      	mov	r0, r1
 800757a:	6023      	str	r3, [r4, #0]
 800757c:	f7f9 fd38 	bl	8000ff0 <_sbrk>
 8007580:	1c43      	adds	r3, r0, #1
 8007582:	d102      	bne.n	800758a <_sbrk_r+0x1a>
 8007584:	6823      	ldr	r3, [r4, #0]
 8007586:	b103      	cbz	r3, 800758a <_sbrk_r+0x1a>
 8007588:	602b      	str	r3, [r5, #0]
 800758a:	bd38      	pop	{r3, r4, r5, pc}
 800758c:	20000190 	.word	0x20000190

08007590 <__malloc_lock>:
 8007590:	4770      	bx	lr

08007592 <__malloc_unlock>:
 8007592:	4770      	bx	lr

08007594 <_malloc_usable_size_r>:
 8007594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007598:	1f18      	subs	r0, r3, #4
 800759a:	2b00      	cmp	r3, #0
 800759c:	bfbc      	itt	lt
 800759e:	580b      	ldrlt	r3, [r1, r0]
 80075a0:	18c0      	addlt	r0, r0, r3
 80075a2:	4770      	bx	lr

080075a4 <_init>:
 80075a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a6:	bf00      	nop
 80075a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075aa:	bc08      	pop	{r3}
 80075ac:	469e      	mov	lr, r3
 80075ae:	4770      	bx	lr

080075b0 <_fini>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	bf00      	nop
 80075b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075b6:	bc08      	pop	{r3}
 80075b8:	469e      	mov	lr, r3
 80075ba:	4770      	bx	lr
