
testUsart_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005748  08005748  00015748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005800  08005800  00015800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005808  08005808  00015808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800580c  0800580c  0001580c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08005810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000013c  20000074  08005884  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001b0  08005884  000201b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014897  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000247b  00000000  00000000  00034939  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000af8  00000000  00000000  00036db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a10  00000000  00000000  000378b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000385a9  00000000  00000000  000382c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ad79  00000000  00000000  00070869  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00175ccb  00000000  00000000  0007b5e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  001f12ad  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002f80  00000000  00000000  001f1328  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005730 	.word	0x08005730

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	08005730 	.word	0x08005730

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <SystemInit+0x104>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a3e      	ldr	r2, [pc, #248]	; (8000784 <SystemInit+0x104>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <SystemInit+0x104>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <SystemInit+0x104>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <SystemInit+0x108>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <SystemInit+0x108>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <SystemInit+0x10c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x10c>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <SystemInit+0x10c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <SystemInit+0x10c>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492e      	ldr	r1, [pc, #184]	; (800078c <SystemInit+0x10c>)
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x110>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemInit+0x108>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	d907      	bls.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemInit+0x108>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <SystemInit+0x108>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemInit+0x10c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemInit+0x10c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemInit+0x10c>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemInit+0x10c>)
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <SystemInit+0x114>)
 800070c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemInit+0x10c>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemInit+0x118>)
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <SystemInit+0x10c>)
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemInit+0x11c>)
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <SystemInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <SystemInit+0x10c>)
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <SystemInit+0x11c>)
 8000724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <SystemInit+0x10c>)
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <SystemInit+0x11c>)
 8000730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <SystemInit+0x10c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <SystemInit+0x10c>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <SystemInit+0x10c>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <SystemInit+0x120>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <SystemInit+0x120>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x124>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <SystemInit+0x128>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x12c>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x130>)
 800076c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000770:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x104>)
 8000774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000778:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	52002000 	.word	0x52002000
 800078c:	58024400 	.word	0x58024400
 8000790:	eaf6ed7f 	.word	0xeaf6ed7f
 8000794:	02020200 	.word	0x02020200
 8000798:	01ff0000 	.word	0x01ff0000
 800079c:	01010280 	.word	0x01010280
 80007a0:	580000c0 	.word	0x580000c0
 80007a4:	5c001000 	.word	0x5c001000
 80007a8:	ffff0000 	.word	0xffff0000
 80007ac:	51008108 	.word	0x51008108
 80007b0:	52004000 	.word	0x52004000

080007b4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
    int32_t timeout;
    /* USER CODE END Boot_Mode_Sequence_0 */

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /* Wait until CPU2 boots and enters in stop mode or timeout*/
    timeout = 0xFFFF;
 80007ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007be:	617b      	str	r3, [r7, #20]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 80007c0:	bf00      	nop
 80007c2:	4b43      	ldr	r3, [pc, #268]	; (80008d0 <main+0x11c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d004      	beq.n	80007d8 <main+0x24>
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	1e5a      	subs	r2, r3, #1
 80007d2:	617a      	str	r2, [r7, #20]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	dcf4      	bgt.n	80007c2 <main+0xe>
        ;
    if (timeout < 0) {
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	da01      	bge.n	80007e2 <main+0x2e>
        Error_Handler();
 80007de:	f000 fa2d 	bl	8000c3c <Error_Handler>
    }
    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80007e2:	f000 fb1d 	bl	8000e20 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80007e6:	f000 f87f 	bl	80008e8 <SystemClock_Config>
    /* USER CODE BEGIN Boot_Mode_Sequence_2 */
    /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
    HSEM notification */
    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 80007ea:	4b39      	ldr	r3, [pc, #228]	; (80008d0 <main+0x11c>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f0:	4a37      	ldr	r2, [pc, #220]	; (80008d0 <main+0x11c>)
 80007f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007fa:	4b35      	ldr	r3, [pc, #212]	; (80008d0 <main+0x11c>)
 80007fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	683b      	ldr	r3, [r7, #0]
    /*Take HSEM */
    HAL_HSEM_FastTake(HSEM_ID_0);
 8000808:	2000      	movs	r0, #0
 800080a:	f000 fe3b 	bl	8001484 <HAL_HSEM_FastTake>
    /*Release HSEM in order to notify the CPU2(CM4)*/
    HAL_HSEM_Release(HSEM_ID_0, 0);
 800080e:	2100      	movs	r1, #0
 8000810:	2000      	movs	r0, #0
 8000812:	f000 fe51 	bl	80014b8 <HAL_HSEM_Release>
    /* wait until CPU2 wakes up from stop mode */
    timeout = 0xFFFF;
 8000816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800081a:	617b      	str	r3, [r7, #20]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 800081c:	bf00      	nop
 800081e:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <main+0x11c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000826:	2b00      	cmp	r3, #0
 8000828:	d104      	bne.n	8000834 <main+0x80>
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	1e5a      	subs	r2, r3, #1
 800082e:	617a      	str	r2, [r7, #20]
 8000830:	2b00      	cmp	r3, #0
 8000832:	dcf4      	bgt.n	800081e <main+0x6a>
        ;
    if (timeout < 0) {
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	2b00      	cmp	r3, #0
 8000838:	da01      	bge.n	800083e <main+0x8a>
        Error_Handler();
 800083a:	f000 f9ff 	bl	8000c3c <Error_Handler>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800083e:	f000 f937 	bl	8000ab0 <MX_GPIO_Init>
    MX_USART3_UART_Init();
 8000842:	f000 f8e9 	bl	8000a18 <MX_USART3_UART_Init>

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    HAL_UART_Transmit(&huart3, (uint8_t *)"Hello World !\r\n", sizeof("Hello World !\r\n") - 1, HAL_MAX_DELAY);
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	220f      	movs	r2, #15
 800084c:	4921      	ldr	r1, [pc, #132]	; (80008d4 <main+0x120>)
 800084e:	4822      	ldr	r0, [pc, #136]	; (80008d8 <main+0x124>)
 8000850:	f003 f984 	bl	8003b5c <HAL_UART_Transmit>
    uint32_t expected_tick = HAL_GetTick() + 1000;
 8000854:	f000 fb6a 	bl	8000f2c <HAL_GetTick>
 8000858:	4603      	mov	r3, r0
 800085a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800085e:	613b      	str	r3, [r7, #16]
    uint32_t sec = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
    uint32_t nbytes;
    while (1) {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        if (HAL_OK == HAL_UART_Receive(&huart3, &rb, 1, 100)) {
 8000864:	1df9      	adds	r1, r7, #7
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	2201      	movs	r2, #1
 800086a:	481b      	ldr	r0, [pc, #108]	; (80008d8 <main+0x124>)
 800086c:	f003 fa0c 	bl	8003c88 <HAL_UART_Receive>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10e      	bne.n	8000894 <main+0xe0>
            expected_tick = HAL_GetTick() + 1000;
 8000876:	f000 fb59 	bl	8000f2c <HAL_GetTick>
 800087a:	4603      	mov	r3, r0
 800087c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000880:	613b      	str	r3, [r7, #16]
            sec = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
            /*nbytes = snprintf(snprintf_buf, sizeof(snprintf_buf), "TIME RESET %c !\r\n", rb);
             HAL_UART_Transmit(&huart3, (uint8_t*)snprintf_buf, nbytes, HAL_MAX_DELAY);*/
            HAL_UART_Transmit(&huart3, (uint8_t *)"TIME RESET\r\n", sizeof("TIME RESET\r\n") - 1, HAL_MAX_DELAY);
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
 800088a:	220c      	movs	r2, #12
 800088c:	4913      	ldr	r1, [pc, #76]	; (80008dc <main+0x128>)
 800088e:	4812      	ldr	r0, [pc, #72]	; (80008d8 <main+0x124>)
 8000890:	f003 f964 	bl	8003b5c <HAL_UART_Transmit>
        }
        if (HAL_GetTick() > expected_tick) {
 8000894:	f000 fb4a 	bl	8000f2c <HAL_GetTick>
 8000898:	4602      	mov	r2, r0
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	4293      	cmp	r3, r2
 800089e:	d2e1      	bcs.n	8000864 <main+0xb0>
            sec++;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	3301      	adds	r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
            nbytes = snprintf(snprintf_buf, sizeof(snprintf_buf), "This program runs since %lu seconds ago\r\n", sec);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <main+0x12c>)
 80008aa:	2180      	movs	r1, #128	; 0x80
 80008ac:	480d      	ldr	r0, [pc, #52]	; (80008e4 <main+0x130>)
 80008ae:	f004 fb25 	bl	8004efc <sniprintf>
 80008b2:	4603      	mov	r3, r0
 80008b4:	60bb      	str	r3, [r7, #8]
            HAL_UART_Transmit(&huart3, (uint8_t *)snprintf_buf, nbytes, HAL_MAX_DELAY);
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
 80008be:	4909      	ldr	r1, [pc, #36]	; (80008e4 <main+0x130>)
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <main+0x124>)
 80008c2:	f003 f94b 	bl	8003b5c <HAL_UART_Transmit>
            expected_tick += 1000;
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80008cc:	613b      	str	r3, [r7, #16]
        if (HAL_OK == HAL_UART_Receive(&huart3, &rb, 1, 100)) {
 80008ce:	e7c9      	b.n	8000864 <main+0xb0>
 80008d0:	58024400 	.word	0x58024400
 80008d4:	08005748 	.word	0x08005748
 80008d8:	2000009c 	.word	0x2000009c
 80008dc:	08005758 	.word	0x08005758
 80008e0:	08005768 	.word	0x08005768
 80008e4:	20000128 	.word	0x20000128

080008e8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0cc      	sub	sp, #304	; 0x130
 80008ec:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008f2:	224c      	movs	r2, #76	; 0x4c
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f004 faf8 	bl	8004eec <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000900:	2220      	movs	r2, #32
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f004 faf1 	bl	8004eec <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	4618      	mov	r0, r3
 8000910:	23bc      	movs	r3, #188	; 0xbc
 8000912:	461a      	mov	r2, r3
 8000914:	2100      	movs	r1, #0
 8000916:	f004 fae9 	bl	8004eec <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800091a:	2004      	movs	r0, #4
 800091c:	f000 fde0 	bl	80014e0 <HAL_PWREx_ConfigSupply>
    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <SystemClock_Config+0x128>)
 8000928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092a:	4a39      	ldr	r2, [pc, #228]	; (8000a10 <SystemClock_Config+0x128>)
 800092c:	f023 0301 	bic.w	r3, r3, #1
 8000930:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000932:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <SystemClock_Config+0x128>)
 8000934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000936:	f003 0201 	and.w	r2, r3, #1
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	4b35      	ldr	r3, [pc, #212]	; (8000a14 <SystemClock_Config+0x12c>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000946:	4a33      	ldr	r2, [pc, #204]	; (8000a14 <SystemClock_Config+0x12c>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094c:	6193      	str	r3, [r2, #24]
 800094e:	4b31      	ldr	r3, [pc, #196]	; (8000a14 <SystemClock_Config+0x12c>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	681b      	ldr	r3, [r3, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800095e:	bf00      	nop
 8000960:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <SystemClock_Config+0x12c>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800096c:	d1f8      	bne.n	8000960 <SystemClock_Config+0x78>
    }
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800096e:	2302      	movs	r3, #2
 8000970:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000974:	2301      	movs	r3, #1
 8000976:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097a:	2340      	movs	r3, #64	; 0x40
 800097c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000980:	2300      	movs	r3, #0
 8000982:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000986:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fe02 	bl	8001594 <HAL_RCC_OscConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xb2>
        Error_Handler();
 8000996:	f000 f951 	bl	8000c3c <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 800099a:	233f      	movs	r3, #63	; 0x3f
 800099c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80009ca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 f9ef 	bl	8001db4 <HAL_RCC_ClockConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0xf8>
        Error_Handler();
 80009dc:	f000 f92e 	bl	8000c3c <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	2202      	movs	r2, #2
 80009e6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	2200      	movs	r2, #0
 80009ee:	675a      	str	r2, [r3, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fd61 	bl	80024bc <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x11c>
        Error_Handler();
 8000a00:	f000 f91c 	bl	8000c3c <Error_Handler>
    }
}
 8000a04:	bf00      	nop
 8000a06:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	58000400 	.word	0x58000400
 8000a14:	58024800 	.word	0x58024800

08000a18 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
    /* USER CODE END USART3_Init 0 */

    /* USER CODE BEGIN USART3_Init 1 */

    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a1e:	4a23      	ldr	r2, [pc, #140]	; (8000aac <MX_USART3_UART_Init+0x94>)
 8000a20:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 8000a22:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
    huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a62:	f003 f82b 	bl	8003abc <HAL_UART_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_USART3_UART_Init+0x58>
        Error_Handler();
 8000a6c:	f000 f8e6 	bl	8000c3c <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000a70:	2100      	movs	r1, #0
 8000a72:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a74:	f004 f92b 	bl	8004cce <HAL_UARTEx_SetTxFifoThreshold>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART3_UART_Init+0x6a>
        Error_Handler();
 8000a7e:	f000 f8dd 	bl	8000c3c <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000a82:	2100      	movs	r1, #0
 8000a84:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a86:	f004 f960 	bl	8004d4a <HAL_UARTEx_SetRxFifoThreshold>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_USART3_UART_Init+0x7c>
        Error_Handler();
 8000a90:	f000 f8d4 	bl	8000c3c <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a96:	f004 f8e1 	bl	8004c5c <HAL_UARTEx_DisableFifoMode>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_USART3_UART_Init+0x8c>
        Error_Handler();
 8000aa0:	f000 f8cc 	bl	8000c3c <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000009c 	.word	0x2000009c
 8000aac:	40004800 	.word	0x40004800

08000ab0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08c      	sub	sp, #48	; 0x30
 8000ab4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	4b58      	ldr	r3, [pc, #352]	; (8000c28 <MX_GPIO_Init+0x178>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	4a56      	ldr	r2, [pc, #344]	; (8000c28 <MX_GPIO_Init+0x178>)
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad6:	4b54      	ldr	r3, [pc, #336]	; (8000c28 <MX_GPIO_Init+0x178>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae4:	4b50      	ldr	r3, [pc, #320]	; (8000c28 <MX_GPIO_Init+0x178>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	4a4f      	ldr	r2, [pc, #316]	; (8000c28 <MX_GPIO_Init+0x178>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af4:	4b4c      	ldr	r3, [pc, #304]	; (8000c28 <MX_GPIO_Init+0x178>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b49      	ldr	r3, [pc, #292]	; (8000c28 <MX_GPIO_Init+0x178>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	4a47      	ldr	r2, [pc, #284]	; (8000c28 <MX_GPIO_Init+0x178>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b12:	4b45      	ldr	r3, [pc, #276]	; (8000c28 <MX_GPIO_Init+0x178>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b20:	4b41      	ldr	r3, [pc, #260]	; (8000c28 <MX_GPIO_Init+0x178>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b26:	4a40      	ldr	r2, [pc, #256]	; (8000c28 <MX_GPIO_Init+0x178>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b30:	4b3d      	ldr	r3, [pc, #244]	; (8000c28 <MX_GPIO_Init+0x178>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3e:	4b3a      	ldr	r3, [pc, #232]	; (8000c28 <MX_GPIO_Init+0x178>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	4a38      	ldr	r2, [pc, #224]	; (8000c28 <MX_GPIO_Init+0x178>)
 8000b46:	f043 0308 	orr.w	r3, r3, #8
 8000b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4e:	4b36      	ldr	r3, [pc, #216]	; (8000c28 <MX_GPIO_Init+0x178>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	f003 0308 	and.w	r3, r3, #8
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5c:	4b32      	ldr	r3, [pc, #200]	; (8000c28 <MX_GPIO_Init+0x178>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	4a31      	ldr	r2, [pc, #196]	; (8000c28 <MX_GPIO_Init+0x178>)
 8000b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6c:	4b2e      	ldr	r3, [pc, #184]	; (8000c28 <MX_GPIO_Init+0x178>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pins : PC1 PC4 PC5 */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000b7a:	2332      	movs	r3, #50	; 0x32
 8000b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8a:	230b      	movs	r3, #11
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	4825      	ldr	r0, [pc, #148]	; (8000c2c <MX_GPIO_Init+0x17c>)
 8000b96:	f000 fac5 	bl	8001124 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA1 PA2 PA7 */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000b9a:	2386      	movs	r3, #134	; 0x86
 8000b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000baa:	230b      	movs	r3, #11
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	481e      	ldr	r0, [pc, #120]	; (8000c30 <MX_GPIO_Init+0x180>)
 8000bb6:	f000 fab5 	bl	8001124 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB13 */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bcc:	230b      	movs	r3, #11
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4817      	ldr	r0, [pc, #92]	; (8000c34 <MX_GPIO_Init+0x184>)
 8000bd8:	f000 faa4 	bl	8001124 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA8 PA11 PA12 */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12;
 8000bdc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bee:	230a      	movs	r3, #10
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <MX_GPIO_Init+0x180>)
 8000bfa:	f000 fa93 	bl	8001124 <HAL_GPIO_Init>

    /*Configure GPIO pins : PG11 PG13 */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8000bfe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c10:	230b      	movs	r3, #11
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4807      	ldr	r0, [pc, #28]	; (8000c38 <MX_GPIO_Init+0x188>)
 8000c1c:	f000 fa82 	bl	8001124 <HAL_GPIO_Init>
}
 8000c20:	bf00      	nop
 8000c22:	3730      	adds	r7, #48	; 0x30
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	58024400 	.word	0x58024400
 8000c2c:	58020800 	.word	0x58020800
 8000c30:	58020000 	.word	0x58020000
 8000c34:	58020400 	.word	0x58020400
 8000c38:	58021800 	.word	0x58021800

08000c3c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000c42:	e7fe      	b.n	8000c42 <Error_Handler+0x6>

08000c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_MspInit+0x30>)
 8000c4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c50:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_MspInit+0x30>)
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_MspInit+0x30>)
 8000c5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c60:	f003 0302 	and.w	r3, r3, #2
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	58024400 	.word	0x58024400

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a1a      	ldr	r2, [pc, #104]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d12e      	bne.n	8000cf8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <HAL_UART_MspInit+0x8c>)
 8000c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ca0:	4a18      	ldr	r2, [pc, #96]	; (8000d04 <HAL_UART_MspInit+0x8c>)
 8000ca2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <HAL_UART_MspInit+0x8c>)
 8000cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_UART_MspInit+0x8c>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	4a11      	ldr	r2, [pc, #68]	; (8000d04 <HAL_UART_MspInit+0x8c>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_UART_MspInit+0x8c>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000cd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce8:	2307      	movs	r3, #7
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <HAL_UART_MspInit+0x90>)
 8000cf4:	f000 fa16 	bl	8001124 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cf8:	bf00      	nop
 8000cfa:	3728      	adds	r7, #40	; 0x28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40004800 	.word	0x40004800
 8000d04:	58024400 	.word	0x58024400
 8000d08:	58020c00 	.word	0x58020c00

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <NMI_Handler+0x4>

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>

08000d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d58:	f000 f8d4 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d90:	f004 f882 	bl	8004e98 <__errno>
 8000d94:	4602      	mov	r2, r0
 8000d96:	230c      	movs	r3, #12
 8000d98:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <_sbrk+0x64>)
 8000db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20020000 	.word	0x20020000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	20000090 	.word	0x20000090
 8000dc8:	200001b0 	.word	0x200001b0

08000dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e04 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dd0:	f7ff fc56 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dd6:	e003      	b.n	8000de0 <LoopCopyDataInit>

08000dd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000dda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ddc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dde:	3104      	adds	r1, #4

08000de0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000de0:	480a      	ldr	r0, [pc, #40]	; (8000e0c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000de4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000de6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000de8:	d3f6      	bcc.n	8000dd8 <CopyDataInit>
  ldr  r2, =_sbss
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000dec:	e002      	b.n	8000df4 <LoopFillZerobss>

08000dee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000df0:	f842 3b04 	str.w	r3, [r2], #4

08000df4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000df6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000df8:	d3f9      	bcc.n	8000dee <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f004 f853 	bl	8004ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfe:	f7ff fcd9 	bl	80007b4 <main>
  bx  lr    
 8000e02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e08:	08005810 	.word	0x08005810
  ldr  r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e10:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000e14:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000e18:	200001b0 	.word	0x200001b0

08000e1c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC3_IRQHandler>
	...

08000e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e26:	2003      	movs	r0, #3
 8000e28:	f000 f94a 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e2c:	f001 f978 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 8000e30:	4601      	mov	r1, r0
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_Init+0x68>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	0a1b      	lsrs	r3, r3, #8
 8000e38:	f003 030f 	and.w	r3, r3, #15
 8000e3c:	4a13      	ldr	r2, [pc, #76]	; (8000e8c <HAL_Init+0x6c>)
 8000e3e:	5cd3      	ldrb	r3, [r2, r3]
 8000e40:	f003 031f 	and.w	r3, r3, #31
 8000e44:	fa21 f303 	lsr.w	r3, r1, r3
 8000e48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_Init+0x68>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <HAL_Init+0x6c>)
 8000e54:	5cd3      	ldrb	r3, [r2, r3]
 8000e56:	f003 031f 	and.w	r3, r3, #31
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e60:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <HAL_Init+0x70>)
 8000e62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e64:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <HAL_Init+0x74>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f814 	bl	8000e98 <HAL_InitTick>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e002      	b.n	8000e80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7a:	f7ff fee3 	bl	8000c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	58024400 	.word	0x58024400
 8000e8c:	080057a4 	.word	0x080057a4
 8000e90:	20000004 	.word	0x20000004
 8000e94:	20000000 	.word	0x20000000

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_InitTick+0x60>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e021      	b.n	8000ef0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <HAL_InitTick+0x64>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_InitTick+0x60>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f921 	bl	800110a <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00e      	b.n	8000ef0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d80a      	bhi.n	8000eee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f000 f8f9 	bl	80010d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <HAL_InitTick+0x68>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000000c 	.word	0x2000000c
 8000efc:	20000000 	.word	0x20000000
 8000f00:	20000008 	.word	0x20000008

08000f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x20>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x24>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_IncTick+0x24>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	2000000c 	.word	0x2000000c
 8000f28:	200001a8 	.word	0x200001a8

08000f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <HAL_GetTick+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	200001a8 	.word	0x200001a8

08000f44 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetREVID+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	0c1b      	lsrs	r3, r3, #16
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	5c001000 	.word	0x5c001000

08000f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <__NVIC_SetPriorityGrouping+0x40>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	4313      	orrs	r3, r2
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <__NVIC_SetPriorityGrouping+0x40>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00
 8000fa0:	05fa0000 	.word	0x05fa0000

08000fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <__NVIC_GetPriorityGrouping+0x18>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	f003 0307 	and.w	r3, r3, #7
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f7ff ff8e 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff47 	bl	8000f5c <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff5e 	bl	8000fa4 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff90 	bl	8001014 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5f 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffb2 	bl	800107c <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001132:	4b89      	ldr	r3, [pc, #548]	; (8001358 <HAL_GPIO_Init+0x234>)
 8001134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001136:	e194      	b.n	8001462 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2101      	movs	r1, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa01 f303 	lsl.w	r3, r1, r3
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8186 	beq.w	800145c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d00b      	beq.n	8001170 <HAL_GPIO_Init+0x4c>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d007      	beq.n	8001170 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001164:	2b11      	cmp	r3, #17
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b12      	cmp	r3, #18
 800116e:	d130      	bne.n	80011d2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011a6:	2201      	movs	r2, #1
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	091b      	lsrs	r3, r3, #4
 80011bc:	f003 0201 	and.w	r2, r3, #1
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0xee>
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b12      	cmp	r3, #18
 8001210:	d123      	bne.n	800125a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	08da      	lsrs	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3208      	adds	r2, #8
 800121a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	220f      	movs	r2, #15
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	691a      	ldr	r2, [r3, #16]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	08da      	lsrs	r2, r3, #3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3208      	adds	r2, #8
 8001254:	69b9      	ldr	r1, [r7, #24]
 8001256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	2203      	movs	r2, #3
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0203 	and.w	r2, r3, #3
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 80e0 	beq.w	800145c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129c:	4b2f      	ldr	r3, [pc, #188]	; (800135c <HAL_GPIO_Init+0x238>)
 800129e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012a2:	4a2e      	ldr	r2, [pc, #184]	; (800135c <HAL_GPIO_Init+0x238>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012ac:	4b2b      	ldr	r3, [pc, #172]	; (800135c <HAL_GPIO_Init+0x238>)
 80012ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ba:	4a29      	ldr	r2, [pc, #164]	; (8001360 <HAL_GPIO_Init+0x23c>)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3302      	adds	r3, #2
 80012c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a20      	ldr	r2, [pc, #128]	; (8001364 <HAL_GPIO_Init+0x240>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d052      	beq.n	800138c <HAL_GPIO_Init+0x268>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a1f      	ldr	r2, [pc, #124]	; (8001368 <HAL_GPIO_Init+0x244>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d031      	beq.n	8001352 <HAL_GPIO_Init+0x22e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a1e      	ldr	r2, [pc, #120]	; (800136c <HAL_GPIO_Init+0x248>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d02b      	beq.n	800134e <HAL_GPIO_Init+0x22a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a1d      	ldr	r2, [pc, #116]	; (8001370 <HAL_GPIO_Init+0x24c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d025      	beq.n	800134a <HAL_GPIO_Init+0x226>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <HAL_GPIO_Init+0x250>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d01f      	beq.n	8001346 <HAL_GPIO_Init+0x222>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <HAL_GPIO_Init+0x254>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d019      	beq.n	8001342 <HAL_GPIO_Init+0x21e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a1a      	ldr	r2, [pc, #104]	; (800137c <HAL_GPIO_Init+0x258>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d013      	beq.n	800133e <HAL_GPIO_Init+0x21a>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a19      	ldr	r2, [pc, #100]	; (8001380 <HAL_GPIO_Init+0x25c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d00d      	beq.n	800133a <HAL_GPIO_Init+0x216>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a18      	ldr	r2, [pc, #96]	; (8001384 <HAL_GPIO_Init+0x260>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d007      	beq.n	8001336 <HAL_GPIO_Init+0x212>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a17      	ldr	r2, [pc, #92]	; (8001388 <HAL_GPIO_Init+0x264>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <HAL_GPIO_Init+0x20e>
 800132e:	2309      	movs	r3, #9
 8001330:	e02d      	b.n	800138e <HAL_GPIO_Init+0x26a>
 8001332:	230a      	movs	r3, #10
 8001334:	e02b      	b.n	800138e <HAL_GPIO_Init+0x26a>
 8001336:	2308      	movs	r3, #8
 8001338:	e029      	b.n	800138e <HAL_GPIO_Init+0x26a>
 800133a:	2307      	movs	r3, #7
 800133c:	e027      	b.n	800138e <HAL_GPIO_Init+0x26a>
 800133e:	2306      	movs	r3, #6
 8001340:	e025      	b.n	800138e <HAL_GPIO_Init+0x26a>
 8001342:	2305      	movs	r3, #5
 8001344:	e023      	b.n	800138e <HAL_GPIO_Init+0x26a>
 8001346:	2304      	movs	r3, #4
 8001348:	e021      	b.n	800138e <HAL_GPIO_Init+0x26a>
 800134a:	2303      	movs	r3, #3
 800134c:	e01f      	b.n	800138e <HAL_GPIO_Init+0x26a>
 800134e:	2302      	movs	r3, #2
 8001350:	e01d      	b.n	800138e <HAL_GPIO_Init+0x26a>
 8001352:	2301      	movs	r3, #1
 8001354:	e01b      	b.n	800138e <HAL_GPIO_Init+0x26a>
 8001356:	bf00      	nop
 8001358:	58000080 	.word	0x58000080
 800135c:	58024400 	.word	0x58024400
 8001360:	58000400 	.word	0x58000400
 8001364:	58020000 	.word	0x58020000
 8001368:	58020400 	.word	0x58020400
 800136c:	58020800 	.word	0x58020800
 8001370:	58020c00 	.word	0x58020c00
 8001374:	58021000 	.word	0x58021000
 8001378:	58021400 	.word	0x58021400
 800137c:	58021800 	.word	0x58021800
 8001380:	58021c00 	.word	0x58021c00
 8001384:	58022000 	.word	0x58022000
 8001388:	58022400 	.word	0x58022400
 800138c:	2300      	movs	r3, #0
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	f002 0203 	and.w	r2, r2, #3
 8001394:	0092      	lsls	r2, r2, #2
 8001396:	4093      	lsls	r3, r2
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800139e:	4938      	ldr	r1, [pc, #224]	; (8001480 <HAL_GPIO_Init+0x35c>)
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	3302      	adds	r3, #2
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800142e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	3301      	adds	r3, #1
 8001460:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa22 f303 	lsr.w	r3, r2, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	f47f ae63 	bne.w	8001138 <HAL_GPIO_Init+0x14>
  }
}
 8001472:	bf00      	nop
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	58000400 	.word	0x58000400

08001484 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800148c:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_HSEM_FastTake+0x2c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3320      	adds	r3, #32
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_HSEM_FastTake+0x30>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d101      	bne.n	80014a0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	e000      	b.n	80014a2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	58026400 	.word	0x58026400
 80014b4:	80000300 	.word	0x80000300

080014b8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80014c2:	4906      	ldr	r1, [pc, #24]	; (80014dc <HAL_HSEM_Release+0x24>)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	58026400 	.word	0x58026400

080014e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80014e8:	4b29      	ldr	r3, [pc, #164]	; (8001590 <HAL_PWREx_ConfigSupply+0xb0>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	2b06      	cmp	r3, #6
 80014f2:	d00a      	beq.n	800150a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80014f4:	4b26      	ldr	r3, [pc, #152]	; (8001590 <HAL_PWREx_ConfigSupply+0xb0>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d001      	beq.n	8001506 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e040      	b.n	8001588 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e03e      	b.n	8001588 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <HAL_PWREx_ConfigSupply+0xb0>)
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001512:	491f      	ldr	r1, [pc, #124]	; (8001590 <HAL_PWREx_ConfigSupply+0xb0>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4313      	orrs	r3, r2
 8001518:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800151a:	f7ff fd07 	bl	8000f2c <HAL_GetTick>
 800151e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001520:	e009      	b.n	8001536 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001522:	f7ff fd03 	bl	8000f2c <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001530:	d901      	bls.n	8001536 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e028      	b.n	8001588 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_PWREx_ConfigSupply+0xb0>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800153e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001542:	d1ee      	bne.n	8001522 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b1e      	cmp	r3, #30
 8001548:	d008      	beq.n	800155c <HAL_PWREx_ConfigSupply+0x7c>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b2e      	cmp	r3, #46	; 0x2e
 800154e:	d005      	beq.n	800155c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b1d      	cmp	r3, #29
 8001554:	d002      	beq.n	800155c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b2d      	cmp	r3, #45	; 0x2d
 800155a:	d114      	bne.n	8001586 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800155c:	f7ff fce6 	bl	8000f2c <HAL_GetTick>
 8001560:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001562:	e009      	b.n	8001578 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001564:	f7ff fce2 	bl	8000f2c <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001572:	d901      	bls.n	8001578 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e007      	b.n	8001588 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_PWREx_ConfigSupply+0xb0>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001584:	d1ee      	bne.n	8001564 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	58024800 	.word	0x58024800

08001594 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	; 0x30
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e3ff      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 8087 	beq.w	80016c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b4:	4b99      	ldr	r3, [pc, #612]	; (800181c <HAL_RCC_OscConfig+0x288>)
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015be:	4b97      	ldr	r3, [pc, #604]	; (800181c <HAL_RCC_OscConfig+0x288>)
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80015c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c6:	2b10      	cmp	r3, #16
 80015c8:	d007      	beq.n	80015da <HAL_RCC_OscConfig+0x46>
 80015ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015cc:	2b18      	cmp	r3, #24
 80015ce:	d110      	bne.n	80015f2 <HAL_RCC_OscConfig+0x5e>
 80015d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d10b      	bne.n	80015f2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015da:	4b90      	ldr	r3, [pc, #576]	; (800181c <HAL_RCC_OscConfig+0x288>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d06c      	beq.n	80016c0 <HAL_RCC_OscConfig+0x12c>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d168      	bne.n	80016c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e3d9      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fa:	d106      	bne.n	800160a <HAL_RCC_OscConfig+0x76>
 80015fc:	4b87      	ldr	r3, [pc, #540]	; (800181c <HAL_RCC_OscConfig+0x288>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a86      	ldr	r2, [pc, #536]	; (800181c <HAL_RCC_OscConfig+0x288>)
 8001602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	e02e      	b.n	8001668 <HAL_RCC_OscConfig+0xd4>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x98>
 8001612:	4b82      	ldr	r3, [pc, #520]	; (800181c <HAL_RCC_OscConfig+0x288>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a81      	ldr	r2, [pc, #516]	; (800181c <HAL_RCC_OscConfig+0x288>)
 8001618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4b7f      	ldr	r3, [pc, #508]	; (800181c <HAL_RCC_OscConfig+0x288>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a7e      	ldr	r2, [pc, #504]	; (800181c <HAL_RCC_OscConfig+0x288>)
 8001624:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e01d      	b.n	8001668 <HAL_RCC_OscConfig+0xd4>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0xbc>
 8001636:	4b79      	ldr	r3, [pc, #484]	; (800181c <HAL_RCC_OscConfig+0x288>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a78      	ldr	r2, [pc, #480]	; (800181c <HAL_RCC_OscConfig+0x288>)
 800163c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b76      	ldr	r3, [pc, #472]	; (800181c <HAL_RCC_OscConfig+0x288>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a75      	ldr	r2, [pc, #468]	; (800181c <HAL_RCC_OscConfig+0x288>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e00b      	b.n	8001668 <HAL_RCC_OscConfig+0xd4>
 8001650:	4b72      	ldr	r3, [pc, #456]	; (800181c <HAL_RCC_OscConfig+0x288>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a71      	ldr	r2, [pc, #452]	; (800181c <HAL_RCC_OscConfig+0x288>)
 8001656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b6f      	ldr	r3, [pc, #444]	; (800181c <HAL_RCC_OscConfig+0x288>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a6e      	ldr	r2, [pc, #440]	; (800181c <HAL_RCC_OscConfig+0x288>)
 8001662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d013      	beq.n	8001698 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fc5c 	bl	8000f2c <HAL_GetTick>
 8001674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff fc58 	bl	8000f2c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e38d      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800168a:	4b64      	ldr	r3, [pc, #400]	; (800181c <HAL_RCC_OscConfig+0x288>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0xe4>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff fc48 	bl	8000f2c <HAL_GetTick>
 800169c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fc44 	bl	8000f2c <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e379      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016b2:	4b5a      	ldr	r3, [pc, #360]	; (800181c <HAL_RCC_OscConfig+0x288>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x10c>
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 80ae 	beq.w	800182c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d0:	4b52      	ldr	r3, [pc, #328]	; (800181c <HAL_RCC_OscConfig+0x288>)
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016da:	4b50      	ldr	r3, [pc, #320]	; (800181c <HAL_RCC_OscConfig+0x288>)
 80016dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016de:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d007      	beq.n	80016f6 <HAL_RCC_OscConfig+0x162>
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	2b18      	cmp	r3, #24
 80016ea:	d13a      	bne.n	8001762 <HAL_RCC_OscConfig+0x1ce>
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d135      	bne.n	8001762 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f6:	4b49      	ldr	r3, [pc, #292]	; (800181c <HAL_RCC_OscConfig+0x288>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_RCC_OscConfig+0x17a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e34b      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170e:	f7ff fc19 	bl	8000f44 <HAL_GetREVID>
 8001712:	4602      	mov	r2, r0
 8001714:	f241 0303 	movw	r3, #4099	; 0x1003
 8001718:	429a      	cmp	r2, r3
 800171a:	d817      	bhi.n	800174c <HAL_RCC_OscConfig+0x1b8>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	2b40      	cmp	r3, #64	; 0x40
 8001722:	d108      	bne.n	8001736 <HAL_RCC_OscConfig+0x1a2>
 8001724:	4b3d      	ldr	r3, [pc, #244]	; (800181c <HAL_RCC_OscConfig+0x288>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800172c:	4a3b      	ldr	r2, [pc, #236]	; (800181c <HAL_RCC_OscConfig+0x288>)
 800172e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001732:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001734:	e07a      	b.n	800182c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001736:	4b39      	ldr	r3, [pc, #228]	; (800181c <HAL_RCC_OscConfig+0x288>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	031b      	lsls	r3, r3, #12
 8001744:	4935      	ldr	r1, [pc, #212]	; (800181c <HAL_RCC_OscConfig+0x288>)
 8001746:	4313      	orrs	r3, r2
 8001748:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800174a:	e06f      	b.n	800182c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174c:	4b33      	ldr	r3, [pc, #204]	; (800181c <HAL_RCC_OscConfig+0x288>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	061b      	lsls	r3, r3, #24
 800175a:	4930      	ldr	r1, [pc, #192]	; (800181c <HAL_RCC_OscConfig+0x288>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001760:	e064      	b.n	800182c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d045      	beq.n	80017f6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800176a:	4b2c      	ldr	r3, [pc, #176]	; (800181c <HAL_RCC_OscConfig+0x288>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 0219 	bic.w	r2, r3, #25
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	4929      	ldr	r1, [pc, #164]	; (800181c <HAL_RCC_OscConfig+0x288>)
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff fbd6 	bl	8000f2c <HAL_GetTick>
 8001780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001784:	f7ff fbd2 	bl	8000f2c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e307      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <HAL_RCC_OscConfig+0x288>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a2:	f7ff fbcf 	bl	8000f44 <HAL_GetREVID>
 80017a6:	4602      	mov	r2, r0
 80017a8:	f241 0303 	movw	r3, #4099	; 0x1003
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d817      	bhi.n	80017e0 <HAL_RCC_OscConfig+0x24c>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	2b40      	cmp	r3, #64	; 0x40
 80017b6:	d108      	bne.n	80017ca <HAL_RCC_OscConfig+0x236>
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <HAL_RCC_OscConfig+0x288>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80017c0:	4a16      	ldr	r2, [pc, #88]	; (800181c <HAL_RCC_OscConfig+0x288>)
 80017c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c6:	6053      	str	r3, [r2, #4]
 80017c8:	e030      	b.n	800182c <HAL_RCC_OscConfig+0x298>
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_RCC_OscConfig+0x288>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	031b      	lsls	r3, r3, #12
 80017d8:	4910      	ldr	r1, [pc, #64]	; (800181c <HAL_RCC_OscConfig+0x288>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	604b      	str	r3, [r1, #4]
 80017de:	e025      	b.n	800182c <HAL_RCC_OscConfig+0x298>
 80017e0:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_RCC_OscConfig+0x288>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	061b      	lsls	r3, r3, #24
 80017ee:	490b      	ldr	r1, [pc, #44]	; (800181c <HAL_RCC_OscConfig+0x288>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
 80017f4:	e01a      	b.n	800182c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_RCC_OscConfig+0x288>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <HAL_RCC_OscConfig+0x288>)
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001802:	f7ff fb93 	bl	8000f2c <HAL_GetTick>
 8001806:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001808:	e00a      	b.n	8001820 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800180a:	f7ff fb8f 	bl	8000f2c <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d903      	bls.n	8001820 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e2c4      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
 800181c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001820:	4ba4      	ldr	r3, [pc, #656]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1ee      	bne.n	800180a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 80a9 	beq.w	800198c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800183a:	4b9e      	ldr	r3, [pc, #632]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001842:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001844:	4b9b      	ldr	r3, [pc, #620]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	2b08      	cmp	r3, #8
 800184e:	d007      	beq.n	8001860 <HAL_RCC_OscConfig+0x2cc>
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2b18      	cmp	r3, #24
 8001854:	d13a      	bne.n	80018cc <HAL_RCC_OscConfig+0x338>
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b01      	cmp	r3, #1
 800185e:	d135      	bne.n	80018cc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001860:	4b94      	ldr	r3, [pc, #592]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_RCC_OscConfig+0x2e4>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	2b80      	cmp	r3, #128	; 0x80
 8001872:	d001      	beq.n	8001878 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e296      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001878:	f7ff fb64 	bl	8000f44 <HAL_GetREVID>
 800187c:	4602      	mov	r2, r0
 800187e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001882:	429a      	cmp	r2, r3
 8001884:	d817      	bhi.n	80018b6 <HAL_RCC_OscConfig+0x322>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	2b20      	cmp	r3, #32
 800188c:	d108      	bne.n	80018a0 <HAL_RCC_OscConfig+0x30c>
 800188e:	4b89      	ldr	r3, [pc, #548]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001896:	4a87      	ldr	r2, [pc, #540]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 8001898:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800189c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800189e:	e075      	b.n	800198c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018a0:	4b84      	ldr	r3, [pc, #528]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	069b      	lsls	r3, r3, #26
 80018ae:	4981      	ldr	r1, [pc, #516]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018b4:	e06a      	b.n	800198c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018b6:	4b7f      	ldr	r3, [pc, #508]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	061b      	lsls	r3, r3, #24
 80018c4:	497b      	ldr	r1, [pc, #492]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018ca:	e05f      	b.n	800198c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d042      	beq.n	800195a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80018d4:	4b77      	ldr	r3, [pc, #476]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a76      	ldr	r2, [pc, #472]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 80018da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff fb24 	bl	8000f2c <HAL_GetTick>
 80018e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80018e8:	f7ff fb20 	bl	8000f2c <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e255      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018fa:	4b6e      	ldr	r3, [pc, #440]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001906:	f7ff fb1d 	bl	8000f44 <HAL_GetREVID>
 800190a:	4602      	mov	r2, r0
 800190c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001910:	429a      	cmp	r2, r3
 8001912:	d817      	bhi.n	8001944 <HAL_RCC_OscConfig+0x3b0>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	2b20      	cmp	r3, #32
 800191a:	d108      	bne.n	800192e <HAL_RCC_OscConfig+0x39a>
 800191c:	4b65      	ldr	r3, [pc, #404]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001924:	4a63      	ldr	r2, [pc, #396]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 8001926:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800192a:	6053      	str	r3, [r2, #4]
 800192c:	e02e      	b.n	800198c <HAL_RCC_OscConfig+0x3f8>
 800192e:	4b61      	ldr	r3, [pc, #388]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	069b      	lsls	r3, r3, #26
 800193c:	495d      	ldr	r1, [pc, #372]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 800193e:	4313      	orrs	r3, r2
 8001940:	604b      	str	r3, [r1, #4]
 8001942:	e023      	b.n	800198c <HAL_RCC_OscConfig+0x3f8>
 8001944:	4b5b      	ldr	r3, [pc, #364]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	061b      	lsls	r3, r3, #24
 8001952:	4958      	ldr	r1, [pc, #352]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 8001954:	4313      	orrs	r3, r2
 8001956:	60cb      	str	r3, [r1, #12]
 8001958:	e018      	b.n	800198c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800195a:	4b56      	ldr	r3, [pc, #344]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a55      	ldr	r2, [pc, #340]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 8001960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001966:	f7ff fae1 	bl	8000f2c <HAL_GetTick>
 800196a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800196e:	f7ff fadd 	bl	8000f2c <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e212      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001980:	4b4c      	ldr	r3, [pc, #304]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f0      	bne.n	800196e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b00      	cmp	r3, #0
 8001996:	d036      	beq.n	8001a06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d019      	beq.n	80019d4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a0:	4b44      	ldr	r3, [pc, #272]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 80019a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019a4:	4a43      	ldr	r2, [pc, #268]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ac:	f7ff fabe 	bl	8000f2c <HAL_GetTick>
 80019b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b4:	f7ff faba 	bl	8000f2c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e1ef      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019c6:	4b3b      	ldr	r3, [pc, #236]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 80019c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x420>
 80019d2:	e018      	b.n	8001a06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d4:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 80019d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d8:	4a36      	ldr	r2, [pc, #216]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e0:	f7ff faa4 	bl	8000f2c <HAL_GetTick>
 80019e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019e8:	f7ff faa0 	bl	8000f2c <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e1d5      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019fa:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 80019fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0320 	and.w	r3, r3, #32
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d036      	beq.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d019      	beq.n	8001a4e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a1a:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a25      	ldr	r2, [pc, #148]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 8001a20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a26:	f7ff fa81 	bl	8000f2c <HAL_GetTick>
 8001a2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a2e:	f7ff fa7d 	bl	8000f2c <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e1b2      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a40:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x49a>
 8001a4c:	e018      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a4e:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a18      	ldr	r2, [pc, #96]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 8001a54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fa67 	bl	8000f2c <HAL_GetTick>
 8001a5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a62:	f7ff fa63 	bl	8000f2c <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e198      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_RCC_OscConfig+0x520>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f0      	bne.n	8001a62 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 8085 	beq.w	8001b98 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_RCC_OscConfig+0x524>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a09      	ldr	r2, [pc, #36]	; (8001ab8 <HAL_RCC_OscConfig+0x524>)
 8001a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a9a:	f7ff fa47 	bl	8000f2c <HAL_GetTick>
 8001a9e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001aa0:	e00c      	b.n	8001abc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001aa2:	f7ff fa43 	bl	8000f2c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b64      	cmp	r3, #100	; 0x64
 8001aae:	d905      	bls.n	8001abc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e178      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
 8001ab4:	58024400 	.word	0x58024400
 8001ab8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001abc:	4b96      	ldr	r3, [pc, #600]	; (8001d18 <HAL_RCC_OscConfig+0x784>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0ec      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d106      	bne.n	8001ade <HAL_RCC_OscConfig+0x54a>
 8001ad0:	4b92      	ldr	r3, [pc, #584]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad4:	4a91      	ldr	r2, [pc, #580]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6713      	str	r3, [r2, #112]	; 0x70
 8001adc:	e02d      	b.n	8001b3a <HAL_RCC_OscConfig+0x5a6>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x56c>
 8001ae6:	4b8d      	ldr	r3, [pc, #564]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aea:	4a8c      	ldr	r2, [pc, #560]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	6713      	str	r3, [r2, #112]	; 0x70
 8001af2:	4b8a      	ldr	r3, [pc, #552]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af6:	4a89      	ldr	r2, [pc, #548]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001af8:	f023 0304 	bic.w	r3, r3, #4
 8001afc:	6713      	str	r3, [r2, #112]	; 0x70
 8001afe:	e01c      	b.n	8001b3a <HAL_RCC_OscConfig+0x5a6>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b05      	cmp	r3, #5
 8001b06:	d10c      	bne.n	8001b22 <HAL_RCC_OscConfig+0x58e>
 8001b08:	4b84      	ldr	r3, [pc, #528]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0c:	4a83      	ldr	r2, [pc, #524]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	6713      	str	r3, [r2, #112]	; 0x70
 8001b14:	4b81      	ldr	r3, [pc, #516]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b18:	4a80      	ldr	r2, [pc, #512]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b20:	e00b      	b.n	8001b3a <HAL_RCC_OscConfig+0x5a6>
 8001b22:	4b7e      	ldr	r3, [pc, #504]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b26:	4a7d      	ldr	r2, [pc, #500]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2e:	4b7b      	ldr	r3, [pc, #492]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b32:	4a7a      	ldr	r2, [pc, #488]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001b34:	f023 0304 	bic.w	r3, r3, #4
 8001b38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d015      	beq.n	8001b6e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b42:	f7ff f9f3 	bl	8000f2c <HAL_GetTick>
 8001b46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7ff f9ef 	bl	8000f2c <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e122      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b60:	4b6e      	ldr	r3, [pc, #440]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0ee      	beq.n	8001b4a <HAL_RCC_OscConfig+0x5b6>
 8001b6c:	e014      	b.n	8001b98 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6e:	f7ff f9dd 	bl	8000f2c <HAL_GetTick>
 8001b72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7ff f9d9 	bl	8000f2c <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e10c      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b8c:	4b63      	ldr	r3, [pc, #396]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1ee      	bne.n	8001b76 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 8101 	beq.w	8001da4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001ba2:	4b5e      	ldr	r3, [pc, #376]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001baa:	2b18      	cmp	r3, #24
 8001bac:	f000 80bc 	beq.w	8001d28 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	f040 8095 	bne.w	8001ce4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bba:	4b58      	ldr	r3, [pc, #352]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a57      	ldr	r2, [pc, #348]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001bc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc6:	f7ff f9b1 	bl	8000f2c <HAL_GetTick>
 8001bca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bce:	f7ff f9ad 	bl	8000f2c <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e0e2      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001be0:	4b4e      	ldr	r3, [pc, #312]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f0      	bne.n	8001bce <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bec:	4b4b      	ldr	r3, [pc, #300]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001bee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bf0:	4b4b      	ldr	r3, [pc, #300]	; (8001d20 <HAL_RCC_OscConfig+0x78c>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	4946      	ldr	r1, [pc, #280]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	628b      	str	r3, [r1, #40]	; 0x28
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c14:	3b01      	subs	r3, #1
 8001c16:	025b      	lsls	r3, r3, #9
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c20:	3b01      	subs	r3, #1
 8001c22:	041b      	lsls	r3, r3, #16
 8001c24:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	061b      	lsls	r3, r3, #24
 8001c32:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c36:	4939      	ldr	r1, [pc, #228]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001c3c:	4b37      	ldr	r3, [pc, #220]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c40:	4a36      	ldr	r2, [pc, #216]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001c42:	f023 0301 	bic.w	r3, r3, #1
 8001c46:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c48:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c4c:	4b35      	ldr	r3, [pc, #212]	; (8001d24 <HAL_RCC_OscConfig+0x790>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c54:	00d2      	lsls	r2, r2, #3
 8001c56:	4931      	ldr	r1, [pc, #196]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c5c:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	f023 020c 	bic.w	r2, r3, #12
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	492c      	ldr	r1, [pc, #176]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c6e:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	f023 0202 	bic.w	r2, r3, #2
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	4928      	ldr	r1, [pc, #160]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c80:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	4a25      	ldr	r2, [pc, #148]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c8c:	4b23      	ldr	r3, [pc, #140]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	4a22      	ldr	r2, [pc, #136]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c98:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	4a1f      	ldr	r2, [pc, #124]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001c9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a19      	ldr	r2, [pc, #100]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7ff f936 	bl	8000f2c <HAL_GetTick>
 8001cc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc4:	f7ff f932 	bl	8000f2c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e067      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x730>
 8001ce2:	e05f      	b.n	8001da4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0c      	ldr	r2, [pc, #48]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff f91c 	bl	8000f2c <HAL_GetTick>
 8001cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf8:	f7ff f918 	bl	8000f2c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e04d      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <HAL_RCC_OscConfig+0x788>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x764>
 8001d16:	e045      	b.n	8001da4 <HAL_RCC_OscConfig+0x810>
 8001d18:	58024800 	.word	0x58024800
 8001d1c:	58024400 	.word	0x58024400
 8001d20:	fffffc0c 	.word	0xfffffc0c
 8001d24:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d28:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <HAL_RCC_OscConfig+0x81c>)
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_RCC_OscConfig+0x81c>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d031      	beq.n	8001da0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	f003 0203 	and.w	r2, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d12a      	bne.n	8001da0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d122      	bne.n	8001da0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d11a      	bne.n	8001da0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	0a5b      	lsrs	r3, r3, #9
 8001d6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d76:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d111      	bne.n	8001da0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	0c1b      	lsrs	r3, r3, #16
 8001d80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d88:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d108      	bne.n	8001da0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	0e1b      	lsrs	r3, r3, #24
 8001d92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3730      	adds	r7, #48	; 0x30
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	58024400 	.word	0x58024400

08001db4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e19c      	b.n	8002102 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b8a      	ldr	r3, [pc, #552]	; (8001ff4 <HAL_RCC_ClockConfig+0x240>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 030f 	and.w	r3, r3, #15
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d910      	bls.n	8001df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b87      	ldr	r3, [pc, #540]	; (8001ff4 <HAL_RCC_ClockConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 020f 	bic.w	r2, r3, #15
 8001dde:	4985      	ldr	r1, [pc, #532]	; (8001ff4 <HAL_RCC_ClockConfig+0x240>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b83      	ldr	r3, [pc, #524]	; (8001ff4 <HAL_RCC_ClockConfig+0x240>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e184      	b.n	8002102 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d010      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	4b7b      	ldr	r3, [pc, #492]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d908      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e14:	4b78      	ldr	r3, [pc, #480]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	4975      	ldr	r1, [pc, #468]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d010      	beq.n	8001e54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	4b70      	ldr	r3, [pc, #448]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d908      	bls.n	8001e54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e42:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	496a      	ldr	r1, [pc, #424]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0310 	and.w	r3, r3, #16
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d010      	beq.n	8001e82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699a      	ldr	r2, [r3, #24]
 8001e64:	4b64      	ldr	r3, [pc, #400]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d908      	bls.n	8001e82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e70:	4b61      	ldr	r3, [pc, #388]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	495e      	ldr	r1, [pc, #376]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0320 	and.w	r3, r3, #32
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d010      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69da      	ldr	r2, [r3, #28]
 8001e92:	4b59      	ldr	r3, [pc, #356]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d908      	bls.n	8001eb0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e9e:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4953      	ldr	r1, [pc, #332]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d010      	beq.n	8001ede <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	4b4d      	ldr	r3, [pc, #308]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d908      	bls.n	8001ede <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ecc:	4b4a      	ldr	r3, [pc, #296]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f023 020f 	bic.w	r2, r3, #15
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4947      	ldr	r1, [pc, #284]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d055      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001eea:	4b43      	ldr	r3, [pc, #268]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	4940      	ldr	r1, [pc, #256]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f04:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d121      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0f6      	b.n	8002102 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d107      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f1c:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d115      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0ea      	b.n	8002102 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d107      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f34:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d109      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0de      	b.n	8002102 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f44:	4b2c      	ldr	r3, [pc, #176]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0d6      	b.n	8002102 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f54:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f023 0207 	bic.w	r2, r3, #7
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4925      	ldr	r1, [pc, #148]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f66:	f7fe ffe1 	bl	8000f2c <HAL_GetTick>
 8001f6a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6c:	e00a      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f6e:	f7fe ffdd 	bl	8000f2c <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e0be      	b.n	8002102 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f84:	4b1c      	ldr	r3, [pc, #112]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d1eb      	bne.n	8001f6e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d010      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d208      	bcs.n	8001fc4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f023 020f 	bic.w	r2, r3, #15
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	490e      	ldr	r1, [pc, #56]	; (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCC_ClockConfig+0x240>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 030f 	and.w	r3, r3, #15
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d214      	bcs.n	8001ffc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <HAL_RCC_ClockConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 020f 	bic.w	r2, r3, #15
 8001fda:	4906      	ldr	r1, [pc, #24]	; (8001ff4 <HAL_RCC_ClockConfig+0x240>)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <HAL_RCC_ClockConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e086      	b.n	8002102 <HAL_RCC_ClockConfig+0x34e>
 8001ff4:	52002000 	.word	0x52002000
 8001ff8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d010      	beq.n	800202a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	4b3f      	ldr	r3, [pc, #252]	; (800210c <HAL_RCC_ClockConfig+0x358>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002014:	429a      	cmp	r2, r3
 8002016:	d208      	bcs.n	800202a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002018:	4b3c      	ldr	r3, [pc, #240]	; (800210c <HAL_RCC_ClockConfig+0x358>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	4939      	ldr	r1, [pc, #228]	; (800210c <HAL_RCC_ClockConfig+0x358>)
 8002026:	4313      	orrs	r3, r2
 8002028:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d010      	beq.n	8002058 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	4b34      	ldr	r3, [pc, #208]	; (800210c <HAL_RCC_ClockConfig+0x358>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002042:	429a      	cmp	r2, r3
 8002044:	d208      	bcs.n	8002058 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002046:	4b31      	ldr	r3, [pc, #196]	; (800210c <HAL_RCC_ClockConfig+0x358>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	492e      	ldr	r1, [pc, #184]	; (800210c <HAL_RCC_ClockConfig+0x358>)
 8002054:	4313      	orrs	r3, r2
 8002056:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	d010      	beq.n	8002086 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699a      	ldr	r2, [r3, #24]
 8002068:	4b28      	ldr	r3, [pc, #160]	; (800210c <HAL_RCC_ClockConfig+0x358>)
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002070:	429a      	cmp	r2, r3
 8002072:	d208      	bcs.n	8002086 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002074:	4b25      	ldr	r3, [pc, #148]	; (800210c <HAL_RCC_ClockConfig+0x358>)
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	4922      	ldr	r1, [pc, #136]	; (800210c <HAL_RCC_ClockConfig+0x358>)
 8002082:	4313      	orrs	r3, r2
 8002084:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	2b00      	cmp	r3, #0
 8002090:	d010      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69da      	ldr	r2, [r3, #28]
 8002096:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HAL_RCC_ClockConfig+0x358>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800209e:	429a      	cmp	r2, r3
 80020a0:	d208      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <HAL_RCC_ClockConfig+0x358>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	4917      	ldr	r1, [pc, #92]	; (800210c <HAL_RCC_ClockConfig+0x358>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020b4:	f000 f834 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80020b8:	4601      	mov	r1, r0
 80020ba:	4b14      	ldr	r3, [pc, #80]	; (800210c <HAL_RCC_ClockConfig+0x358>)
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	0a1b      	lsrs	r3, r3, #8
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	4a12      	ldr	r2, [pc, #72]	; (8002110 <HAL_RCC_ClockConfig+0x35c>)
 80020c6:	5cd3      	ldrb	r3, [r2, r3]
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	fa21 f303 	lsr.w	r3, r1, r3
 80020d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <HAL_RCC_ClockConfig+0x358>)
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	4a0d      	ldr	r2, [pc, #52]	; (8002110 <HAL_RCC_ClockConfig+0x35c>)
 80020dc:	5cd3      	ldrb	r3, [r2, r3]
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
 80020e8:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <HAL_RCC_ClockConfig+0x360>)
 80020ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020ec:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <HAL_RCC_ClockConfig+0x364>)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_RCC_ClockConfig+0x368>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fece 	bl	8000e98 <HAL_InitTick>
 80020fc:	4603      	mov	r3, r0
 80020fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002100:	7bfb      	ldrb	r3, [r7, #15]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	58024400 	.word	0x58024400
 8002110:	080057a4 	.word	0x080057a4
 8002114:	20000004 	.word	0x20000004
 8002118:	20000000 	.word	0x20000000
 800211c:	20000008 	.word	0x20000008

08002120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002126:	4baf      	ldr	r3, [pc, #700]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800212e:	2b18      	cmp	r3, #24
 8002130:	f200 814e 	bhi.w	80023d0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8002134:	a201      	add	r2, pc, #4	; (adr r2, 800213c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213a:	bf00      	nop
 800213c:	080021a1 	.word	0x080021a1
 8002140:	080023d1 	.word	0x080023d1
 8002144:	080023d1 	.word	0x080023d1
 8002148:	080023d1 	.word	0x080023d1
 800214c:	080023d1 	.word	0x080023d1
 8002150:	080023d1 	.word	0x080023d1
 8002154:	080023d1 	.word	0x080023d1
 8002158:	080023d1 	.word	0x080023d1
 800215c:	080021c7 	.word	0x080021c7
 8002160:	080023d1 	.word	0x080023d1
 8002164:	080023d1 	.word	0x080023d1
 8002168:	080023d1 	.word	0x080023d1
 800216c:	080023d1 	.word	0x080023d1
 8002170:	080023d1 	.word	0x080023d1
 8002174:	080023d1 	.word	0x080023d1
 8002178:	080023d1 	.word	0x080023d1
 800217c:	080021cd 	.word	0x080021cd
 8002180:	080023d1 	.word	0x080023d1
 8002184:	080023d1 	.word	0x080023d1
 8002188:	080023d1 	.word	0x080023d1
 800218c:	080023d1 	.word	0x080023d1
 8002190:	080023d1 	.word	0x080023d1
 8002194:	080023d1 	.word	0x080023d1
 8002198:	080023d1 	.word	0x080023d1
 800219c:	080021d3 	.word	0x080021d3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021a0:	4b90      	ldr	r3, [pc, #576]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d009      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80021ac:	4b8d      	ldr	r3, [pc, #564]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	08db      	lsrs	r3, r3, #3
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	4a8c      	ldr	r2, [pc, #560]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80021b8:	fa22 f303 	lsr.w	r3, r2, r3
 80021bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80021be:	e10a      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80021c0:	4b89      	ldr	r3, [pc, #548]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80021c2:	61bb      	str	r3, [r7, #24]
    break;
 80021c4:	e107      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80021c6:	4b89      	ldr	r3, [pc, #548]	; (80023ec <HAL_RCC_GetSysClockFreq+0x2cc>)
 80021c8:	61bb      	str	r3, [r7, #24]
    break;
 80021ca:	e104      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80021cc:	4b88      	ldr	r3, [pc, #544]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80021ce:	61bb      	str	r3, [r7, #24]
    break;
 80021d0:	e101      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021d2:	4b84      	ldr	r3, [pc, #528]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80021dc:	4b81      	ldr	r3, [pc, #516]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021e8:	4b7e      	ldr	r3, [pc, #504]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80021f2:	4b7c      	ldr	r3, [pc, #496]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f6:	08db      	lsrs	r3, r3, #3
 80021f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	fb02 f303 	mul.w	r3, r2, r3
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800220a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80da 	beq.w	80023ca <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d05a      	beq.n	80022d2 <HAL_RCC_GetSysClockFreq+0x1b2>
 800221c:	2b01      	cmp	r3, #1
 800221e:	d302      	bcc.n	8002226 <HAL_RCC_GetSysClockFreq+0x106>
 8002220:	2b02      	cmp	r3, #2
 8002222:	d078      	beq.n	8002316 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002224:	e099      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002226:	4b6f      	ldr	r3, [pc, #444]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b00      	cmp	r3, #0
 8002230:	d02d      	beq.n	800228e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002232:	4b6c      	ldr	r3, [pc, #432]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	08db      	lsrs	r3, r3, #3
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	4a6a      	ldr	r2, [pc, #424]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800223e:	fa22 f303 	lsr.w	r3, r2, r3
 8002242:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	ee07 3a90 	vmov	s15, r3
 800224a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	ee07 3a90 	vmov	s15, r3
 8002254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800225c:	4b61      	ldr	r3, [pc, #388]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002264:	ee07 3a90 	vmov	s15, r3
 8002268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800226c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002270:	eddf 5a60 	vldr	s11, [pc, #384]	; 80023f4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002274:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800227c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002288:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800228c:	e087      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	ee07 3a90 	vmov	s15, r3
 8002294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002298:	eddf 6a57 	vldr	s13, [pc, #348]	; 80023f8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800229c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022a0:	4b50      	ldr	r3, [pc, #320]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a8:	ee07 3a90 	vmov	s15, r3
 80022ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80022b4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80023f4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80022b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022d0:	e065      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	ee07 3a90 	vmov	s15, r3
 80022d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022dc:	eddf 6a47 	vldr	s13, [pc, #284]	; 80023fc <HAL_RCC_GetSysClockFreq+0x2dc>
 80022e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022e4:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ec:	ee07 3a90 	vmov	s15, r3
 80022f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80022f8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80023f4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80022fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002300:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002304:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002308:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800230c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002310:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002314:	e043      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	ee07 3a90 	vmov	s15, r3
 800231c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002320:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002400 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002324:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002328:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002338:	ed97 6a02 	vldr	s12, [r7, #8]
 800233c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80023f4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002340:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002344:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002348:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800234c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002354:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002358:	e021      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	ee07 3a90 	vmov	s15, r3
 8002360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002364:	eddf 6a25 	vldr	s13, [pc, #148]	; 80023fc <HAL_RCC_GetSysClockFreq+0x2dc>
 8002368:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800237c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002380:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80023f4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002384:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002388:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800238c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002390:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002398:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800239c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	0a5b      	lsrs	r3, r3, #9
 80023a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023a8:	3301      	adds	r3, #1
 80023aa:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80023ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023c2:	ee17 3a90 	vmov	r3, s15
 80023c6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80023c8:	e005      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
    break;
 80023ce:	e002      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_RCC_GetSysClockFreq+0x2cc>)
 80023d2:	61bb      	str	r3, [r7, #24]
    break;
 80023d4:	bf00      	nop
  }

  return sysclockfreq;
 80023d6:	69bb      	ldr	r3, [r7, #24]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3724      	adds	r7, #36	; 0x24
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	58024400 	.word	0x58024400
 80023e8:	03d09000 	.word	0x03d09000
 80023ec:	003d0900 	.word	0x003d0900
 80023f0:	017d7840 	.word	0x017d7840
 80023f4:	46000000 	.word	0x46000000
 80023f8:	4c742400 	.word	0x4c742400
 80023fc:	4a742400 	.word	0x4a742400
 8002400:	4bbebc20 	.word	0x4bbebc20

08002404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800240a:	f7ff fe89 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 800240e:	4601      	mov	r1, r0
 8002410:	4b10      	ldr	r3, [pc, #64]	; (8002454 <HAL_RCC_GetHCLKFreq+0x50>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	4a0f      	ldr	r2, [pc, #60]	; (8002458 <HAL_RCC_GetHCLKFreq+0x54>)
 800241c:	5cd3      	ldrb	r3, [r2, r3]
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	fa21 f303 	lsr.w	r3, r1, r3
 8002426:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <HAL_RCC_GetHCLKFreq+0x50>)
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	4a09      	ldr	r2, [pc, #36]	; (8002458 <HAL_RCC_GetHCLKFreq+0x54>)
 8002432:	5cd3      	ldrb	r3, [r2, r3]
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	fa22 f303 	lsr.w	r3, r2, r3
 800243e:	4a07      	ldr	r2, [pc, #28]	; (800245c <HAL_RCC_GetHCLKFreq+0x58>)
 8002440:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002442:	4a07      	ldr	r2, [pc, #28]	; (8002460 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <HAL_RCC_GetHCLKFreq+0x58>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	58024400 	.word	0x58024400
 8002458:	080057a4 	.word	0x080057a4
 800245c:	20000004 	.word	0x20000004
 8002460:	20000000 	.word	0x20000000

08002464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002468:	f7ff ffcc 	bl	8002404 <HAL_RCC_GetHCLKFreq>
 800246c:	4601      	mov	r1, r0
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	4a04      	ldr	r2, [pc, #16]	; (800248c <HAL_RCC_GetPCLK1Freq+0x28>)
 800247a:	5cd3      	ldrb	r3, [r2, r3]
 800247c:	f003 031f 	and.w	r3, r3, #31
 8002480:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002484:	4618      	mov	r0, r3
 8002486:	bd80      	pop	{r7, pc}
 8002488:	58024400 	.word	0x58024400
 800248c:	080057a4 	.word	0x080057a4

08002490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002494:	f7ff ffb6 	bl	8002404 <HAL_RCC_GetHCLKFreq>
 8002498:	4601      	mov	r1, r0
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024a6:	5cd3      	ldrb	r3, [r2, r3]
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	58024400 	.word	0x58024400
 80024b8:	080057a4 	.word	0x080057a4

080024bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024c4:	2300      	movs	r3, #0
 80024c6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024c8:	2300      	movs	r3, #0
 80024ca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d03d      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024e0:	d013      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80024e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024e6:	d802      	bhi.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x32>
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80024ec:	e01f      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80024ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024f2:	d013      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x60>
 80024f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024f8:	d01c      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80024fa:	e018      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024fc:	4baf      	ldr	r3, [pc, #700]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	4aae      	ldr	r2, [pc, #696]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002506:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002508:	e015      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3304      	adds	r3, #4
 800250e:	2102      	movs	r1, #2
 8002510:	4618      	mov	r0, r3
 8002512:	f001 f96f 	bl	80037f4 <RCCEx_PLL2_Config>
 8002516:	4603      	mov	r3, r0
 8002518:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800251a:	e00c      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3324      	adds	r3, #36	; 0x24
 8002520:	2102      	movs	r1, #2
 8002522:	4618      	mov	r0, r3
 8002524:	f001 fa18 	bl	8003958 <RCCEx_PLL3_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800252c:	e003      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	75fb      	strb	r3, [r7, #23]
      break;
 8002532:	e000      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002536:	7dfb      	ldrb	r3, [r7, #23]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d109      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800253c:	4b9f      	ldr	r3, [pc, #636]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800253e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002540:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002548:	499c      	ldr	r1, [pc, #624]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800254a:	4313      	orrs	r3, r2
 800254c:	650b      	str	r3, [r1, #80]	; 0x50
 800254e:	e001      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002550:	7dfb      	ldrb	r3, [r7, #23]
 8002552:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d03d      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002564:	2b04      	cmp	r3, #4
 8002566:	d826      	bhi.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002568:	a201      	add	r2, pc, #4	; (adr r2, 8002570 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800256a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256e:	bf00      	nop
 8002570:	08002585 	.word	0x08002585
 8002574:	08002593 	.word	0x08002593
 8002578:	080025a5 	.word	0x080025a5
 800257c:	080025bd 	.word	0x080025bd
 8002580:	080025bd 	.word	0x080025bd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002584:	4b8d      	ldr	r3, [pc, #564]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	4a8c      	ldr	r2, [pc, #560]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800258a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800258e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002590:	e015      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3304      	adds	r3, #4
 8002596:	2100      	movs	r1, #0
 8002598:	4618      	mov	r0, r3
 800259a:	f001 f92b 	bl	80037f4 <RCCEx_PLL2_Config>
 800259e:	4603      	mov	r3, r0
 80025a0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025a2:	e00c      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3324      	adds	r3, #36	; 0x24
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f001 f9d4 	bl	8003958 <RCCEx_PLL3_Config>
 80025b0:	4603      	mov	r3, r0
 80025b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025b4:	e003      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	75fb      	strb	r3, [r7, #23]
      break;
 80025ba:	e000      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80025bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025be:	7dfb      	ldrb	r3, [r7, #23]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d109      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025c4:	4b7d      	ldr	r3, [pc, #500]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c8:	f023 0207 	bic.w	r2, r3, #7
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d0:	497a      	ldr	r1, [pc, #488]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	650b      	str	r3, [r1, #80]	; 0x50
 80025d6:	e001      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
 80025da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d03e      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ec:	2b80      	cmp	r3, #128	; 0x80
 80025ee:	d01c      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80025f0:	2b80      	cmp	r3, #128	; 0x80
 80025f2:	d804      	bhi.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x142>
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80025f8:	2b40      	cmp	r3, #64	; 0x40
 80025fa:	d00d      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80025fc:	e01e      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x180>
 80025fe:	2bc0      	cmp	r3, #192	; 0xc0
 8002600:	d01f      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002606:	d01e      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002608:	e018      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800260a:	4b6c      	ldr	r3, [pc, #432]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	4a6b      	ldr	r2, [pc, #428]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002614:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002616:	e017      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3304      	adds	r3, #4
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f001 f8e8 	bl	80037f4 <RCCEx_PLL2_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002628:	e00e      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3324      	adds	r3, #36	; 0x24
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f001 f991 	bl	8003958 <RCCEx_PLL3_Config>
 8002636:	4603      	mov	r3, r0
 8002638:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800263a:	e005      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	75fb      	strb	r3, [r7, #23]
      break;
 8002640:	e002      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002642:	bf00      	nop
 8002644:	e000      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002646:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002648:	7dfb      	ldrb	r3, [r7, #23]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800264e:	4b5b      	ldr	r3, [pc, #364]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002652:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265a:	4958      	ldr	r1, [pc, #352]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800265c:	4313      	orrs	r3, r2
 800265e:	650b      	str	r3, [r1, #80]	; 0x50
 8002660:	e001      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002662:	7dfb      	ldrb	r3, [r7, #23]
 8002664:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266e:	2b00      	cmp	r3, #0
 8002670:	d044      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002678:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800267c:	d01f      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x202>
 800267e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002682:	d805      	bhi.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00a      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002688:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800268c:	d00e      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800268e:	e01f      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002690:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002694:	d01f      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002696:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800269a:	d01e      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800269c:	e018      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800269e:	4b47      	ldr	r3, [pc, #284]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	4a46      	ldr	r2, [pc, #280]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026aa:	e017      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3304      	adds	r3, #4
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f001 f89e 	bl	80037f4 <RCCEx_PLL2_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80026bc:	e00e      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3324      	adds	r3, #36	; 0x24
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f001 f947 	bl	8003958 <RCCEx_PLL3_Config>
 80026ca:	4603      	mov	r3, r0
 80026cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026ce:	e005      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	75fb      	strb	r3, [r7, #23]
      break;
 80026d4:	e002      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80026d6:	bf00      	nop
 80026d8:	e000      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80026da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10a      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80026e2:	4b36      	ldr	r3, [pc, #216]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80026f0:	4932      	ldr	r1, [pc, #200]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	658b      	str	r3, [r1, #88]	; 0x58
 80026f6:	e001      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002704:	2b00      	cmp	r3, #0
 8002706:	d044      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800270e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002712:	d01f      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002714:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002718:	d805      	bhi.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800271e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002722:	d00e      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002724:	e01f      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002726:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800272a:	d01f      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800272c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002730:	d01e      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002732:	e018      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002734:	4b21      	ldr	r3, [pc, #132]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	4a20      	ldr	r2, [pc, #128]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800273a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800273e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002740:	e017      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3304      	adds	r3, #4
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f001 f853 	bl	80037f4 <RCCEx_PLL2_Config>
 800274e:	4603      	mov	r3, r0
 8002750:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002752:	e00e      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3324      	adds	r3, #36	; 0x24
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f001 f8fc 	bl	8003958 <RCCEx_PLL3_Config>
 8002760:	4603      	mov	r3, r0
 8002762:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002764:	e005      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
      break;
 800276a:	e002      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800276c:	bf00      	nop
 800276e:	e000      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10a      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002778:	4b10      	ldr	r3, [pc, #64]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800277a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002786:	490d      	ldr	r1, [pc, #52]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002788:	4313      	orrs	r3, r2
 800278a:	658b      	str	r3, [r1, #88]	; 0x58
 800278c:	e001      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d035      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a2:	2b10      	cmp	r3, #16
 80027a4:	d00c      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80027a6:	2b10      	cmp	r3, #16
 80027a8:	d802      	bhi.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d01b      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80027ae:	e017      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d00c      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x312>
 80027b4:	2b30      	cmp	r3, #48	; 0x30
 80027b6:	d018      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80027b8:	e012      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80027ba:	bf00      	nop
 80027bc:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027c0:	4baf      	ldr	r3, [pc, #700]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	4aae      	ldr	r2, [pc, #696]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80027c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80027cc:	e00e      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3304      	adds	r3, #4
 80027d2:	2102      	movs	r1, #2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 f80d 	bl	80037f4 <RCCEx_PLL2_Config>
 80027da:	4603      	mov	r3, r0
 80027dc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80027de:	e005      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	75fb      	strb	r3, [r7, #23]
      break;
 80027e4:	e002      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80027e6:	bf00      	nop
 80027e8:	e000      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80027ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ec:	7dfb      	ldrb	r3, [r7, #23]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80027f2:	4ba3      	ldr	r3, [pc, #652]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fe:	49a0      	ldr	r1, [pc, #640]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002800:	4313      	orrs	r3, r2
 8002802:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002804:	e001      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d042      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800281e:	d01f      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002824:	d805      	bhi.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800282a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282e:	d00e      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002830:	e01f      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002832:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002836:	d01f      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800283c:	d01e      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800283e:	e018      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002840:	4b8f      	ldr	r3, [pc, #572]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	4a8e      	ldr	r2, [pc, #568]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800284a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800284c:	e017      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3304      	adds	r3, #4
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f000 ffcd 	bl	80037f4 <RCCEx_PLL2_Config>
 800285a:	4603      	mov	r3, r0
 800285c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800285e:	e00e      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3324      	adds	r3, #36	; 0x24
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f001 f876 	bl	8003958 <RCCEx_PLL3_Config>
 800286c:	4603      	mov	r3, r0
 800286e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002870:	e005      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	75fb      	strb	r3, [r7, #23]
      break;
 8002876:	e002      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002878:	bf00      	nop
 800287a:	e000      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800287c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800287e:	7dfb      	ldrb	r3, [r7, #23]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d109      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002884:	4b7e      	ldr	r3, [pc, #504]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002888:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002890:	497b      	ldr	r1, [pc, #492]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	650b      	str	r3, [r1, #80]	; 0x50
 8002896:	e001      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002898:	7dfb      	ldrb	r3, [r7, #23]
 800289a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d042      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028b0:	d01b      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80028b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028b6:	d805      	bhi.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d022      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80028bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80028c2:	e01b      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x440>
 80028c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028c8:	d01d      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80028ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ce:	d01c      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80028d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028d4:	d01b      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x452>
 80028d6:	e011      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3304      	adds	r3, #4
 80028dc:	2101      	movs	r1, #1
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 ff88 	bl	80037f4 <RCCEx_PLL2_Config>
 80028e4:	4603      	mov	r3, r0
 80028e6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80028e8:	e012      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3324      	adds	r3, #36	; 0x24
 80028ee:	2101      	movs	r1, #1
 80028f0:	4618      	mov	r0, r3
 80028f2:	f001 f831 	bl	8003958 <RCCEx_PLL3_Config>
 80028f6:	4603      	mov	r3, r0
 80028f8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80028fa:	e009      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	75fb      	strb	r3, [r7, #23]
      break;
 8002900:	e006      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002902:	bf00      	nop
 8002904:	e004      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002906:	bf00      	nop
 8002908:	e002      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800290a:	bf00      	nop
 800290c:	e000      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800290e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002910:	7dfb      	ldrb	r3, [r7, #23]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d109      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002916:	4b5a      	ldr	r3, [pc, #360]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800291a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002922:	4957      	ldr	r1, [pc, #348]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002924:	4313      	orrs	r3, r2
 8002926:	650b      	str	r3, [r1, #80]	; 0x50
 8002928:	e001      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800292a:	7dfb      	ldrb	r3, [r7, #23]
 800292c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d044      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002944:	d01b      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800294a:	d805      	bhi.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800294c:	2b00      	cmp	r3, #0
 800294e:	d022      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002956:	e01b      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295c:	d01d      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800295e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002962:	d01c      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002964:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002968:	d01b      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800296a:	e011      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3304      	adds	r3, #4
 8002970:	2101      	movs	r1, #1
 8002972:	4618      	mov	r0, r3
 8002974:	f000 ff3e 	bl	80037f4 <RCCEx_PLL2_Config>
 8002978:	4603      	mov	r3, r0
 800297a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800297c:	e012      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3324      	adds	r3, #36	; 0x24
 8002982:	2101      	movs	r1, #1
 8002984:	4618      	mov	r0, r3
 8002986:	f000 ffe7 	bl	8003958 <RCCEx_PLL3_Config>
 800298a:	4603      	mov	r3, r0
 800298c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800298e:	e009      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	75fb      	strb	r3, [r7, #23]
      break;
 8002994:	e006      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002996:	bf00      	nop
 8002998:	e004      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800299a:	bf00      	nop
 800299c:	e002      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800299e:	bf00      	nop
 80029a0:	e000      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80029a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029a4:	7dfb      	ldrb	r3, [r7, #23]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10a      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80029aa:	4b35      	ldr	r3, [pc, #212]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80029b8:	4931      	ldr	r1, [pc, #196]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	658b      	str	r3, [r1, #88]	; 0x58
 80029be:	e001      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
 80029c2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d02d      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029d8:	d005      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80029da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029de:	d009      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d013      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x550>
 80029e4:	e00f      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e6:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	4a25      	ldr	r2, [pc, #148]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80029f2:	e00c      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	2101      	movs	r1, #1
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fefa 	bl	80037f4 <RCCEx_PLL2_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002a04:	e003      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	75fb      	strb	r3, [r7, #23]
      break;
 8002a0a:	e000      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a0e:	7dfb      	ldrb	r3, [r7, #23]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d109      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a14:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a20:	4917      	ldr	r1, [pc, #92]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	650b      	str	r3, [r1, #80]	; 0x50
 8002a26:	e001      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d035      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d81b      	bhi.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a40:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a46:	bf00      	nop
 8002a48:	08002a85 	.word	0x08002a85
 8002a4c:	08002a59 	.word	0x08002a59
 8002a50:	08002a67 	.word	0x08002a67
 8002a54:	08002a85 	.word	0x08002a85
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a58:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	4a08      	ldr	r2, [pc, #32]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002a64:	e00f      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 fec1 	bl	80037f4 <RCCEx_PLL2_Config>
 8002a72:	4603      	mov	r3, r0
 8002a74:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002a76:	e006      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a7c:	e003      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002a7e:	bf00      	nop
 8002a80:	58024400 	.word	0x58024400
      break;
 8002a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a86:	7dfb      	ldrb	r3, [r7, #23]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d109      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002a8c:	4bba      	ldr	r3, [pc, #744]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a90:	f023 0203 	bic.w	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a98:	49b7      	ldr	r1, [pc, #732]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a9e:	e001      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8086 	beq.w	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ab2:	4bb2      	ldr	r3, [pc, #712]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4ab1      	ldr	r2, [pc, #708]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002abe:	f7fe fa35 	bl	8000f2c <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ac4:	e009      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac6:	f7fe fa31 	bl	8000f2c <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b64      	cmp	r3, #100	; 0x64
 8002ad2:	d902      	bls.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	75fb      	strb	r3, [r7, #23]
        break;
 8002ad8:	e005      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ada:	4ba8      	ldr	r3, [pc, #672]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0ef      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d166      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002aec:	4ba2      	ldr	r3, [pc, #648]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002aee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002af6:	4053      	eors	r3, r2
 8002af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d013      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b00:	4b9d      	ldr	r3, [pc, #628]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b08:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b0a:	4b9b      	ldr	r3, [pc, #620]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	4a9a      	ldr	r2, [pc, #616]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b14:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b16:	4b98      	ldr	r3, [pc, #608]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	4a97      	ldr	r2, [pc, #604]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b20:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002b22:	4a95      	ldr	r2, [pc, #596]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b32:	d115      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7fe f9fa 	bl	8000f2c <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b3a:	e00b      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7fe f9f6 	bl	8000f2c <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d902      	bls.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	75fb      	strb	r3, [r7, #23]
            break;
 8002b52:	e005      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b54:	4b88      	ldr	r3, [pc, #544]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0ed      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d126      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b74:	d10d      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002b76:	4b80      	ldr	r3, [pc, #512]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b84:	0919      	lsrs	r1, r3, #4
 8002b86:	4b7e      	ldr	r3, [pc, #504]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002b88:	400b      	ands	r3, r1
 8002b8a:	497b      	ldr	r1, [pc, #492]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	610b      	str	r3, [r1, #16]
 8002b90:	e005      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002b92:	4b79      	ldr	r3, [pc, #484]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	4a78      	ldr	r2, [pc, #480]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b9c:	6113      	str	r3, [r2, #16]
 8002b9e:	4b76      	ldr	r3, [pc, #472]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ba0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bac:	4972      	ldr	r1, [pc, #456]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	670b      	str	r3, [r1, #112]	; 0x70
 8002bb2:	e004      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bb4:	7dfb      	ldrb	r3, [r7, #23]
 8002bb6:	75bb      	strb	r3, [r7, #22]
 8002bb8:	e001      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bba:	7dfb      	ldrb	r3, [r7, #23]
 8002bbc:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d07d      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bce:	2b28      	cmp	r3, #40	; 0x28
 8002bd0:	d866      	bhi.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002bd2:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd8:	08002ca7 	.word	0x08002ca7
 8002bdc:	08002ca1 	.word	0x08002ca1
 8002be0:	08002ca1 	.word	0x08002ca1
 8002be4:	08002ca1 	.word	0x08002ca1
 8002be8:	08002ca1 	.word	0x08002ca1
 8002bec:	08002ca1 	.word	0x08002ca1
 8002bf0:	08002ca1 	.word	0x08002ca1
 8002bf4:	08002ca1 	.word	0x08002ca1
 8002bf8:	08002c7d 	.word	0x08002c7d
 8002bfc:	08002ca1 	.word	0x08002ca1
 8002c00:	08002ca1 	.word	0x08002ca1
 8002c04:	08002ca1 	.word	0x08002ca1
 8002c08:	08002ca1 	.word	0x08002ca1
 8002c0c:	08002ca1 	.word	0x08002ca1
 8002c10:	08002ca1 	.word	0x08002ca1
 8002c14:	08002ca1 	.word	0x08002ca1
 8002c18:	08002c8f 	.word	0x08002c8f
 8002c1c:	08002ca1 	.word	0x08002ca1
 8002c20:	08002ca1 	.word	0x08002ca1
 8002c24:	08002ca1 	.word	0x08002ca1
 8002c28:	08002ca1 	.word	0x08002ca1
 8002c2c:	08002ca1 	.word	0x08002ca1
 8002c30:	08002ca1 	.word	0x08002ca1
 8002c34:	08002ca1 	.word	0x08002ca1
 8002c38:	08002ca7 	.word	0x08002ca7
 8002c3c:	08002ca1 	.word	0x08002ca1
 8002c40:	08002ca1 	.word	0x08002ca1
 8002c44:	08002ca1 	.word	0x08002ca1
 8002c48:	08002ca1 	.word	0x08002ca1
 8002c4c:	08002ca1 	.word	0x08002ca1
 8002c50:	08002ca1 	.word	0x08002ca1
 8002c54:	08002ca1 	.word	0x08002ca1
 8002c58:	08002ca7 	.word	0x08002ca7
 8002c5c:	08002ca1 	.word	0x08002ca1
 8002c60:	08002ca1 	.word	0x08002ca1
 8002c64:	08002ca1 	.word	0x08002ca1
 8002c68:	08002ca1 	.word	0x08002ca1
 8002c6c:	08002ca1 	.word	0x08002ca1
 8002c70:	08002ca1 	.word	0x08002ca1
 8002c74:	08002ca1 	.word	0x08002ca1
 8002c78:	08002ca7 	.word	0x08002ca7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	2101      	movs	r1, #1
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fdb6 	bl	80037f4 <RCCEx_PLL2_Config>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c8c:	e00c      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3324      	adds	r3, #36	; 0x24
 8002c92:	2101      	movs	r1, #1
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fe5f 	bl	8003958 <RCCEx_PLL3_Config>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c9e:	e003      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ca4:	e000      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8002ca6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ca8:	7dfb      	ldrb	r3, [r7, #23]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002cae:	4b32      	ldr	r3, [pc, #200]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cba:	492f      	ldr	r1, [pc, #188]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	654b      	str	r3, [r1, #84]	; 0x54
 8002cc0:	e001      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d037      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd6:	2b05      	cmp	r3, #5
 8002cd8:	d820      	bhi.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002cda:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce0:	08002d23 	.word	0x08002d23
 8002ce4:	08002cf9 	.word	0x08002cf9
 8002ce8:	08002d0b 	.word	0x08002d0b
 8002cec:	08002d23 	.word	0x08002d23
 8002cf0:	08002d23 	.word	0x08002d23
 8002cf4:	08002d23 	.word	0x08002d23
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fd78 	bl	80037f4 <RCCEx_PLL2_Config>
 8002d04:	4603      	mov	r3, r0
 8002d06:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002d08:	e00c      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3324      	adds	r3, #36	; 0x24
 8002d0e:	2101      	movs	r1, #1
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fe21 	bl	8003958 <RCCEx_PLL3_Config>
 8002d16:	4603      	mov	r3, r0
 8002d18:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002d1a:	e003      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d20:	e000      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002d22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002d2a:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	f023 0207 	bic.w	r2, r3, #7
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d36:	4910      	ldr	r1, [pc, #64]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	654b      	str	r3, [r1, #84]	; 0x54
 8002d3c:	e001      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
 8002d40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d040      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d827      	bhi.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002d58:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5e:	bf00      	nop
 8002d60:	08002daf 	.word	0x08002daf
 8002d64:	08002d85 	.word	0x08002d85
 8002d68:	08002d97 	.word	0x08002d97
 8002d6c:	08002daf 	.word	0x08002daf
 8002d70:	08002daf 	.word	0x08002daf
 8002d74:	08002daf 	.word	0x08002daf
 8002d78:	58024400 	.word	0x58024400
 8002d7c:	58024800 	.word	0x58024800
 8002d80:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3304      	adds	r3, #4
 8002d88:	2101      	movs	r1, #1
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fd32 	bl	80037f4 <RCCEx_PLL2_Config>
 8002d90:	4603      	mov	r3, r0
 8002d92:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d94:	e00c      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3324      	adds	r3, #36	; 0x24
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fddb 	bl	8003958 <RCCEx_PLL3_Config>
 8002da2:	4603      	mov	r3, r0
 8002da4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002da6:	e003      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	75fb      	strb	r3, [r7, #23]
      break;
 8002dac:	e000      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8002dae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10a      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002db6:	4bb2      	ldr	r3, [pc, #712]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dba:	f023 0207 	bic.w	r2, r3, #7
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc4:	49ae      	ldr	r1, [pc, #696]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	658b      	str	r3, [r1, #88]	; 0x58
 8002dca:	e001      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dcc:	7dfb      	ldrb	r3, [r7, #23]
 8002dce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d044      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002de6:	d01b      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dec:	d805      	bhi.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d022      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002df2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002df8:	e01b      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfe:	d01d      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8002e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e04:	d01c      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002e06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e0a:	d01b      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002e0c:	e011      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3304      	adds	r3, #4
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fced 	bl	80037f4 <RCCEx_PLL2_Config>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002e1e:	e012      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3324      	adds	r3, #36	; 0x24
 8002e24:	2102      	movs	r1, #2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fd96 	bl	8003958 <RCCEx_PLL3_Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002e30:	e009      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	75fb      	strb	r3, [r7, #23]
      break;
 8002e36:	e006      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002e38:	bf00      	nop
 8002e3a:	e004      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002e3c:	bf00      	nop
 8002e3e:	e002      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002e40:	bf00      	nop
 8002e42:	e000      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e46:	7dfb      	ldrb	r3, [r7, #23]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10a      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e4c:	4b8c      	ldr	r3, [pc, #560]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e50:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e5a:	4989      	ldr	r1, [pc, #548]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	654b      	str	r3, [r1, #84]	; 0x54
 8002e60:	e001      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
 8002e64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d044      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e7c:	d01b      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8002e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e82:	d805      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d022      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8002e8e:	e01b      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8002e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e94:	d01d      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002e96:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e9a:	d01c      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8002e9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ea0:	d01b      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8002ea2:	e011      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fca2 	bl	80037f4 <RCCEx_PLL2_Config>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002eb4:	e012      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3324      	adds	r3, #36	; 0x24
 8002eba:	2102      	movs	r1, #2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fd4b 	bl	8003958 <RCCEx_PLL3_Config>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002ec6:	e009      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	75fb      	strb	r3, [r7, #23]
      break;
 8002ecc:	e006      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e004      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e002      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e000      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002eda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002edc:	7dfb      	ldrb	r3, [r7, #23]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10a      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ee2:	4b67      	ldr	r3, [pc, #412]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ef0:	4963      	ldr	r1, [pc, #396]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	658b      	str	r3, [r1, #88]	; 0x58
 8002ef6:	e001      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
 8002efa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d044      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f12:	d01b      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8002f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f18:	d805      	bhi.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d022      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f22:	d00a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002f24:	e01b      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8002f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f2a:	d01d      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002f2c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002f30:	d01c      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8002f32:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002f36:	d01b      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8002f38:	e011      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 fc57 	bl	80037f4 <RCCEx_PLL2_Config>
 8002f46:	4603      	mov	r3, r0
 8002f48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002f4a:	e012      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3324      	adds	r3, #36	; 0x24
 8002f50:	2102      	movs	r1, #2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fd00 	bl	8003958 <RCCEx_PLL3_Config>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002f5c:	e009      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	75fb      	strb	r3, [r7, #23]
      break;
 8002f62:	e006      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002f64:	bf00      	nop
 8002f66:	e004      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002f68:	bf00      	nop
 8002f6a:	e002      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002f6c:	bf00      	nop
 8002f6e:	e000      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10a      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f78:	4b41      	ldr	r3, [pc, #260]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f86:	493e      	ldr	r1, [pc, #248]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	658b      	str	r3, [r1, #88]	; 0x58
 8002f8c:	e001      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
 8002f90:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d01a      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa8:	d10a      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3324      	adds	r3, #36	; 0x24
 8002fae:	2102      	movs	r1, #2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fcd1 	bl	8003958 <RCCEx_PLL3_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002fc0:	4b2f      	ldr	r3, [pc, #188]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fce:	492c      	ldr	r1, [pc, #176]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01a      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fea:	d10a      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3324      	adds	r3, #36	; 0x24
 8002ff0:	2102      	movs	r1, #2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fcb0 	bl	8003958 <RCCEx_PLL3_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003002:	4b1f      	ldr	r3, [pc, #124]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003006:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003010:	491b      	ldr	r1, [pc, #108]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003012:	4313      	orrs	r3, r2
 8003014:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d032      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302c:	d00d      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800302e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003032:	d016      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8003034:	2b00      	cmp	r3, #0
 8003036:	d111      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3304      	adds	r3, #4
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fbd8 	bl	80037f4 <RCCEx_PLL2_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003048:	e00c      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3324      	adds	r3, #36	; 0x24
 800304e:	2102      	movs	r1, #2
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fc81 	bl	8003958 <RCCEx_PLL3_Config>
 8003056:	4603      	mov	r3, r0
 8003058:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800305a:	e003      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	75fb      	strb	r3, [r7, #23]
      break;
 8003060:	e000      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8003062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003064:	7dfb      	ldrb	r3, [r7, #23]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10c      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800306c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003078:	4901      	ldr	r1, [pc, #4]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800307a:	4313      	orrs	r3, r2
 800307c:	658b      	str	r3, [r1, #88]	; 0x58
 800307e:	e003      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8003080:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003084:	7dfb      	ldrb	r3, [r7, #23]
 8003086:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d02f      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800309a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800309e:	d00c      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80030a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030a4:	d015      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80030a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030aa:	d10f      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ac:	4b79      	ldr	r3, [pc, #484]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	4a78      	ldr	r2, [pc, #480]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80030b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80030b8:	e00c      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3324      	adds	r3, #36	; 0x24
 80030be:	2101      	movs	r1, #1
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fc49 	bl	8003958 <RCCEx_PLL3_Config>
 80030c6:	4603      	mov	r3, r0
 80030c8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80030ca:	e003      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	75fb      	strb	r3, [r7, #23]
      break;
 80030d0:	e000      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80030d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10a      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030da:	4b6e      	ldr	r3, [pc, #440]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e8:	496a      	ldr	r1, [pc, #424]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	654b      	str	r3, [r1, #84]	; 0x54
 80030ee:	e001      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
 80030f2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d029      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800310c:	d007      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800310e:	e00f      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003110:	4b60      	ldr	r3, [pc, #384]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	4a5f      	ldr	r2, [pc, #380]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800311a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800311c:	e00b      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3304      	adds	r3, #4
 8003122:	2102      	movs	r1, #2
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fb65 	bl	80037f4 <RCCEx_PLL2_Config>
 800312a:	4603      	mov	r3, r0
 800312c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800312e:	e002      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	75fb      	strb	r3, [r7, #23]
      break;
 8003134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003136:	7dfb      	ldrb	r3, [r7, #23]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d109      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800313c:	4b55      	ldr	r3, [pc, #340]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800313e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003140:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003148:	4952      	ldr	r1, [pc, #328]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800314a:	4313      	orrs	r3, r2
 800314c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800314e:	e001      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003150:	7dfb      	ldrb	r3, [r7, #23]
 8003152:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00a      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3324      	adds	r3, #36	; 0x24
 8003164:	2102      	movs	r1, #2
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fbf6 	bl	8003958 <RCCEx_PLL3_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d02f      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800318a:	d00c      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800318c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003190:	d802      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8003192:	2b00      	cmp	r3, #0
 8003194:	d011      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8003196:	e00d      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8003198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800319c:	d00f      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800319e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031a2:	d00e      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80031a4:	e006      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031a6:	4b3b      	ldr	r3, [pc, #236]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	4a3a      	ldr	r2, [pc, #232]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80031ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80031b2:	e007      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	75fb      	strb	r3, [r7, #23]
      break;
 80031b8:	e004      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80031ba:	bf00      	nop
 80031bc:	e002      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80031be:	bf00      	nop
 80031c0:	e000      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80031c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d109      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031ca:	4b32      	ldr	r3, [pc, #200]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031d6:	492f      	ldr	r1, [pc, #188]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	654b      	str	r3, [r1, #84]	; 0x54
 80031dc:	e001      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031ee:	4b29      	ldr	r3, [pc, #164]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80031f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	4926      	ldr	r1, [pc, #152]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d009      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800320c:	4b21      	ldr	r3, [pc, #132]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800321a:	491e      	ldr	r1, [pc, #120]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800321c:	4313      	orrs	r3, r2
 800321e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800322c:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800322e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003230:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003238:	4916      	ldr	r1, [pc, #88]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800323a:	4313      	orrs	r3, r2
 800323c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00d      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800324a:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	4a11      	ldr	r2, [pc, #68]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003250:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003254:	6113      	str	r3, [r2, #16]
 8003256:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003260:	490c      	ldr	r1, [pc, #48]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003262:	4313      	orrs	r3, r2
 8003264:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	da08      	bge.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003272:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327a:	4906      	ldr	r1, [pc, #24]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800327c:	4313      	orrs	r3, r2
 800327e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003280:	7dbb      	ldrb	r3, [r7, #22]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	e000      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	58024400 	.word	0x58024400

08003298 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800329c:	f7ff f8b2 	bl	8002404 <HAL_RCC_GetHCLKFreq>
 80032a0:	4601      	mov	r1, r0
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	4a04      	ldr	r2, [pc, #16]	; (80032c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80032ae:	5cd3      	ldrb	r3, [r2, r3]
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	58024400 	.word	0x58024400
 80032c0:	080057a4 	.word	0x080057a4

080032c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b089      	sub	sp, #36	; 0x24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032cc:	4b9d      	ldr	r3, [pc, #628]	; (8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80032d6:	4b9b      	ldr	r3, [pc, #620]	; (8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	0b1b      	lsrs	r3, r3, #12
 80032dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80032e2:	4b98      	ldr	r3, [pc, #608]	; (8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80032ee:	4b95      	ldr	r3, [pc, #596]	; (8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80032f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f2:	08db      	lsrs	r3, r3, #3
 80032f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	fb02 f303 	mul.w	r3, r2, r3
 80032fe:	ee07 3a90 	vmov	s15, r3
 8003302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003306:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 810a 	beq.w	8003526 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d05a      	beq.n	80033ce <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8003318:	2b01      	cmp	r3, #1
 800331a:	d302      	bcc.n	8003322 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800331c:	2b02      	cmp	r3, #2
 800331e:	d078      	beq.n	8003412 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8003320:	e099      	b.n	8003456 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003322:	4b88      	ldr	r3, [pc, #544]	; (8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b00      	cmp	r3, #0
 800332c:	d02d      	beq.n	800338a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800332e:	4b85      	ldr	r3, [pc, #532]	; (8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	08db      	lsrs	r3, r3, #3
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	4a83      	ldr	r2, [pc, #524]	; (8003548 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800333a:	fa22 f303 	lsr.w	r3, r2, r3
 800333e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	ee07 3a90 	vmov	s15, r3
 8003350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003354:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003358:	4b7a      	ldr	r3, [pc, #488]	; (8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003360:	ee07 3a90 	vmov	s15, r3
 8003364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003368:	ed97 6a03 	vldr	s12, [r7, #12]
 800336c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800354c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003370:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003374:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003378:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800337c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003384:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003388:	e087      	b.n	800349a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	ee07 3a90 	vmov	s15, r3
 8003390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003394:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8003398:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800339c:	4b69      	ldr	r3, [pc, #420]	; (8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a4:	ee07 3a90 	vmov	s15, r3
 80033a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80033b0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800354c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80033b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033cc:	e065      	b.n	800349a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	ee07 3a90 	vmov	s15, r3
 80033d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80033dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033e0:	4b58      	ldr	r3, [pc, #352]	; (8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e8:	ee07 3a90 	vmov	s15, r3
 80033ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80033f4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800354c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80033f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003400:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003404:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003410:	e043      	b.n	800349a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	ee07 3a90 	vmov	s15, r3
 8003418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003558 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003424:	4b47      	ldr	r3, [pc, #284]	; (8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342c:	ee07 3a90 	vmov	s15, r3
 8003430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003434:	ed97 6a03 	vldr	s12, [r7, #12]
 8003438:	eddf 5a44 	vldr	s11, [pc, #272]	; 800354c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800343c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003440:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003444:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003448:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800344c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003450:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003454:	e021      	b.n	800349a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	ee07 3a90 	vmov	s15, r3
 800345c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003460:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003464:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003468:	4b36      	ldr	r3, [pc, #216]	; (8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800346a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003470:	ee07 3a90 	vmov	s15, r3
 8003474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003478:	ed97 6a03 	vldr	s12, [r7, #12]
 800347c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800354c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003480:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003484:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003488:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800348c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003494:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003498:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800349a:	4b2a      	ldr	r3, [pc, #168]	; (8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349e:	0a5b      	lsrs	r3, r3, #9
 80034a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a4:	ee07 3a90 	vmov	s15, r3
 80034a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80034b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034c0:	ee17 2a90 	vmov	r2, s15
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80034c8:	4b1e      	ldr	r3, [pc, #120]	; (8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	0c1b      	lsrs	r3, r3, #16
 80034ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034d2:	ee07 3a90 	vmov	s15, r3
 80034d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80034e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ee:	ee17 2a90 	vmov	r2, s15
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80034f6:	4b13      	ldr	r3, [pc, #76]	; (8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	0e1b      	lsrs	r3, r3, #24
 80034fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003500:	ee07 3a90 	vmov	s15, r3
 8003504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003508:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800350c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003510:	edd7 6a07 	vldr	s13, [r7, #28]
 8003514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800351c:	ee17 2a90 	vmov	r2, s15
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003524:	e008      	b.n	8003538 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	609a      	str	r2, [r3, #8]
}
 8003538:	bf00      	nop
 800353a:	3724      	adds	r7, #36	; 0x24
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	58024400 	.word	0x58024400
 8003548:	03d09000 	.word	0x03d09000
 800354c:	46000000 	.word	0x46000000
 8003550:	4c742400 	.word	0x4c742400
 8003554:	4a742400 	.word	0x4a742400
 8003558:	4bbebc20 	.word	0x4bbebc20

0800355c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800355c:	b480      	push	{r7}
 800355e:	b089      	sub	sp, #36	; 0x24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003564:	4b9d      	ldr	r3, [pc, #628]	; (80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800356e:	4b9b      	ldr	r3, [pc, #620]	; (80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	0d1b      	lsrs	r3, r3, #20
 8003574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003578:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800357a:	4b98      	ldr	r3, [pc, #608]	; (80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	0a1b      	lsrs	r3, r3, #8
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003586:	4b95      	ldr	r3, [pc, #596]	; (80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	08db      	lsrs	r3, r3, #3
 800358c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	fb02 f303 	mul.w	r3, r2, r3
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 810a 	beq.w	80037be <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d05a      	beq.n	8003666 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d302      	bcc.n	80035ba <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d078      	beq.n	80036aa <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80035b8:	e099      	b.n	80036ee <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035ba:	4b88      	ldr	r3, [pc, #544]	; (80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d02d      	beq.n	8003622 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035c6:	4b85      	ldr	r3, [pc, #532]	; (80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	08db      	lsrs	r3, r3, #3
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	4a83      	ldr	r2, [pc, #524]	; (80037e0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80035d2:	fa22 f303 	lsr.w	r3, r2, r3
 80035d6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	ee07 3a90 	vmov	s15, r3
 80035e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f0:	4b7a      	ldr	r3, [pc, #488]	; (80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f8:	ee07 3a90 	vmov	s15, r3
 80035fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003600:	ed97 6a03 	vldr	s12, [r7, #12]
 8003604:	eddf 5a77 	vldr	s11, [pc, #476]	; 80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003608:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800360c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003610:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003614:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800361c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003620:	e087      	b.n	8003732 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	ee07 3a90 	vmov	s15, r3
 8003628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800362c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80037e8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003630:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003634:	4b69      	ldr	r3, [pc, #420]	; (80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800363c:	ee07 3a90 	vmov	s15, r3
 8003640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003644:	ed97 6a03 	vldr	s12, [r7, #12]
 8003648:	eddf 5a66 	vldr	s11, [pc, #408]	; 80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800364c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003650:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003654:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003658:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800365c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003660:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003664:	e065      	b.n	8003732 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	ee07 3a90 	vmov	s15, r3
 800366c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003670:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80037ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003674:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003678:	4b58      	ldr	r3, [pc, #352]	; (80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003680:	ee07 3a90 	vmov	s15, r3
 8003684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003688:	ed97 6a03 	vldr	s12, [r7, #12]
 800368c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003690:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003694:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003698:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800369c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036a8:	e043      	b.n	8003732 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	ee07 3a90 	vmov	s15, r3
 80036b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80037f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80036b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036bc:	4b47      	ldr	r3, [pc, #284]	; (80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c4:	ee07 3a90 	vmov	s15, r3
 80036c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80036d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80036d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036ec:	e021      	b.n	8003732 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	ee07 3a90 	vmov	s15, r3
 80036f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80037ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80036fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003700:	4b36      	ldr	r3, [pc, #216]	; (80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003708:	ee07 3a90 	vmov	s15, r3
 800370c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003710:	ed97 6a03 	vldr	s12, [r7, #12]
 8003714:	eddf 5a33 	vldr	s11, [pc, #204]	; 80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800371c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800372c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003730:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003732:	4b2a      	ldr	r3, [pc, #168]	; (80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	0a5b      	lsrs	r3, r3, #9
 8003738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800373c:	ee07 3a90 	vmov	s15, r3
 8003740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003748:	ee37 7a87 	vadd.f32	s14, s15, s14
 800374c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003758:	ee17 2a90 	vmov	r2, s15
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003760:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	0c1b      	lsrs	r3, r3, #16
 8003766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800376a:	ee07 3a90 	vmov	s15, r3
 800376e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003776:	ee37 7a87 	vadd.f32	s14, s15, s14
 800377a:	edd7 6a07 	vldr	s13, [r7, #28]
 800377e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003786:	ee17 2a90 	vmov	r2, s15
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800378e:	4b13      	ldr	r3, [pc, #76]	; (80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	0e1b      	lsrs	r3, r3, #24
 8003794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003798:	ee07 3a90 	vmov	s15, r3
 800379c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80037ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037b4:	ee17 2a90 	vmov	r2, s15
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80037bc:	e008      	b.n	80037d0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	609a      	str	r2, [r3, #8]
}
 80037d0:	bf00      	nop
 80037d2:	3724      	adds	r7, #36	; 0x24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	58024400 	.word	0x58024400
 80037e0:	03d09000 	.word	0x03d09000
 80037e4:	46000000 	.word	0x46000000
 80037e8:	4c742400 	.word	0x4c742400
 80037ec:	4a742400 	.word	0x4a742400
 80037f0:	4bbebc20 	.word	0x4bbebc20

080037f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003802:	4b53      	ldr	r3, [pc, #332]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	2b03      	cmp	r3, #3
 800380c:	d101      	bne.n	8003812 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e099      	b.n	8003946 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003812:	4b4f      	ldr	r3, [pc, #316]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a4e      	ldr	r2, [pc, #312]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 8003818:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800381c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800381e:	f7fd fb85 	bl	8000f2c <HAL_GetTick>
 8003822:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003824:	e008      	b.n	8003838 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003826:	f7fd fb81 	bl	8000f2c <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e086      	b.n	8003946 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003838:	4b45      	ldr	r3, [pc, #276]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f0      	bne.n	8003826 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003844:	4b42      	ldr	r3, [pc, #264]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	031b      	lsls	r3, r3, #12
 8003852:	493f      	ldr	r1, [pc, #252]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 8003854:	4313      	orrs	r3, r2
 8003856:	628b      	str	r3, [r1, #40]	; 0x28
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	3b01      	subs	r3, #1
 800385e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	3b01      	subs	r3, #1
 8003868:	025b      	lsls	r3, r3, #9
 800386a:	b29b      	uxth	r3, r3
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	3b01      	subs	r3, #1
 8003874:	041b      	lsls	r3, r3, #16
 8003876:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	3b01      	subs	r3, #1
 8003882:	061b      	lsls	r3, r3, #24
 8003884:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003888:	4931      	ldr	r1, [pc, #196]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 800388a:	4313      	orrs	r3, r2
 800388c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800388e:	4b30      	ldr	r3, [pc, #192]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	492d      	ldr	r1, [pc, #180]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 800389c:	4313      	orrs	r3, r2
 800389e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80038a0:	4b2b      	ldr	r3, [pc, #172]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	f023 0220 	bic.w	r2, r3, #32
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	4928      	ldr	r1, [pc, #160]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80038b2:	4b27      	ldr	r3, [pc, #156]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	4a26      	ldr	r2, [pc, #152]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 80038b8:	f023 0310 	bic.w	r3, r3, #16
 80038bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80038be:	4b24      	ldr	r3, [pc, #144]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 80038c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038c2:	4b24      	ldr	r3, [pc, #144]	; (8003954 <RCCEx_PLL2_Config+0x160>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	69d2      	ldr	r2, [r2, #28]
 80038ca:	00d2      	lsls	r2, r2, #3
 80038cc:	4920      	ldr	r1, [pc, #128]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80038d2:	4b1f      	ldr	r3, [pc, #124]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	4a1e      	ldr	r2, [pc, #120]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 80038d8:	f043 0310 	orr.w	r3, r3, #16
 80038dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d106      	bne.n	80038f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80038e4:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	4a19      	ldr	r2, [pc, #100]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 80038ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038f0:	e00f      	b.n	8003912 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d106      	bne.n	8003906 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80038f8:	4b15      	ldr	r3, [pc, #84]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	4a14      	ldr	r2, [pc, #80]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 80038fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003902:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003904:	e005      	b.n	8003912 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003906:	4b12      	ldr	r3, [pc, #72]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	4a11      	ldr	r2, [pc, #68]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 800390c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003910:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003912:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a0e      	ldr	r2, [pc, #56]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 8003918:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800391c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800391e:	f7fd fb05 	bl	8000f2c <HAL_GetTick>
 8003922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003924:	e008      	b.n	8003938 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003926:	f7fd fb01 	bl	8000f2c <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e006      	b.n	8003946 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <RCCEx_PLL2_Config+0x15c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003944:	7bfb      	ldrb	r3, [r7, #15]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	58024400 	.word	0x58024400
 8003954:	ffff0007 	.word	0xffff0007

08003958 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003966:	4b53      	ldr	r3, [pc, #332]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b03      	cmp	r3, #3
 8003970:	d101      	bne.n	8003976 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e099      	b.n	8003aaa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003976:	4b4f      	ldr	r3, [pc, #316]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a4e      	ldr	r2, [pc, #312]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 800397c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003982:	f7fd fad3 	bl	8000f2c <HAL_GetTick>
 8003986:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003988:	e008      	b.n	800399c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800398a:	f7fd facf 	bl	8000f2c <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e086      	b.n	8003aaa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800399c:	4b45      	ldr	r3, [pc, #276]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f0      	bne.n	800398a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80039a8:	4b42      	ldr	r3, [pc, #264]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	051b      	lsls	r3, r3, #20
 80039b6:	493f      	ldr	r1, [pc, #252]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	628b      	str	r3, [r1, #40]	; 0x28
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	3b01      	subs	r3, #1
 80039c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	025b      	lsls	r3, r3, #9
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	041b      	lsls	r3, r3, #16
 80039da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	3b01      	subs	r3, #1
 80039e6:	061b      	lsls	r3, r3, #24
 80039e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039ec:	4931      	ldr	r1, [pc, #196]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80039f2:	4b30      	ldr	r3, [pc, #192]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	492d      	ldr	r1, [pc, #180]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003a04:	4b2b      	ldr	r3, [pc, #172]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	4928      	ldr	r1, [pc, #160]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003a16:	4b27      	ldr	r3, [pc, #156]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	4a26      	ldr	r2, [pc, #152]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003a22:	4b24      	ldr	r3, [pc, #144]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a26:	4b24      	ldr	r3, [pc, #144]	; (8003ab8 <RCCEx_PLL3_Config+0x160>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	69d2      	ldr	r2, [r2, #28]
 8003a2e:	00d2      	lsls	r2, r2, #3
 8003a30:	4920      	ldr	r1, [pc, #128]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003a36:	4b1f      	ldr	r3, [pc, #124]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	4a1e      	ldr	r2, [pc, #120]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d106      	bne.n	8003a56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003a48:	4b1a      	ldr	r3, [pc, #104]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	4a19      	ldr	r2, [pc, #100]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003a4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a54:	e00f      	b.n	8003a76 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d106      	bne.n	8003a6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003a5c:	4b15      	ldr	r3, [pc, #84]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	4a14      	ldr	r2, [pc, #80]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003a62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a68:	e005      	b.n	8003a76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003a6a:	4b12      	ldr	r3, [pc, #72]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	4a11      	ldr	r2, [pc, #68]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003a70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003a76:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a0e      	ldr	r2, [pc, #56]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a82:	f7fd fa53 	bl	8000f2c <HAL_GetTick>
 8003a86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a88:	e008      	b.n	8003a9c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003a8a:	f7fd fa4f 	bl	8000f2c <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e006      	b.n	8003aaa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a9c:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <RCCEx_PLL3_Config+0x15c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	58024400 	.word	0x58024400
 8003ab8:	ffff0007 	.word	0xffff0007

08003abc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e042      	b.n	8003b54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d106      	bne.n	8003ae6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7fd f8c9 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2224      	movs	r2, #36	; 0x24
 8003aea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0201 	bic.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f992 	bl	8003e28 <UART_SetConfig>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e022      	b.n	8003b54 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 ff36 	bl	8004988 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 ffbd 	bl	8004acc <UART_CheckIdleState>
 8003b52:	4603      	mov	r3, r0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08a      	sub	sp, #40	; 0x28
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	f040 8083 	bne.w	8003c7e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_UART_Transmit+0x28>
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e07b      	b.n	8003c80 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_UART_Transmit+0x3a>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e074      	b.n	8003c80 <HAL_UART_Transmit+0x124>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2221      	movs	r2, #33	; 0x21
 8003baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003bae:	f7fd f9bd 	bl	8000f2c <HAL_GetTick>
 8003bb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	88fa      	ldrh	r2, [r7, #6]
 8003bb8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	88fa      	ldrh	r2, [r7, #6]
 8003bc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bcc:	d108      	bne.n	8003be0 <HAL_UART_Transmit+0x84>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d104      	bne.n	8003be0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	e003      	b.n	8003be8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8003bf0:	e02c      	b.n	8003c4c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2180      	movs	r1, #128	; 0x80
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 ffad 	bl	8004b5c <UART_WaitOnFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e039      	b.n	8003c80 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10b      	bne.n	8003c2a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c20:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	3302      	adds	r3, #2
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	e007      	b.n	8003c3a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	781a      	ldrb	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	3301      	adds	r3, #1
 8003c38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1cc      	bne.n	8003bf2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2140      	movs	r1, #64	; 0x40
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 ff7a 	bl	8004b5c <UART_WaitOnFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e006      	b.n	8003c80 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e000      	b.n	8003c80 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003c7e:	2302      	movs	r3, #2
  }
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3720      	adds	r7, #32
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08a      	sub	sp, #40	; 0x28
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	4613      	mov	r3, r2
 8003c96:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	f040 80bd 	bne.w	8003e1e <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <HAL_UART_Receive+0x28>
 8003caa:	88fb      	ldrh	r3, [r7, #6]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0b5      	b.n	8003e20 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_UART_Receive+0x3a>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e0ae      	b.n	8003e20 <HAL_UART_Receive+0x198>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2222      	movs	r2, #34	; 0x22
 8003cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003cda:	f7fd f927 	bl	8000f2c <HAL_GetTick>
 8003cde:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	88fa      	ldrh	r2, [r7, #6]
 8003ce4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	88fa      	ldrh	r2, [r7, #6]
 8003cec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf8:	d10e      	bne.n	8003d18 <HAL_UART_Receive+0x90>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d105      	bne.n	8003d0e <HAL_UART_Receive+0x86>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003d08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003d0c:	e02d      	b.n	8003d6a <HAL_UART_Receive+0xe2>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	22ff      	movs	r2, #255	; 0xff
 8003d12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003d16:	e028      	b.n	8003d6a <HAL_UART_Receive+0xe2>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10d      	bne.n	8003d3c <HAL_UART_Receive+0xb4>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d104      	bne.n	8003d32 <HAL_UART_Receive+0xaa>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	22ff      	movs	r2, #255	; 0xff
 8003d2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003d30:	e01b      	b.n	8003d6a <HAL_UART_Receive+0xe2>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	227f      	movs	r2, #127	; 0x7f
 8003d36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003d3a:	e016      	b.n	8003d6a <HAL_UART_Receive+0xe2>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d44:	d10d      	bne.n	8003d62 <HAL_UART_Receive+0xda>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d104      	bne.n	8003d58 <HAL_UART_Receive+0xd0>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	227f      	movs	r2, #127	; 0x7f
 8003d52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003d56:	e008      	b.n	8003d6a <HAL_UART_Receive+0xe2>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	223f      	movs	r2, #63	; 0x3f
 8003d5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003d60:	e003      	b.n	8003d6a <HAL_UART_Receive+0xe2>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003d70:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7a:	d108      	bne.n	8003d8e <HAL_UART_Receive+0x106>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d104      	bne.n	8003d8e <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	61bb      	str	r3, [r7, #24]
 8003d8c:	e003      	b.n	8003d96 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003d9e:	e032      	b.n	8003e06 <HAL_UART_Receive+0x17e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2200      	movs	r2, #0
 8003da8:	2120      	movs	r1, #32
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fed6 	bl	8004b5c <UART_WaitOnFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e032      	b.n	8003e20 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10c      	bne.n	8003dda <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	8a7b      	ldrh	r3, [r7, #18]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	3302      	adds	r3, #2
 8003dd6:	61bb      	str	r3, [r7, #24]
 8003dd8:	e00c      	b.n	8003df4 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	8a7b      	ldrh	r3, [r7, #18]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	4013      	ands	r3, r2
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	3301      	adds	r3, #1
 8003df2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1c6      	bne.n	8003da0 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e000      	b.n	8003e20 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8003e1e:	2302      	movs	r3, #2
  }
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e28:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003e2c:	b08e      	sub	sp, #56	; 0x38
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	431a      	orrs	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e56:	4313      	orrs	r3, r2
 8003e58:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	4bc1      	ldr	r3, [pc, #772]	; (8004168 <UART_SetConfig+0x340>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4ab7      	ldr	r2, [pc, #732]	; (800416c <UART_SetConfig+0x344>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	4bb2      	ldr	r3, [pc, #712]	; (8004170 <UART_SetConfig+0x348>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003eae:	430b      	orrs	r3, r1
 8003eb0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	f023 010f 	bic.w	r1, r3, #15
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4aa9      	ldr	r2, [pc, #676]	; (8004174 <UART_SetConfig+0x34c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d177      	bne.n	8003fc2 <UART_SetConfig+0x19a>
 8003ed2:	4ba9      	ldr	r3, [pc, #676]	; (8004178 <UART_SetConfig+0x350>)
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eda:	2b28      	cmp	r3, #40	; 0x28
 8003edc:	d86c      	bhi.n	8003fb8 <UART_SetConfig+0x190>
 8003ede:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <UART_SetConfig+0xbc>)
 8003ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee4:	08003f89 	.word	0x08003f89
 8003ee8:	08003fb9 	.word	0x08003fb9
 8003eec:	08003fb9 	.word	0x08003fb9
 8003ef0:	08003fb9 	.word	0x08003fb9
 8003ef4:	08003fb9 	.word	0x08003fb9
 8003ef8:	08003fb9 	.word	0x08003fb9
 8003efc:	08003fb9 	.word	0x08003fb9
 8003f00:	08003fb9 	.word	0x08003fb9
 8003f04:	08003f91 	.word	0x08003f91
 8003f08:	08003fb9 	.word	0x08003fb9
 8003f0c:	08003fb9 	.word	0x08003fb9
 8003f10:	08003fb9 	.word	0x08003fb9
 8003f14:	08003fb9 	.word	0x08003fb9
 8003f18:	08003fb9 	.word	0x08003fb9
 8003f1c:	08003fb9 	.word	0x08003fb9
 8003f20:	08003fb9 	.word	0x08003fb9
 8003f24:	08003f99 	.word	0x08003f99
 8003f28:	08003fb9 	.word	0x08003fb9
 8003f2c:	08003fb9 	.word	0x08003fb9
 8003f30:	08003fb9 	.word	0x08003fb9
 8003f34:	08003fb9 	.word	0x08003fb9
 8003f38:	08003fb9 	.word	0x08003fb9
 8003f3c:	08003fb9 	.word	0x08003fb9
 8003f40:	08003fb9 	.word	0x08003fb9
 8003f44:	08003fa1 	.word	0x08003fa1
 8003f48:	08003fb9 	.word	0x08003fb9
 8003f4c:	08003fb9 	.word	0x08003fb9
 8003f50:	08003fb9 	.word	0x08003fb9
 8003f54:	08003fb9 	.word	0x08003fb9
 8003f58:	08003fb9 	.word	0x08003fb9
 8003f5c:	08003fb9 	.word	0x08003fb9
 8003f60:	08003fb9 	.word	0x08003fb9
 8003f64:	08003fa9 	.word	0x08003fa9
 8003f68:	08003fb9 	.word	0x08003fb9
 8003f6c:	08003fb9 	.word	0x08003fb9
 8003f70:	08003fb9 	.word	0x08003fb9
 8003f74:	08003fb9 	.word	0x08003fb9
 8003f78:	08003fb9 	.word	0x08003fb9
 8003f7c:	08003fb9 	.word	0x08003fb9
 8003f80:	08003fb9 	.word	0x08003fb9
 8003f84:	08003fb1 	.word	0x08003fb1
 8003f88:	2301      	movs	r3, #1
 8003f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f8e:	e233      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8003f90:	2304      	movs	r3, #4
 8003f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f96:	e22f      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8003f98:	2308      	movs	r3, #8
 8003f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f9e:	e22b      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fa6:	e227      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8003fa8:	2320      	movs	r3, #32
 8003faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fae:	e223      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8003fb0:	2340      	movs	r3, #64	; 0x40
 8003fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fb6:	e21f      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8003fb8:	2380      	movs	r3, #128	; 0x80
 8003fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fbe:	bf00      	nop
 8003fc0:	e21a      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a6d      	ldr	r2, [pc, #436]	; (800417c <UART_SetConfig+0x354>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d132      	bne.n	8004032 <UART_SetConfig+0x20a>
 8003fcc:	4b6a      	ldr	r3, [pc, #424]	; (8004178 <UART_SetConfig+0x350>)
 8003fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	2b05      	cmp	r3, #5
 8003fd6:	d827      	bhi.n	8004028 <UART_SetConfig+0x200>
 8003fd8:	a201      	add	r2, pc, #4	; (adr r2, 8003fe0 <UART_SetConfig+0x1b8>)
 8003fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fde:	bf00      	nop
 8003fe0:	08003ff9 	.word	0x08003ff9
 8003fe4:	08004001 	.word	0x08004001
 8003fe8:	08004009 	.word	0x08004009
 8003fec:	08004011 	.word	0x08004011
 8003ff0:	08004019 	.word	0x08004019
 8003ff4:	08004021 	.word	0x08004021
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ffe:	e1fb      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004000:	2304      	movs	r3, #4
 8004002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004006:	e1f7      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004008:	2308      	movs	r3, #8
 800400a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800400e:	e1f3      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004010:	2310      	movs	r3, #16
 8004012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004016:	e1ef      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004018:	2320      	movs	r3, #32
 800401a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800401e:	e1eb      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004020:	2340      	movs	r3, #64	; 0x40
 8004022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004026:	e1e7      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004028:	2380      	movs	r3, #128	; 0x80
 800402a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800402e:	bf00      	nop
 8004030:	e1e2      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a52      	ldr	r2, [pc, #328]	; (8004180 <UART_SetConfig+0x358>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d132      	bne.n	80040a2 <UART_SetConfig+0x27a>
 800403c:	4b4e      	ldr	r3, [pc, #312]	; (8004178 <UART_SetConfig+0x350>)
 800403e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	2b05      	cmp	r3, #5
 8004046:	d827      	bhi.n	8004098 <UART_SetConfig+0x270>
 8004048:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <UART_SetConfig+0x228>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	08004069 	.word	0x08004069
 8004054:	08004071 	.word	0x08004071
 8004058:	08004079 	.word	0x08004079
 800405c:	08004081 	.word	0x08004081
 8004060:	08004089 	.word	0x08004089
 8004064:	08004091 	.word	0x08004091
 8004068:	2300      	movs	r3, #0
 800406a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800406e:	e1c3      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004070:	2304      	movs	r3, #4
 8004072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004076:	e1bf      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004078:	2308      	movs	r3, #8
 800407a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800407e:	e1bb      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004080:	2310      	movs	r3, #16
 8004082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004086:	e1b7      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004088:	2320      	movs	r3, #32
 800408a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800408e:	e1b3      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004090:	2340      	movs	r3, #64	; 0x40
 8004092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004096:	e1af      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800409e:	bf00      	nop
 80040a0:	e1aa      	b.n	80043f8 <UART_SetConfig+0x5d0>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a37      	ldr	r2, [pc, #220]	; (8004184 <UART_SetConfig+0x35c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d132      	bne.n	8004112 <UART_SetConfig+0x2ea>
 80040ac:	4b32      	ldr	r3, [pc, #200]	; (8004178 <UART_SetConfig+0x350>)
 80040ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	2b05      	cmp	r3, #5
 80040b6:	d827      	bhi.n	8004108 <UART_SetConfig+0x2e0>
 80040b8:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <UART_SetConfig+0x298>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	080040d9 	.word	0x080040d9
 80040c4:	080040e1 	.word	0x080040e1
 80040c8:	080040e9 	.word	0x080040e9
 80040cc:	080040f1 	.word	0x080040f1
 80040d0:	080040f9 	.word	0x080040f9
 80040d4:	08004101 	.word	0x08004101
 80040d8:	2300      	movs	r3, #0
 80040da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040de:	e18b      	b.n	80043f8 <UART_SetConfig+0x5d0>
 80040e0:	2304      	movs	r3, #4
 80040e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040e6:	e187      	b.n	80043f8 <UART_SetConfig+0x5d0>
 80040e8:	2308      	movs	r3, #8
 80040ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ee:	e183      	b.n	80043f8 <UART_SetConfig+0x5d0>
 80040f0:	2310      	movs	r3, #16
 80040f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040f6:	e17f      	b.n	80043f8 <UART_SetConfig+0x5d0>
 80040f8:	2320      	movs	r3, #32
 80040fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040fe:	e17b      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004100:	2340      	movs	r3, #64	; 0x40
 8004102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004106:	e177      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004108:	2380      	movs	r3, #128	; 0x80
 800410a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800410e:	bf00      	nop
 8004110:	e172      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a1c      	ldr	r2, [pc, #112]	; (8004188 <UART_SetConfig+0x360>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d144      	bne.n	80041a6 <UART_SetConfig+0x37e>
 800411c:	4b16      	ldr	r3, [pc, #88]	; (8004178 <UART_SetConfig+0x350>)
 800411e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	2b05      	cmp	r3, #5
 8004126:	d839      	bhi.n	800419c <UART_SetConfig+0x374>
 8004128:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <UART_SetConfig+0x308>)
 800412a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412e:	bf00      	nop
 8004130:	08004149 	.word	0x08004149
 8004134:	08004151 	.word	0x08004151
 8004138:	08004159 	.word	0x08004159
 800413c:	08004161 	.word	0x08004161
 8004140:	0800418d 	.word	0x0800418d
 8004144:	08004195 	.word	0x08004195
 8004148:	2300      	movs	r3, #0
 800414a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800414e:	e153      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004150:	2304      	movs	r3, #4
 8004152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004156:	e14f      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004158:	2308      	movs	r3, #8
 800415a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800415e:	e14b      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004160:	2310      	movs	r3, #16
 8004162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004166:	e147      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004168:	cfff69f3 	.word	0xcfff69f3
 800416c:	58000c00 	.word	0x58000c00
 8004170:	11fff4ff 	.word	0x11fff4ff
 8004174:	40011000 	.word	0x40011000
 8004178:	58024400 	.word	0x58024400
 800417c:	40004400 	.word	0x40004400
 8004180:	40004800 	.word	0x40004800
 8004184:	40004c00 	.word	0x40004c00
 8004188:	40005000 	.word	0x40005000
 800418c:	2320      	movs	r3, #32
 800418e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004192:	e131      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004194:	2340      	movs	r3, #64	; 0x40
 8004196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800419a:	e12d      	b.n	80043f8 <UART_SetConfig+0x5d0>
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041a2:	bf00      	nop
 80041a4:	e128      	b.n	80043f8 <UART_SetConfig+0x5d0>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4ab6      	ldr	r2, [pc, #728]	; (8004484 <UART_SetConfig+0x65c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d178      	bne.n	80042a2 <UART_SetConfig+0x47a>
 80041b0:	4bb5      	ldr	r3, [pc, #724]	; (8004488 <UART_SetConfig+0x660>)
 80041b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041b8:	2b28      	cmp	r3, #40	; 0x28
 80041ba:	d86d      	bhi.n	8004298 <UART_SetConfig+0x470>
 80041bc:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <UART_SetConfig+0x39c>)
 80041be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c2:	bf00      	nop
 80041c4:	08004269 	.word	0x08004269
 80041c8:	08004299 	.word	0x08004299
 80041cc:	08004299 	.word	0x08004299
 80041d0:	08004299 	.word	0x08004299
 80041d4:	08004299 	.word	0x08004299
 80041d8:	08004299 	.word	0x08004299
 80041dc:	08004299 	.word	0x08004299
 80041e0:	08004299 	.word	0x08004299
 80041e4:	08004271 	.word	0x08004271
 80041e8:	08004299 	.word	0x08004299
 80041ec:	08004299 	.word	0x08004299
 80041f0:	08004299 	.word	0x08004299
 80041f4:	08004299 	.word	0x08004299
 80041f8:	08004299 	.word	0x08004299
 80041fc:	08004299 	.word	0x08004299
 8004200:	08004299 	.word	0x08004299
 8004204:	08004279 	.word	0x08004279
 8004208:	08004299 	.word	0x08004299
 800420c:	08004299 	.word	0x08004299
 8004210:	08004299 	.word	0x08004299
 8004214:	08004299 	.word	0x08004299
 8004218:	08004299 	.word	0x08004299
 800421c:	08004299 	.word	0x08004299
 8004220:	08004299 	.word	0x08004299
 8004224:	08004281 	.word	0x08004281
 8004228:	08004299 	.word	0x08004299
 800422c:	08004299 	.word	0x08004299
 8004230:	08004299 	.word	0x08004299
 8004234:	08004299 	.word	0x08004299
 8004238:	08004299 	.word	0x08004299
 800423c:	08004299 	.word	0x08004299
 8004240:	08004299 	.word	0x08004299
 8004244:	08004289 	.word	0x08004289
 8004248:	08004299 	.word	0x08004299
 800424c:	08004299 	.word	0x08004299
 8004250:	08004299 	.word	0x08004299
 8004254:	08004299 	.word	0x08004299
 8004258:	08004299 	.word	0x08004299
 800425c:	08004299 	.word	0x08004299
 8004260:	08004299 	.word	0x08004299
 8004264:	08004291 	.word	0x08004291
 8004268:	2301      	movs	r3, #1
 800426a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800426e:	e0c3      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004270:	2304      	movs	r3, #4
 8004272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004276:	e0bf      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004278:	2308      	movs	r3, #8
 800427a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800427e:	e0bb      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004280:	2310      	movs	r3, #16
 8004282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004286:	e0b7      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004288:	2320      	movs	r3, #32
 800428a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800428e:	e0b3      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004290:	2340      	movs	r3, #64	; 0x40
 8004292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004296:	e0af      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004298:	2380      	movs	r3, #128	; 0x80
 800429a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800429e:	bf00      	nop
 80042a0:	e0aa      	b.n	80043f8 <UART_SetConfig+0x5d0>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a79      	ldr	r2, [pc, #484]	; (800448c <UART_SetConfig+0x664>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d132      	bne.n	8004312 <UART_SetConfig+0x4ea>
 80042ac:	4b76      	ldr	r3, [pc, #472]	; (8004488 <UART_SetConfig+0x660>)
 80042ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	2b05      	cmp	r3, #5
 80042b6:	d827      	bhi.n	8004308 <UART_SetConfig+0x4e0>
 80042b8:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <UART_SetConfig+0x498>)
 80042ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042be:	bf00      	nop
 80042c0:	080042d9 	.word	0x080042d9
 80042c4:	080042e1 	.word	0x080042e1
 80042c8:	080042e9 	.word	0x080042e9
 80042cc:	080042f1 	.word	0x080042f1
 80042d0:	080042f9 	.word	0x080042f9
 80042d4:	08004301 	.word	0x08004301
 80042d8:	2300      	movs	r3, #0
 80042da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042de:	e08b      	b.n	80043f8 <UART_SetConfig+0x5d0>
 80042e0:	2304      	movs	r3, #4
 80042e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042e6:	e087      	b.n	80043f8 <UART_SetConfig+0x5d0>
 80042e8:	2308      	movs	r3, #8
 80042ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ee:	e083      	b.n	80043f8 <UART_SetConfig+0x5d0>
 80042f0:	2310      	movs	r3, #16
 80042f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042f6:	e07f      	b.n	80043f8 <UART_SetConfig+0x5d0>
 80042f8:	2320      	movs	r3, #32
 80042fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042fe:	e07b      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004300:	2340      	movs	r3, #64	; 0x40
 8004302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004306:	e077      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800430e:	bf00      	nop
 8004310:	e072      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a5e      	ldr	r2, [pc, #376]	; (8004490 <UART_SetConfig+0x668>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d132      	bne.n	8004382 <UART_SetConfig+0x55a>
 800431c:	4b5a      	ldr	r3, [pc, #360]	; (8004488 <UART_SetConfig+0x660>)
 800431e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	2b05      	cmp	r3, #5
 8004326:	d827      	bhi.n	8004378 <UART_SetConfig+0x550>
 8004328:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <UART_SetConfig+0x508>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004349 	.word	0x08004349
 8004334:	08004351 	.word	0x08004351
 8004338:	08004359 	.word	0x08004359
 800433c:	08004361 	.word	0x08004361
 8004340:	08004369 	.word	0x08004369
 8004344:	08004371 	.word	0x08004371
 8004348:	2300      	movs	r3, #0
 800434a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800434e:	e053      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004350:	2304      	movs	r3, #4
 8004352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004356:	e04f      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004358:	2308      	movs	r3, #8
 800435a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800435e:	e04b      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004360:	2310      	movs	r3, #16
 8004362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004366:	e047      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004368:	2320      	movs	r3, #32
 800436a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800436e:	e043      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004370:	2340      	movs	r3, #64	; 0x40
 8004372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004376:	e03f      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004378:	2380      	movs	r3, #128	; 0x80
 800437a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800437e:	bf00      	nop
 8004380:	e03a      	b.n	80043f8 <UART_SetConfig+0x5d0>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a43      	ldr	r2, [pc, #268]	; (8004494 <UART_SetConfig+0x66c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d132      	bne.n	80043f2 <UART_SetConfig+0x5ca>
 800438c:	4b3e      	ldr	r3, [pc, #248]	; (8004488 <UART_SetConfig+0x660>)
 800438e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	2b05      	cmp	r3, #5
 8004396:	d827      	bhi.n	80043e8 <UART_SetConfig+0x5c0>
 8004398:	a201      	add	r2, pc, #4	; (adr r2, 80043a0 <UART_SetConfig+0x578>)
 800439a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439e:	bf00      	nop
 80043a0:	080043b9 	.word	0x080043b9
 80043a4:	080043c1 	.word	0x080043c1
 80043a8:	080043c9 	.word	0x080043c9
 80043ac:	080043d1 	.word	0x080043d1
 80043b0:	080043d9 	.word	0x080043d9
 80043b4:	080043e1 	.word	0x080043e1
 80043b8:	2302      	movs	r3, #2
 80043ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043be:	e01b      	b.n	80043f8 <UART_SetConfig+0x5d0>
 80043c0:	2304      	movs	r3, #4
 80043c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043c6:	e017      	b.n	80043f8 <UART_SetConfig+0x5d0>
 80043c8:	2308      	movs	r3, #8
 80043ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ce:	e013      	b.n	80043f8 <UART_SetConfig+0x5d0>
 80043d0:	2310      	movs	r3, #16
 80043d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043d6:	e00f      	b.n	80043f8 <UART_SetConfig+0x5d0>
 80043d8:	2320      	movs	r3, #32
 80043da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043de:	e00b      	b.n	80043f8 <UART_SetConfig+0x5d0>
 80043e0:	2340      	movs	r3, #64	; 0x40
 80043e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043e6:	e007      	b.n	80043f8 <UART_SetConfig+0x5d0>
 80043e8:	2380      	movs	r3, #128	; 0x80
 80043ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ee:	bf00      	nop
 80043f0:	e002      	b.n	80043f8 <UART_SetConfig+0x5d0>
 80043f2:	2380      	movs	r3, #128	; 0x80
 80043f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a25      	ldr	r2, [pc, #148]	; (8004494 <UART_SetConfig+0x66c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	f040 80b8 	bne.w	8004574 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004404:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004408:	2b08      	cmp	r3, #8
 800440a:	d019      	beq.n	8004440 <UART_SetConfig+0x618>
 800440c:	2b08      	cmp	r3, #8
 800440e:	dc04      	bgt.n	800441a <UART_SetConfig+0x5f2>
 8004410:	2b02      	cmp	r3, #2
 8004412:	d009      	beq.n	8004428 <UART_SetConfig+0x600>
 8004414:	2b04      	cmp	r3, #4
 8004416:	d00b      	beq.n	8004430 <UART_SetConfig+0x608>
 8004418:	e042      	b.n	80044a0 <UART_SetConfig+0x678>
 800441a:	2b20      	cmp	r3, #32
 800441c:	d02b      	beq.n	8004476 <UART_SetConfig+0x64e>
 800441e:	2b40      	cmp	r3, #64	; 0x40
 8004420:	d02c      	beq.n	800447c <UART_SetConfig+0x654>
 8004422:	2b10      	cmp	r3, #16
 8004424:	d014      	beq.n	8004450 <UART_SetConfig+0x628>
 8004426:	e03b      	b.n	80044a0 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004428:	f7fe ff36 	bl	8003298 <HAL_RCCEx_GetD3PCLK1Freq>
 800442c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800442e:	e03d      	b.n	80044ac <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004430:	f107 0314 	add.w	r3, r7, #20
 8004434:	4618      	mov	r0, r3
 8004436:	f7fe ff45 	bl	80032c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800443e:	e035      	b.n	80044ac <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004440:	f107 0308 	add.w	r3, r7, #8
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff f889 	bl	800355c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800444e:	e02d      	b.n	80044ac <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004450:	4b0d      	ldr	r3, [pc, #52]	; (8004488 <UART_SetConfig+0x660>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b00      	cmp	r3, #0
 800445a:	d009      	beq.n	8004470 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <UART_SetConfig+0x660>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	08db      	lsrs	r3, r3, #3
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	4a0c      	ldr	r2, [pc, #48]	; (8004498 <UART_SetConfig+0x670>)
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800446e:	e01d      	b.n	80044ac <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <UART_SetConfig+0x670>)
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004474:	e01a      	b.n	80044ac <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004476:	4b09      	ldr	r3, [pc, #36]	; (800449c <UART_SetConfig+0x674>)
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800447a:	e017      	b.n	80044ac <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800447c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004480:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004482:	e013      	b.n	80044ac <UART_SetConfig+0x684>
 8004484:	40011400 	.word	0x40011400
 8004488:	58024400 	.word	0x58024400
 800448c:	40007800 	.word	0x40007800
 8004490:	40007c00 	.word	0x40007c00
 8004494:	58000c00 	.word	0x58000c00
 8004498:	03d09000 	.word	0x03d09000
 800449c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80044aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 824d 	beq.w	800494e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	4aad      	ldr	r2, [pc, #692]	; (8004770 <UART_SetConfig+0x948>)
 80044ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044be:	461a      	mov	r2, r3
 80044c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80044c6:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	4413      	add	r3, r2
 80044d2:	6a3a      	ldr	r2, [r7, #32]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d305      	bcc.n	80044e4 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044de:	6a3a      	ldr	r2, [r7, #32]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d903      	bls.n	80044ec <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80044ea:	e230      	b.n	800494e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ee:	4618      	mov	r0, r3
 80044f0:	f04f 0100 	mov.w	r1, #0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	4a9d      	ldr	r2, [pc, #628]	; (8004770 <UART_SetConfig+0x948>)
 80044fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	f04f 0400 	mov.w	r4, #0
 8004504:	461a      	mov	r2, r3
 8004506:	4623      	mov	r3, r4
 8004508:	f7fb ff3a 	bl	8000380 <__aeabi_uldivmod>
 800450c:	4603      	mov	r3, r0
 800450e:	460c      	mov	r4, r1
 8004510:	4619      	mov	r1, r3
 8004512:	4622      	mov	r2, r4
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	f04f 0400 	mov.w	r4, #0
 800451c:	0214      	lsls	r4, r2, #8
 800451e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004522:	020b      	lsls	r3, r1, #8
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6852      	ldr	r2, [r2, #4]
 8004528:	0852      	lsrs	r2, r2, #1
 800452a:	4611      	mov	r1, r2
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	eb13 0b01 	adds.w	fp, r3, r1
 8004534:	eb44 0c02 	adc.w	ip, r4, r2
 8004538:	4658      	mov	r0, fp
 800453a:	4661      	mov	r1, ip
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f04f 0400 	mov.w	r4, #0
 8004544:	461a      	mov	r2, r3
 8004546:	4623      	mov	r3, r4
 8004548:	f7fb ff1a 	bl	8000380 <__aeabi_uldivmod>
 800454c:	4603      	mov	r3, r0
 800454e:	460c      	mov	r4, r1
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004558:	d308      	bcc.n	800456c <UART_SetConfig+0x744>
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004560:	d204      	bcs.n	800456c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004568:	60da      	str	r2, [r3, #12]
 800456a:	e1f0      	b.n	800494e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004572:	e1ec      	b.n	800494e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800457c:	f040 8100 	bne.w	8004780 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8004580:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004584:	2b40      	cmp	r3, #64	; 0x40
 8004586:	f200 80b7 	bhi.w	80046f8 <UART_SetConfig+0x8d0>
 800458a:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <UART_SetConfig+0x768>)
 800458c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004590:	08004695 	.word	0x08004695
 8004594:	0800469d 	.word	0x0800469d
 8004598:	080046f9 	.word	0x080046f9
 800459c:	080046f9 	.word	0x080046f9
 80045a0:	080046a5 	.word	0x080046a5
 80045a4:	080046f9 	.word	0x080046f9
 80045a8:	080046f9 	.word	0x080046f9
 80045ac:	080046f9 	.word	0x080046f9
 80045b0:	080046b5 	.word	0x080046b5
 80045b4:	080046f9 	.word	0x080046f9
 80045b8:	080046f9 	.word	0x080046f9
 80045bc:	080046f9 	.word	0x080046f9
 80045c0:	080046f9 	.word	0x080046f9
 80045c4:	080046f9 	.word	0x080046f9
 80045c8:	080046f9 	.word	0x080046f9
 80045cc:	080046f9 	.word	0x080046f9
 80045d0:	080046c5 	.word	0x080046c5
 80045d4:	080046f9 	.word	0x080046f9
 80045d8:	080046f9 	.word	0x080046f9
 80045dc:	080046f9 	.word	0x080046f9
 80045e0:	080046f9 	.word	0x080046f9
 80045e4:	080046f9 	.word	0x080046f9
 80045e8:	080046f9 	.word	0x080046f9
 80045ec:	080046f9 	.word	0x080046f9
 80045f0:	080046f9 	.word	0x080046f9
 80045f4:	080046f9 	.word	0x080046f9
 80045f8:	080046f9 	.word	0x080046f9
 80045fc:	080046f9 	.word	0x080046f9
 8004600:	080046f9 	.word	0x080046f9
 8004604:	080046f9 	.word	0x080046f9
 8004608:	080046f9 	.word	0x080046f9
 800460c:	080046f9 	.word	0x080046f9
 8004610:	080046eb 	.word	0x080046eb
 8004614:	080046f9 	.word	0x080046f9
 8004618:	080046f9 	.word	0x080046f9
 800461c:	080046f9 	.word	0x080046f9
 8004620:	080046f9 	.word	0x080046f9
 8004624:	080046f9 	.word	0x080046f9
 8004628:	080046f9 	.word	0x080046f9
 800462c:	080046f9 	.word	0x080046f9
 8004630:	080046f9 	.word	0x080046f9
 8004634:	080046f9 	.word	0x080046f9
 8004638:	080046f9 	.word	0x080046f9
 800463c:	080046f9 	.word	0x080046f9
 8004640:	080046f9 	.word	0x080046f9
 8004644:	080046f9 	.word	0x080046f9
 8004648:	080046f9 	.word	0x080046f9
 800464c:	080046f9 	.word	0x080046f9
 8004650:	080046f9 	.word	0x080046f9
 8004654:	080046f9 	.word	0x080046f9
 8004658:	080046f9 	.word	0x080046f9
 800465c:	080046f9 	.word	0x080046f9
 8004660:	080046f9 	.word	0x080046f9
 8004664:	080046f9 	.word	0x080046f9
 8004668:	080046f9 	.word	0x080046f9
 800466c:	080046f9 	.word	0x080046f9
 8004670:	080046f9 	.word	0x080046f9
 8004674:	080046f9 	.word	0x080046f9
 8004678:	080046f9 	.word	0x080046f9
 800467c:	080046f9 	.word	0x080046f9
 8004680:	080046f9 	.word	0x080046f9
 8004684:	080046f9 	.word	0x080046f9
 8004688:	080046f9 	.word	0x080046f9
 800468c:	080046f9 	.word	0x080046f9
 8004690:	080046f1 	.word	0x080046f1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004694:	f7fd fee6 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 8004698:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800469a:	e033      	b.n	8004704 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800469c:	f7fd fef8 	bl	8002490 <HAL_RCC_GetPCLK2Freq>
 80046a0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80046a2:	e02f      	b.n	8004704 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046a4:	f107 0314 	add.w	r3, r7, #20
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fe fe0b 	bl	80032c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046b2:	e027      	b.n	8004704 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046b4:	f107 0308 	add.w	r3, r7, #8
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fe ff4f 	bl	800355c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046c2:	e01f      	b.n	8004704 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046c4:	4b2b      	ldr	r3, [pc, #172]	; (8004774 <UART_SetConfig+0x94c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d009      	beq.n	80046e4 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80046d0:	4b28      	ldr	r3, [pc, #160]	; (8004774 <UART_SetConfig+0x94c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	08db      	lsrs	r3, r3, #3
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	4a27      	ldr	r2, [pc, #156]	; (8004778 <UART_SetConfig+0x950>)
 80046dc:	fa22 f303 	lsr.w	r3, r2, r3
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80046e2:	e00f      	b.n	8004704 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80046e4:	4b24      	ldr	r3, [pc, #144]	; (8004778 <UART_SetConfig+0x950>)
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046e8:	e00c      	b.n	8004704 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80046ea:	4b24      	ldr	r3, [pc, #144]	; (800477c <UART_SetConfig+0x954>)
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046ee:	e009      	b.n	8004704 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046f6:	e005      	b.n	8004704 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004702:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8121 	beq.w	800494e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	4a17      	ldr	r2, [pc, #92]	; (8004770 <UART_SetConfig+0x948>)
 8004712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004716:	461a      	mov	r2, r3
 8004718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471a:	fbb3 f3f2 	udiv	r3, r3, r2
 800471e:	005a      	lsls	r2, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	085b      	lsrs	r3, r3, #1
 8004726:	441a      	add	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004730:	b29b      	uxth	r3, r3
 8004732:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	2b0f      	cmp	r3, #15
 8004738:	d916      	bls.n	8004768 <UART_SetConfig+0x940>
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004740:	d212      	bcs.n	8004768 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004744:	b29b      	uxth	r3, r3
 8004746:	f023 030f 	bic.w	r3, r3, #15
 800474a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	085b      	lsrs	r3, r3, #1
 8004750:	b29b      	uxth	r3, r3
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	b29a      	uxth	r2, r3
 8004758:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800475a:	4313      	orrs	r3, r2
 800475c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004764:	60da      	str	r2, [r3, #12]
 8004766:	e0f2      	b.n	800494e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800476e:	e0ee      	b.n	800494e <UART_SetConfig+0xb26>
 8004770:	080057b4 	.word	0x080057b4
 8004774:	58024400 	.word	0x58024400
 8004778:	03d09000 	.word	0x03d09000
 800477c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8004780:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004784:	2b40      	cmp	r3, #64	; 0x40
 8004786:	f200 80b7 	bhi.w	80048f8 <UART_SetConfig+0xad0>
 800478a:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <UART_SetConfig+0x968>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	08004895 	.word	0x08004895
 8004794:	0800489d 	.word	0x0800489d
 8004798:	080048f9 	.word	0x080048f9
 800479c:	080048f9 	.word	0x080048f9
 80047a0:	080048a5 	.word	0x080048a5
 80047a4:	080048f9 	.word	0x080048f9
 80047a8:	080048f9 	.word	0x080048f9
 80047ac:	080048f9 	.word	0x080048f9
 80047b0:	080048b5 	.word	0x080048b5
 80047b4:	080048f9 	.word	0x080048f9
 80047b8:	080048f9 	.word	0x080048f9
 80047bc:	080048f9 	.word	0x080048f9
 80047c0:	080048f9 	.word	0x080048f9
 80047c4:	080048f9 	.word	0x080048f9
 80047c8:	080048f9 	.word	0x080048f9
 80047cc:	080048f9 	.word	0x080048f9
 80047d0:	080048c5 	.word	0x080048c5
 80047d4:	080048f9 	.word	0x080048f9
 80047d8:	080048f9 	.word	0x080048f9
 80047dc:	080048f9 	.word	0x080048f9
 80047e0:	080048f9 	.word	0x080048f9
 80047e4:	080048f9 	.word	0x080048f9
 80047e8:	080048f9 	.word	0x080048f9
 80047ec:	080048f9 	.word	0x080048f9
 80047f0:	080048f9 	.word	0x080048f9
 80047f4:	080048f9 	.word	0x080048f9
 80047f8:	080048f9 	.word	0x080048f9
 80047fc:	080048f9 	.word	0x080048f9
 8004800:	080048f9 	.word	0x080048f9
 8004804:	080048f9 	.word	0x080048f9
 8004808:	080048f9 	.word	0x080048f9
 800480c:	080048f9 	.word	0x080048f9
 8004810:	080048eb 	.word	0x080048eb
 8004814:	080048f9 	.word	0x080048f9
 8004818:	080048f9 	.word	0x080048f9
 800481c:	080048f9 	.word	0x080048f9
 8004820:	080048f9 	.word	0x080048f9
 8004824:	080048f9 	.word	0x080048f9
 8004828:	080048f9 	.word	0x080048f9
 800482c:	080048f9 	.word	0x080048f9
 8004830:	080048f9 	.word	0x080048f9
 8004834:	080048f9 	.word	0x080048f9
 8004838:	080048f9 	.word	0x080048f9
 800483c:	080048f9 	.word	0x080048f9
 8004840:	080048f9 	.word	0x080048f9
 8004844:	080048f9 	.word	0x080048f9
 8004848:	080048f9 	.word	0x080048f9
 800484c:	080048f9 	.word	0x080048f9
 8004850:	080048f9 	.word	0x080048f9
 8004854:	080048f9 	.word	0x080048f9
 8004858:	080048f9 	.word	0x080048f9
 800485c:	080048f9 	.word	0x080048f9
 8004860:	080048f9 	.word	0x080048f9
 8004864:	080048f9 	.word	0x080048f9
 8004868:	080048f9 	.word	0x080048f9
 800486c:	080048f9 	.word	0x080048f9
 8004870:	080048f9 	.word	0x080048f9
 8004874:	080048f9 	.word	0x080048f9
 8004878:	080048f9 	.word	0x080048f9
 800487c:	080048f9 	.word	0x080048f9
 8004880:	080048f9 	.word	0x080048f9
 8004884:	080048f9 	.word	0x080048f9
 8004888:	080048f9 	.word	0x080048f9
 800488c:	080048f9 	.word	0x080048f9
 8004890:	080048f1 	.word	0x080048f1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004894:	f7fd fde6 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 8004898:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800489a:	e033      	b.n	8004904 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800489c:	f7fd fdf8 	bl	8002490 <HAL_RCC_GetPCLK2Freq>
 80048a0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80048a2:	e02f      	b.n	8004904 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048a4:	f107 0314 	add.w	r3, r7, #20
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fe fd0b 	bl	80032c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048b2:	e027      	b.n	8004904 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048b4:	f107 0308 	add.w	r3, r7, #8
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fe fe4f 	bl	800355c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048c2:	e01f      	b.n	8004904 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048c4:	4b2c      	ldr	r3, [pc, #176]	; (8004978 <UART_SetConfig+0xb50>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0320 	and.w	r3, r3, #32
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d009      	beq.n	80048e4 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80048d0:	4b29      	ldr	r3, [pc, #164]	; (8004978 <UART_SetConfig+0xb50>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	08db      	lsrs	r3, r3, #3
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	4a28      	ldr	r2, [pc, #160]	; (800497c <UART_SetConfig+0xb54>)
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
 80048e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80048e2:	e00f      	b.n	8004904 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80048e4:	4b25      	ldr	r3, [pc, #148]	; (800497c <UART_SetConfig+0xb54>)
 80048e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048e8:	e00c      	b.n	8004904 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80048ea:	4b25      	ldr	r3, [pc, #148]	; (8004980 <UART_SetConfig+0xb58>)
 80048ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048ee:	e009      	b.n	8004904 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048f6:	e005      	b.n	8004904 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004902:	bf00      	nop
    }

    if (pclk != 0U)
 8004904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004906:	2b00      	cmp	r3, #0
 8004908:	d021      	beq.n	800494e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	4a1d      	ldr	r2, [pc, #116]	; (8004984 <UART_SetConfig+0xb5c>)
 8004910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004914:	461a      	mov	r2, r3
 8004916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004918:	fbb3 f2f2 	udiv	r2, r3, r2
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	085b      	lsrs	r3, r3, #1
 8004922:	441a      	add	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	fbb2 f3f3 	udiv	r3, r2, r3
 800492c:	b29b      	uxth	r3, r3
 800492e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004932:	2b0f      	cmp	r3, #15
 8004934:	d908      	bls.n	8004948 <UART_SetConfig+0xb20>
 8004936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800493c:	d204      	bcs.n	8004948 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004944:	60da      	str	r2, [r3, #12]
 8004946:	e002      	b.n	800494e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800496a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800496e:	4618      	mov	r0, r3
 8004970:	3738      	adds	r7, #56	; 0x38
 8004972:	46bd      	mov	sp, r7
 8004974:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004978:	58024400 	.word	0x58024400
 800497c:	03d09000 	.word	0x03d09000
 8004980:	003d0900 	.word	0x003d0900
 8004984:	080057b4 	.word	0x080057b4

08004988 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	f003 0310 	and.w	r3, r3, #16
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01a      	beq.n	8004a9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a86:	d10a      	bne.n	8004a9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	605a      	str	r2, [r3, #4]
  }
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af02      	add	r7, sp, #8
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004adc:	f7fc fa26 	bl	8000f2c <HAL_GetTick>
 8004ae0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d10e      	bne.n	8004b0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f82c 	bl	8004b5c <UART_WaitOnFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e022      	b.n	8004b54 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d10e      	bne.n	8004b3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f816 	bl	8004b5c <UART_WaitOnFlagUntilTimeout>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e00c      	b.n	8004b54 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	603b      	str	r3, [r7, #0]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b6c:	e062      	b.n	8004c34 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b74:	d05e      	beq.n	8004c34 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b76:	f7fc f9d9 	bl	8000f2c <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d302      	bcc.n	8004b8c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d11d      	bne.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b9a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0201 	bic.w	r2, r2, #1
 8004baa:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e045      	b.n	8004c54 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d02e      	beq.n	8004c34 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be4:	d126      	bne.n	8004c34 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bfe:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0201 	bic.w	r2, r2, #1
 8004c0e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e00f      	b.n	8004c54 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	69da      	ldr	r2, [r3, #28]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d08d      	beq.n	8004b6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_UARTEx_DisableFifoMode+0x16>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e027      	b.n	8004cc2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2224      	movs	r2, #36	; 0x24
 8004c7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0201 	bic.w	r2, r2, #1
 8004c98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004ca0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d101      	bne.n	8004ce6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e02d      	b.n	8004d42 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2224      	movs	r2, #36	; 0x24
 8004cf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0201 	bic.w	r2, r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f850 	bl	8004dc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e02d      	b.n	8004dbe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2224      	movs	r2, #36	; 0x24
 8004d6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0201 	bic.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f812 	bl	8004dc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b089      	sub	sp, #36	; 0x24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004dd0:	4a2f      	ldr	r2, [pc, #188]	; (8004e90 <UARTEx_SetNbDataToProcess+0xc8>)
 8004dd2:	f107 0314 	add.w	r3, r7, #20
 8004dd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004dda:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004dde:	4a2d      	ldr	r2, [pc, #180]	; (8004e94 <UARTEx_SetNbDataToProcess+0xcc>)
 8004de0:	f107 030c 	add.w	r3, r7, #12
 8004de4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004de8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d108      	bne.n	8004e06 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e04:	e03d      	b.n	8004e82 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e06:	2310      	movs	r3, #16
 8004e08:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e0a:	2310      	movs	r3, #16
 8004e0c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	0e5b      	lsrs	r3, r3, #25
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	0f5b      	lsrs	r3, r3, #29
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004e2e:	7fbb      	ldrb	r3, [r7, #30]
 8004e30:	7f3a      	ldrb	r2, [r7, #28]
 8004e32:	f107 0120 	add.w	r1, r7, #32
 8004e36:	440a      	add	r2, r1
 8004e38:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004e3c:	fb02 f303 	mul.w	r3, r2, r3
 8004e40:	7f3a      	ldrb	r2, [r7, #28]
 8004e42:	f107 0120 	add.w	r1, r7, #32
 8004e46:	440a      	add	r2, r1
 8004e48:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004e4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004e58:	7ffb      	ldrb	r3, [r7, #31]
 8004e5a:	7f7a      	ldrb	r2, [r7, #29]
 8004e5c:	f107 0120 	add.w	r1, r7, #32
 8004e60:	440a      	add	r2, r1
 8004e62:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004e66:	fb02 f303 	mul.w	r3, r2, r3
 8004e6a:	7f7a      	ldrb	r2, [r7, #29]
 8004e6c:	f107 0120 	add.w	r1, r7, #32
 8004e70:	440a      	add	r2, r1
 8004e72:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004e76:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004e82:	bf00      	nop
 8004e84:	3724      	adds	r7, #36	; 0x24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	08005794 	.word	0x08005794
 8004e94:	0800579c 	.word	0x0800579c

08004e98 <__errno>:
 8004e98:	4b01      	ldr	r3, [pc, #4]	; (8004ea0 <__errno+0x8>)
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	20000010 	.word	0x20000010

08004ea4 <__libc_init_array>:
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	4e0d      	ldr	r6, [pc, #52]	; (8004edc <__libc_init_array+0x38>)
 8004ea8:	4c0d      	ldr	r4, [pc, #52]	; (8004ee0 <__libc_init_array+0x3c>)
 8004eaa:	1ba4      	subs	r4, r4, r6
 8004eac:	10a4      	asrs	r4, r4, #2
 8004eae:	2500      	movs	r5, #0
 8004eb0:	42a5      	cmp	r5, r4
 8004eb2:	d109      	bne.n	8004ec8 <__libc_init_array+0x24>
 8004eb4:	4e0b      	ldr	r6, [pc, #44]	; (8004ee4 <__libc_init_array+0x40>)
 8004eb6:	4c0c      	ldr	r4, [pc, #48]	; (8004ee8 <__libc_init_array+0x44>)
 8004eb8:	f000 fc3a 	bl	8005730 <_init>
 8004ebc:	1ba4      	subs	r4, r4, r6
 8004ebe:	10a4      	asrs	r4, r4, #2
 8004ec0:	2500      	movs	r5, #0
 8004ec2:	42a5      	cmp	r5, r4
 8004ec4:	d105      	bne.n	8004ed2 <__libc_init_array+0x2e>
 8004ec6:	bd70      	pop	{r4, r5, r6, pc}
 8004ec8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ecc:	4798      	blx	r3
 8004ece:	3501      	adds	r5, #1
 8004ed0:	e7ee      	b.n	8004eb0 <__libc_init_array+0xc>
 8004ed2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ed6:	4798      	blx	r3
 8004ed8:	3501      	adds	r5, #1
 8004eda:	e7f2      	b.n	8004ec2 <__libc_init_array+0x1e>
 8004edc:	08005808 	.word	0x08005808
 8004ee0:	08005808 	.word	0x08005808
 8004ee4:	08005808 	.word	0x08005808
 8004ee8:	0800580c 	.word	0x0800580c

08004eec <memset>:
 8004eec:	4402      	add	r2, r0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d100      	bne.n	8004ef6 <memset+0xa>
 8004ef4:	4770      	bx	lr
 8004ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8004efa:	e7f9      	b.n	8004ef0 <memset+0x4>

08004efc <sniprintf>:
 8004efc:	b40c      	push	{r2, r3}
 8004efe:	b530      	push	{r4, r5, lr}
 8004f00:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <sniprintf+0x64>)
 8004f02:	1e0c      	subs	r4, r1, #0
 8004f04:	b09d      	sub	sp, #116	; 0x74
 8004f06:	681d      	ldr	r5, [r3, #0]
 8004f08:	da08      	bge.n	8004f1c <sniprintf+0x20>
 8004f0a:	238b      	movs	r3, #139	; 0x8b
 8004f0c:	602b      	str	r3, [r5, #0]
 8004f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f12:	b01d      	add	sp, #116	; 0x74
 8004f14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f18:	b002      	add	sp, #8
 8004f1a:	4770      	bx	lr
 8004f1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004f20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004f24:	bf14      	ite	ne
 8004f26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004f2a:	4623      	moveq	r3, r4
 8004f2c:	9304      	str	r3, [sp, #16]
 8004f2e:	9307      	str	r3, [sp, #28]
 8004f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f34:	9002      	str	r0, [sp, #8]
 8004f36:	9006      	str	r0, [sp, #24]
 8004f38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004f3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004f3e:	ab21      	add	r3, sp, #132	; 0x84
 8004f40:	a902      	add	r1, sp, #8
 8004f42:	4628      	mov	r0, r5
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	f000 f867 	bl	8005018 <_svfiprintf_r>
 8004f4a:	1c43      	adds	r3, r0, #1
 8004f4c:	bfbc      	itt	lt
 8004f4e:	238b      	movlt	r3, #139	; 0x8b
 8004f50:	602b      	strlt	r3, [r5, #0]
 8004f52:	2c00      	cmp	r4, #0
 8004f54:	d0dd      	beq.n	8004f12 <sniprintf+0x16>
 8004f56:	9b02      	ldr	r3, [sp, #8]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	e7d9      	b.n	8004f12 <sniprintf+0x16>
 8004f5e:	bf00      	nop
 8004f60:	20000010 	.word	0x20000010

08004f64 <__ssputs_r>:
 8004f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f68:	688e      	ldr	r6, [r1, #8]
 8004f6a:	429e      	cmp	r6, r3
 8004f6c:	4682      	mov	sl, r0
 8004f6e:	460c      	mov	r4, r1
 8004f70:	4690      	mov	r8, r2
 8004f72:	4699      	mov	r9, r3
 8004f74:	d837      	bhi.n	8004fe6 <__ssputs_r+0x82>
 8004f76:	898a      	ldrh	r2, [r1, #12]
 8004f78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f7c:	d031      	beq.n	8004fe2 <__ssputs_r+0x7e>
 8004f7e:	6825      	ldr	r5, [r4, #0]
 8004f80:	6909      	ldr	r1, [r1, #16]
 8004f82:	1a6f      	subs	r7, r5, r1
 8004f84:	6965      	ldr	r5, [r4, #20]
 8004f86:	2302      	movs	r3, #2
 8004f88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004f90:	f109 0301 	add.w	r3, r9, #1
 8004f94:	443b      	add	r3, r7
 8004f96:	429d      	cmp	r5, r3
 8004f98:	bf38      	it	cc
 8004f9a:	461d      	movcc	r5, r3
 8004f9c:	0553      	lsls	r3, r2, #21
 8004f9e:	d530      	bpl.n	8005002 <__ssputs_r+0x9e>
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	f000 fb2b 	bl	80055fc <_malloc_r>
 8004fa6:	4606      	mov	r6, r0
 8004fa8:	b950      	cbnz	r0, 8004fc0 <__ssputs_r+0x5c>
 8004faa:	230c      	movs	r3, #12
 8004fac:	f8ca 3000 	str.w	r3, [sl]
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fb6:	81a3      	strh	r3, [r4, #12]
 8004fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc0:	463a      	mov	r2, r7
 8004fc2:	6921      	ldr	r1, [r4, #16]
 8004fc4:	f000 faa8 	bl	8005518 <memcpy>
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd2:	81a3      	strh	r3, [r4, #12]
 8004fd4:	6126      	str	r6, [r4, #16]
 8004fd6:	6165      	str	r5, [r4, #20]
 8004fd8:	443e      	add	r6, r7
 8004fda:	1bed      	subs	r5, r5, r7
 8004fdc:	6026      	str	r6, [r4, #0]
 8004fde:	60a5      	str	r5, [r4, #8]
 8004fe0:	464e      	mov	r6, r9
 8004fe2:	454e      	cmp	r6, r9
 8004fe4:	d900      	bls.n	8004fe8 <__ssputs_r+0x84>
 8004fe6:	464e      	mov	r6, r9
 8004fe8:	4632      	mov	r2, r6
 8004fea:	4641      	mov	r1, r8
 8004fec:	6820      	ldr	r0, [r4, #0]
 8004fee:	f000 fa9e 	bl	800552e <memmove>
 8004ff2:	68a3      	ldr	r3, [r4, #8]
 8004ff4:	1b9b      	subs	r3, r3, r6
 8004ff6:	60a3      	str	r3, [r4, #8]
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	441e      	add	r6, r3
 8004ffc:	6026      	str	r6, [r4, #0]
 8004ffe:	2000      	movs	r0, #0
 8005000:	e7dc      	b.n	8004fbc <__ssputs_r+0x58>
 8005002:	462a      	mov	r2, r5
 8005004:	f000 fb54 	bl	80056b0 <_realloc_r>
 8005008:	4606      	mov	r6, r0
 800500a:	2800      	cmp	r0, #0
 800500c:	d1e2      	bne.n	8004fd4 <__ssputs_r+0x70>
 800500e:	6921      	ldr	r1, [r4, #16]
 8005010:	4650      	mov	r0, sl
 8005012:	f000 faa5 	bl	8005560 <_free_r>
 8005016:	e7c8      	b.n	8004faa <__ssputs_r+0x46>

08005018 <_svfiprintf_r>:
 8005018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501c:	461d      	mov	r5, r3
 800501e:	898b      	ldrh	r3, [r1, #12]
 8005020:	061f      	lsls	r7, r3, #24
 8005022:	b09d      	sub	sp, #116	; 0x74
 8005024:	4680      	mov	r8, r0
 8005026:	460c      	mov	r4, r1
 8005028:	4616      	mov	r6, r2
 800502a:	d50f      	bpl.n	800504c <_svfiprintf_r+0x34>
 800502c:	690b      	ldr	r3, [r1, #16]
 800502e:	b96b      	cbnz	r3, 800504c <_svfiprintf_r+0x34>
 8005030:	2140      	movs	r1, #64	; 0x40
 8005032:	f000 fae3 	bl	80055fc <_malloc_r>
 8005036:	6020      	str	r0, [r4, #0]
 8005038:	6120      	str	r0, [r4, #16]
 800503a:	b928      	cbnz	r0, 8005048 <_svfiprintf_r+0x30>
 800503c:	230c      	movs	r3, #12
 800503e:	f8c8 3000 	str.w	r3, [r8]
 8005042:	f04f 30ff 	mov.w	r0, #4294967295
 8005046:	e0c8      	b.n	80051da <_svfiprintf_r+0x1c2>
 8005048:	2340      	movs	r3, #64	; 0x40
 800504a:	6163      	str	r3, [r4, #20]
 800504c:	2300      	movs	r3, #0
 800504e:	9309      	str	r3, [sp, #36]	; 0x24
 8005050:	2320      	movs	r3, #32
 8005052:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005056:	2330      	movs	r3, #48	; 0x30
 8005058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800505c:	9503      	str	r5, [sp, #12]
 800505e:	f04f 0b01 	mov.w	fp, #1
 8005062:	4637      	mov	r7, r6
 8005064:	463d      	mov	r5, r7
 8005066:	f815 3b01 	ldrb.w	r3, [r5], #1
 800506a:	b10b      	cbz	r3, 8005070 <_svfiprintf_r+0x58>
 800506c:	2b25      	cmp	r3, #37	; 0x25
 800506e:	d13e      	bne.n	80050ee <_svfiprintf_r+0xd6>
 8005070:	ebb7 0a06 	subs.w	sl, r7, r6
 8005074:	d00b      	beq.n	800508e <_svfiprintf_r+0x76>
 8005076:	4653      	mov	r3, sl
 8005078:	4632      	mov	r2, r6
 800507a:	4621      	mov	r1, r4
 800507c:	4640      	mov	r0, r8
 800507e:	f7ff ff71 	bl	8004f64 <__ssputs_r>
 8005082:	3001      	adds	r0, #1
 8005084:	f000 80a4 	beq.w	80051d0 <_svfiprintf_r+0x1b8>
 8005088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800508a:	4453      	add	r3, sl
 800508c:	9309      	str	r3, [sp, #36]	; 0x24
 800508e:	783b      	ldrb	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 809d 	beq.w	80051d0 <_svfiprintf_r+0x1b8>
 8005096:	2300      	movs	r3, #0
 8005098:	f04f 32ff 	mov.w	r2, #4294967295
 800509c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050a0:	9304      	str	r3, [sp, #16]
 80050a2:	9307      	str	r3, [sp, #28]
 80050a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050a8:	931a      	str	r3, [sp, #104]	; 0x68
 80050aa:	462f      	mov	r7, r5
 80050ac:	2205      	movs	r2, #5
 80050ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80050b2:	4850      	ldr	r0, [pc, #320]	; (80051f4 <_svfiprintf_r+0x1dc>)
 80050b4:	f7fb f914 	bl	80002e0 <memchr>
 80050b8:	9b04      	ldr	r3, [sp, #16]
 80050ba:	b9d0      	cbnz	r0, 80050f2 <_svfiprintf_r+0xda>
 80050bc:	06d9      	lsls	r1, r3, #27
 80050be:	bf44      	itt	mi
 80050c0:	2220      	movmi	r2, #32
 80050c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050c6:	071a      	lsls	r2, r3, #28
 80050c8:	bf44      	itt	mi
 80050ca:	222b      	movmi	r2, #43	; 0x2b
 80050cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050d0:	782a      	ldrb	r2, [r5, #0]
 80050d2:	2a2a      	cmp	r2, #42	; 0x2a
 80050d4:	d015      	beq.n	8005102 <_svfiprintf_r+0xea>
 80050d6:	9a07      	ldr	r2, [sp, #28]
 80050d8:	462f      	mov	r7, r5
 80050da:	2000      	movs	r0, #0
 80050dc:	250a      	movs	r5, #10
 80050de:	4639      	mov	r1, r7
 80050e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050e4:	3b30      	subs	r3, #48	; 0x30
 80050e6:	2b09      	cmp	r3, #9
 80050e8:	d94d      	bls.n	8005186 <_svfiprintf_r+0x16e>
 80050ea:	b1b8      	cbz	r0, 800511c <_svfiprintf_r+0x104>
 80050ec:	e00f      	b.n	800510e <_svfiprintf_r+0xf6>
 80050ee:	462f      	mov	r7, r5
 80050f0:	e7b8      	b.n	8005064 <_svfiprintf_r+0x4c>
 80050f2:	4a40      	ldr	r2, [pc, #256]	; (80051f4 <_svfiprintf_r+0x1dc>)
 80050f4:	1a80      	subs	r0, r0, r2
 80050f6:	fa0b f000 	lsl.w	r0, fp, r0
 80050fa:	4318      	orrs	r0, r3
 80050fc:	9004      	str	r0, [sp, #16]
 80050fe:	463d      	mov	r5, r7
 8005100:	e7d3      	b.n	80050aa <_svfiprintf_r+0x92>
 8005102:	9a03      	ldr	r2, [sp, #12]
 8005104:	1d11      	adds	r1, r2, #4
 8005106:	6812      	ldr	r2, [r2, #0]
 8005108:	9103      	str	r1, [sp, #12]
 800510a:	2a00      	cmp	r2, #0
 800510c:	db01      	blt.n	8005112 <_svfiprintf_r+0xfa>
 800510e:	9207      	str	r2, [sp, #28]
 8005110:	e004      	b.n	800511c <_svfiprintf_r+0x104>
 8005112:	4252      	negs	r2, r2
 8005114:	f043 0302 	orr.w	r3, r3, #2
 8005118:	9207      	str	r2, [sp, #28]
 800511a:	9304      	str	r3, [sp, #16]
 800511c:	783b      	ldrb	r3, [r7, #0]
 800511e:	2b2e      	cmp	r3, #46	; 0x2e
 8005120:	d10c      	bne.n	800513c <_svfiprintf_r+0x124>
 8005122:	787b      	ldrb	r3, [r7, #1]
 8005124:	2b2a      	cmp	r3, #42	; 0x2a
 8005126:	d133      	bne.n	8005190 <_svfiprintf_r+0x178>
 8005128:	9b03      	ldr	r3, [sp, #12]
 800512a:	1d1a      	adds	r2, r3, #4
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	9203      	str	r2, [sp, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	bfb8      	it	lt
 8005134:	f04f 33ff 	movlt.w	r3, #4294967295
 8005138:	3702      	adds	r7, #2
 800513a:	9305      	str	r3, [sp, #20]
 800513c:	4d2e      	ldr	r5, [pc, #184]	; (80051f8 <_svfiprintf_r+0x1e0>)
 800513e:	7839      	ldrb	r1, [r7, #0]
 8005140:	2203      	movs	r2, #3
 8005142:	4628      	mov	r0, r5
 8005144:	f7fb f8cc 	bl	80002e0 <memchr>
 8005148:	b138      	cbz	r0, 800515a <_svfiprintf_r+0x142>
 800514a:	2340      	movs	r3, #64	; 0x40
 800514c:	1b40      	subs	r0, r0, r5
 800514e:	fa03 f000 	lsl.w	r0, r3, r0
 8005152:	9b04      	ldr	r3, [sp, #16]
 8005154:	4303      	orrs	r3, r0
 8005156:	3701      	adds	r7, #1
 8005158:	9304      	str	r3, [sp, #16]
 800515a:	7839      	ldrb	r1, [r7, #0]
 800515c:	4827      	ldr	r0, [pc, #156]	; (80051fc <_svfiprintf_r+0x1e4>)
 800515e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005162:	2206      	movs	r2, #6
 8005164:	1c7e      	adds	r6, r7, #1
 8005166:	f7fb f8bb 	bl	80002e0 <memchr>
 800516a:	2800      	cmp	r0, #0
 800516c:	d038      	beq.n	80051e0 <_svfiprintf_r+0x1c8>
 800516e:	4b24      	ldr	r3, [pc, #144]	; (8005200 <_svfiprintf_r+0x1e8>)
 8005170:	bb13      	cbnz	r3, 80051b8 <_svfiprintf_r+0x1a0>
 8005172:	9b03      	ldr	r3, [sp, #12]
 8005174:	3307      	adds	r3, #7
 8005176:	f023 0307 	bic.w	r3, r3, #7
 800517a:	3308      	adds	r3, #8
 800517c:	9303      	str	r3, [sp, #12]
 800517e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005180:	444b      	add	r3, r9
 8005182:	9309      	str	r3, [sp, #36]	; 0x24
 8005184:	e76d      	b.n	8005062 <_svfiprintf_r+0x4a>
 8005186:	fb05 3202 	mla	r2, r5, r2, r3
 800518a:	2001      	movs	r0, #1
 800518c:	460f      	mov	r7, r1
 800518e:	e7a6      	b.n	80050de <_svfiprintf_r+0xc6>
 8005190:	2300      	movs	r3, #0
 8005192:	3701      	adds	r7, #1
 8005194:	9305      	str	r3, [sp, #20]
 8005196:	4619      	mov	r1, r3
 8005198:	250a      	movs	r5, #10
 800519a:	4638      	mov	r0, r7
 800519c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051a0:	3a30      	subs	r2, #48	; 0x30
 80051a2:	2a09      	cmp	r2, #9
 80051a4:	d903      	bls.n	80051ae <_svfiprintf_r+0x196>
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0c8      	beq.n	800513c <_svfiprintf_r+0x124>
 80051aa:	9105      	str	r1, [sp, #20]
 80051ac:	e7c6      	b.n	800513c <_svfiprintf_r+0x124>
 80051ae:	fb05 2101 	mla	r1, r5, r1, r2
 80051b2:	2301      	movs	r3, #1
 80051b4:	4607      	mov	r7, r0
 80051b6:	e7f0      	b.n	800519a <_svfiprintf_r+0x182>
 80051b8:	ab03      	add	r3, sp, #12
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	4622      	mov	r2, r4
 80051be:	4b11      	ldr	r3, [pc, #68]	; (8005204 <_svfiprintf_r+0x1ec>)
 80051c0:	a904      	add	r1, sp, #16
 80051c2:	4640      	mov	r0, r8
 80051c4:	f3af 8000 	nop.w
 80051c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80051cc:	4681      	mov	r9, r0
 80051ce:	d1d6      	bne.n	800517e <_svfiprintf_r+0x166>
 80051d0:	89a3      	ldrh	r3, [r4, #12]
 80051d2:	065b      	lsls	r3, r3, #25
 80051d4:	f53f af35 	bmi.w	8005042 <_svfiprintf_r+0x2a>
 80051d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051da:	b01d      	add	sp, #116	; 0x74
 80051dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e0:	ab03      	add	r3, sp, #12
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	4622      	mov	r2, r4
 80051e6:	4b07      	ldr	r3, [pc, #28]	; (8005204 <_svfiprintf_r+0x1ec>)
 80051e8:	a904      	add	r1, sp, #16
 80051ea:	4640      	mov	r0, r8
 80051ec:	f000 f882 	bl	80052f4 <_printf_i>
 80051f0:	e7ea      	b.n	80051c8 <_svfiprintf_r+0x1b0>
 80051f2:	bf00      	nop
 80051f4:	080057cc 	.word	0x080057cc
 80051f8:	080057d2 	.word	0x080057d2
 80051fc:	080057d6 	.word	0x080057d6
 8005200:	00000000 	.word	0x00000000
 8005204:	08004f65 	.word	0x08004f65

08005208 <_printf_common>:
 8005208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800520c:	4691      	mov	r9, r2
 800520e:	461f      	mov	r7, r3
 8005210:	688a      	ldr	r2, [r1, #8]
 8005212:	690b      	ldr	r3, [r1, #16]
 8005214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005218:	4293      	cmp	r3, r2
 800521a:	bfb8      	it	lt
 800521c:	4613      	movlt	r3, r2
 800521e:	f8c9 3000 	str.w	r3, [r9]
 8005222:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005226:	4606      	mov	r6, r0
 8005228:	460c      	mov	r4, r1
 800522a:	b112      	cbz	r2, 8005232 <_printf_common+0x2a>
 800522c:	3301      	adds	r3, #1
 800522e:	f8c9 3000 	str.w	r3, [r9]
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	0699      	lsls	r1, r3, #26
 8005236:	bf42      	ittt	mi
 8005238:	f8d9 3000 	ldrmi.w	r3, [r9]
 800523c:	3302      	addmi	r3, #2
 800523e:	f8c9 3000 	strmi.w	r3, [r9]
 8005242:	6825      	ldr	r5, [r4, #0]
 8005244:	f015 0506 	ands.w	r5, r5, #6
 8005248:	d107      	bne.n	800525a <_printf_common+0x52>
 800524a:	f104 0a19 	add.w	sl, r4, #25
 800524e:	68e3      	ldr	r3, [r4, #12]
 8005250:	f8d9 2000 	ldr.w	r2, [r9]
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	42ab      	cmp	r3, r5
 8005258:	dc28      	bgt.n	80052ac <_printf_common+0xa4>
 800525a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800525e:	6822      	ldr	r2, [r4, #0]
 8005260:	3300      	adds	r3, #0
 8005262:	bf18      	it	ne
 8005264:	2301      	movne	r3, #1
 8005266:	0692      	lsls	r2, r2, #26
 8005268:	d42d      	bmi.n	80052c6 <_printf_common+0xbe>
 800526a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800526e:	4639      	mov	r1, r7
 8005270:	4630      	mov	r0, r6
 8005272:	47c0      	blx	r8
 8005274:	3001      	adds	r0, #1
 8005276:	d020      	beq.n	80052ba <_printf_common+0xb2>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	68e5      	ldr	r5, [r4, #12]
 800527c:	f8d9 2000 	ldr.w	r2, [r9]
 8005280:	f003 0306 	and.w	r3, r3, #6
 8005284:	2b04      	cmp	r3, #4
 8005286:	bf08      	it	eq
 8005288:	1aad      	subeq	r5, r5, r2
 800528a:	68a3      	ldr	r3, [r4, #8]
 800528c:	6922      	ldr	r2, [r4, #16]
 800528e:	bf0c      	ite	eq
 8005290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005294:	2500      	movne	r5, #0
 8005296:	4293      	cmp	r3, r2
 8005298:	bfc4      	itt	gt
 800529a:	1a9b      	subgt	r3, r3, r2
 800529c:	18ed      	addgt	r5, r5, r3
 800529e:	f04f 0900 	mov.w	r9, #0
 80052a2:	341a      	adds	r4, #26
 80052a4:	454d      	cmp	r5, r9
 80052a6:	d11a      	bne.n	80052de <_printf_common+0xd6>
 80052a8:	2000      	movs	r0, #0
 80052aa:	e008      	b.n	80052be <_printf_common+0xb6>
 80052ac:	2301      	movs	r3, #1
 80052ae:	4652      	mov	r2, sl
 80052b0:	4639      	mov	r1, r7
 80052b2:	4630      	mov	r0, r6
 80052b4:	47c0      	blx	r8
 80052b6:	3001      	adds	r0, #1
 80052b8:	d103      	bne.n	80052c2 <_printf_common+0xba>
 80052ba:	f04f 30ff 	mov.w	r0, #4294967295
 80052be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c2:	3501      	adds	r5, #1
 80052c4:	e7c3      	b.n	800524e <_printf_common+0x46>
 80052c6:	18e1      	adds	r1, r4, r3
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	2030      	movs	r0, #48	; 0x30
 80052cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052d0:	4422      	add	r2, r4
 80052d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052da:	3302      	adds	r3, #2
 80052dc:	e7c5      	b.n	800526a <_printf_common+0x62>
 80052de:	2301      	movs	r3, #1
 80052e0:	4622      	mov	r2, r4
 80052e2:	4639      	mov	r1, r7
 80052e4:	4630      	mov	r0, r6
 80052e6:	47c0      	blx	r8
 80052e8:	3001      	adds	r0, #1
 80052ea:	d0e6      	beq.n	80052ba <_printf_common+0xb2>
 80052ec:	f109 0901 	add.w	r9, r9, #1
 80052f0:	e7d8      	b.n	80052a4 <_printf_common+0x9c>
	...

080052f4 <_printf_i>:
 80052f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80052fc:	460c      	mov	r4, r1
 80052fe:	7e09      	ldrb	r1, [r1, #24]
 8005300:	b085      	sub	sp, #20
 8005302:	296e      	cmp	r1, #110	; 0x6e
 8005304:	4617      	mov	r7, r2
 8005306:	4606      	mov	r6, r0
 8005308:	4698      	mov	r8, r3
 800530a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800530c:	f000 80b3 	beq.w	8005476 <_printf_i+0x182>
 8005310:	d822      	bhi.n	8005358 <_printf_i+0x64>
 8005312:	2963      	cmp	r1, #99	; 0x63
 8005314:	d036      	beq.n	8005384 <_printf_i+0x90>
 8005316:	d80a      	bhi.n	800532e <_printf_i+0x3a>
 8005318:	2900      	cmp	r1, #0
 800531a:	f000 80b9 	beq.w	8005490 <_printf_i+0x19c>
 800531e:	2958      	cmp	r1, #88	; 0x58
 8005320:	f000 8083 	beq.w	800542a <_printf_i+0x136>
 8005324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005328:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800532c:	e032      	b.n	8005394 <_printf_i+0xa0>
 800532e:	2964      	cmp	r1, #100	; 0x64
 8005330:	d001      	beq.n	8005336 <_printf_i+0x42>
 8005332:	2969      	cmp	r1, #105	; 0x69
 8005334:	d1f6      	bne.n	8005324 <_printf_i+0x30>
 8005336:	6820      	ldr	r0, [r4, #0]
 8005338:	6813      	ldr	r3, [r2, #0]
 800533a:	0605      	lsls	r5, r0, #24
 800533c:	f103 0104 	add.w	r1, r3, #4
 8005340:	d52a      	bpl.n	8005398 <_printf_i+0xa4>
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6011      	str	r1, [r2, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	da03      	bge.n	8005352 <_printf_i+0x5e>
 800534a:	222d      	movs	r2, #45	; 0x2d
 800534c:	425b      	negs	r3, r3
 800534e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005352:	486f      	ldr	r0, [pc, #444]	; (8005510 <_printf_i+0x21c>)
 8005354:	220a      	movs	r2, #10
 8005356:	e039      	b.n	80053cc <_printf_i+0xd8>
 8005358:	2973      	cmp	r1, #115	; 0x73
 800535a:	f000 809d 	beq.w	8005498 <_printf_i+0x1a4>
 800535e:	d808      	bhi.n	8005372 <_printf_i+0x7e>
 8005360:	296f      	cmp	r1, #111	; 0x6f
 8005362:	d020      	beq.n	80053a6 <_printf_i+0xb2>
 8005364:	2970      	cmp	r1, #112	; 0x70
 8005366:	d1dd      	bne.n	8005324 <_printf_i+0x30>
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	f043 0320 	orr.w	r3, r3, #32
 800536e:	6023      	str	r3, [r4, #0]
 8005370:	e003      	b.n	800537a <_printf_i+0x86>
 8005372:	2975      	cmp	r1, #117	; 0x75
 8005374:	d017      	beq.n	80053a6 <_printf_i+0xb2>
 8005376:	2978      	cmp	r1, #120	; 0x78
 8005378:	d1d4      	bne.n	8005324 <_printf_i+0x30>
 800537a:	2378      	movs	r3, #120	; 0x78
 800537c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005380:	4864      	ldr	r0, [pc, #400]	; (8005514 <_printf_i+0x220>)
 8005382:	e055      	b.n	8005430 <_printf_i+0x13c>
 8005384:	6813      	ldr	r3, [r2, #0]
 8005386:	1d19      	adds	r1, r3, #4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6011      	str	r1, [r2, #0]
 800538c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005394:	2301      	movs	r3, #1
 8005396:	e08c      	b.n	80054b2 <_printf_i+0x1be>
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6011      	str	r1, [r2, #0]
 800539c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053a0:	bf18      	it	ne
 80053a2:	b21b      	sxthne	r3, r3
 80053a4:	e7cf      	b.n	8005346 <_printf_i+0x52>
 80053a6:	6813      	ldr	r3, [r2, #0]
 80053a8:	6825      	ldr	r5, [r4, #0]
 80053aa:	1d18      	adds	r0, r3, #4
 80053ac:	6010      	str	r0, [r2, #0]
 80053ae:	0628      	lsls	r0, r5, #24
 80053b0:	d501      	bpl.n	80053b6 <_printf_i+0xc2>
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	e002      	b.n	80053bc <_printf_i+0xc8>
 80053b6:	0668      	lsls	r0, r5, #25
 80053b8:	d5fb      	bpl.n	80053b2 <_printf_i+0xbe>
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	4854      	ldr	r0, [pc, #336]	; (8005510 <_printf_i+0x21c>)
 80053be:	296f      	cmp	r1, #111	; 0x6f
 80053c0:	bf14      	ite	ne
 80053c2:	220a      	movne	r2, #10
 80053c4:	2208      	moveq	r2, #8
 80053c6:	2100      	movs	r1, #0
 80053c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053cc:	6865      	ldr	r5, [r4, #4]
 80053ce:	60a5      	str	r5, [r4, #8]
 80053d0:	2d00      	cmp	r5, #0
 80053d2:	f2c0 8095 	blt.w	8005500 <_printf_i+0x20c>
 80053d6:	6821      	ldr	r1, [r4, #0]
 80053d8:	f021 0104 	bic.w	r1, r1, #4
 80053dc:	6021      	str	r1, [r4, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d13d      	bne.n	800545e <_printf_i+0x16a>
 80053e2:	2d00      	cmp	r5, #0
 80053e4:	f040 808e 	bne.w	8005504 <_printf_i+0x210>
 80053e8:	4665      	mov	r5, ip
 80053ea:	2a08      	cmp	r2, #8
 80053ec:	d10b      	bne.n	8005406 <_printf_i+0x112>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	07db      	lsls	r3, r3, #31
 80053f2:	d508      	bpl.n	8005406 <_printf_i+0x112>
 80053f4:	6923      	ldr	r3, [r4, #16]
 80053f6:	6862      	ldr	r2, [r4, #4]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	bfde      	ittt	le
 80053fc:	2330      	movle	r3, #48	; 0x30
 80053fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005402:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005406:	ebac 0305 	sub.w	r3, ip, r5
 800540a:	6123      	str	r3, [r4, #16]
 800540c:	f8cd 8000 	str.w	r8, [sp]
 8005410:	463b      	mov	r3, r7
 8005412:	aa03      	add	r2, sp, #12
 8005414:	4621      	mov	r1, r4
 8005416:	4630      	mov	r0, r6
 8005418:	f7ff fef6 	bl	8005208 <_printf_common>
 800541c:	3001      	adds	r0, #1
 800541e:	d14d      	bne.n	80054bc <_printf_i+0x1c8>
 8005420:	f04f 30ff 	mov.w	r0, #4294967295
 8005424:	b005      	add	sp, #20
 8005426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800542a:	4839      	ldr	r0, [pc, #228]	; (8005510 <_printf_i+0x21c>)
 800542c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005430:	6813      	ldr	r3, [r2, #0]
 8005432:	6821      	ldr	r1, [r4, #0]
 8005434:	1d1d      	adds	r5, r3, #4
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6015      	str	r5, [r2, #0]
 800543a:	060a      	lsls	r2, r1, #24
 800543c:	d50b      	bpl.n	8005456 <_printf_i+0x162>
 800543e:	07ca      	lsls	r2, r1, #31
 8005440:	bf44      	itt	mi
 8005442:	f041 0120 	orrmi.w	r1, r1, #32
 8005446:	6021      	strmi	r1, [r4, #0]
 8005448:	b91b      	cbnz	r3, 8005452 <_printf_i+0x15e>
 800544a:	6822      	ldr	r2, [r4, #0]
 800544c:	f022 0220 	bic.w	r2, r2, #32
 8005450:	6022      	str	r2, [r4, #0]
 8005452:	2210      	movs	r2, #16
 8005454:	e7b7      	b.n	80053c6 <_printf_i+0xd2>
 8005456:	064d      	lsls	r5, r1, #25
 8005458:	bf48      	it	mi
 800545a:	b29b      	uxthmi	r3, r3
 800545c:	e7ef      	b.n	800543e <_printf_i+0x14a>
 800545e:	4665      	mov	r5, ip
 8005460:	fbb3 f1f2 	udiv	r1, r3, r2
 8005464:	fb02 3311 	mls	r3, r2, r1, r3
 8005468:	5cc3      	ldrb	r3, [r0, r3]
 800546a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800546e:	460b      	mov	r3, r1
 8005470:	2900      	cmp	r1, #0
 8005472:	d1f5      	bne.n	8005460 <_printf_i+0x16c>
 8005474:	e7b9      	b.n	80053ea <_printf_i+0xf6>
 8005476:	6813      	ldr	r3, [r2, #0]
 8005478:	6825      	ldr	r5, [r4, #0]
 800547a:	6961      	ldr	r1, [r4, #20]
 800547c:	1d18      	adds	r0, r3, #4
 800547e:	6010      	str	r0, [r2, #0]
 8005480:	0628      	lsls	r0, r5, #24
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	d501      	bpl.n	800548a <_printf_i+0x196>
 8005486:	6019      	str	r1, [r3, #0]
 8005488:	e002      	b.n	8005490 <_printf_i+0x19c>
 800548a:	066a      	lsls	r2, r5, #25
 800548c:	d5fb      	bpl.n	8005486 <_printf_i+0x192>
 800548e:	8019      	strh	r1, [r3, #0]
 8005490:	2300      	movs	r3, #0
 8005492:	6123      	str	r3, [r4, #16]
 8005494:	4665      	mov	r5, ip
 8005496:	e7b9      	b.n	800540c <_printf_i+0x118>
 8005498:	6813      	ldr	r3, [r2, #0]
 800549a:	1d19      	adds	r1, r3, #4
 800549c:	6011      	str	r1, [r2, #0]
 800549e:	681d      	ldr	r5, [r3, #0]
 80054a0:	6862      	ldr	r2, [r4, #4]
 80054a2:	2100      	movs	r1, #0
 80054a4:	4628      	mov	r0, r5
 80054a6:	f7fa ff1b 	bl	80002e0 <memchr>
 80054aa:	b108      	cbz	r0, 80054b0 <_printf_i+0x1bc>
 80054ac:	1b40      	subs	r0, r0, r5
 80054ae:	6060      	str	r0, [r4, #4]
 80054b0:	6863      	ldr	r3, [r4, #4]
 80054b2:	6123      	str	r3, [r4, #16]
 80054b4:	2300      	movs	r3, #0
 80054b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ba:	e7a7      	b.n	800540c <_printf_i+0x118>
 80054bc:	6923      	ldr	r3, [r4, #16]
 80054be:	462a      	mov	r2, r5
 80054c0:	4639      	mov	r1, r7
 80054c2:	4630      	mov	r0, r6
 80054c4:	47c0      	blx	r8
 80054c6:	3001      	adds	r0, #1
 80054c8:	d0aa      	beq.n	8005420 <_printf_i+0x12c>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	079b      	lsls	r3, r3, #30
 80054ce:	d413      	bmi.n	80054f8 <_printf_i+0x204>
 80054d0:	68e0      	ldr	r0, [r4, #12]
 80054d2:	9b03      	ldr	r3, [sp, #12]
 80054d4:	4298      	cmp	r0, r3
 80054d6:	bfb8      	it	lt
 80054d8:	4618      	movlt	r0, r3
 80054da:	e7a3      	b.n	8005424 <_printf_i+0x130>
 80054dc:	2301      	movs	r3, #1
 80054de:	464a      	mov	r2, r9
 80054e0:	4639      	mov	r1, r7
 80054e2:	4630      	mov	r0, r6
 80054e4:	47c0      	blx	r8
 80054e6:	3001      	adds	r0, #1
 80054e8:	d09a      	beq.n	8005420 <_printf_i+0x12c>
 80054ea:	3501      	adds	r5, #1
 80054ec:	68e3      	ldr	r3, [r4, #12]
 80054ee:	9a03      	ldr	r2, [sp, #12]
 80054f0:	1a9b      	subs	r3, r3, r2
 80054f2:	42ab      	cmp	r3, r5
 80054f4:	dcf2      	bgt.n	80054dc <_printf_i+0x1e8>
 80054f6:	e7eb      	b.n	80054d0 <_printf_i+0x1dc>
 80054f8:	2500      	movs	r5, #0
 80054fa:	f104 0919 	add.w	r9, r4, #25
 80054fe:	e7f5      	b.n	80054ec <_printf_i+0x1f8>
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1ac      	bne.n	800545e <_printf_i+0x16a>
 8005504:	7803      	ldrb	r3, [r0, #0]
 8005506:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800550a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800550e:	e76c      	b.n	80053ea <_printf_i+0xf6>
 8005510:	080057dd 	.word	0x080057dd
 8005514:	080057ee 	.word	0x080057ee

08005518 <memcpy>:
 8005518:	b510      	push	{r4, lr}
 800551a:	1e43      	subs	r3, r0, #1
 800551c:	440a      	add	r2, r1
 800551e:	4291      	cmp	r1, r2
 8005520:	d100      	bne.n	8005524 <memcpy+0xc>
 8005522:	bd10      	pop	{r4, pc}
 8005524:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005528:	f803 4f01 	strb.w	r4, [r3, #1]!
 800552c:	e7f7      	b.n	800551e <memcpy+0x6>

0800552e <memmove>:
 800552e:	4288      	cmp	r0, r1
 8005530:	b510      	push	{r4, lr}
 8005532:	eb01 0302 	add.w	r3, r1, r2
 8005536:	d807      	bhi.n	8005548 <memmove+0x1a>
 8005538:	1e42      	subs	r2, r0, #1
 800553a:	4299      	cmp	r1, r3
 800553c:	d00a      	beq.n	8005554 <memmove+0x26>
 800553e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005542:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005546:	e7f8      	b.n	800553a <memmove+0xc>
 8005548:	4283      	cmp	r3, r0
 800554a:	d9f5      	bls.n	8005538 <memmove+0xa>
 800554c:	1881      	adds	r1, r0, r2
 800554e:	1ad2      	subs	r2, r2, r3
 8005550:	42d3      	cmn	r3, r2
 8005552:	d100      	bne.n	8005556 <memmove+0x28>
 8005554:	bd10      	pop	{r4, pc}
 8005556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800555a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800555e:	e7f7      	b.n	8005550 <memmove+0x22>

08005560 <_free_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4605      	mov	r5, r0
 8005564:	2900      	cmp	r1, #0
 8005566:	d045      	beq.n	80055f4 <_free_r+0x94>
 8005568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800556c:	1f0c      	subs	r4, r1, #4
 800556e:	2b00      	cmp	r3, #0
 8005570:	bfb8      	it	lt
 8005572:	18e4      	addlt	r4, r4, r3
 8005574:	f000 f8d2 	bl	800571c <__malloc_lock>
 8005578:	4a1f      	ldr	r2, [pc, #124]	; (80055f8 <_free_r+0x98>)
 800557a:	6813      	ldr	r3, [r2, #0]
 800557c:	4610      	mov	r0, r2
 800557e:	b933      	cbnz	r3, 800558e <_free_r+0x2e>
 8005580:	6063      	str	r3, [r4, #4]
 8005582:	6014      	str	r4, [r2, #0]
 8005584:	4628      	mov	r0, r5
 8005586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800558a:	f000 b8c8 	b.w	800571e <__malloc_unlock>
 800558e:	42a3      	cmp	r3, r4
 8005590:	d90c      	bls.n	80055ac <_free_r+0x4c>
 8005592:	6821      	ldr	r1, [r4, #0]
 8005594:	1862      	adds	r2, r4, r1
 8005596:	4293      	cmp	r3, r2
 8005598:	bf04      	itt	eq
 800559a:	681a      	ldreq	r2, [r3, #0]
 800559c:	685b      	ldreq	r3, [r3, #4]
 800559e:	6063      	str	r3, [r4, #4]
 80055a0:	bf04      	itt	eq
 80055a2:	1852      	addeq	r2, r2, r1
 80055a4:	6022      	streq	r2, [r4, #0]
 80055a6:	6004      	str	r4, [r0, #0]
 80055a8:	e7ec      	b.n	8005584 <_free_r+0x24>
 80055aa:	4613      	mov	r3, r2
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	b10a      	cbz	r2, 80055b4 <_free_r+0x54>
 80055b0:	42a2      	cmp	r2, r4
 80055b2:	d9fa      	bls.n	80055aa <_free_r+0x4a>
 80055b4:	6819      	ldr	r1, [r3, #0]
 80055b6:	1858      	adds	r0, r3, r1
 80055b8:	42a0      	cmp	r0, r4
 80055ba:	d10b      	bne.n	80055d4 <_free_r+0x74>
 80055bc:	6820      	ldr	r0, [r4, #0]
 80055be:	4401      	add	r1, r0
 80055c0:	1858      	adds	r0, r3, r1
 80055c2:	4282      	cmp	r2, r0
 80055c4:	6019      	str	r1, [r3, #0]
 80055c6:	d1dd      	bne.n	8005584 <_free_r+0x24>
 80055c8:	6810      	ldr	r0, [r2, #0]
 80055ca:	6852      	ldr	r2, [r2, #4]
 80055cc:	605a      	str	r2, [r3, #4]
 80055ce:	4401      	add	r1, r0
 80055d0:	6019      	str	r1, [r3, #0]
 80055d2:	e7d7      	b.n	8005584 <_free_r+0x24>
 80055d4:	d902      	bls.n	80055dc <_free_r+0x7c>
 80055d6:	230c      	movs	r3, #12
 80055d8:	602b      	str	r3, [r5, #0]
 80055da:	e7d3      	b.n	8005584 <_free_r+0x24>
 80055dc:	6820      	ldr	r0, [r4, #0]
 80055de:	1821      	adds	r1, r4, r0
 80055e0:	428a      	cmp	r2, r1
 80055e2:	bf04      	itt	eq
 80055e4:	6811      	ldreq	r1, [r2, #0]
 80055e6:	6852      	ldreq	r2, [r2, #4]
 80055e8:	6062      	str	r2, [r4, #4]
 80055ea:	bf04      	itt	eq
 80055ec:	1809      	addeq	r1, r1, r0
 80055ee:	6021      	streq	r1, [r4, #0]
 80055f0:	605c      	str	r4, [r3, #4]
 80055f2:	e7c7      	b.n	8005584 <_free_r+0x24>
 80055f4:	bd38      	pop	{r3, r4, r5, pc}
 80055f6:	bf00      	nop
 80055f8:	20000094 	.word	0x20000094

080055fc <_malloc_r>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	1ccd      	adds	r5, r1, #3
 8005600:	f025 0503 	bic.w	r5, r5, #3
 8005604:	3508      	adds	r5, #8
 8005606:	2d0c      	cmp	r5, #12
 8005608:	bf38      	it	cc
 800560a:	250c      	movcc	r5, #12
 800560c:	2d00      	cmp	r5, #0
 800560e:	4606      	mov	r6, r0
 8005610:	db01      	blt.n	8005616 <_malloc_r+0x1a>
 8005612:	42a9      	cmp	r1, r5
 8005614:	d903      	bls.n	800561e <_malloc_r+0x22>
 8005616:	230c      	movs	r3, #12
 8005618:	6033      	str	r3, [r6, #0]
 800561a:	2000      	movs	r0, #0
 800561c:	bd70      	pop	{r4, r5, r6, pc}
 800561e:	f000 f87d 	bl	800571c <__malloc_lock>
 8005622:	4a21      	ldr	r2, [pc, #132]	; (80056a8 <_malloc_r+0xac>)
 8005624:	6814      	ldr	r4, [r2, #0]
 8005626:	4621      	mov	r1, r4
 8005628:	b991      	cbnz	r1, 8005650 <_malloc_r+0x54>
 800562a:	4c20      	ldr	r4, [pc, #128]	; (80056ac <_malloc_r+0xb0>)
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	b91b      	cbnz	r3, 8005638 <_malloc_r+0x3c>
 8005630:	4630      	mov	r0, r6
 8005632:	f000 f863 	bl	80056fc <_sbrk_r>
 8005636:	6020      	str	r0, [r4, #0]
 8005638:	4629      	mov	r1, r5
 800563a:	4630      	mov	r0, r6
 800563c:	f000 f85e 	bl	80056fc <_sbrk_r>
 8005640:	1c43      	adds	r3, r0, #1
 8005642:	d124      	bne.n	800568e <_malloc_r+0x92>
 8005644:	230c      	movs	r3, #12
 8005646:	6033      	str	r3, [r6, #0]
 8005648:	4630      	mov	r0, r6
 800564a:	f000 f868 	bl	800571e <__malloc_unlock>
 800564e:	e7e4      	b.n	800561a <_malloc_r+0x1e>
 8005650:	680b      	ldr	r3, [r1, #0]
 8005652:	1b5b      	subs	r3, r3, r5
 8005654:	d418      	bmi.n	8005688 <_malloc_r+0x8c>
 8005656:	2b0b      	cmp	r3, #11
 8005658:	d90f      	bls.n	800567a <_malloc_r+0x7e>
 800565a:	600b      	str	r3, [r1, #0]
 800565c:	50cd      	str	r5, [r1, r3]
 800565e:	18cc      	adds	r4, r1, r3
 8005660:	4630      	mov	r0, r6
 8005662:	f000 f85c 	bl	800571e <__malloc_unlock>
 8005666:	f104 000b 	add.w	r0, r4, #11
 800566a:	1d23      	adds	r3, r4, #4
 800566c:	f020 0007 	bic.w	r0, r0, #7
 8005670:	1ac3      	subs	r3, r0, r3
 8005672:	d0d3      	beq.n	800561c <_malloc_r+0x20>
 8005674:	425a      	negs	r2, r3
 8005676:	50e2      	str	r2, [r4, r3]
 8005678:	e7d0      	b.n	800561c <_malloc_r+0x20>
 800567a:	428c      	cmp	r4, r1
 800567c:	684b      	ldr	r3, [r1, #4]
 800567e:	bf16      	itet	ne
 8005680:	6063      	strne	r3, [r4, #4]
 8005682:	6013      	streq	r3, [r2, #0]
 8005684:	460c      	movne	r4, r1
 8005686:	e7eb      	b.n	8005660 <_malloc_r+0x64>
 8005688:	460c      	mov	r4, r1
 800568a:	6849      	ldr	r1, [r1, #4]
 800568c:	e7cc      	b.n	8005628 <_malloc_r+0x2c>
 800568e:	1cc4      	adds	r4, r0, #3
 8005690:	f024 0403 	bic.w	r4, r4, #3
 8005694:	42a0      	cmp	r0, r4
 8005696:	d005      	beq.n	80056a4 <_malloc_r+0xa8>
 8005698:	1a21      	subs	r1, r4, r0
 800569a:	4630      	mov	r0, r6
 800569c:	f000 f82e 	bl	80056fc <_sbrk_r>
 80056a0:	3001      	adds	r0, #1
 80056a2:	d0cf      	beq.n	8005644 <_malloc_r+0x48>
 80056a4:	6025      	str	r5, [r4, #0]
 80056a6:	e7db      	b.n	8005660 <_malloc_r+0x64>
 80056a8:	20000094 	.word	0x20000094
 80056ac:	20000098 	.word	0x20000098

080056b0 <_realloc_r>:
 80056b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b2:	4607      	mov	r7, r0
 80056b4:	4614      	mov	r4, r2
 80056b6:	460e      	mov	r6, r1
 80056b8:	b921      	cbnz	r1, 80056c4 <_realloc_r+0x14>
 80056ba:	4611      	mov	r1, r2
 80056bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056c0:	f7ff bf9c 	b.w	80055fc <_malloc_r>
 80056c4:	b922      	cbnz	r2, 80056d0 <_realloc_r+0x20>
 80056c6:	f7ff ff4b 	bl	8005560 <_free_r>
 80056ca:	4625      	mov	r5, r4
 80056cc:	4628      	mov	r0, r5
 80056ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d0:	f000 f826 	bl	8005720 <_malloc_usable_size_r>
 80056d4:	42a0      	cmp	r0, r4
 80056d6:	d20f      	bcs.n	80056f8 <_realloc_r+0x48>
 80056d8:	4621      	mov	r1, r4
 80056da:	4638      	mov	r0, r7
 80056dc:	f7ff ff8e 	bl	80055fc <_malloc_r>
 80056e0:	4605      	mov	r5, r0
 80056e2:	2800      	cmp	r0, #0
 80056e4:	d0f2      	beq.n	80056cc <_realloc_r+0x1c>
 80056e6:	4631      	mov	r1, r6
 80056e8:	4622      	mov	r2, r4
 80056ea:	f7ff ff15 	bl	8005518 <memcpy>
 80056ee:	4631      	mov	r1, r6
 80056f0:	4638      	mov	r0, r7
 80056f2:	f7ff ff35 	bl	8005560 <_free_r>
 80056f6:	e7e9      	b.n	80056cc <_realloc_r+0x1c>
 80056f8:	4635      	mov	r5, r6
 80056fa:	e7e7      	b.n	80056cc <_realloc_r+0x1c>

080056fc <_sbrk_r>:
 80056fc:	b538      	push	{r3, r4, r5, lr}
 80056fe:	4c06      	ldr	r4, [pc, #24]	; (8005718 <_sbrk_r+0x1c>)
 8005700:	2300      	movs	r3, #0
 8005702:	4605      	mov	r5, r0
 8005704:	4608      	mov	r0, r1
 8005706:	6023      	str	r3, [r4, #0]
 8005708:	f7fb fb2a 	bl	8000d60 <_sbrk>
 800570c:	1c43      	adds	r3, r0, #1
 800570e:	d102      	bne.n	8005716 <_sbrk_r+0x1a>
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	b103      	cbz	r3, 8005716 <_sbrk_r+0x1a>
 8005714:	602b      	str	r3, [r5, #0]
 8005716:	bd38      	pop	{r3, r4, r5, pc}
 8005718:	200001ac 	.word	0x200001ac

0800571c <__malloc_lock>:
 800571c:	4770      	bx	lr

0800571e <__malloc_unlock>:
 800571e:	4770      	bx	lr

08005720 <_malloc_usable_size_r>:
 8005720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005724:	1f18      	subs	r0, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	bfbc      	itt	lt
 800572a:	580b      	ldrlt	r3, [r1, r0]
 800572c:	18c0      	addlt	r0, r0, r3
 800572e:	4770      	bx	lr

08005730 <_init>:
 8005730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005732:	bf00      	nop
 8005734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005736:	bc08      	pop	{r3}
 8005738:	469e      	mov	lr, r3
 800573a:	4770      	bx	lr

0800573c <_fini>:
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573e:	bf00      	nop
 8005740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005742:	bc08      	pop	{r3}
 8005744:	469e      	mov	lr, r3
 8005746:	4770      	bx	lr
