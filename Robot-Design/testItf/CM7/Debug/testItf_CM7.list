
testItf_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a78  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006d18  08006d18  00016d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006da0  08006da0  00016da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006da8  08006da8  00016da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006dac  08006dac  00016dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000015c  20000000  08006db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000194  2000015c  08006f0c  0002015c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002f0  08006f0c  000202f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001aa2c  00000000  00000000  0002018a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002ca9  00000000  00000000  0003abb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ea8  00000000  00000000  0003d860  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d90  00000000  00000000  0003e708  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00038e25  00000000  00000000  0003f498  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e4fd  00000000  00000000  000782bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00177817  00000000  00000000  000867ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  001fdfd1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003fdc  00000000  00000000  001fe04c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2000015c 	.word	0x2000015c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006d00 	.word	0x08006d00

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000160 	.word	0x20000160
 80002dc:	08006d00 	.word	0x08006d00

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <SystemInit+0x104>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a3e      	ldr	r2, [pc, #248]	; (8000784 <SystemInit+0x104>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <SystemInit+0x104>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <SystemInit+0x104>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <SystemInit+0x108>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <SystemInit+0x108>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <SystemInit+0x10c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x10c>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <SystemInit+0x10c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <SystemInit+0x10c>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492e      	ldr	r1, [pc, #184]	; (800078c <SystemInit+0x10c>)
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x110>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemInit+0x108>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	d907      	bls.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemInit+0x108>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <SystemInit+0x108>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemInit+0x10c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemInit+0x10c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemInit+0x10c>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemInit+0x10c>)
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <SystemInit+0x114>)
 800070c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemInit+0x10c>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemInit+0x118>)
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <SystemInit+0x10c>)
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemInit+0x11c>)
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <SystemInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <SystemInit+0x10c>)
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <SystemInit+0x11c>)
 8000724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <SystemInit+0x10c>)
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <SystemInit+0x11c>)
 8000730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <SystemInit+0x10c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <SystemInit+0x10c>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <SystemInit+0x10c>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <SystemInit+0x120>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <SystemInit+0x120>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x124>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <SystemInit+0x128>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x12c>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x130>)
 800076c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000770:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x104>)
 8000774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000778:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	52002000 	.word	0x52002000
 800078c:	58024400 	.word	0x58024400
 8000790:	eaf6ed7f 	.word	0xeaf6ed7f
 8000794:	02020200 	.word	0x02020200
 8000798:	01ff0000 	.word	0x01ff0000
 800079c:	01010280 	.word	0x01010280
 80007a0:	580000c0 	.word	0x580000c0
 80007a4:	5c001000 	.word	0x5c001000
 80007a8:	ffff0000 	.word	0xffff0000
 80007ac:	51008108 	.word	0x51008108
 80007b0:	52004000 	.word	0x52004000

080007b4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
    int32_t timeout;
    /* USER CODE END Boot_Mode_Sequence_0 */

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /* Wait until CPU2 boots and enters in stop mode or timeout*/
    timeout = 0xFFFF;
 80007ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007be:	60fb      	str	r3, [r7, #12]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 80007c0:	bf00      	nop
 80007c2:	4b33      	ldr	r3, [pc, #204]	; (8000890 <main+0xdc>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d004      	beq.n	80007d8 <main+0x24>
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	1e5a      	subs	r2, r3, #1
 80007d2:	60fa      	str	r2, [r7, #12]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	dcf4      	bgt.n	80007c2 <main+0xe>
        ;
    if (timeout < 0) {
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	da01      	bge.n	80007e2 <main+0x2e>
        Error_Handler();
 80007de:	f000 fa51 	bl	8000c84 <Error_Handler>
    }
    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80007e2:	f001 f9d3 	bl	8001b8c <HAL_Init>

    /* USER CODE BEGIN Init */
    tofInit(0);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f000 fb5e 	bl	8000ea8 <tofInit>

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80007ec:	f000 f85c 	bl	80008a8 <SystemClock_Config>
    /* USER CODE BEGIN Boot_Mode_Sequence_2 */
    /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
    HSEM notification */
    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 80007f0:	4b27      	ldr	r3, [pc, #156]	; (8000890 <main+0xdc>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f6:	4a26      	ldr	r2, [pc, #152]	; (8000890 <main+0xdc>)
 80007f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000800:	4b23      	ldr	r3, [pc, #140]	; (8000890 <main+0xdc>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
    /*Take HSEM */
    HAL_HSEM_FastTake(HSEM_ID_0);
 800080e:	2000      	movs	r0, #0
 8000810:	f001 fd10 	bl	8002234 <HAL_HSEM_FastTake>
    /*Release HSEM in order to notify the CPU2(CM4)*/
    HAL_HSEM_Release(HSEM_ID_0, 0);
 8000814:	2100      	movs	r1, #0
 8000816:	2000      	movs	r0, #0
 8000818:	f001 fd26 	bl	8002268 <HAL_HSEM_Release>
    /* wait until CPU2 wakes up from stop mode */
    timeout = 0xFFFF;
 800081c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000820:	60fb      	str	r3, [r7, #12]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000822:	bf00      	nop
 8000824:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <main+0xdc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800082c:	2b00      	cmp	r3, #0
 800082e:	d104      	bne.n	800083a <main+0x86>
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	1e5a      	subs	r2, r3, #1
 8000834:	60fa      	str	r2, [r7, #12]
 8000836:	2b00      	cmp	r3, #0
 8000838:	dcf4      	bgt.n	8000824 <main+0x70>
        ;
    if (timeout < 0) {
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	2b00      	cmp	r3, #0
 800083e:	da01      	bge.n	8000844 <main+0x90>
        Error_Handler();
 8000840:	f000 fa20 	bl	8000c84 <Error_Handler>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000844:	f000 f958 	bl	8000af8 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000848:	f000 f8ca 	bl	80009e0 <MX_I2C1_Init>
    MX_USART3_UART_Init();
 800084c:	f000 f908 	bl	8000a60 <MX_USART3_UART_Init>
    /* USER CODE BEGIN 2 */
    HAL_UART_Transmit(&huart3, (uint8_t *)"Reset!\n\r", sizeof("Reset!\n\r") - 1, HAL_MAX_DELAY);
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	2208      	movs	r2, #8
 8000856:	490f      	ldr	r1, [pc, #60]	; (8000894 <main+0xe0>)
 8000858:	480f      	ldr	r0, [pc, #60]	; (8000898 <main+0xe4>)
 800085a:	f004 fd49 	bl	80052f0 <HAL_UART_Transmit>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        /* USER CODE END WHILE */
        iDistance = tofReadDistance();
 800085e:	f001 f927 	bl	8001ab0 <tofReadDistance>
 8000862:	60b8      	str	r0, [r7, #8]
        speech_len = sprintf(speech_c, "Distance = %d\n\r", iDistance);
 8000864:	68ba      	ldr	r2, [r7, #8]
 8000866:	490d      	ldr	r1, [pc, #52]	; (800089c <main+0xe8>)
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <main+0xec>)
 800086a:	f005 fe4d 	bl	8006508 <siprintf>
 800086e:	4602      	mov	r2, r0
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <main+0xf0>)
 8000872:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit(&huart3, speech_c, speech_len, HAL_MAX_DELAY);
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <main+0xf0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	b29a      	uxth	r2, r3
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	4908      	ldr	r1, [pc, #32]	; (80008a0 <main+0xec>)
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <main+0xe4>)
 8000882:	f004 fd35 	bl	80052f0 <HAL_UART_Transmit>
        HAL_Delay(500);
 8000886:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800088a:	f001 fa11 	bl	8001cb0 <HAL_Delay>
    while (1) {
 800088e:	e7e6      	b.n	800085e <main+0xaa>
 8000890:	58024400 	.word	0x58024400
 8000894:	08006d18 	.word	0x08006d18
 8000898:	20000190 	.word	0x20000190
 800089c:	08006d24 	.word	0x08006d24
 80008a0:	20000268 	.word	0x20000268
 80008a4:	2000018c 	.word	0x2000018c

080008a8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b0cc      	sub	sp, #304	; 0x130
 80008ac:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008b2:	224c      	movs	r2, #76	; 0x4c
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f005 fe1d 	bl	80064f6 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008c0:	2220      	movs	r2, #32
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f005 fe16 	bl	80064f6 <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	4618      	mov	r0, r3
 80008d0:	23bc      	movs	r3, #188	; 0xbc
 80008d2:	461a      	mov	r2, r3
 80008d4:	2100      	movs	r1, #0
 80008d6:	f005 fe0e 	bl	80064f6 <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008da:	2004      	movs	r0, #4
 80008dc:	f002 f9ca 	bl	8002c74 <HAL_PWREx_ConfigSupply>
    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	4b3c      	ldr	r3, [pc, #240]	; (80009d8 <SystemClock_Config+0x130>)
 80008e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ea:	4a3b      	ldr	r2, [pc, #236]	; (80009d8 <SystemClock_Config+0x130>)
 80008ec:	f023 0301 	bic.w	r3, r3, #1
 80008f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008f2:	4b39      	ldr	r3, [pc, #228]	; (80009d8 <SystemClock_Config+0x130>)
 80008f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f6:	f003 0201 	and.w	r2, r3, #1
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	4b37      	ldr	r3, [pc, #220]	; (80009dc <SystemClock_Config+0x134>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000906:	4a35      	ldr	r2, [pc, #212]	; (80009dc <SystemClock_Config+0x134>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090c:	6193      	str	r3, [r2, #24]
 800090e:	4b33      	ldr	r3, [pc, #204]	; (80009dc <SystemClock_Config+0x134>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	681b      	ldr	r3, [r3, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800091e:	bf00      	nop
 8000920:	4b2e      	ldr	r3, [pc, #184]	; (80009dc <SystemClock_Config+0x134>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800092c:	d1f8      	bne.n	8000920 <SystemClock_Config+0x78>
    }
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092e:	2302      	movs	r3, #2
 8000930:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000934:	2301      	movs	r3, #1
 8000936:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093a:	2340      	movs	r3, #64	; 0x40
 800093c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000940:	2300      	movs	r3, #0
 8000942:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000946:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800094a:	4618      	mov	r0, r3
 800094c:	f002 f9ec 	bl	8002d28 <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xb2>
        Error_Handler();
 8000956:	f000 f995 	bl	8000c84 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 800095a:	233f      	movs	r3, #63	; 0x3f
 800095c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800098a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f002 fdd9 	bl	8003548 <HAL_RCC_ClockConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0xf8>
        Error_Handler();
 800099c:	f000 f972 	bl	8000c84 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_I2C1;
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	220a      	movs	r2, #10
 80009a6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	2200      	movs	r2, #0
 80009ae:	675a      	str	r2, [r3, #116]	; 0x74
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	2200      	movs	r2, #0
 80009b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	4618      	mov	r0, r3
 80009c0:	f003 f946 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0x126>
        Error_Handler();
 80009ca:	f000 f95b 	bl	8000c84 <Error_Handler>
    }
}
 80009ce:	bf00      	nop
 80009d0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	58000400 	.word	0x58000400
 80009dc:	58024800 	.word	0x58024800

080009e0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009e6:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <MX_I2C1_Init+0x78>)
 80009e8:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x10707DBC;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <MX_I2C1_Init+0x7c>)
 80009ee:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000a1a:	480e      	ldr	r0, [pc, #56]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a1c:	f001 fc38 	bl	8002290 <HAL_I2C_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_I2C1_Init+0x4a>
        Error_Handler();
 8000a26:	f000 f92d 	bl	8000c84 <Error_Handler>
    }
    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4809      	ldr	r0, [pc, #36]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a2e:	f002 f889 	bl	8002b44 <HAL_I2CEx_ConfigAnalogFilter>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_I2C1_Init+0x5c>
        Error_Handler();
 8000a38:	f000 f924 	bl	8000c84 <Error_Handler>
    }
    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a40:	f002 f8cb 	bl	8002bda <HAL_I2CEx_ConfigDigitalFilter>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C1_Init+0x6e>
        Error_Handler();
 8000a4a:	f000 f91b 	bl	8000c84 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2000021c 	.word	0x2000021c
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	10707dbc 	.word	0x10707dbc

08000a60 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
    /* USER CODE END USART3_Init 0 */

    /* USER CODE BEGIN USART3_Init 1 */

    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a66:	4a23      	ldr	r2, [pc, #140]	; (8000af4 <MX_USART3_UART_Init+0x94>)
 8000a68:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 8000a6a:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
    huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000aa8:	4811      	ldr	r0, [pc, #68]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000aaa:	f004 fbd1 	bl	8005250 <HAL_UART_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_USART3_UART_Init+0x58>
        Error_Handler();
 8000ab4:	f000 f8e6 	bl	8000c84 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000ab8:	2100      	movs	r1, #0
 8000aba:	480d      	ldr	r0, [pc, #52]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000abc:	f005 fc01 	bl	80062c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART3_UART_Init+0x6a>
        Error_Handler();
 8000ac6:	f000 f8dd 	bl	8000c84 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000aca:	2100      	movs	r1, #0
 8000acc:	4808      	ldr	r0, [pc, #32]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000ace:	f005 fc36 	bl	800633e <HAL_UARTEx_SetRxFifoThreshold>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_USART3_UART_Init+0x7c>
        Error_Handler();
 8000ad8:	f000 f8d4 	bl	8000c84 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000adc:	4804      	ldr	r0, [pc, #16]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000ade:	f005 fbb7 	bl	8006250 <HAL_UARTEx_DisableFifoMode>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USART3_UART_Init+0x8c>
        Error_Handler();
 8000ae8:	f000 f8cc 	bl	8000c84 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000190 	.word	0x20000190
 8000af4:	40004800 	.word	0x40004800

08000af8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	; 0x30
 8000afc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	4b58      	ldr	r3, [pc, #352]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b14:	4a56      	ldr	r2, [pc, #344]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1e:	4b54      	ldr	r3, [pc, #336]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	61bb      	str	r3, [r7, #24]
 8000b2a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2c:	4b50      	ldr	r3, [pc, #320]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b32:	4a4f      	ldr	r2, [pc, #316]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3c:	4b4c      	ldr	r3, [pc, #304]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b49      	ldr	r3, [pc, #292]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b50:	4a47      	ldr	r2, [pc, #284]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5a:	4b45      	ldr	r3, [pc, #276]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b68:	4b41      	ldr	r3, [pc, #260]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6e:	4a40      	ldr	r2, [pc, #256]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b78:	4b3d      	ldr	r3, [pc, #244]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b86:	4b3a      	ldr	r3, [pc, #232]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	4a38      	ldr	r2, [pc, #224]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000b8e:	f043 0308 	orr.w	r3, r3, #8
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b96:	4b36      	ldr	r3, [pc, #216]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9c:	f003 0308 	and.w	r3, r3, #8
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba4:	4b32      	ldr	r3, [pc, #200]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000baa:	4a31      	ldr	r2, [pc, #196]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <MX_GPIO_Init+0x178>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pins : PC1 PC4 PC5 */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000bc2:	2332      	movs	r3, #50	; 0x32
 8000bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bd2:	230b      	movs	r3, #11
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4825      	ldr	r0, [pc, #148]	; (8000c74 <MX_GPIO_Init+0x17c>)
 8000bde:	f001 f979 	bl	8001ed4 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA1 PA2 PA7 */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000be2:	2386      	movs	r3, #134	; 0x86
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf2:	230b      	movs	r3, #11
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481e      	ldr	r0, [pc, #120]	; (8000c78 <MX_GPIO_Init+0x180>)
 8000bfe:	f001 f969 	bl	8001ed4 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB13 */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c14:	230b      	movs	r3, #11
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4817      	ldr	r0, [pc, #92]	; (8000c7c <MX_GPIO_Init+0x184>)
 8000c20:	f001 f958 	bl	8001ed4 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA8 PA11 PA12 */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12;
 8000c24:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c36:	230a      	movs	r3, #10
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <MX_GPIO_Init+0x180>)
 8000c42:	f001 f947 	bl	8001ed4 <HAL_GPIO_Init>

    /*Configure GPIO pins : PG11 PG13 */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8000c46:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c58:	230b      	movs	r3, #11
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	4807      	ldr	r0, [pc, #28]	; (8000c80 <MX_GPIO_Init+0x188>)
 8000c64:	f001 f936 	bl	8001ed4 <HAL_GPIO_Init>
}
 8000c68:	bf00      	nop
 8000c6a:	3730      	adds	r7, #48	; 0x30
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	58024400 	.word	0x58024400
 8000c74:	58020800 	.word	0x58020800
 8000c78:	58020000 	.word	0x58020000
 8000c7c:	58020400 	.word	0x58020400
 8000c80:	58021800 	.word	0x58021800

08000c84 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000c8a:	e7fe      	b.n	8000c8a <Error_Handler+0x6>

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_MspInit+0x30>)
 8000c94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c98:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_MspInit+0x30>)
 8000c9a:	f043 0302 	orr.w	r3, r3, #2
 8000c9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_MspInit+0x30>)
 8000ca4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ca8:	f003 0302 	and.w	r3, r3, #2
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	58024400 	.word	0x58024400

08000cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1a      	ldr	r2, [pc, #104]	; (8000d48 <HAL_I2C_MspInit+0x88>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d12d      	bne.n	8000d3e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <HAL_I2C_MspInit+0x8c>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	4a18      	ldr	r2, [pc, #96]	; (8000d4c <HAL_I2C_MspInit+0x8c>)
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <HAL_I2C_MspInit+0x8c>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d00:	23c0      	movs	r3, #192	; 0xc0
 8000d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d04:	2312      	movs	r3, #18
 8000d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d10:	2304      	movs	r3, #4
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480d      	ldr	r0, [pc, #52]	; (8000d50 <HAL_I2C_MspInit+0x90>)
 8000d1c:	f001 f8da 	bl	8001ed4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_I2C_MspInit+0x8c>)
 8000d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d26:	4a09      	ldr	r2, [pc, #36]	; (8000d4c <HAL_I2C_MspInit+0x8c>)
 8000d28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_I2C_MspInit+0x8c>)
 8000d32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	; 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40005400 	.word	0x40005400
 8000d4c:	58024400 	.word	0x58024400
 8000d50:	58020400 	.word	0x58020400

08000d54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a1a      	ldr	r2, [pc, #104]	; (8000ddc <HAL_UART_MspInit+0x88>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d12e      	bne.n	8000dd4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <HAL_UART_MspInit+0x8c>)
 8000d78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d7c:	4a18      	ldr	r2, [pc, #96]	; (8000de0 <HAL_UART_MspInit+0x8c>)
 8000d7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_UART_MspInit+0x8c>)
 8000d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_UART_MspInit+0x8c>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9a:	4a11      	ldr	r2, [pc, #68]	; (8000de0 <HAL_UART_MspInit+0x8c>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da4:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <HAL_UART_MspInit+0x8c>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000db2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dc4:	2307      	movs	r3, #7
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <HAL_UART_MspInit+0x90>)
 8000dd0:	f001 f880 	bl	8001ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	; 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40004800 	.word	0x40004800
 8000de0:	58024400 	.word	0x58024400
 8000de4:	58020c00 	.word	0x58020c00

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <NMI_Handler+0x4>

08000dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <BusFault_Handler+0x4>

08000e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <UsageFault_Handler+0x4>

08000e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e34:	f000 ff1c 	bl	8001c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e44:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <_sbrk+0x5c>)
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <_sbrk+0x60>)
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d102      	bne.n	8000e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <_sbrk+0x64>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <_sbrk+0x68>)
 8000e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d207      	bcs.n	8000e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e6c:	f005 fb0e 	bl	800648c <__errno>
 8000e70:	4602      	mov	r2, r0
 8000e72:	230c      	movs	r3, #12
 8000e74:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	e009      	b.n	8000e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <_sbrk+0x64>)
 8000e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20020000 	.word	0x20020000
 8000e9c:	00000400 	.word	0x00000400
 8000ea0:	20000178 	.word	0x20000178
 8000ea4:	200002f0 	.word	0x200002f0

08000ea8 <tofInit>:
// Opens a file system handle to the I2C device
// reads the calibration data and sets the device
// into auto sensing mode
//
int tofInit(int bLongRange)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
    //MX_I2C1_Init();
	return initSensor(bLongRange); // finally, initialize the magic numbers in the sensor
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 fcdd 	bl	8001870 <initSensor>
 8000eb6:	4603      	mov	r3, r0

} /* tofInit() */
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <readReg16>:

//
// Read a pair of registers as a 16-bit value
//
static unsigned short readReg16(unsigned char ucAddr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af02      	add	r7, sp, #8
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
unsigned char ucTemp[2];
int rc;

	HAL_I2C_Master_Transmit(&hi2c1, 0x52, &ucAddr, 1, 100);
 8000eca:	1dfa      	adds	r2, r7, #7
 8000ecc:	2364      	movs	r3, #100	; 0x64
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	2152      	movs	r1, #82	; 0x52
 8000ed4:	480b      	ldr	r0, [pc, #44]	; (8000f04 <readReg16+0x44>)
 8000ed6:	f001 fa6b 	bl	80023b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, 0x52, ucTemp, 2, 100);
 8000eda:	f107 020c 	add.w	r2, r7, #12
 8000ede:	2364      	movs	r3, #100	; 0x64
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	2152      	movs	r1, #82	; 0x52
 8000ee6:	4807      	ldr	r0, [pc, #28]	; (8000f04 <readReg16+0x44>)
 8000ee8:	f001 fb56 	bl	8002598 <HAL_I2C_Master_Receive>
	
	return (unsigned short)((ucTemp[0]<<8) + ucTemp[1]);
 8000eec:	7b3b      	ldrb	r3, [r7, #12]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	7b7b      	ldrb	r3, [r7, #13]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	4413      	add	r3, r2
 8000efa:	b29b      	uxth	r3, r3
} /* readReg16() */
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000021c 	.word	0x2000021c

08000f08 <readReg>:

//
// Read a single register value from I2C device
//
static unsigned char readReg(unsigned char ucAddr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
unsigned char ucTemp;
int rc;

    ucTemp = ucAddr;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, 0x52, &ucAddr, 1, 100);
 8000f16:	1dfa      	adds	r2, r7, #7
 8000f18:	2364      	movs	r3, #100	; 0x64
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	2152      	movs	r1, #82	; 0x52
 8000f20:	4808      	ldr	r0, [pc, #32]	; (8000f44 <readReg+0x3c>)
 8000f22:	f001 fa45 	bl	80023b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, 0x52, ucTemp, 2, 100);
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	2364      	movs	r3, #100	; 0x64
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2302      	movs	r3, #2
 8000f30:	2152      	movs	r1, #82	; 0x52
 8000f32:	4804      	ldr	r0, [pc, #16]	; (8000f44 <readReg+0x3c>)
 8000f34:	f001 fb30 	bl	8002598 <HAL_I2C_Master_Receive>
	return ucTemp;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
} /* ReadReg() */
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000021c 	.word	0x2000021c

08000f48 <readMulti>:

static void readMulti(unsigned char ucAddr, unsigned char *pBuf, int iCount)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	4603      	mov	r3, r0
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	73fb      	strb	r3, [r7, #15]
int rc;

	HAL_I2C_Master_Transmit(&hi2c1, 0x52, &ucAddr, 1, 100);
 8000f56:	f107 020f 	add.w	r2, r7, #15
 8000f5a:	2364      	movs	r3, #100	; 0x64
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	2152      	movs	r1, #82	; 0x52
 8000f62:	4809      	ldr	r0, [pc, #36]	; (8000f88 <readMulti+0x40>)
 8000f64:	f001 fa24 	bl	80023b0 <HAL_I2C_Master_Transmit>
    rc = HAL_I2C_Master_Receive(&hi2c1, 0x52, pBuf, iCount, 100);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	2364      	movs	r3, #100	; 0x64
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	4613      	mov	r3, r2
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	2152      	movs	r1, #82	; 0x52
 8000f76:	4804      	ldr	r0, [pc, #16]	; (8000f88 <readMulti+0x40>)
 8000f78:	f001 fb0e 	bl	8002598 <HAL_I2C_Master_Receive>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	617b      	str	r3, [r7, #20]
} /* readMulti() */
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	2000021c 	.word	0x2000021c

08000f8c <writeMulti>:

static void writeMulti(unsigned char ucAddr, unsigned char *pBuf, int iCount)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	4603      	mov	r3, r0
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	73fb      	strb	r3, [r7, #15]
unsigned char ucTemp[16];
int rc;

	ucTemp[0] = ucAddr;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	743b      	strb	r3, [r7, #16]
	memcpy(&ucTemp[1], pBuf, iCount);
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f005 fa99 	bl	80064e0 <memcpy>
    HAL_I2C_Master_Transmit(&hi2c1, 0x52,&ucTemp, iCount+1, 100);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	b299      	uxth	r1, r3
 8000fb6:	f107 0210 	add.w	r2, r7, #16
 8000fba:	2364      	movs	r3, #100	; 0x64
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	2152      	movs	r1, #82	; 0x52
 8000fc2:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <writeMulti+0x44>)
 8000fc4:	f001 f9f4 	bl	80023b0 <HAL_I2C_Master_Transmit>
} /* writeMulti() */
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	2000021c 	.word	0x2000021c

08000fd4 <writeReg16>:
//
// Write a 16-bit value to a register
//
static void writeReg16(unsigned char ucAddr, unsigned short usValue)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	71fb      	strb	r3, [r7, #7]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	80bb      	strh	r3, [r7, #4]
unsigned char ucTemp[4];
int rc;

	ucTemp[0] = ucAddr;
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = (unsigned char)(usValue >> 8); // MSB first
 8000fe8:	88bb      	ldrh	r3, [r7, #4]
 8000fea:	0a1b      	lsrs	r3, r3, #8
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	737b      	strb	r3, [r7, #13]
	ucTemp[2] = (unsigned char)usValue;
 8000ff2:	88bb      	ldrh	r3, [r7, #4]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(&hi2c1, 0x52,&ucTemp, 3, 100);
 8000ff8:	f107 020c 	add.w	r2, r7, #12
 8000ffc:	2364      	movs	r3, #100	; 0x64
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2303      	movs	r3, #3
 8001002:	2152      	movs	r1, #82	; 0x52
 8001004:	4803      	ldr	r0, [pc, #12]	; (8001014 <writeReg16+0x40>)
 8001006:	f001 f9d3 	bl	80023b0 <HAL_I2C_Master_Transmit>
} /* writeReg16() */
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000021c 	.word	0x2000021c

08001018 <writeReg>:
//
// Write a single register/value pair
//
static void writeReg(unsigned char ucAddr, unsigned char ucValue)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af02      	add	r7, sp, #8
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	71bb      	strb	r3, [r7, #6]
unsigned char ucTemp[2];
int rc;

	ucTemp[0] = ucAddr;
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = ucValue;
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, 0x52, &ucTemp, 2, 1);
 8001030:	f107 020c 	add.w	r2, r7, #12
 8001034:	2301      	movs	r3, #1
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2302      	movs	r3, #2
 800103a:	2152      	movs	r1, #82	; 0x52
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <writeReg+0x34>)
 800103e:	f001 f9b7 	bl	80023b0 <HAL_I2C_Master_Transmit>
	//if (rc != 2) {}; // suppress warning
} /* writeReg() */
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000021c 	.word	0x2000021c

08001050 <writeRegList>:

//
// Write a list of register/value pairs to the I2C device
//
static void writeRegList(unsigned char *ucList)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af02      	add	r7, sp, #8
 8001056:	6078      	str	r0, [r7, #4]
unsigned char ucCount = *ucList++; // count is the first element in the list
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	73fb      	strb	r3, [r7, #15]
int rc;

	while (ucCount)
 8001062:	e00d      	b.n	8001080 <writeRegList+0x30>
	{
        HAL_I2C_Master_Transmit(&hi2c1, 0x52, ucList, 2, 100);
 8001064:	2364      	movs	r3, #100	; 0x64
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2302      	movs	r3, #2
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	2152      	movs	r1, #82	; 0x52
 800106e:	4808      	ldr	r0, [pc, #32]	; (8001090 <writeRegList+0x40>)
 8001070:	f001 f99e 	bl	80023b0 <HAL_I2C_Master_Transmit>
		if (rc != 2) {};
		ucList += 2;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3302      	adds	r3, #2
 8001078:	607b      	str	r3, [r7, #4]
		ucCount--;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	3b01      	subs	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
	while (ucCount)
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1ee      	bne.n	8001064 <writeRegList+0x14>
	}
} /* writeRegList() */
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000021c 	.word	0x2000021c

08001094 <getSpadInfo>:
0x44,0x00, 0x45,0x20, 0x47,0x08, 0x48,0x28, 0x67,0x00, 0x70,0x04, 0x71,0x01,
0x72,0xfe, 0x76,0x00, 0x77,0x00, 0xff,0x01, 0x0d,0x01, 0xff,0x00, 0x80,0x01,
0x01,0xf8, 0xff,0x01, 0x8e,0x01, 0x00,0x01, 0xff,0x00, 0x80,0x00};

static int getSpadInfo(unsigned char *pCount, unsigned char *pTypeIsAperture)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
int iTimeout;
unsigned char ucTemp;
#define MAX_TIMEOUT 50

  writeRegList(ucSPAD0);
 800109e:	482d      	ldr	r0, [pc, #180]	; (8001154 <getSpadInfo+0xc0>)
 80010a0:	f7ff ffd6 	bl	8001050 <writeRegList>
  writeReg(0x83, readReg(0x83) | 0x04);
 80010a4:	2083      	movs	r0, #131	; 0x83
 80010a6:	f7ff ff2f 	bl	8000f08 <readReg>
 80010aa:	4603      	mov	r3, r0
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4619      	mov	r1, r3
 80010b4:	2083      	movs	r0, #131	; 0x83
 80010b6:	f7ff ffaf 	bl	8001018 <writeReg>
  writeRegList(ucSPAD1);
 80010ba:	4827      	ldr	r0, [pc, #156]	; (8001158 <getSpadInfo+0xc4>)
 80010bc:	f7ff ffc8 	bl	8001050 <writeRegList>
  iTimeout = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  while(iTimeout < MAX_TIMEOUT)
 80010c4:	e00c      	b.n	80010e0 <getSpadInfo+0x4c>
  {
    if (readReg(0x83) != 0x00) break;
 80010c6:	2083      	movs	r0, #131	; 0x83
 80010c8:	f7ff ff1e 	bl	8000f08 <readReg>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10a      	bne.n	80010e8 <getSpadInfo+0x54>
    iTimeout++;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(500);
 80010d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010dc:	f000 fde8 	bl	8001cb0 <HAL_Delay>
  while(iTimeout < MAX_TIMEOUT)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2b31      	cmp	r3, #49	; 0x31
 80010e4:	ddef      	ble.n	80010c6 <getSpadInfo+0x32>
 80010e6:	e000      	b.n	80010ea <getSpadInfo+0x56>
    if (readReg(0x83) != 0x00) break;
 80010e8:	bf00      	nop
  }
  if (iTimeout == MAX_TIMEOUT)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2b32      	cmp	r3, #50	; 0x32
 80010ee:	d101      	bne.n	80010f4 <getSpadInfo+0x60>
  {
    //fprintf(stderr, "Timeout while waiting for SPAD info\n");
    return 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	e02b      	b.n	800114c <getSpadInfo+0xb8>
  }
  writeReg(0x83,0x01);
 80010f4:	2101      	movs	r1, #1
 80010f6:	2083      	movs	r0, #131	; 0x83
 80010f8:	f7ff ff8e 	bl	8001018 <writeReg>
  ucTemp = readReg(0x92);
 80010fc:	2092      	movs	r0, #146	; 0x92
 80010fe:	f7ff ff03 	bl	8000f08 <readReg>
 8001102:	4603      	mov	r3, r0
 8001104:	72fb      	strb	r3, [r7, #11]
  *pCount = (ucTemp & 0x7f);
 8001106:	7afb      	ldrb	r3, [r7, #11]
 8001108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800110c:	b2da      	uxtb	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	701a      	strb	r2, [r3, #0]
  *pTypeIsAperture = (ucTemp & 0x80);
 8001112:	7afb      	ldrb	r3, [r7, #11]
 8001114:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001118:	b2da      	uxtb	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	701a      	strb	r2, [r3, #0]
  writeReg(0x81,0x00);
 800111e:	2100      	movs	r1, #0
 8001120:	2081      	movs	r0, #129	; 0x81
 8001122:	f7ff ff79 	bl	8001018 <writeReg>
  writeReg(0xff,0x06);
 8001126:	2106      	movs	r1, #6
 8001128:	20ff      	movs	r0, #255	; 0xff
 800112a:	f7ff ff75 	bl	8001018 <writeReg>
  writeReg(0x83, readReg(0x83) & ~0x04);
 800112e:	2083      	movs	r0, #131	; 0x83
 8001130:	f7ff feea 	bl	8000f08 <readReg>
 8001134:	4603      	mov	r3, r0
 8001136:	f023 0304 	bic.w	r3, r3, #4
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4619      	mov	r1, r3
 800113e:	2083      	movs	r0, #131	; 0x83
 8001140:	f7ff ff6a 	bl	8001018 <writeReg>
  writeRegList(ucSPAD2);
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <getSpadInfo+0xc8>)
 8001146:	f7ff ff83 	bl	8001050 <writeRegList>
  
  return 1;
 800114a:	2301      	movs	r3, #1
} /* getSpadInfo() */
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000001c 	.word	0x2000001c
 8001158:	20000028 	.word	0x20000028
 800115c:	20000034 	.word	0x20000034

08001160 <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
static uint16_t decodeTimeout(uint16_t reg_val)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 800116e:	88fa      	ldrh	r2, [r7, #6]
 8001170:	0a12      	lsrs	r2, r2, #8
 8001172:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8001174:	4093      	lsls	r3, r2
 8001176:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001178:	3301      	adds	r3, #1
 800117a:	b29b      	uxth	r3, r3
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
static uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	460a      	mov	r2, r1
 8001192:	80fb      	strh	r3, [r7, #6]
 8001194:	4613      	mov	r3, r2
 8001196:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001198:	797b      	ldrb	r3, [r7, #5]
 800119a:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <timeoutMclksToMicroseconds+0x48>)
 800119c:	fb02 f303 	mul.w	r3, r2, r3
 80011a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80011a4:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <timeoutMclksToMicroseconds+0x4c>)
 80011a6:	fba2 2303 	umull	r2, r3, r2, r3
 80011aa:	099b      	lsrs	r3, r3, #6
 80011ac:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	fb02 f203 	mul.w	r2, r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	085b      	lsrs	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <timeoutMclksToMicroseconds+0x4c>)
 80011be:	fba2 2303 	umull	r2, r3, r2, r3
 80011c2:	099b      	lsrs	r3, r3, #6
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	003a2f00 	.word	0x003a2f00
 80011d4:	10624dd3 	.word	0x10624dd3

080011d8 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
static uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	4a0d      	ldr	r2, [pc, #52]	; (800121c <timeoutMicrosecondsToMclks+0x44>)
 80011e8:	fb02 f303 	mul.w	r3, r2, r3
 80011ec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80011f0:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <timeoutMicrosecondsToMclks+0x48>)
 80011f2:	fba2 2303 	umull	r2, r3, r2, r3
 80011f6:	099b      	lsrs	r3, r3, #6
 80011f8:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001200:	fb02 f203 	mul.w	r2, r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	085b      	lsrs	r3, r3, #1
 8001208:	441a      	add	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001210:	4618      	mov	r0, r3
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	003a2f00 	.word	0x003a2f00
 8001220:	10624dd3 	.word	0x10624dd3

08001224 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
static uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d018      	beq.n	800126e <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	3b01      	subs	r3, #1
 8001240:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8001242:	e005      	b.n	8001250 <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	085b      	lsrs	r3, r3, #1
 8001248:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 800124a:	897b      	ldrh	r3, [r7, #10]
 800124c:	3301      	adds	r3, #1
 800124e:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f4      	bne.n	8001244 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 800125a:	897b      	ldrh	r3, [r7, #10]
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	b29a      	uxth	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	b29b      	uxth	r3, r3
 8001264:	b2db      	uxtb	r3, r3
 8001266:	b29b      	uxth	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b29b      	uxth	r3, r3
 800126c:	e000      	b.n	8001270 <encodeTimeout+0x4c>
  }
  else { return 0; }
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <getSequenceStepTimeouts>:

static void getSequenceStepTimeouts(uint8_t enables, SequenceStepTimeouts * timeouts)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
  timeouts->pre_range_vcsel_period_pclks = ((readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 8001288:	2050      	movs	r0, #80	; 0x50
 800128a:	f7ff fe3d 	bl	8000f08 <readReg>
 800128e:	4603      	mov	r3, r0
 8001290:	b29b      	uxth	r3, r3
 8001292:	3301      	adds	r3, #1
 8001294:	b29b      	uxth	r3, r3
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	b29a      	uxth	r2, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 800129e:	2046      	movs	r0, #70	; 0x46
 80012a0:	f7ff fe32 	bl	8000f08 <readReg>
 80012a4:	4603      	mov	r3, r0
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	3301      	adds	r3, #1
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	4619      	mov	r1, r3
 80012bc:	4610      	mov	r0, r2
 80012be:	f7ff ff63 	bl	8001188 <timeoutMclksToMicroseconds>
 80012c2:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80012c8:	2051      	movs	r0, #81	; 0x51
 80012ca:	f7ff fdf9 	bl	8000ec0 <readReg16>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff45 	bl	8001160 <decodeTimeout>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4619      	mov	r1, r3
 80012ea:	4610      	mov	r0, r2
 80012ec:	f7ff ff4c 	bl	8001188 <timeoutMclksToMicroseconds>
 80012f0:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = ((readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 80012f6:	2070      	movs	r0, #112	; 0x70
 80012f8:	f7ff fe06 	bl	8000f08 <readReg>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b29b      	uxth	r3, r3
 8001300:	3301      	adds	r3, #1
 8001302:	b29b      	uxth	r3, r3
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	b29a      	uxth	r2, r3
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 800130c:	2071      	movs	r0, #113	; 0x71
 800130e:	f7ff fdd7 	bl	8000ec0 <readReg16>
 8001312:	4603      	mov	r3, r0
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff23 	bl	8001160 <decodeTimeout>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	811a      	strh	r2, [r3, #8]

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001328:	2b00      	cmp	r3, #0
 800132a:	d007      	beq.n	800133c <getSequenceStepTimeouts+0xc0>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	891a      	ldrh	r2, [r3, #8]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	88db      	ldrh	r3, [r3, #6]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	b29a      	uxth	r2, r3
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001344:	b2db      	uxtb	r3, r3
 8001346:	4619      	mov	r1, r3
 8001348:	4610      	mov	r0, r2
 800134a:	f7ff ff1d 	bl	8001188 <timeoutMclksToMicroseconds>
 800134e:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	615a      	str	r2, [r3, #20]
} /* getSequenceStepTimeouts() */
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
static int setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	; 0x30
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	460a      	mov	r2, r1
 8001366:	71fb      	strb	r3, [r7, #7]
 8001368:	4613      	mov	r3, r2
 800136a:	71bb      	strb	r3, [r7, #6]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	085b      	lsrs	r3, r3, #1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	3b01      	subs	r3, #1
 8001374:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001378:	2001      	movs	r0, #1
 800137a:	f7ff fdc5 	bl	8000f08 <readReg>
 800137e:	4603      	mov	r3, r0
 8001380:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  getSequenceStepTimeouts(enables, &timeouts);
 8001384:	f107 020c 	add.w	r2, r7, #12
 8001388:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800138c:	4611      	mov	r1, r2
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff74 	bl	800127c <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d15c      	bne.n	8001454 <setVcselPulsePeriod+0xf8>
  {
    // "Set phase check limits"
    switch (period_pclks)
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	3b0c      	subs	r3, #12
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d824      	bhi.n	80013ec <setVcselPulsePeriod+0x90>
 80013a2:	a201      	add	r2, pc, #4	; (adr r2, 80013a8 <setVcselPulsePeriod+0x4c>)
 80013a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a8:	080013c5 	.word	0x080013c5
 80013ac:	080013ed 	.word	0x080013ed
 80013b0:	080013cf 	.word	0x080013cf
 80013b4:	080013ed 	.word	0x080013ed
 80013b8:	080013d9 	.word	0x080013d9
 80013bc:	080013ed 	.word	0x080013ed
 80013c0:	080013e3 	.word	0x080013e3
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 80013c4:	2118      	movs	r1, #24
 80013c6:	2057      	movs	r0, #87	; 0x57
 80013c8:	f7ff fe26 	bl	8001018 <writeReg>
        break;
 80013cc:	e010      	b.n	80013f0 <setVcselPulsePeriod+0x94>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 80013ce:	2130      	movs	r1, #48	; 0x30
 80013d0:	2057      	movs	r0, #87	; 0x57
 80013d2:	f7ff fe21 	bl	8001018 <writeReg>
        break;
 80013d6:	e00b      	b.n	80013f0 <setVcselPulsePeriod+0x94>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 80013d8:	2140      	movs	r1, #64	; 0x40
 80013da:	2057      	movs	r0, #87	; 0x57
 80013dc:	f7ff fe1c 	bl	8001018 <writeReg>
        break;
 80013e0:	e006      	b.n	80013f0 <setVcselPulsePeriod+0x94>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 80013e2:	2150      	movs	r1, #80	; 0x50
 80013e4:	2057      	movs	r0, #87	; 0x57
 80013e6:	f7ff fe17 	bl	8001018 <writeReg>
        break;
 80013ea:	e001      	b.n	80013f0 <setVcselPulsePeriod+0x94>

      default:
        // invalid period
        return 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	e0fe      	b.n	80015ee <setVcselPulsePeriod+0x292>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 80013f0:	2108      	movs	r1, #8
 80013f2:	2056      	movs	r0, #86	; 0x56
 80013f4:	f7ff fe10 	bl	8001018 <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 80013f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013fc:	4619      	mov	r1, r3
 80013fe:	2050      	movs	r0, #80	; 0x50
 8001400:	f7ff fe0a 	bl	8001018 <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	79ba      	ldrb	r2, [r7, #6]
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fee4 	bl	80011d8 <timeoutMicrosecondsToMclks>
 8001410:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 8001412:	857b      	strh	r3, [r7, #42]	; 0x2a

    writeReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001414:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff04 	bl	8001224 <encodeTimeout>
 800141c:	4603      	mov	r3, r0
 800141e:	4619      	mov	r1, r3
 8001420:	2051      	movs	r0, #81	; 0x51
 8001422:	f7ff fdd7 	bl	8000fd4 <writeReg16>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	79ba      	ldrb	r2, [r7, #6]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fed3 	bl	80011d8 <timeoutMicrosecondsToMclks>
 8001432:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 8001434:	853b      	strh	r3, [r7, #40]	; 0x28

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8001436:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800143c:	d804      	bhi.n	8001448 <setVcselPulsePeriod+0xec>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 800143e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001440:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8001442:	3b01      	subs	r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	e000      	b.n	800144a <setVcselPulsePeriod+0xee>
 8001448:	23ff      	movs	r3, #255	; 0xff
 800144a:	4619      	mov	r1, r3
 800144c:	2046      	movs	r0, #70	; 0x46
 800144e:	f7ff fde3 	bl	8001018 <writeReg>
 8001452:	e0b3      	b.n	80015bc <setVcselPulsePeriod+0x260>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	2b01      	cmp	r3, #1
 8001458:	f040 80ae 	bne.w	80015b8 <setVcselPulsePeriod+0x25c>
  {
    switch (period_pclks)
 800145c:	79bb      	ldrb	r3, [r7, #6]
 800145e:	3b08      	subs	r3, #8
 8001460:	2b06      	cmp	r3, #6
 8001462:	f200 8085 	bhi.w	8001570 <setVcselPulsePeriod+0x214>
 8001466:	a201      	add	r2, pc, #4	; (adr r2, 800146c <setVcselPulsePeriod+0x110>)
 8001468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146c:	08001489 	.word	0x08001489
 8001470:	08001571 	.word	0x08001571
 8001474:	080014c3 	.word	0x080014c3
 8001478:	08001571 	.word	0x08001571
 800147c:	080014fd 	.word	0x080014fd
 8001480:	08001571 	.word	0x08001571
 8001484:	08001537 	.word	0x08001537
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 8001488:	2110      	movs	r1, #16
 800148a:	2048      	movs	r0, #72	; 0x48
 800148c:	f7ff fdc4 	bl	8001018 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001490:	2108      	movs	r1, #8
 8001492:	2047      	movs	r0, #71	; 0x47
 8001494:	f7ff fdc0 	bl	8001018 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8001498:	2102      	movs	r1, #2
 800149a:	2032      	movs	r0, #50	; 0x32
 800149c:	f7ff fdbc 	bl	8001018 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 80014a0:	210c      	movs	r1, #12
 80014a2:	2030      	movs	r0, #48	; 0x30
 80014a4:	f7ff fdb8 	bl	8001018 <writeReg>
        writeReg(0xFF, 0x01);
 80014a8:	2101      	movs	r1, #1
 80014aa:	20ff      	movs	r0, #255	; 0xff
 80014ac:	f7ff fdb4 	bl	8001018 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 80014b0:	2130      	movs	r1, #48	; 0x30
 80014b2:	2030      	movs	r0, #48	; 0x30
 80014b4:	f7ff fdb0 	bl	8001018 <writeReg>
        writeReg(0xFF, 0x00);
 80014b8:	2100      	movs	r1, #0
 80014ba:	20ff      	movs	r0, #255	; 0xff
 80014bc:	f7ff fdac 	bl	8001018 <writeReg>
        break;
 80014c0:	e058      	b.n	8001574 <setVcselPulsePeriod+0x218>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 80014c2:	2128      	movs	r1, #40	; 0x28
 80014c4:	2048      	movs	r0, #72	; 0x48
 80014c6:	f7ff fda7 	bl	8001018 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80014ca:	2108      	movs	r1, #8
 80014cc:	2047      	movs	r0, #71	; 0x47
 80014ce:	f7ff fda3 	bl	8001018 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80014d2:	2103      	movs	r1, #3
 80014d4:	2032      	movs	r0, #50	; 0x32
 80014d6:	f7ff fd9f 	bl	8001018 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 80014da:	2109      	movs	r1, #9
 80014dc:	2030      	movs	r0, #48	; 0x30
 80014de:	f7ff fd9b 	bl	8001018 <writeReg>
        writeReg(0xFF, 0x01);
 80014e2:	2101      	movs	r1, #1
 80014e4:	20ff      	movs	r0, #255	; 0xff
 80014e6:	f7ff fd97 	bl	8001018 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 80014ea:	2120      	movs	r1, #32
 80014ec:	2030      	movs	r0, #48	; 0x30
 80014ee:	f7ff fd93 	bl	8001018 <writeReg>
        writeReg(0xFF, 0x00);
 80014f2:	2100      	movs	r1, #0
 80014f4:	20ff      	movs	r0, #255	; 0xff
 80014f6:	f7ff fd8f 	bl	8001018 <writeReg>
        break;
 80014fa:	e03b      	b.n	8001574 <setVcselPulsePeriod+0x218>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 80014fc:	2138      	movs	r1, #56	; 0x38
 80014fe:	2048      	movs	r0, #72	; 0x48
 8001500:	f7ff fd8a 	bl	8001018 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001504:	2108      	movs	r1, #8
 8001506:	2047      	movs	r0, #71	; 0x47
 8001508:	f7ff fd86 	bl	8001018 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 800150c:	2103      	movs	r1, #3
 800150e:	2032      	movs	r0, #50	; 0x32
 8001510:	f7ff fd82 	bl	8001018 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 8001514:	2108      	movs	r1, #8
 8001516:	2030      	movs	r0, #48	; 0x30
 8001518:	f7ff fd7e 	bl	8001018 <writeReg>
        writeReg(0xFF, 0x01);
 800151c:	2101      	movs	r1, #1
 800151e:	20ff      	movs	r0, #255	; 0xff
 8001520:	f7ff fd7a 	bl	8001018 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8001524:	2120      	movs	r1, #32
 8001526:	2030      	movs	r0, #48	; 0x30
 8001528:	f7ff fd76 	bl	8001018 <writeReg>
        writeReg(0xFF, 0x00);
 800152c:	2100      	movs	r1, #0
 800152e:	20ff      	movs	r0, #255	; 0xff
 8001530:	f7ff fd72 	bl	8001018 <writeReg>
        break;
 8001534:	e01e      	b.n	8001574 <setVcselPulsePeriod+0x218>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 8001536:	2148      	movs	r1, #72	; 0x48
 8001538:	2048      	movs	r0, #72	; 0x48
 800153a:	f7ff fd6d 	bl	8001018 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 800153e:	2108      	movs	r1, #8
 8001540:	2047      	movs	r0, #71	; 0x47
 8001542:	f7ff fd69 	bl	8001018 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001546:	2103      	movs	r1, #3
 8001548:	2032      	movs	r0, #50	; 0x32
 800154a:	f7ff fd65 	bl	8001018 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 800154e:	2107      	movs	r1, #7
 8001550:	2030      	movs	r0, #48	; 0x30
 8001552:	f7ff fd61 	bl	8001018 <writeReg>
        writeReg(0xFF, 0x01);
 8001556:	2101      	movs	r1, #1
 8001558:	20ff      	movs	r0, #255	; 0xff
 800155a:	f7ff fd5d 	bl	8001018 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 800155e:	2120      	movs	r1, #32
 8001560:	2030      	movs	r0, #48	; 0x30
 8001562:	f7ff fd59 	bl	8001018 <writeReg>
        writeReg(0xFF, 0x00);
 8001566:	2100      	movs	r1, #0
 8001568:	20ff      	movs	r0, #255	; 0xff
 800156a:	f7ff fd55 	bl	8001018 <writeReg>
        break;
 800156e:	e001      	b.n	8001574 <setVcselPulsePeriod+0x218>

      default:
        // invalid period
        return 0;
 8001570:	2300      	movs	r3, #0
 8001572:	e03c      	b.n	80015ee <setVcselPulsePeriod+0x292>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001574:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001578:	4619      	mov	r1, r3
 800157a:	2070      	movs	r0, #112	; 0x70
 800157c:	f7ff fd4c 	bl	8001018 <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	79ba      	ldrb	r2, [r7, #6]
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fe26 	bl	80011d8 <timeoutMicrosecondsToMclks>
 800158c:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 800158e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8001590:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <setVcselPulsePeriod+0x248>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 800159c:	8a7a      	ldrh	r2, [r7, #18]
 800159e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015a0:	4413      	add	r3, r2
 80015a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80015a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fe3c 	bl	8001224 <encodeTimeout>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4619      	mov	r1, r3
 80015b0:	2071      	movs	r0, #113	; 0x71
 80015b2:	f7ff fd0f 	bl	8000fd4 <writeReg16>
 80015b6:	e001      	b.n	80015bc <setVcselPulsePeriod+0x260>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e018      	b.n	80015ee <setVcselPulsePeriod+0x292>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(measurement_timing_budget_us);
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <setVcselPulsePeriod+0x29c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 f81b 	bl	80015fc <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f7ff fc9e 	bl	8000f08 <readReg>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80015d2:	2102      	movs	r1, #2
 80015d4:	2001      	movs	r0, #1
 80015d6:	f7ff fd1f 	bl	8001018 <writeReg>
  performSingleRefCalibration(0x0);
 80015da:	2000      	movs	r0, #0
 80015dc:	f000 f916 	bl	800180c <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 80015e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015e4:	4619      	mov	r1, r3
 80015e6:	2001      	movs	r0, #1
 80015e8:	f7ff fd16 	bl	8001018 <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return 1;
 80015ec:	2301      	movs	r3, #1
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3730      	adds	r7, #48	; 0x30
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000180 	.word	0x20000180

080015fc <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
static int setMeasurementTimingBudget(uint32_t budget_us)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b090      	sub	sp, #64	; 0x40
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
uint16_t final_range_timeout_mclks;

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8001604:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8001608:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const EndOverhead        = 960;
 800160a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800160e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const MsrcOverhead       = 660;
 8001610:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001614:	86bb      	strh	r3, [r7, #52]	; 0x34
  uint16_t const TccOverhead        = 590;
 8001616:	f240 234e 	movw	r3, #590	; 0x24e
 800161a:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const DssOverhead        = 690;
 800161c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8001620:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const PreRangeOverhead   = 660;
 8001622:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001626:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const FinalRangeOverhead = 550;
 8001628:	f240 2326 	movw	r3, #550	; 0x226
 800162c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  uint32_t const MinTimingBudget = 20000;
 800162e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28

  if (budget_us < MinTimingBudget) { return 0; }
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001638:	429a      	cmp	r2, r3
 800163a:	d201      	bcs.n	8001640 <setMeasurementTimingBudget+0x44>
 800163c:	2300      	movs	r3, #0
 800163e:	e074      	b.n	800172a <setMeasurementTimingBudget+0x12e>

  used_budget_us = StartOverhead + EndOverhead;
 8001640:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001642:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001644:	4413      	add	r3, r2
 8001646:	63fb      	str	r3, [r7, #60]	; 0x3c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001648:	2001      	movs	r0, #1
 800164a:	f7ff fc5d 	bl	8000f08 <readReg>
 800164e:	4603      	mov	r3, r0
 8001650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  getSequenceStepTimeouts(enables, &timeouts);
 8001654:	f107 0208 	add.w	r2, r7, #8
 8001658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fe0c 	bl	800127c <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 8001664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001668:	f003 0310 	and.w	r3, r3, #16
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <setMeasurementTimingBudget+0x80>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001674:	4413      	add	r3, r2
 8001676:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001678:	4413      	add	r3, r2
 800167a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 800167c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001680:	f003 0308 	and.w	r3, r3, #8
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <setMeasurementTimingBudget+0x9c>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800168c:	4413      	add	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001692:	4413      	add	r3, r2
 8001694:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001696:	e00b      	b.n	80016b0 <setMeasurementTimingBudget+0xb4>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 8001698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <setMeasurementTimingBudget+0xb4>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80016a8:	4413      	add	r3, r2
 80016aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016ac:	4413      	add	r3, r2
 80016ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 80016b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <setMeasurementTimingBudget+0xcc>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016c0:	4413      	add	r3, r2
 80016c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016c4:	4413      	add	r3, r2
 80016c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 80016c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	da2b      	bge.n	8001728 <setMeasurementTimingBudget+0x12c>
  {
    used_budget_us += FinalRangeOverhead;
 80016d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016d4:	4413      	add	r3, r2
 80016d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80016d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d901      	bls.n	80016e4 <setMeasurementTimingBudget+0xe8>
    {
      // "Requested timeout too big."
      return 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	e022      	b.n	800172a <setMeasurementTimingBudget+0x12e>
    }

    final_range_timeout_us = budget_us - used_budget_us;
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	623b      	str	r3, [r7, #32]
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80016ec:	897b      	ldrh	r3, [r7, #10]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	4619      	mov	r1, r3
 80016f2:	6a38      	ldr	r0, [r7, #32]
 80016f4:	f7ff fd70 	bl	80011d8 <timeoutMicrosecondsToMclks>
 80016f8:	4603      	mov	r3, r0
    final_range_timeout_mclks =
 80016fa:	877b      	strh	r3, [r7, #58]	; 0x3a

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 80016fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <setMeasurementTimingBudget+0x114>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001708:	89fa      	ldrh	r2, [r7, #14]
 800170a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800170c:	4413      	add	r3, r2
 800170e:	877b      	strh	r3, [r7, #58]	; 0x3a
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001710:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fd86 	bl	8001224 <encodeTimeout>
 8001718:	4603      	mov	r3, r0
 800171a:	4619      	mov	r1, r3
 800171c:	2071      	movs	r0, #113	; 0x71
 800171e:	f7ff fc59 	bl	8000fd4 <writeReg16>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <setMeasurementTimingBudget+0x138>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6013      	str	r3, [r2, #0]
  }
  return 1;
 8001728:	2301      	movs	r3, #1
}
 800172a:	4618      	mov	r0, r3
 800172c:	3740      	adds	r7, #64	; 0x40
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000180 	.word	0x20000180

08001738 <getMeasurementTimingBudget>:

static uint32_t getMeasurementTimingBudget(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08c      	sub	sp, #48	; 0x30
 800173c:	af00      	add	r7, sp, #0
  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 800173e:	f240 7376 	movw	r3, #1910	; 0x776
 8001742:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const EndOverhead        = 960;
 8001744:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001748:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const MsrcOverhead       = 660;
 800174a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800174e:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const TccOverhead        = 590;
 8001750:	f240 234e 	movw	r3, #590	; 0x24e
 8001754:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t const DssOverhead        = 690;
 8001756:	f240 23b2 	movw	r3, #690	; 0x2b2
 800175a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t const PreRangeOverhead   = 660;
 800175c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001760:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 8001762:	f240 2326 	movw	r3, #550	; 0x226
 8001766:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 8001768:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800176a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800176c:	4413      	add	r3, r2
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001770:	2001      	movs	r0, #1
 8001772:	f7ff fbc9 	bl	8000f08 <readReg>
 8001776:	4603      	mov	r3, r0
 8001778:	777b      	strb	r3, [r7, #29]
  getSequenceStepTimeouts(enables, &timeouts);
 800177a:	1d3a      	adds	r2, r7, #4
 800177c:	7f7b      	ldrb	r3, [r7, #29]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fd7b 	bl	800127c <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 8001786:	7f7b      	ldrb	r3, [r7, #29]
 8001788:	f003 0310 	and.w	r3, r3, #16
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <getMeasurementTimingBudget+0x64>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001794:	4413      	add	r3, r2
 8001796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001798:	4413      	add	r3, r2
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 800179c:	7f7b      	ldrb	r3, [r7, #29]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d007      	beq.n	80017b6 <getMeasurementTimingBudget+0x7e>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017aa:	4413      	add	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b0:	4413      	add	r3, r2
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b4:	e00a      	b.n	80017cc <getMeasurementTimingBudget+0x94>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 80017b6:	7f7b      	ldrb	r3, [r7, #29]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <getMeasurementTimingBudget+0x94>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017c4:	4413      	add	r3, r2
 80017c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017c8:	4413      	add	r3, r2
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 80017cc:	7f7b      	ldrb	r3, [r7, #29]
 80017ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d005      	beq.n	80017e2 <getMeasurementTimingBudget+0xaa>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	8c3b      	ldrh	r3, [r7, #32]
 80017da:	4413      	add	r3, r2
 80017dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017de:	4413      	add	r3, r2
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 80017e2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	da05      	bge.n	80017f6 <getMeasurementTimingBudget+0xbe>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	8bfb      	ldrh	r3, [r7, #30]
 80017ee:	4413      	add	r3, r2
 80017f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f2:	4413      	add	r3, r2
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <getMeasurementTimingBudget+0xd0>)
 80017f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fa:	6013      	str	r3, [r2, #0]
  return budget_us;
 80017fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3730      	adds	r7, #48	; 0x30
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000180 	.word	0x20000180

0800180c <performSingleRefCalibration>:

static int performSingleRefCalibration(uint8_t vhv_init_byte)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
int iTimeout;
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4619      	mov	r1, r3
 8001820:	2000      	movs	r0, #0
 8001822:	f7ff fbf9 	bl	8001018 <writeReg>

  iTimeout = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 800182a:	e00b      	b.n	8001844 <performSingleRefCalibration+0x38>
  {
    iTimeout++;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	3301      	adds	r3, #1
 8001830:	60fb      	str	r3, [r7, #12]
    HAL_Delay(500);
 8001832:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001836:	f000 fa3b 	bl	8001cb0 <HAL_Delay>
    if (iTimeout > 100) { return 0; }
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2b64      	cmp	r3, #100	; 0x64
 800183e:	dd01      	ble.n	8001844 <performSingleRefCalibration+0x38>
 8001840:	2300      	movs	r3, #0
 8001842:	e010      	b.n	8001866 <performSingleRefCalibration+0x5a>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001844:	2013      	movs	r0, #19
 8001846:	f7ff fb5f 	bl	8000f08 <readReg>
 800184a:	4603      	mov	r3, r0
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0eb      	beq.n	800182c <performSingleRefCalibration+0x20>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001854:	2101      	movs	r1, #1
 8001856:	200b      	movs	r0, #11
 8001858:	f7ff fbde 	bl	8001018 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 800185c:	2100      	movs	r1, #0
 800185e:	2000      	movs	r0, #0
 8001860:	f7ff fbda 	bl	8001018 <writeReg>

  return 1;
 8001864:	2301      	movs	r3, #1
} /* performSingleRefCalibration() */
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <initSensor>:

//
// Initialize the vl53l0x
//
static int initSensor(int bLongRangeMode)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
unsigned char spad_count=0, spad_type_is_aperture=0, ref_spad_map[6];
 8001878:	2300      	movs	r3, #0
 800187a:	75bb      	strb	r3, [r7, #22]
 800187c:	2300      	movs	r3, #0
 800187e:	757b      	strb	r3, [r7, #21]
unsigned char ucFirstSPAD, ucSPADsEnabled;
int i;

// set 2.8V mode
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
  readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8001880:	2089      	movs	r0, #137	; 0x89
 8001882:	f7ff fb41 	bl	8000f08 <readReg>
 8001886:	4603      	mov	r3, r0
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	4619      	mov	r1, r3
 8001890:	2089      	movs	r0, #137	; 0x89
 8001892:	f7ff fbc1 	bl	8001018 <writeReg>
// Set I2C standard mode
  writeRegList(ucI2CMode);
 8001896:	486b      	ldr	r0, [pc, #428]	; (8001a44 <initSensor+0x1d4>)
 8001898:	f7ff fbda 	bl	8001050 <writeRegList>
  stop_variable = readReg(0x91);
 800189c:	2091      	movs	r0, #145	; 0x91
 800189e:	f7ff fb33 	bl	8000f08 <readReg>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b68      	ldr	r3, [pc, #416]	; (8001a48 <initSensor+0x1d8>)
 80018a8:	701a      	strb	r2, [r3, #0]
  writeRegList(ucI2CMode2);
 80018aa:	4868      	ldr	r0, [pc, #416]	; (8001a4c <initSensor+0x1dc>)
 80018ac:	f7ff fbd0 	bl	8001050 <writeRegList>
// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(REG_MSRC_CONFIG_CONTROL, readReg(REG_MSRC_CONFIG_CONTROL) | 0x12);
 80018b0:	2060      	movs	r0, #96	; 0x60
 80018b2:	f7ff fb29 	bl	8000f08 <readReg>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f043 0312 	orr.w	r3, r3, #18
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	4619      	mov	r1, r3
 80018c0:	2060      	movs	r0, #96	; 0x60
 80018c2:	f7ff fba9 	bl	8001018 <writeReg>
  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 32); // 0.25
 80018c6:	2120      	movs	r1, #32
 80018c8:	2044      	movs	r0, #68	; 0x44
 80018ca:	f7ff fb83 	bl	8000fd4 <writeReg16>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80018ce:	21ff      	movs	r1, #255	; 0xff
 80018d0:	2001      	movs	r0, #1
 80018d2:	f7ff fba1 	bl	8001018 <writeReg>
  getSpadInfo(&spad_count, &spad_type_is_aperture);
 80018d6:	f107 0215 	add.w	r2, r7, #21
 80018da:	f107 0316 	add.w	r3, r7, #22
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fbd7 	bl	8001094 <getSpadInfo>

  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	2206      	movs	r2, #6
 80018ec:	4619      	mov	r1, r3
 80018ee:	20b0      	movs	r0, #176	; 0xb0
 80018f0:	f7ff fb2a 	bl	8000f48 <readMulti>
//printf("initial spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0], ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);
  writeRegList(ucSPAD);
 80018f4:	4856      	ldr	r0, [pc, #344]	; (8001a50 <initSensor+0x1e0>)
 80018f6:	f7ff fbab 	bl	8001050 <writeRegList>
  ucFirstSPAD = (spad_type_is_aperture) ? 12: 0;
 80018fa:	7d7b      	ldrb	r3, [r7, #21]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <initSensor+0x94>
 8001900:	230c      	movs	r3, #12
 8001902:	e000      	b.n	8001906 <initSensor+0x96>
 8001904:	2300      	movs	r3, #0
 8001906:	75fb      	strb	r3, [r7, #23]
  ucSPADsEnabled = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	77fb      	strb	r3, [r7, #31]
// clear bits for unused SPADs
  for (i=0; i<48; i++)
 800190c:	2300      	movs	r3, #0
 800190e:	61bb      	str	r3, [r7, #24]
 8001910:	e03a      	b.n	8001988 <initSensor+0x118>
  {
    if (i < ucFirstSPAD || ucSPADsEnabled == spad_count)
 8001912:	7dfb      	ldrb	r3, [r7, #23]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	429a      	cmp	r2, r3
 8001918:	db03      	blt.n	8001922 <initSensor+0xb2>
 800191a:	7dbb      	ldrb	r3, [r7, #22]
 800191c:	7ffa      	ldrb	r2, [r7, #31]
 800191e:	429a      	cmp	r2, r3
 8001920:	d11b      	bne.n	800195a <initSensor+0xea>
    {
      ref_spad_map[i>>3] &= ~(1<<(i & 7));
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	10db      	asrs	r3, r3, #3
 8001926:	f107 0220 	add.w	r2, r7, #32
 800192a:	4413      	add	r3, r2
 800192c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001930:	b25a      	sxtb	r2, r3
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	2101      	movs	r1, #1
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	b25b      	sxtb	r3, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	b25b      	sxtb	r3, r3
 8001944:	4013      	ands	r3, r2
 8001946:	b25a      	sxtb	r2, r3
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	10db      	asrs	r3, r3, #3
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	f107 0120 	add.w	r1, r7, #32
 8001952:	440b      	add	r3, r1
 8001954:	f803 2c14 	strb.w	r2, [r3, #-20]
 8001958:	e013      	b.n	8001982 <initSensor+0x112>
    }
    else if (ref_spad_map[i>>3] & (1<< (i & 7)))
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	10db      	asrs	r3, r3, #3
 800195e:	f107 0220 	add.w	r2, r7, #32
 8001962:	4413      	add	r3, r2
 8001964:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001968:	461a      	mov	r2, r3
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	fa42 f303 	asr.w	r3, r2, r3
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <initSensor+0x112>
    {
      ucSPADsEnabled++;
 800197c:	7ffb      	ldrb	r3, [r7, #31]
 800197e:	3301      	adds	r3, #1
 8001980:	77fb      	strb	r3, [r7, #31]
  for (i=0; i<48; i++)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	3301      	adds	r3, #1
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2b2f      	cmp	r3, #47	; 0x2f
 800198c:	ddc1      	ble.n	8001912 <initSensor+0xa2>
    }
  } // for i
  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 800198e:	f107 030c 	add.w	r3, r7, #12
 8001992:	2206      	movs	r2, #6
 8001994:	4619      	mov	r1, r3
 8001996:	20b0      	movs	r0, #176	; 0xb0
 8001998:	f7ff faf8 	bl	8000f8c <writeMulti>
//printf("final spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0], 
//ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);

// load default tuning settings
  writeRegList(ucDefTuning); // long list of magic numbers
 800199c:	482d      	ldr	r0, [pc, #180]	; (8001a54 <initSensor+0x1e4>)
 800199e:	f7ff fb57 	bl	8001050 <writeRegList>

// change some settings for long range mode
  if (bLongRangeMode)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00b      	beq.n	80019c0 <initSensor+0x150>
  {
	writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 13); // 0.1
 80019a8:	210d      	movs	r1, #13
 80019aa:	2044      	movs	r0, #68	; 0x44
 80019ac:	f7ff fb12 	bl	8000fd4 <writeReg16>
	setVcselPulsePeriod(VcselPeriodPreRange, 18);
 80019b0:	2112      	movs	r1, #18
 80019b2:	2000      	movs	r0, #0
 80019b4:	f7ff fcd2 	bl	800135c <setVcselPulsePeriod>
	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 80019b8:	210e      	movs	r1, #14
 80019ba:	2001      	movs	r0, #1
 80019bc:	f7ff fcce 	bl	800135c <setVcselPulsePeriod>
  }

// set interrupt configuration to "new sample ready"
  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80019c0:	2104      	movs	r1, #4
 80019c2:	200a      	movs	r0, #10
 80019c4:	f7ff fb28 	bl	8001018 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80019c8:	2084      	movs	r0, #132	; 0x84
 80019ca:	f7ff fa9d 	bl	8000f08 <readReg>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f023 0310 	bic.w	r3, r3, #16
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	4619      	mov	r1, r3
 80019d8:	2084      	movs	r0, #132	; 0x84
 80019da:	f7ff fb1d 	bl	8001018 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80019de:	2101      	movs	r1, #1
 80019e0:	200b      	movs	r0, #11
 80019e2:	f7ff fb19 	bl	8001018 <writeReg>
  measurement_timing_budget_us = getMeasurementTimingBudget();
 80019e6:	f7ff fea7 	bl	8001738 <getMeasurementTimingBudget>
 80019ea:	4602      	mov	r2, r0
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <initSensor+0x1e8>)
 80019ee:	601a      	str	r2, [r3, #0]
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 80019f0:	21e8      	movs	r1, #232	; 0xe8
 80019f2:	2001      	movs	r0, #1
 80019f4:	f7ff fb10 	bl	8001018 <writeReg>
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <initSensor+0x1e8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fdfd 	bl	80015fc <setMeasurementTimingBudget>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8001a02:	2101      	movs	r1, #1
 8001a04:	2001      	movs	r0, #1
 8001a06:	f7ff fb07 	bl	8001018 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return 0; }
 8001a0a:	2040      	movs	r0, #64	; 0x40
 8001a0c:	f7ff fefe 	bl	800180c <performSingleRefCalibration>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <initSensor+0x1aa>
 8001a16:	2300      	movs	r3, #0
 8001a18:	e010      	b.n	8001a3c <initSensor+0x1cc>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001a1a:	2102      	movs	r1, #2
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f7ff fafb 	bl	8001018 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return 0; }
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff fef2 	bl	800180c <performSingleRefCalibration>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <initSensor+0x1c2>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e004      	b.n	8001a3c <initSensor+0x1cc>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 8001a32:	21e8      	movs	r1, #232	; 0xe8
 8001a34:	2001      	movs	r0, #1
 8001a36:	f7ff faef 	bl	8001018 <writeReg>
  return 1;
 8001a3a:	2301      	movs	r3, #1
} /* initSensor() */
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3720      	adds	r7, #32
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000008 	.word	0x20000008
 8001a48:	2000017c 	.word	0x2000017c
 8001a4c:	20000014 	.word	0x20000014
 8001a50:	20000040 	.word	0x20000040
 8001a54:	2000004c 	.word	0x2000004c
 8001a58:	20000180 	.word	0x20000180

08001a5c <readRangeContinuousMillimeters>:

uint16_t readRangeContinuousMillimeters(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
int iTimeout = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
uint16_t range;

  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001a66:	e00c      	b.n	8001a82 <readRangeContinuousMillimeters+0x26>
  {
    iTimeout++;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	607b      	str	r3, [r7, #4]
    HAL_Delay(500);
 8001a6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a72:	f000 f91d 	bl	8001cb0 <HAL_Delay>
    if (iTimeout > 5)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	dd02      	ble.n	8001a82 <readRangeContinuousMillimeters+0x26>
    {
      return -1;
 8001a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a80:	e011      	b.n	8001aa6 <readRangeContinuousMillimeters+0x4a>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001a82:	2013      	movs	r0, #19
 8001a84:	f7ff fa40 	bl	8000f08 <readReg>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0ea      	beq.n	8001a68 <readRangeContinuousMillimeters+0xc>
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  range = readReg16(RESULT_RANGE_STATUS + 10);
 8001a92:	201e      	movs	r0, #30
 8001a94:	f7ff fa14 	bl	8000ec0 <readReg16>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	807b      	strh	r3, [r7, #2]

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	200b      	movs	r0, #11
 8001aa0:	f7ff faba 	bl	8001018 <writeReg>

  return range;
 8001aa4:	887b      	ldrh	r3, [r7, #2]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <tofReadDistance>:
//
// Read the current distance in mm
//
int tofReadDistance(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
int iTimeout;

  writeReg(0x80, 0x01);
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	2080      	movs	r0, #128	; 0x80
 8001aba:	f7ff faad 	bl	8001018 <writeReg>
  writeReg(0xFF, 0x01);
 8001abe:	2101      	movs	r1, #1
 8001ac0:	20ff      	movs	r0, #255	; 0xff
 8001ac2:	f7ff faa9 	bl	8001018 <writeReg>
  writeReg(0x00, 0x00);
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f7ff faa5 	bl	8001018 <writeReg>
  writeReg(0x91, stop_variable);
 8001ace:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <tofReadDistance+0x84>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	2091      	movs	r0, #145	; 0x91
 8001ad6:	f7ff fa9f 	bl	8001018 <writeReg>
  writeReg(0x00, 0x01);
 8001ada:	2101      	movs	r1, #1
 8001adc:	2000      	movs	r0, #0
 8001ade:	f7ff fa9b 	bl	8001018 <writeReg>
  writeReg(0xFF, 0x00);
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	20ff      	movs	r0, #255	; 0xff
 8001ae6:	f7ff fa97 	bl	8001018 <writeReg>
  writeReg(0x80, 0x00);
 8001aea:	2100      	movs	r1, #0
 8001aec:	2080      	movs	r0, #128	; 0x80
 8001aee:	f7ff fa93 	bl	8001018 <writeReg>

  writeReg(SYSRANGE_START, 0x01);
 8001af2:	2101      	movs	r1, #1
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff fa8f 	bl	8001018 <writeReg>

  // "Wait until start bit has been cleared"
  iTimeout = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
  while (readReg(SYSRANGE_START) & 0x01)
 8001afe:	e00a      	b.n	8001b16 <tofReadDistance+0x66>
  {
    iTimeout++;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3301      	adds	r3, #1
 8001b04:	607b      	str	r3, [r7, #4]
    HAL_Delay(5);
 8001b06:	2005      	movs	r0, #5
 8001b08:	f000 f8d2 	bl	8001cb0 <HAL_Delay>
    if (iTimeout > 50)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b32      	cmp	r3, #50	; 0x32
 8001b10:	dd01      	ble.n	8001b16 <tofReadDistance+0x66>
    {
      return 200;
 8001b12:	23c8      	movs	r3, #200	; 0xc8
 8001b14:	e00a      	b.n	8001b2c <tofReadDistance+0x7c>
  while (readReg(SYSRANGE_START) & 0x01)
 8001b16:	2000      	movs	r0, #0
 8001b18:	f7ff f9f6 	bl	8000f08 <readReg>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1ec      	bne.n	8001b00 <tofReadDistance+0x50>
    }
  }
  
  return readRangeContinuousMillimeters();
 8001b26:	f7ff ff99 	bl	8001a5c <readRangeContinuousMillimeters>
 8001b2a:	4603      	mov	r3, r0

} /* tofReadDistance() */
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	2000017c 	.word	0x2000017c

08001b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b70 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b3c:	f7fe fda0 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b42:	e003      	b.n	8001b4c <LoopCopyDataInit>

08001b44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001b46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b4a:	3104      	adds	r1, #4

08001b4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b4c:	480a      	ldr	r0, [pc, #40]	; (8001b78 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001b50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b54:	d3f6      	bcc.n	8001b44 <CopyDataInit>
  ldr  r2, =_sbss
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001b58:	e002      	b.n	8001b60 <LoopFillZerobss>

08001b5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b5c:	f842 3b04 	str.w	r3, [r2], #4

08001b60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001b62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b64:	d3f9      	bcc.n	8001b5a <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8001b66:	f004 fc97 	bl	8006498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b6a:	f7fe fe23 	bl	80007b4 <main>
  bx  lr    
 8001b6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b74:	08006db0 	.word	0x08006db0
  ldr  r0, =_sdata
 8001b78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b7c:	2000015c 	.word	0x2000015c
  ldr  r2, =_sbss
 8001b80:	2000015c 	.word	0x2000015c
  ldr  r3, = _ebss
 8001b84:	200002f0 	.word	0x200002f0

08001b88 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b88:	e7fe      	b.n	8001b88 <ADC3_IRQHandler>
	...

08001b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b92:	2003      	movs	r0, #3
 8001b94:	f000 f96c 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b98:	f001 fe8c 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8001b9c:	4601      	mov	r1, r0
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_Init+0x68>)
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	0a1b      	lsrs	r3, r3, #8
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	4a13      	ldr	r2, [pc, #76]	; (8001bf8 <HAL_Init+0x6c>)
 8001baa:	5cd3      	ldrb	r3, [r2, r3]
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	fa21 f303 	lsr.w	r3, r1, r3
 8001bb4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <HAL_Init+0x68>)
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <HAL_Init+0x6c>)
 8001bc0:	5cd3      	ldrb	r3, [r2, r3]
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bcc:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <HAL_Init+0x70>)
 8001bce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bd0:	4a0b      	ldr	r2, [pc, #44]	; (8001c00 <HAL_Init+0x74>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f000 f814 	bl	8001c04 <HAL_InitTick>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e002      	b.n	8001bec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001be6:	f7ff f851 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	58024400 	.word	0x58024400
 8001bf8:	08006d44 	.word	0x08006d44
 8001bfc:	20000004 	.word	0x20000004
 8001c00:	20000000 	.word	0x20000000

08001c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c0c:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_InitTick+0x60>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e021      	b.n	8001c5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <HAL_InitTick+0x64>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_InitTick+0x60>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 f943 	bl	8001eba <HAL_SYSTICK_Config>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00e      	b.n	8001c5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b0f      	cmp	r3, #15
 8001c42:	d80a      	bhi.n	8001c5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c44:	2200      	movs	r2, #0
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f000 f91b 	bl	8001e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c50:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <HAL_InitTick+0x68>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	e000      	b.n	8001c5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	200000f4 	.word	0x200000f4
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	200000f0 	.word	0x200000f0

08001c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_IncTick+0x20>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_IncTick+0x24>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <HAL_IncTick+0x24>)
 8001c82:	6013      	str	r3, [r2, #0]
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	200000f4 	.word	0x200000f4
 8001c94:	200002e8 	.word	0x200002e8

08001c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <HAL_GetTick+0x14>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	200002e8 	.word	0x200002e8

08001cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb8:	f7ff ffee 	bl	8001c98 <HAL_GetTick>
 8001cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d005      	beq.n	8001cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_Delay+0x40>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cd6:	bf00      	nop
 8001cd8:	f7ff ffde 	bl	8001c98 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d8f7      	bhi.n	8001cd8 <HAL_Delay+0x28>
  {
  }
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200000f4 	.word	0x200000f4

08001cf4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <HAL_GetREVID+0x14>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	0c1b      	lsrs	r3, r3, #16
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	5c001000 	.word	0x5c001000

08001d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <__NVIC_SetPriorityGrouping+0x40>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <__NVIC_SetPriorityGrouping+0x40>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00
 8001d50:	05fa0000 	.word	0x05fa0000

08001d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <__NVIC_GetPriorityGrouping+0x18>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	f003 0307 	and.w	r3, r3, #7
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	; (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	; (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f7ff ff8e 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff47 	bl	8001d0c <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e94:	f7ff ff5e 	bl	8001d54 <__NVIC_GetPriorityGrouping>
 8001e98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	6978      	ldr	r0, [r7, #20]
 8001ea0:	f7ff ff90 	bl	8001dc4 <NVIC_EncodePriority>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff5f 	bl	8001d70 <__NVIC_SetPriority>
}
 8001eb2:	bf00      	nop
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ffb2 	bl	8001e2c <SysTick_Config>
 8001ec8:	4603      	mov	r3, r0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ee2:	4b89      	ldr	r3, [pc, #548]	; (8002108 <HAL_GPIO_Init+0x234>)
 8001ee4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ee6:	e194      	b.n	8002212 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8186 	beq.w	800220c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d00b      	beq.n	8001f20 <HAL_GPIO_Init+0x4c>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d007      	beq.n	8001f20 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f14:	2b11      	cmp	r3, #17
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b12      	cmp	r3, #18
 8001f1e:	d130      	bne.n	8001f82 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f56:	2201      	movs	r2, #1
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	f003 0201 	and.w	r2, r3, #1
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0xee>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b12      	cmp	r3, #18
 8001fc0:	d123      	bne.n	800200a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	08da      	lsrs	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3208      	adds	r2, #8
 8001fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	220f      	movs	r2, #15
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	08da      	lsrs	r2, r3, #3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3208      	adds	r2, #8
 8002004:	69b9      	ldr	r1, [r7, #24]
 8002006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	2203      	movs	r2, #3
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0203 	and.w	r2, r3, #3
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80e0 	beq.w	800220c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204c:	4b2f      	ldr	r3, [pc, #188]	; (800210c <HAL_GPIO_Init+0x238>)
 800204e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002052:	4a2e      	ldr	r2, [pc, #184]	; (800210c <HAL_GPIO_Init+0x238>)
 8002054:	f043 0302 	orr.w	r3, r3, #2
 8002058:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800205c:	4b2b      	ldr	r3, [pc, #172]	; (800210c <HAL_GPIO_Init+0x238>)
 800205e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206a:	4a29      	ldr	r2, [pc, #164]	; (8002110 <HAL_GPIO_Init+0x23c>)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	220f      	movs	r2, #15
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a20      	ldr	r2, [pc, #128]	; (8002114 <HAL_GPIO_Init+0x240>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d052      	beq.n	800213c <HAL_GPIO_Init+0x268>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a1f      	ldr	r2, [pc, #124]	; (8002118 <HAL_GPIO_Init+0x244>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d031      	beq.n	8002102 <HAL_GPIO_Init+0x22e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a1e      	ldr	r2, [pc, #120]	; (800211c <HAL_GPIO_Init+0x248>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d02b      	beq.n	80020fe <HAL_GPIO_Init+0x22a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a1d      	ldr	r2, [pc, #116]	; (8002120 <HAL_GPIO_Init+0x24c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d025      	beq.n	80020fa <HAL_GPIO_Init+0x226>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <HAL_GPIO_Init+0x250>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d01f      	beq.n	80020f6 <HAL_GPIO_Init+0x222>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a1b      	ldr	r2, [pc, #108]	; (8002128 <HAL_GPIO_Init+0x254>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d019      	beq.n	80020f2 <HAL_GPIO_Init+0x21e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a1a      	ldr	r2, [pc, #104]	; (800212c <HAL_GPIO_Init+0x258>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d013      	beq.n	80020ee <HAL_GPIO_Init+0x21a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a19      	ldr	r2, [pc, #100]	; (8002130 <HAL_GPIO_Init+0x25c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00d      	beq.n	80020ea <HAL_GPIO_Init+0x216>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a18      	ldr	r2, [pc, #96]	; (8002134 <HAL_GPIO_Init+0x260>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d007      	beq.n	80020e6 <HAL_GPIO_Init+0x212>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a17      	ldr	r2, [pc, #92]	; (8002138 <HAL_GPIO_Init+0x264>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d101      	bne.n	80020e2 <HAL_GPIO_Init+0x20e>
 80020de:	2309      	movs	r3, #9
 80020e0:	e02d      	b.n	800213e <HAL_GPIO_Init+0x26a>
 80020e2:	230a      	movs	r3, #10
 80020e4:	e02b      	b.n	800213e <HAL_GPIO_Init+0x26a>
 80020e6:	2308      	movs	r3, #8
 80020e8:	e029      	b.n	800213e <HAL_GPIO_Init+0x26a>
 80020ea:	2307      	movs	r3, #7
 80020ec:	e027      	b.n	800213e <HAL_GPIO_Init+0x26a>
 80020ee:	2306      	movs	r3, #6
 80020f0:	e025      	b.n	800213e <HAL_GPIO_Init+0x26a>
 80020f2:	2305      	movs	r3, #5
 80020f4:	e023      	b.n	800213e <HAL_GPIO_Init+0x26a>
 80020f6:	2304      	movs	r3, #4
 80020f8:	e021      	b.n	800213e <HAL_GPIO_Init+0x26a>
 80020fa:	2303      	movs	r3, #3
 80020fc:	e01f      	b.n	800213e <HAL_GPIO_Init+0x26a>
 80020fe:	2302      	movs	r3, #2
 8002100:	e01d      	b.n	800213e <HAL_GPIO_Init+0x26a>
 8002102:	2301      	movs	r3, #1
 8002104:	e01b      	b.n	800213e <HAL_GPIO_Init+0x26a>
 8002106:	bf00      	nop
 8002108:	58000080 	.word	0x58000080
 800210c:	58024400 	.word	0x58024400
 8002110:	58000400 	.word	0x58000400
 8002114:	58020000 	.word	0x58020000
 8002118:	58020400 	.word	0x58020400
 800211c:	58020800 	.word	0x58020800
 8002120:	58020c00 	.word	0x58020c00
 8002124:	58021000 	.word	0x58021000
 8002128:	58021400 	.word	0x58021400
 800212c:	58021800 	.word	0x58021800
 8002130:	58021c00 	.word	0x58021c00
 8002134:	58022000 	.word	0x58022000
 8002138:	58022400 	.word	0x58022400
 800213c:	2300      	movs	r3, #0
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	f002 0203 	and.w	r2, r2, #3
 8002144:	0092      	lsls	r2, r2, #2
 8002146:	4093      	lsls	r3, r2
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800214e:	4938      	ldr	r1, [pc, #224]	; (8002230 <HAL_GPIO_Init+0x35c>)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	3302      	adds	r3, #2
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	3301      	adds	r3, #1
 8002210:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	f47f ae63 	bne.w	8001ee8 <HAL_GPIO_Init+0x14>
  }
}
 8002222:	bf00      	nop
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	58000400 	.word	0x58000400

08002234 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800223c:	4a08      	ldr	r2, [pc, #32]	; (8002260 <HAL_HSEM_FastTake+0x2c>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3320      	adds	r3, #32
 8002242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002246:	4a07      	ldr	r2, [pc, #28]	; (8002264 <HAL_HSEM_FastTake+0x30>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d101      	bne.n	8002250 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	e000      	b.n	8002252 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	58026400 	.word	0x58026400
 8002264:	80000300 	.word	0x80000300

08002268 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002272:	4906      	ldr	r1, [pc, #24]	; (800228c <HAL_HSEM_Release+0x24>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	58026400 	.word	0x58026400

08002290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e07f      	b.n	80023a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7fe fd02 	bl	8000cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2224      	movs	r2, #36	; 0x24
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d107      	bne.n	800230a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	e006      	b.n	8002318 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002316:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d104      	bne.n	800232a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002328:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6859      	ldr	r1, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_I2C_Init+0x11c>)
 8002336:	430b      	orrs	r3, r1
 8002338:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002348:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	ea42 0103 	orr.w	r1, r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	021a      	lsls	r2, r3, #8
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69d9      	ldr	r1, [r3, #28]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1a      	ldr	r2, [r3, #32]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2220      	movs	r2, #32
 800238e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	02008000 	.word	0x02008000

080023b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	461a      	mov	r2, r3
 80023bc:	460b      	mov	r3, r1
 80023be:	817b      	strh	r3, [r7, #10]
 80023c0:	4613      	mov	r3, r2
 80023c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b20      	cmp	r3, #32
 80023ce:	f040 80da 	bne.w	8002586 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_I2C_Master_Transmit+0x30>
 80023dc:	2302      	movs	r3, #2
 80023de:	e0d3      	b.n	8002588 <HAL_I2C_Master_Transmit+0x1d8>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023e8:	f7ff fc56 	bl	8001c98 <HAL_GetTick>
 80023ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2319      	movs	r3, #25
 80023f4:	2201      	movs	r2, #1
 80023f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f9e6 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e0be      	b.n	8002588 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2221      	movs	r2, #33	; 0x21
 800240e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2210      	movs	r2, #16
 8002416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	893a      	ldrh	r2, [r7, #8]
 800242a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002436:	b29b      	uxth	r3, r3
 8002438:	2bff      	cmp	r3, #255	; 0xff
 800243a:	d90e      	bls.n	800245a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	22ff      	movs	r2, #255	; 0xff
 8002440:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002446:	b2da      	uxtb	r2, r3
 8002448:	8979      	ldrh	r1, [r7, #10]
 800244a:	4b51      	ldr	r3, [pc, #324]	; (8002590 <HAL_I2C_Master_Transmit+0x1e0>)
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 fb48 	bl	8002ae8 <I2C_TransferConfig>
 8002458:	e06c      	b.n	8002534 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002468:	b2da      	uxtb	r2, r3
 800246a:	8979      	ldrh	r1, [r7, #10]
 800246c:	4b48      	ldr	r3, [pc, #288]	; (8002590 <HAL_I2C_Master_Transmit+0x1e0>)
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fb37 	bl	8002ae8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800247a:	e05b      	b.n	8002534 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	6a39      	ldr	r1, [r7, #32]
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f9e3 	bl	800284c <I2C_WaitOnTXISFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e07b      	b.n	8002588 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	781a      	ldrb	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d034      	beq.n	8002534 <HAL_I2C_Master_Transmit+0x184>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d130      	bne.n	8002534 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	2200      	movs	r2, #0
 80024da:	2180      	movs	r1, #128	; 0x80
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f975 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e04d      	b.n	8002588 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2bff      	cmp	r3, #255	; 0xff
 80024f4:	d90e      	bls.n	8002514 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	22ff      	movs	r2, #255	; 0xff
 80024fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002500:	b2da      	uxtb	r2, r3
 8002502:	8979      	ldrh	r1, [r7, #10]
 8002504:	2300      	movs	r3, #0
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 faeb 	bl	8002ae8 <I2C_TransferConfig>
 8002512:	e00f      	b.n	8002534 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	b2da      	uxtb	r2, r3
 8002524:	8979      	ldrh	r1, [r7, #10]
 8002526:	2300      	movs	r3, #0
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fada 	bl	8002ae8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d19e      	bne.n	800247c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	6a39      	ldr	r1, [r7, #32]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f9c2 	bl	80028cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e01a      	b.n	8002588 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2220      	movs	r2, #32
 8002558:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_I2C_Master_Transmit+0x1e4>)
 8002566:	400b      	ands	r3, r1
 8002568:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2220      	movs	r2, #32
 800256e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	e000      	b.n	8002588 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002586:	2302      	movs	r3, #2
  }
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	80002000 	.word	0x80002000
 8002594:	fe00e800 	.word	0xfe00e800

08002598 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af02      	add	r7, sp, #8
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	461a      	mov	r2, r3
 80025a4:	460b      	mov	r3, r1
 80025a6:	817b      	strh	r3, [r7, #10]
 80025a8:	4613      	mov	r3, r2
 80025aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	f040 80db 	bne.w	8002770 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_I2C_Master_Receive+0x30>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e0d4      	b.n	8002772 <HAL_I2C_Master_Receive+0x1da>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025d0:	f7ff fb62 	bl	8001c98 <HAL_GetTick>
 80025d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	2319      	movs	r3, #25
 80025dc:	2201      	movs	r2, #1
 80025de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f8f2 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0bf      	b.n	8002772 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2222      	movs	r2, #34	; 0x22
 80025f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2210      	movs	r2, #16
 80025fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	893a      	ldrh	r2, [r7, #8]
 8002612:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261e:	b29b      	uxth	r3, r3
 8002620:	2bff      	cmp	r3, #255	; 0xff
 8002622:	d90e      	bls.n	8002642 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	22ff      	movs	r2, #255	; 0xff
 8002628:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	b2da      	uxtb	r2, r3
 8002630:	8979      	ldrh	r1, [r7, #10]
 8002632:	4b52      	ldr	r3, [pc, #328]	; (800277c <HAL_I2C_Master_Receive+0x1e4>)
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 fa54 	bl	8002ae8 <I2C_TransferConfig>
 8002640:	e06d      	b.n	800271e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002650:	b2da      	uxtb	r2, r3
 8002652:	8979      	ldrh	r1, [r7, #10]
 8002654:	4b49      	ldr	r3, [pc, #292]	; (800277c <HAL_I2C_Master_Receive+0x1e4>)
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 fa43 	bl	8002ae8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002662:	e05c      	b.n	800271e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	6a39      	ldr	r1, [r7, #32]
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f96b 	bl	8002944 <I2C_WaitOnRXNEFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e07c      	b.n	8002772 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d034      	beq.n	800271e <HAL_I2C_Master_Receive+0x186>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d130      	bne.n	800271e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	2200      	movs	r2, #0
 80026c4:	2180      	movs	r1, #128	; 0x80
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f880 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e04d      	b.n	8002772 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026da:	b29b      	uxth	r3, r3
 80026dc:	2bff      	cmp	r3, #255	; 0xff
 80026de:	d90e      	bls.n	80026fe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	22ff      	movs	r2, #255	; 0xff
 80026e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	8979      	ldrh	r1, [r7, #10]
 80026ee:	2300      	movs	r3, #0
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f9f6 	bl	8002ae8 <I2C_TransferConfig>
 80026fc:	e00f      	b.n	800271e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270c:	b2da      	uxtb	r2, r3
 800270e:	8979      	ldrh	r1, [r7, #10]
 8002710:	2300      	movs	r3, #0
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f9e5 	bl	8002ae8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002722:	b29b      	uxth	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d19d      	bne.n	8002664 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	6a39      	ldr	r1, [r7, #32]
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 f8cd 	bl	80028cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e01a      	b.n	8002772 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2220      	movs	r2, #32
 8002742:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6859      	ldr	r1, [r3, #4]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <HAL_I2C_Master_Receive+0x1e8>)
 8002750:	400b      	ands	r3, r1
 8002752:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	e000      	b.n	8002772 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002770:	2302      	movs	r3, #2
  }
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	80002400 	.word	0x80002400
 8002780:	fe00e800 	.word	0xfe00e800

08002784 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b02      	cmp	r3, #2
 8002798:	d103      	bne.n	80027a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2200      	movs	r2, #0
 80027a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d007      	beq.n	80027c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	619a      	str	r2, [r3, #24]
  }
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	4613      	mov	r3, r2
 80027da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027dc:	e022      	b.n	8002824 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d01e      	beq.n	8002824 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e6:	f7ff fa57 	bl	8001c98 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d302      	bcc.n	80027fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d113      	bne.n	8002824 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002800:	f043 0220 	orr.w	r2, r3, #32
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e00f      	b.n	8002844 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4013      	ands	r3, r2
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	429a      	cmp	r2, r3
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	429a      	cmp	r2, r3
 8002840:	d0cd      	beq.n	80027de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002858:	e02c      	b.n	80028b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f8dc 	bl	8002a1c <I2C_IsAcknowledgeFailed>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e02a      	b.n	80028c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d01e      	beq.n	80028b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002876:	f7ff fa0f 	bl	8001c98 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	429a      	cmp	r2, r3
 8002884:	d302      	bcc.n	800288c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d113      	bne.n	80028b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002890:	f043 0220 	orr.w	r2, r3, #32
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e007      	b.n	80028c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d1cb      	bne.n	800285a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028d8:	e028      	b.n	800292c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f89c 	bl	8002a1c <I2C_IsAcknowledgeFailed>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e026      	b.n	800293c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ee:	f7ff f9d3 	bl	8001c98 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d302      	bcc.n	8002904 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d113      	bne.n	800292c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002908:	f043 0220 	orr.w	r2, r3, #32
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e007      	b.n	800293c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	2b20      	cmp	r3, #32
 8002938:	d1cf      	bne.n	80028da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002950:	e055      	b.n	80029fe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f860 	bl	8002a1c <I2C_IsAcknowledgeFailed>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e053      	b.n	8002a0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b20      	cmp	r3, #32
 8002972:	d129      	bne.n	80029c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b04      	cmp	r3, #4
 8002980:	d105      	bne.n	800298e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	e03f      	b.n	8002a0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2220      	movs	r2, #32
 8002994:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80029a2:	400b      	ands	r3, r1
 80029a4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e022      	b.n	8002a0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c8:	f7ff f966 	bl	8001c98 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d302      	bcc.n	80029de <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10f      	bne.n	80029fe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f043 0220 	orr.w	r2, r3, #32
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e007      	b.n	8002a0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d1a2      	bne.n	8002952 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	fe00e800 	.word	0xfe00e800

08002a1c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	d151      	bne.n	8002ada <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a36:	e022      	b.n	8002a7e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3e:	d01e      	beq.n	8002a7e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a40:	f7ff f92a 	bl	8001c98 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d302      	bcc.n	8002a56 <I2C_IsAcknowledgeFailed+0x3a>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d113      	bne.n	8002a7e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	f043 0220 	orr.w	r2, r3, #32
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e02e      	b.n	8002adc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d1d5      	bne.n	8002a38 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2210      	movs	r2, #16
 8002a92:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f7ff fe71 	bl	8002784 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <I2C_IsAcknowledgeFailed+0xc8>)
 8002aae:	400b      	ands	r3, r1
 8002ab0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	f043 0204 	orr.w	r2, r3, #4
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	fe00e800 	.word	0xfe00e800

08002ae8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	607b      	str	r3, [r7, #4]
 8002af2:	460b      	mov	r3, r1
 8002af4:	817b      	strh	r3, [r7, #10]
 8002af6:	4613      	mov	r3, r2
 8002af8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	0d5b      	lsrs	r3, r3, #21
 8002b04:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b08:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <I2C_TransferConfig+0x58>)
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	ea02 0103 	and.w	r1, r2, r3
 8002b12:	897b      	ldrh	r3, [r7, #10]
 8002b14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b18:	7a7b      	ldrb	r3, [r7, #9]
 8002b1a:	041b      	lsls	r3, r3, #16
 8002b1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	431a      	orrs	r2, r3
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	03ff63ff 	.word	0x03ff63ff

08002b44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d138      	bne.n	8002bcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e032      	b.n	8002bce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2224      	movs	r2, #36	; 0x24
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6819      	ldr	r1, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e000      	b.n	8002bce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bcc:	2302      	movs	r3, #2
  }
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b085      	sub	sp, #20
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	d139      	bne.n	8002c64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e033      	b.n	8002c66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2224      	movs	r2, #36	; 0x24
 8002c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0201 	bic.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	e000      	b.n	8002c66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c64:	2302      	movs	r3, #2
  }
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002c7c:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	2b06      	cmp	r3, #6
 8002c86:	d00a      	beq.n	8002c9e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c88:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d001      	beq.n	8002c9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e040      	b.n	8002d1c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e03e      	b.n	8002d1c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c9e:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002ca6:	491f      	ldr	r1, [pc, #124]	; (8002d24 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002cae:	f7fe fff3 	bl	8001c98 <HAL_GetTick>
 8002cb2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cb4:	e009      	b.n	8002cca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002cb6:	f7fe ffef 	bl	8001c98 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cc4:	d901      	bls.n	8002cca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e028      	b.n	8002d1c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cca:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd6:	d1ee      	bne.n	8002cb6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b1e      	cmp	r3, #30
 8002cdc:	d008      	beq.n	8002cf0 <HAL_PWREx_ConfigSupply+0x7c>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b2e      	cmp	r3, #46	; 0x2e
 8002ce2:	d005      	beq.n	8002cf0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b1d      	cmp	r3, #29
 8002ce8:	d002      	beq.n	8002cf0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b2d      	cmp	r3, #45	; 0x2d
 8002cee:	d114      	bne.n	8002d1a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002cf0:	f7fe ffd2 	bl	8001c98 <HAL_GetTick>
 8002cf4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002cf6:	e009      	b.n	8002d0c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002cf8:	f7fe ffce 	bl	8001c98 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d06:	d901      	bls.n	8002d0c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e007      	b.n	8002d1c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d18:	d1ee      	bne.n	8002cf8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	58024800 	.word	0x58024800

08002d28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08c      	sub	sp, #48	; 0x30
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e3ff      	b.n	800353a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8087 	beq.w	8002e56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d48:	4b99      	ldr	r3, [pc, #612]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d52:	4b97      	ldr	r3, [pc, #604]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d007      	beq.n	8002d6e <HAL_RCC_OscConfig+0x46>
 8002d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d60:	2b18      	cmp	r3, #24
 8002d62:	d110      	bne.n	8002d86 <HAL_RCC_OscConfig+0x5e>
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d10b      	bne.n	8002d86 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6e:	4b90      	ldr	r3, [pc, #576]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d06c      	beq.n	8002e54 <HAL_RCC_OscConfig+0x12c>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d168      	bne.n	8002e54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e3d9      	b.n	800353a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCC_OscConfig+0x76>
 8002d90:	4b87      	ldr	r3, [pc, #540]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a86      	ldr	r2, [pc, #536]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	e02e      	b.n	8002dfc <HAL_RCC_OscConfig+0xd4>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x98>
 8002da6:	4b82      	ldr	r3, [pc, #520]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a81      	ldr	r2, [pc, #516]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b7f      	ldr	r3, [pc, #508]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a7e      	ldr	r2, [pc, #504]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e01d      	b.n	8002dfc <HAL_RCC_OscConfig+0xd4>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0xbc>
 8002dca:	4b79      	ldr	r3, [pc, #484]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a78      	ldr	r2, [pc, #480]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b76      	ldr	r3, [pc, #472]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a75      	ldr	r2, [pc, #468]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e00b      	b.n	8002dfc <HAL_RCC_OscConfig+0xd4>
 8002de4:	4b72      	ldr	r3, [pc, #456]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a71      	ldr	r2, [pc, #452]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	4b6f      	ldr	r3, [pc, #444]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a6e      	ldr	r2, [pc, #440]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d013      	beq.n	8002e2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fe ff48 	bl	8001c98 <HAL_GetTick>
 8002e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7fe ff44 	bl	8001c98 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e38d      	b.n	800353a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e1e:	4b64      	ldr	r3, [pc, #400]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0xe4>
 8002e2a:	e014      	b.n	8002e56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe ff34 	bl	8001c98 <HAL_GetTick>
 8002e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fe ff30 	bl	8001c98 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	; 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e379      	b.n	800353a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e46:	4b5a      	ldr	r3, [pc, #360]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x10c>
 8002e52:	e000      	b.n	8002e56 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80ae 	beq.w	8002fc0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e64:	4b52      	ldr	r3, [pc, #328]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e6e:	4b50      	ldr	r3, [pc, #320]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HAL_RCC_OscConfig+0x162>
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	2b18      	cmp	r3, #24
 8002e7e:	d13a      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x1ce>
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d135      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e8a:	4b49      	ldr	r3, [pc, #292]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x17a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e34b      	b.n	800353a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea2:	f7fe ff27 	bl	8001cf4 <HAL_GetREVID>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	f241 0303 	movw	r3, #4099	; 0x1003
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d817      	bhi.n	8002ee0 <HAL_RCC_OscConfig+0x1b8>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	2b40      	cmp	r3, #64	; 0x40
 8002eb6:	d108      	bne.n	8002eca <HAL_RCC_OscConfig+0x1a2>
 8002eb8:	4b3d      	ldr	r3, [pc, #244]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ec0:	4a3b      	ldr	r2, [pc, #236]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ec8:	e07a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eca:	4b39      	ldr	r3, [pc, #228]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	031b      	lsls	r3, r3, #12
 8002ed8:	4935      	ldr	r1, [pc, #212]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ede:	e06f      	b.n	8002fc0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee0:	4b33      	ldr	r3, [pc, #204]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	061b      	lsls	r3, r3, #24
 8002eee:	4930      	ldr	r1, [pc, #192]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef4:	e064      	b.n	8002fc0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d045      	beq.n	8002f8a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002efe:	4b2c      	ldr	r3, [pc, #176]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 0219 	bic.w	r2, r3, #25
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	4929      	ldr	r1, [pc, #164]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fe fec2 	bl	8001c98 <HAL_GetTick>
 8002f14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f18:	f7fe febe 	bl	8001c98 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e307      	b.n	800353a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f2a:	4b21      	ldr	r3, [pc, #132]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f36:	f7fe fedd 	bl	8001cf4 <HAL_GetREVID>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d817      	bhi.n	8002f74 <HAL_RCC_OscConfig+0x24c>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	2b40      	cmp	r3, #64	; 0x40
 8002f4a:	d108      	bne.n	8002f5e <HAL_RCC_OscConfig+0x236>
 8002f4c:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f54:	4a16      	ldr	r2, [pc, #88]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f5a:	6053      	str	r3, [r2, #4]
 8002f5c:	e030      	b.n	8002fc0 <HAL_RCC_OscConfig+0x298>
 8002f5e:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	031b      	lsls	r3, r3, #12
 8002f6c:	4910      	ldr	r1, [pc, #64]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	604b      	str	r3, [r1, #4]
 8002f72:	e025      	b.n	8002fc0 <HAL_RCC_OscConfig+0x298>
 8002f74:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	061b      	lsls	r3, r3, #24
 8002f82:	490b      	ldr	r1, [pc, #44]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]
 8002f88:	e01a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a08      	ldr	r2, [pc, #32]	; (8002fb0 <HAL_RCC_OscConfig+0x288>)
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f96:	f7fe fe7f 	bl	8001c98 <HAL_GetTick>
 8002f9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f9e:	f7fe fe7b 	bl	8001c98 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d903      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e2c4      	b.n	800353a <HAL_RCC_OscConfig+0x812>
 8002fb0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fb4:	4ba4      	ldr	r3, [pc, #656]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1ee      	bne.n	8002f9e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80a9 	beq.w	8003120 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fce:	4b9e      	ldr	r3, [pc, #632]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fd6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fd8:	4b9b      	ldr	r3, [pc, #620]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d007      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x2cc>
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b18      	cmp	r3, #24
 8002fe8:	d13a      	bne.n	8003060 <HAL_RCC_OscConfig+0x338>
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d135      	bne.n	8003060 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ff4:	4b94      	ldr	r3, [pc, #592]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_OscConfig+0x2e4>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	2b80      	cmp	r3, #128	; 0x80
 8003006:	d001      	beq.n	800300c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e296      	b.n	800353a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800300c:	f7fe fe72 	bl	8001cf4 <HAL_GetREVID>
 8003010:	4602      	mov	r2, r0
 8003012:	f241 0303 	movw	r3, #4099	; 0x1003
 8003016:	429a      	cmp	r2, r3
 8003018:	d817      	bhi.n	800304a <HAL_RCC_OscConfig+0x322>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	2b20      	cmp	r3, #32
 8003020:	d108      	bne.n	8003034 <HAL_RCC_OscConfig+0x30c>
 8003022:	4b89      	ldr	r3, [pc, #548]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800302a:	4a87      	ldr	r2, [pc, #540]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 800302c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003030:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003032:	e075      	b.n	8003120 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003034:	4b84      	ldr	r3, [pc, #528]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	069b      	lsls	r3, r3, #26
 8003042:	4981      	ldr	r1, [pc, #516]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003048:	e06a      	b.n	8003120 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800304a:	4b7f      	ldr	r3, [pc, #508]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	061b      	lsls	r3, r3, #24
 8003058:	497b      	ldr	r1, [pc, #492]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 800305a:	4313      	orrs	r3, r2
 800305c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800305e:	e05f      	b.n	8003120 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d042      	beq.n	80030ee <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003068:	4b77      	ldr	r3, [pc, #476]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a76      	ldr	r2, [pc, #472]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 800306e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe fe10 	bl	8001c98 <HAL_GetTick>
 8003078:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800307c:	f7fe fe0c 	bl	8001c98 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e255      	b.n	800353a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800308e:	4b6e      	ldr	r3, [pc, #440]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800309a:	f7fe fe2b 	bl	8001cf4 <HAL_GetREVID>
 800309e:	4602      	mov	r2, r0
 80030a0:	f241 0303 	movw	r3, #4099	; 0x1003
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d817      	bhi.n	80030d8 <HAL_RCC_OscConfig+0x3b0>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d108      	bne.n	80030c2 <HAL_RCC_OscConfig+0x39a>
 80030b0:	4b65      	ldr	r3, [pc, #404]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80030b8:	4a63      	ldr	r2, [pc, #396]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 80030ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030be:	6053      	str	r3, [r2, #4]
 80030c0:	e02e      	b.n	8003120 <HAL_RCC_OscConfig+0x3f8>
 80030c2:	4b61      	ldr	r3, [pc, #388]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	069b      	lsls	r3, r3, #26
 80030d0:	495d      	ldr	r1, [pc, #372]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]
 80030d6:	e023      	b.n	8003120 <HAL_RCC_OscConfig+0x3f8>
 80030d8:	4b5b      	ldr	r3, [pc, #364]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	061b      	lsls	r3, r3, #24
 80030e6:	4958      	ldr	r1, [pc, #352]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60cb      	str	r3, [r1, #12]
 80030ec:	e018      	b.n	8003120 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80030ee:	4b56      	ldr	r3, [pc, #344]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a55      	ldr	r2, [pc, #340]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 80030f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fa:	f7fe fdcd 	bl	8001c98 <HAL_GetTick>
 80030fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003102:	f7fe fdc9 	bl	8001c98 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e212      	b.n	800353a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003114:	4b4c      	ldr	r3, [pc, #304]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f0      	bne.n	8003102 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d036      	beq.n	800319a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d019      	beq.n	8003168 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003134:	4b44      	ldr	r3, [pc, #272]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 8003136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003138:	4a43      	ldr	r2, [pc, #268]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003140:	f7fe fdaa 	bl	8001c98 <HAL_GetTick>
 8003144:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003148:	f7fe fda6 	bl	8001c98 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e1ef      	b.n	800353a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800315a:	4b3b      	ldr	r3, [pc, #236]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 800315c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x420>
 8003166:	e018      	b.n	800319a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003168:	4b37      	ldr	r3, [pc, #220]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 800316a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316c:	4a36      	ldr	r2, [pc, #216]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7fe fd90 	bl	8001c98 <HAL_GetTick>
 8003178:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800317c:	f7fe fd8c 	bl	8001c98 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e1d5      	b.n	800353a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800318e:	4b2e      	ldr	r3, [pc, #184]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 8003190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d036      	beq.n	8003214 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d019      	beq.n	80031e2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031ae:	4b26      	ldr	r3, [pc, #152]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a25      	ldr	r2, [pc, #148]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 80031b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031ba:	f7fe fd6d 	bl	8001c98 <HAL_GetTick>
 80031be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80031c2:	f7fe fd69 	bl	8001c98 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e1b2      	b.n	800353a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031d4:	4b1c      	ldr	r3, [pc, #112]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0x49a>
 80031e0:	e018      	b.n	8003214 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a18      	ldr	r2, [pc, #96]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 80031e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031ee:	f7fe fd53 	bl	8001c98 <HAL_GetTick>
 80031f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80031f6:	f7fe fd4f 	bl	8001c98 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e198      	b.n	800353a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003208:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <HAL_RCC_OscConfig+0x520>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1f0      	bne.n	80031f6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 8085 	beq.w	800332c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <HAL_RCC_OscConfig+0x524>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a09      	ldr	r2, [pc, #36]	; (800324c <HAL_RCC_OscConfig+0x524>)
 8003228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800322e:	f7fe fd33 	bl	8001c98 <HAL_GetTick>
 8003232:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003234:	e00c      	b.n	8003250 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003236:	f7fe fd2f 	bl	8001c98 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b64      	cmp	r3, #100	; 0x64
 8003242:	d905      	bls.n	8003250 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e178      	b.n	800353a <HAL_RCC_OscConfig+0x812>
 8003248:	58024400 	.word	0x58024400
 800324c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003250:	4b96      	ldr	r3, [pc, #600]	; (80034ac <HAL_RCC_OscConfig+0x784>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0ec      	beq.n	8003236 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d106      	bne.n	8003272 <HAL_RCC_OscConfig+0x54a>
 8003264:	4b92      	ldr	r3, [pc, #584]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	4a91      	ldr	r2, [pc, #580]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6713      	str	r3, [r2, #112]	; 0x70
 8003270:	e02d      	b.n	80032ce <HAL_RCC_OscConfig+0x5a6>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10c      	bne.n	8003294 <HAL_RCC_OscConfig+0x56c>
 800327a:	4b8d      	ldr	r3, [pc, #564]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 800327c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327e:	4a8c      	ldr	r2, [pc, #560]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	6713      	str	r3, [r2, #112]	; 0x70
 8003286:	4b8a      	ldr	r3, [pc, #552]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	4a89      	ldr	r2, [pc, #548]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 800328c:	f023 0304 	bic.w	r3, r3, #4
 8003290:	6713      	str	r3, [r2, #112]	; 0x70
 8003292:	e01c      	b.n	80032ce <HAL_RCC_OscConfig+0x5a6>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b05      	cmp	r3, #5
 800329a:	d10c      	bne.n	80032b6 <HAL_RCC_OscConfig+0x58e>
 800329c:	4b84      	ldr	r3, [pc, #528]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a83      	ldr	r2, [pc, #524]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 80032a2:	f043 0304 	orr.w	r3, r3, #4
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
 80032a8:	4b81      	ldr	r3, [pc, #516]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	4a80      	ldr	r2, [pc, #512]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	6713      	str	r3, [r2, #112]	; 0x70
 80032b4:	e00b      	b.n	80032ce <HAL_RCC_OscConfig+0x5a6>
 80032b6:	4b7e      	ldr	r3, [pc, #504]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	4a7d      	ldr	r2, [pc, #500]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	6713      	str	r3, [r2, #112]	; 0x70
 80032c2:	4b7b      	ldr	r3, [pc, #492]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	4a7a      	ldr	r2, [pc, #488]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 80032c8:	f023 0304 	bic.w	r3, r3, #4
 80032cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d015      	beq.n	8003302 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d6:	f7fe fcdf 	bl	8001c98 <HAL_GetTick>
 80032da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032dc:	e00a      	b.n	80032f4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fe fcdb 	bl	8001c98 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e122      	b.n	800353a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032f4:	4b6e      	ldr	r3, [pc, #440]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ee      	beq.n	80032de <HAL_RCC_OscConfig+0x5b6>
 8003300:	e014      	b.n	800332c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003302:	f7fe fcc9 	bl	8001c98 <HAL_GetTick>
 8003306:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003308:	e00a      	b.n	8003320 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7fe fcc5 	bl	8001c98 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	; 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e10c      	b.n	800353a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003320:	4b63      	ldr	r3, [pc, #396]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ee      	bne.n	800330a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 8101 	beq.w	8003538 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003336:	4b5e      	ldr	r3, [pc, #376]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800333e:	2b18      	cmp	r3, #24
 8003340:	f000 80bc 	beq.w	80034bc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	2b02      	cmp	r3, #2
 800334a:	f040 8095 	bne.w	8003478 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334e:	4b58      	ldr	r3, [pc, #352]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a57      	ldr	r2, [pc, #348]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 8003354:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335a:	f7fe fc9d 	bl	8001c98 <HAL_GetTick>
 800335e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003362:	f7fe fc99 	bl	8001c98 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e0e2      	b.n	800353a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003374:	4b4e      	ldr	r3, [pc, #312]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1f0      	bne.n	8003362 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003380:	4b4b      	ldr	r3, [pc, #300]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 8003382:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003384:	4b4b      	ldr	r3, [pc, #300]	; (80034b4 <HAL_RCC_OscConfig+0x78c>)
 8003386:	4013      	ands	r3, r2
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003390:	0112      	lsls	r2, r2, #4
 8003392:	430a      	orrs	r2, r1
 8003394:	4946      	ldr	r1, [pc, #280]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 8003396:	4313      	orrs	r3, r2
 8003398:	628b      	str	r3, [r1, #40]	; 0x28
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	3b01      	subs	r3, #1
 80033a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a8:	3b01      	subs	r3, #1
 80033aa:	025b      	lsls	r3, r3, #9
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b4:	3b01      	subs	r3, #1
 80033b6:	041b      	lsls	r3, r3, #16
 80033b8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c2:	3b01      	subs	r3, #1
 80033c4:	061b      	lsls	r3, r3, #24
 80033c6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80033ca:	4939      	ldr	r1, [pc, #228]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80033d0:	4b37      	ldr	r3, [pc, #220]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	4a36      	ldr	r2, [pc, #216]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 80033d6:	f023 0301 	bic.w	r3, r3, #1
 80033da:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033dc:	4b34      	ldr	r3, [pc, #208]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 80033de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e0:	4b35      	ldr	r3, [pc, #212]	; (80034b8 <HAL_RCC_OscConfig+0x790>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033e8:	00d2      	lsls	r2, r2, #3
 80033ea:	4931      	ldr	r1, [pc, #196]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80033f0:	4b2f      	ldr	r3, [pc, #188]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	f023 020c 	bic.w	r2, r3, #12
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	492c      	ldr	r1, [pc, #176]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003402:	4b2b      	ldr	r3, [pc, #172]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	f023 0202 	bic.w	r2, r3, #2
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	4928      	ldr	r1, [pc, #160]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 8003410:	4313      	orrs	r3, r2
 8003412:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003414:	4b26      	ldr	r3, [pc, #152]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	4a25      	ldr	r2, [pc, #148]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 800341a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003420:	4b23      	ldr	r3, [pc, #140]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	4a22      	ldr	r2, [pc, #136]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 8003426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800342a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800342c:	4b20      	ldr	r3, [pc, #128]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	4a1f      	ldr	r2, [pc, #124]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 8003432:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003436:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003438:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	4a1c      	ldr	r2, [pc, #112]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003444:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a19      	ldr	r2, [pc, #100]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 800344a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800344e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fe fc22 	bl	8001c98 <HAL_GetTick>
 8003454:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003458:	f7fe fc1e 	bl	8001c98 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e067      	b.n	800353a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800346a:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x730>
 8003476:	e05f      	b.n	8003538 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003478:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a0c      	ldr	r2, [pc, #48]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 800347e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fe fc08 	bl	8001c98 <HAL_GetTick>
 8003488:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe fc04 	bl	8001c98 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e04d      	b.n	800353a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800349e:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <HAL_RCC_OscConfig+0x788>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x764>
 80034aa:	e045      	b.n	8003538 <HAL_RCC_OscConfig+0x810>
 80034ac:	58024800 	.word	0x58024800
 80034b0:	58024400 	.word	0x58024400
 80034b4:	fffffc0c 	.word	0xfffffc0c
 80034b8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80034bc:	4b21      	ldr	r3, [pc, #132]	; (8003544 <HAL_RCC_OscConfig+0x81c>)
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034c2:	4b20      	ldr	r3, [pc, #128]	; (8003544 <HAL_RCC_OscConfig+0x81c>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d031      	beq.n	8003534 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f003 0203 	and.w	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034da:	429a      	cmp	r2, r3
 80034dc:	d12a      	bne.n	8003534 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d122      	bne.n	8003534 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d11a      	bne.n	8003534 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	0a5b      	lsrs	r3, r3, #9
 8003502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800350c:	429a      	cmp	r2, r3
 800350e:	d111      	bne.n	8003534 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	0c1b      	lsrs	r3, r3, #16
 8003514:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800351e:	429a      	cmp	r2, r3
 8003520:	d108      	bne.n	8003534 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	0e1b      	lsrs	r3, r3, #24
 8003526:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3730      	adds	r7, #48	; 0x30
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	58024400 	.word	0x58024400

08003548 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e19c      	b.n	8003896 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800355c:	4b8a      	ldr	r3, [pc, #552]	; (8003788 <HAL_RCC_ClockConfig+0x240>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d910      	bls.n	800358c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4b87      	ldr	r3, [pc, #540]	; (8003788 <HAL_RCC_ClockConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 020f 	bic.w	r2, r3, #15
 8003572:	4985      	ldr	r1, [pc, #532]	; (8003788 <HAL_RCC_ClockConfig+0x240>)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	4b83      	ldr	r3, [pc, #524]	; (8003788 <HAL_RCC_ClockConfig+0x240>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e184      	b.n	8003896 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d010      	beq.n	80035ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	4b7b      	ldr	r3, [pc, #492]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d908      	bls.n	80035ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035a8:	4b78      	ldr	r3, [pc, #480]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	4975      	ldr	r1, [pc, #468]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d010      	beq.n	80035e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	4b70      	ldr	r3, [pc, #448]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d908      	bls.n	80035e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035d6:	4b6d      	ldr	r3, [pc, #436]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	496a      	ldr	r1, [pc, #424]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d010      	beq.n	8003616 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699a      	ldr	r2, [r3, #24]
 80035f8:	4b64      	ldr	r3, [pc, #400]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003600:	429a      	cmp	r2, r3
 8003602:	d908      	bls.n	8003616 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003604:	4b61      	ldr	r3, [pc, #388]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	495e      	ldr	r1, [pc, #376]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 8003612:	4313      	orrs	r3, r2
 8003614:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b00      	cmp	r3, #0
 8003620:	d010      	beq.n	8003644 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69da      	ldr	r2, [r3, #28]
 8003626:	4b59      	ldr	r3, [pc, #356]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800362e:	429a      	cmp	r2, r3
 8003630:	d908      	bls.n	8003644 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003632:	4b56      	ldr	r3, [pc, #344]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	4953      	ldr	r1, [pc, #332]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 8003640:	4313      	orrs	r3, r2
 8003642:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d010      	beq.n	8003672 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	4b4d      	ldr	r3, [pc, #308]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	429a      	cmp	r2, r3
 800365e:	d908      	bls.n	8003672 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003660:	4b4a      	ldr	r3, [pc, #296]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	f023 020f 	bic.w	r2, r3, #15
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4947      	ldr	r1, [pc, #284]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 800366e:	4313      	orrs	r3, r2
 8003670:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d055      	beq.n	800372a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800367e:	4b43      	ldr	r3, [pc, #268]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	4940      	ldr	r1, [pc, #256]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 800368c:	4313      	orrs	r3, r2
 800368e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b02      	cmp	r3, #2
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003698:	4b3c      	ldr	r3, [pc, #240]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d121      	bne.n	80036e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0f6      	b.n	8003896 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d107      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036b0:	4b36      	ldr	r3, [pc, #216]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d115      	bne.n	80036e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0ea      	b.n	8003896 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d107      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036c8:	4b30      	ldr	r3, [pc, #192]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d109      	bne.n	80036e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0de      	b.n	8003896 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036d8:	4b2c      	ldr	r3, [pc, #176]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0d6      	b.n	8003896 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036e8:	4b28      	ldr	r3, [pc, #160]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f023 0207 	bic.w	r2, r3, #7
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4925      	ldr	r1, [pc, #148]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7fe facd 	bl	8001c98 <HAL_GetTick>
 80036fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003700:	e00a      	b.n	8003718 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003702:	f7fe fac9 	bl	8001c98 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e0be      	b.n	8003896 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003718:	4b1c      	ldr	r3, [pc, #112]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	429a      	cmp	r2, r3
 8003728:	d1eb      	bne.n	8003702 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d010      	beq.n	8003758 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	4b14      	ldr	r3, [pc, #80]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	429a      	cmp	r2, r3
 8003744:	d208      	bcs.n	8003758 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003746:	4b11      	ldr	r3, [pc, #68]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f023 020f 	bic.w	r2, r3, #15
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	490e      	ldr	r1, [pc, #56]	; (800378c <HAL_RCC_ClockConfig+0x244>)
 8003754:	4313      	orrs	r3, r2
 8003756:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_RCC_ClockConfig+0x240>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d214      	bcs.n	8003790 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b08      	ldr	r3, [pc, #32]	; (8003788 <HAL_RCC_ClockConfig+0x240>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 020f 	bic.w	r2, r3, #15
 800376e:	4906      	ldr	r1, [pc, #24]	; (8003788 <HAL_RCC_ClockConfig+0x240>)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b04      	ldr	r3, [pc, #16]	; (8003788 <HAL_RCC_ClockConfig+0x240>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d005      	beq.n	8003790 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e086      	b.n	8003896 <HAL_RCC_ClockConfig+0x34e>
 8003788:	52002000 	.word	0x52002000
 800378c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d010      	beq.n	80037be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	4b3f      	ldr	r3, [pc, #252]	; (80038a0 <HAL_RCC_ClockConfig+0x358>)
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d208      	bcs.n	80037be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80037ac:	4b3c      	ldr	r3, [pc, #240]	; (80038a0 <HAL_RCC_ClockConfig+0x358>)
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	4939      	ldr	r1, [pc, #228]	; (80038a0 <HAL_RCC_ClockConfig+0x358>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d010      	beq.n	80037ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695a      	ldr	r2, [r3, #20]
 80037ce:	4b34      	ldr	r3, [pc, #208]	; (80038a0 <HAL_RCC_ClockConfig+0x358>)
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d208      	bcs.n	80037ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037da:	4b31      	ldr	r3, [pc, #196]	; (80038a0 <HAL_RCC_ClockConfig+0x358>)
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	492e      	ldr	r1, [pc, #184]	; (80038a0 <HAL_RCC_ClockConfig+0x358>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0310 	and.w	r3, r3, #16
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d010      	beq.n	800381a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699a      	ldr	r2, [r3, #24]
 80037fc:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <HAL_RCC_ClockConfig+0x358>)
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003804:	429a      	cmp	r2, r3
 8003806:	d208      	bcs.n	800381a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003808:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <HAL_RCC_ClockConfig+0x358>)
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	4922      	ldr	r1, [pc, #136]	; (80038a0 <HAL_RCC_ClockConfig+0x358>)
 8003816:	4313      	orrs	r3, r2
 8003818:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d010      	beq.n	8003848 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69da      	ldr	r2, [r3, #28]
 800382a:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <HAL_RCC_ClockConfig+0x358>)
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003832:	429a      	cmp	r2, r3
 8003834:	d208      	bcs.n	8003848 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003836:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <HAL_RCC_ClockConfig+0x358>)
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	4917      	ldr	r1, [pc, #92]	; (80038a0 <HAL_RCC_ClockConfig+0x358>)
 8003844:	4313      	orrs	r3, r2
 8003846:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003848:	f000 f834 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 800384c:	4601      	mov	r1, r0
 800384e:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <HAL_RCC_ClockConfig+0x358>)
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	0a1b      	lsrs	r3, r3, #8
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	4a12      	ldr	r2, [pc, #72]	; (80038a4 <HAL_RCC_ClockConfig+0x35c>)
 800385a:	5cd3      	ldrb	r3, [r2, r3]
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	fa21 f303 	lsr.w	r3, r1, r3
 8003864:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <HAL_RCC_ClockConfig+0x358>)
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	4a0d      	ldr	r2, [pc, #52]	; (80038a4 <HAL_RCC_ClockConfig+0x35c>)
 8003870:	5cd3      	ldrb	r3, [r2, r3]
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	fa22 f303 	lsr.w	r3, r2, r3
 800387c:	4a0a      	ldr	r2, [pc, #40]	; (80038a8 <HAL_RCC_ClockConfig+0x360>)
 800387e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003880:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <HAL_RCC_ClockConfig+0x364>)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003886:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <HAL_RCC_ClockConfig+0x368>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe f9ba 	bl	8001c04 <HAL_InitTick>
 8003890:	4603      	mov	r3, r0
 8003892:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003894:	7bfb      	ldrb	r3, [r7, #15]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	58024400 	.word	0x58024400
 80038a4:	08006d44 	.word	0x08006d44
 80038a8:	20000004 	.word	0x20000004
 80038ac:	20000000 	.word	0x20000000
 80038b0:	200000f0 	.word	0x200000f0

080038b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b089      	sub	sp, #36	; 0x24
 80038b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038ba:	4baf      	ldr	r3, [pc, #700]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038c2:	2b18      	cmp	r3, #24
 80038c4:	f200 814e 	bhi.w	8003b64 <HAL_RCC_GetSysClockFreq+0x2b0>
 80038c8:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80038ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ce:	bf00      	nop
 80038d0:	08003935 	.word	0x08003935
 80038d4:	08003b65 	.word	0x08003b65
 80038d8:	08003b65 	.word	0x08003b65
 80038dc:	08003b65 	.word	0x08003b65
 80038e0:	08003b65 	.word	0x08003b65
 80038e4:	08003b65 	.word	0x08003b65
 80038e8:	08003b65 	.word	0x08003b65
 80038ec:	08003b65 	.word	0x08003b65
 80038f0:	0800395b 	.word	0x0800395b
 80038f4:	08003b65 	.word	0x08003b65
 80038f8:	08003b65 	.word	0x08003b65
 80038fc:	08003b65 	.word	0x08003b65
 8003900:	08003b65 	.word	0x08003b65
 8003904:	08003b65 	.word	0x08003b65
 8003908:	08003b65 	.word	0x08003b65
 800390c:	08003b65 	.word	0x08003b65
 8003910:	08003961 	.word	0x08003961
 8003914:	08003b65 	.word	0x08003b65
 8003918:	08003b65 	.word	0x08003b65
 800391c:	08003b65 	.word	0x08003b65
 8003920:	08003b65 	.word	0x08003b65
 8003924:	08003b65 	.word	0x08003b65
 8003928:	08003b65 	.word	0x08003b65
 800392c:	08003b65 	.word	0x08003b65
 8003930:	08003967 	.word	0x08003967
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003934:	4b90      	ldr	r3, [pc, #576]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b00      	cmp	r3, #0
 800393e:	d009      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003940:	4b8d      	ldr	r3, [pc, #564]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	08db      	lsrs	r3, r3, #3
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	4a8c      	ldr	r2, [pc, #560]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
 8003950:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003952:	e10a      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003954:	4b89      	ldr	r3, [pc, #548]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003956:	61bb      	str	r3, [r7, #24]
    break;
 8003958:	e107      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800395a:	4b89      	ldr	r3, [pc, #548]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800395c:	61bb      	str	r3, [r7, #24]
    break;
 800395e:	e104      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003960:	4b88      	ldr	r3, [pc, #544]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003962:	61bb      	str	r3, [r7, #24]
    break;
 8003964:	e101      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003966:	4b84      	ldr	r3, [pc, #528]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003970:	4b81      	ldr	r3, [pc, #516]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800397a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800397c:	4b7e      	ldr	r3, [pc, #504]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003986:	4b7c      	ldr	r3, [pc, #496]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398a:	08db      	lsrs	r3, r3, #3
 800398c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80da 	beq.w	8003b5e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d05a      	beq.n	8003a66 <HAL_RCC_GetSysClockFreq+0x1b2>
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d302      	bcc.n	80039ba <HAL_RCC_GetSysClockFreq+0x106>
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d078      	beq.n	8003aaa <HAL_RCC_GetSysClockFreq+0x1f6>
 80039b8:	e099      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039ba:	4b6f      	ldr	r3, [pc, #444]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d02d      	beq.n	8003a22 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039c6:	4b6c      	ldr	r3, [pc, #432]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	08db      	lsrs	r3, r3, #3
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	4a6a      	ldr	r2, [pc, #424]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80039d2:	fa22 f303 	lsr.w	r3, r2, r3
 80039d6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	ee07 3a90 	vmov	s15, r3
 80039e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039f0:	4b61      	ldr	r3, [pc, #388]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f8:	ee07 3a90 	vmov	s15, r3
 80039fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a00:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a04:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003b88 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003a08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003a20:	e087      	b.n	8003b32 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	ee07 3a90 	vmov	s15, r3
 8003a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003b8c <HAL_RCC_GetSysClockFreq+0x2d8>
 8003a30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a34:	4b50      	ldr	r3, [pc, #320]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3c:	ee07 3a90 	vmov	s15, r3
 8003a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a44:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a48:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003b88 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003a4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a64:	e065      	b.n	8003b32 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	ee07 3a90 	vmov	s15, r3
 8003a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a70:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003b90 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003a74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a78:	4b3f      	ldr	r3, [pc, #252]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a80:	ee07 3a90 	vmov	s15, r3
 8003a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a88:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a8c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003b88 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003a90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aa8:	e043      	b.n	8003b32 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	ee07 3a90 	vmov	s15, r3
 8003ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003b94 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003ab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003abc:	4b2e      	ldr	r3, [pc, #184]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac4:	ee07 3a90 	vmov	s15, r3
 8003ac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003acc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ad0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003b88 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003ad4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003adc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aec:	e021      	b.n	8003b32 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	ee07 3a90 	vmov	s15, r3
 8003af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003b90 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003afc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b00:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b08:	ee07 3a90 	vmov	s15, r3
 8003b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b10:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b14:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003b88 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003b18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b30:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	0a5b      	lsrs	r3, r3, #9
 8003b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	ee07 3a90 	vmov	s15, r3
 8003b46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b56:	ee17 3a90 	vmov	r3, s15
 8003b5a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003b5c:	e005      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61bb      	str	r3, [r7, #24]
    break;
 8003b62:	e002      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003b66:	61bb      	str	r3, [r7, #24]
    break;
 8003b68:	bf00      	nop
  }

  return sysclockfreq;
 8003b6a:	69bb      	ldr	r3, [r7, #24]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3724      	adds	r7, #36	; 0x24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	03d09000 	.word	0x03d09000
 8003b80:	003d0900 	.word	0x003d0900
 8003b84:	017d7840 	.word	0x017d7840
 8003b88:	46000000 	.word	0x46000000
 8003b8c:	4c742400 	.word	0x4c742400
 8003b90:	4a742400 	.word	0x4a742400
 8003b94:	4bbebc20 	.word	0x4bbebc20

08003b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b9e:	f7ff fe89 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8003ba2:	4601      	mov	r1, r0
 8003ba4:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	4a0f      	ldr	r2, [pc, #60]	; (8003bec <HAL_RCC_GetHCLKFreq+0x54>)
 8003bb0:	5cd3      	ldrb	r3, [r2, r3]
 8003bb2:	f003 031f 	and.w	r3, r3, #31
 8003bb6:	fa21 f303 	lsr.w	r3, r1, r3
 8003bba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	4a09      	ldr	r2, [pc, #36]	; (8003bec <HAL_RCC_GetHCLKFreq+0x54>)
 8003bc6:	5cd3      	ldrb	r3, [r2, r3]
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd2:	4a07      	ldr	r2, [pc, #28]	; (8003bf0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003bd4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bd6:	4a07      	ldr	r2, [pc, #28]	; (8003bf4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003bdc:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003bde:	681b      	ldr	r3, [r3, #0]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	58024400 	.word	0x58024400
 8003bec:	08006d44 	.word	0x08006d44
 8003bf0:	20000004 	.word	0x20000004
 8003bf4:	20000000 	.word	0x20000000

08003bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003bfc:	f7ff ffcc 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003c00:	4601      	mov	r1, r0
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	091b      	lsrs	r3, r3, #4
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	4a04      	ldr	r2, [pc, #16]	; (8003c20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c0e:	5cd3      	ldrb	r3, [r2, r3]
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	58024400 	.word	0x58024400
 8003c20:	08006d44 	.word	0x08006d44

08003c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003c28:	f7ff ffb6 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003c2c:	4601      	mov	r1, r0
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	0a1b      	lsrs	r3, r3, #8
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	4a04      	ldr	r2, [pc, #16]	; (8003c4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c3a:	5cd3      	ldrb	r3, [r2, r3]
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	58024400 	.word	0x58024400
 8003c4c:	08006d44 	.word	0x08006d44

08003c50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c58:	2300      	movs	r3, #0
 8003c5a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d03d      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c74:	d013      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c7a:	d802      	bhi.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003c80:	e01f      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003c82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c86:	d013      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003c88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c8c:	d01c      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003c8e:	e018      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c90:	4baf      	ldr	r3, [pc, #700]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	4aae      	ldr	r2, [pc, #696]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c9c:	e015      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f001 f96f 	bl	8004f88 <RCCEx_PLL2_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003cae:	e00c      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3324      	adds	r3, #36	; 0x24
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f001 fa18 	bl	80050ec <RCCEx_PLL3_Config>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003cc0:	e003      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc6:	e000      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cca:	7dfb      	ldrb	r3, [r7, #23]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d109      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003cd0:	4b9f      	ldr	r3, [pc, #636]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cdc:	499c      	ldr	r1, [pc, #624]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	650b      	str	r3, [r1, #80]	; 0x50
 8003ce2:	e001      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
 8003ce6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d03d      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d826      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003cfc:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d02:	bf00      	nop
 8003d04:	08003d19 	.word	0x08003d19
 8003d08:	08003d27 	.word	0x08003d27
 8003d0c:	08003d39 	.word	0x08003d39
 8003d10:	08003d51 	.word	0x08003d51
 8003d14:	08003d51 	.word	0x08003d51
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d18:	4b8d      	ldr	r3, [pc, #564]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	4a8c      	ldr	r2, [pc, #560]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d24:	e015      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f001 f92b 	bl	8004f88 <RCCEx_PLL2_Config>
 8003d32:	4603      	mov	r3, r0
 8003d34:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d36:	e00c      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3324      	adds	r3, #36	; 0x24
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f001 f9d4 	bl	80050ec <RCCEx_PLL3_Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d48:	e003      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d4e:	e000      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003d50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d109      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d58:	4b7d      	ldr	r3, [pc, #500]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5c:	f023 0207 	bic.w	r2, r3, #7
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d64:	497a      	ldr	r1, [pc, #488]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	650b      	str	r3, [r1, #80]	; 0x50
 8003d6a:	e001      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d03e      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d80:	2b80      	cmp	r3, #128	; 0x80
 8003d82:	d01c      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003d84:	2b80      	cmp	r3, #128	; 0x80
 8003d86:	d804      	bhi.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003d8c:	2b40      	cmp	r3, #64	; 0x40
 8003d8e:	d00d      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003d90:	e01e      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003d92:	2bc0      	cmp	r3, #192	; 0xc0
 8003d94:	d01f      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d9a:	d01e      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003d9c:	e018      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9e:	4b6c      	ldr	r3, [pc, #432]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	4a6b      	ldr	r2, [pc, #428]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003daa:	e017      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 f8e8 	bl	8004f88 <RCCEx_PLL2_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003dbc:	e00e      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3324      	adds	r3, #36	; 0x24
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f001 f991 	bl	80050ec <RCCEx_PLL3_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003dce:	e005      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd4:	e002      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003dd6:	bf00      	nop
 8003dd8:	e000      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003dda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003de2:	4b5b      	ldr	r3, [pc, #364]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dee:	4958      	ldr	r1, [pc, #352]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	650b      	str	r3, [r1, #80]	; 0x50
 8003df4:	e001      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df6:	7dfb      	ldrb	r3, [r7, #23]
 8003df8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d044      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e10:	d01f      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e16:	d805      	bhi.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e20:	d00e      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003e22:	e01f      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003e24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e28:	d01f      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003e2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e2e:	d01e      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003e30:	e018      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e32:	4b47      	ldr	r3, [pc, #284]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	4a46      	ldr	r2, [pc, #280]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e3e:	e017      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3304      	adds	r3, #4
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f001 f89e 	bl	8004f88 <RCCEx_PLL2_Config>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003e50:	e00e      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3324      	adds	r3, #36	; 0x24
 8003e56:	2100      	movs	r1, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f001 f947 	bl	80050ec <RCCEx_PLL3_Config>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e62:	e005      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	75fb      	strb	r3, [r7, #23]
      break;
 8003e68:	e002      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e000      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10a      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e76:	4b36      	ldr	r3, [pc, #216]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e84:	4932      	ldr	r1, [pc, #200]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	658b      	str	r3, [r1, #88]	; 0x58
 8003e8a:	e001      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
 8003e8e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d044      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ea2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ea6:	d01f      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003ea8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eac:	d805      	bhi.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003eb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eb6:	d00e      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003eb8:	e01f      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003eba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ebe:	d01f      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003ec0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ec4:	d01e      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003ec6:	e018      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec8:	4b21      	ldr	r3, [pc, #132]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	4a20      	ldr	r2, [pc, #128]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ed4:	e017      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	2100      	movs	r1, #0
 8003edc:	4618      	mov	r0, r3
 8003ede:	f001 f853 	bl	8004f88 <RCCEx_PLL2_Config>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003ee6:	e00e      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3324      	adds	r3, #36	; 0x24
 8003eec:	2100      	movs	r1, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f001 f8fc 	bl	80050ec <RCCEx_PLL3_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ef8:	e005      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	75fb      	strb	r3, [r7, #23]
      break;
 8003efe:	e002      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003f00:	bf00      	nop
 8003f02:	e000      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003f04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f06:	7dfb      	ldrb	r3, [r7, #23]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f0c:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f10:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f1a:	490d      	ldr	r1, [pc, #52]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	658b      	str	r3, [r1, #88]	; 0x58
 8003f20:	e001      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
 8003f24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d035      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f36:	2b10      	cmp	r3, #16
 8003f38:	d00c      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003f3a:	2b10      	cmp	r3, #16
 8003f3c:	d802      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01b      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003f42:	e017      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	d00c      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003f48:	2b30      	cmp	r3, #48	; 0x30
 8003f4a:	d018      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003f4c:	e012      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003f4e:	bf00      	nop
 8003f50:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f54:	4baf      	ldr	r3, [pc, #700]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	4aae      	ldr	r2, [pc, #696]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f60:	e00e      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3304      	adds	r3, #4
 8003f66:	2102      	movs	r1, #2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f001 f80d 	bl	8004f88 <RCCEx_PLL2_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f72:	e005      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	75fb      	strb	r3, [r7, #23]
      break;
 8003f78:	e002      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003f7a:	bf00      	nop
 8003f7c:	e000      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f86:	4ba3      	ldr	r3, [pc, #652]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f92:	49a0      	ldr	r1, [pc, #640]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f98:	e001      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
 8003f9c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d042      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb2:	d01f      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb8:	d805      	bhi.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc2:	d00e      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003fc4:	e01f      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003fc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fca:	d01f      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd0:	d01e      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003fd2:	e018      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd4:	4b8f      	ldr	r3, [pc, #572]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	4a8e      	ldr	r2, [pc, #568]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003fe0:	e017      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 ffcd 	bl	8004f88 <RCCEx_PLL2_Config>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ff2:	e00e      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3324      	adds	r3, #36	; 0x24
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f001 f876 	bl	80050ec <RCCEx_PLL3_Config>
 8004000:	4603      	mov	r3, r0
 8004002:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004004:	e005      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	75fb      	strb	r3, [r7, #23]
      break;
 800400a:	e002      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800400c:	bf00      	nop
 800400e:	e000      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004010:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004012:	7dfb      	ldrb	r3, [r7, #23]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d109      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004018:	4b7e      	ldr	r3, [pc, #504]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800401a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800401c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004024:	497b      	ldr	r1, [pc, #492]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004026:	4313      	orrs	r3, r2
 8004028:	650b      	str	r3, [r1, #80]	; 0x50
 800402a:	e001      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402c:	7dfb      	ldrb	r3, [r7, #23]
 800402e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d042      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004044:	d01b      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004046:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800404a:	d805      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800404c:	2b00      	cmp	r3, #0
 800404e:	d022      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004054:	d00a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004056:	e01b      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004058:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800405c:	d01d      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800405e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004062:	d01c      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004064:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004068:	d01b      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800406a:	e011      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3304      	adds	r3, #4
 8004070:	2101      	movs	r1, #1
 8004072:	4618      	mov	r0, r3
 8004074:	f000 ff88 	bl	8004f88 <RCCEx_PLL2_Config>
 8004078:	4603      	mov	r3, r0
 800407a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800407c:	e012      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3324      	adds	r3, #36	; 0x24
 8004082:	2101      	movs	r1, #1
 8004084:	4618      	mov	r0, r3
 8004086:	f001 f831 	bl	80050ec <RCCEx_PLL3_Config>
 800408a:	4603      	mov	r3, r0
 800408c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800408e:	e009      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	75fb      	strb	r3, [r7, #23]
      break;
 8004094:	e006      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004096:	bf00      	nop
 8004098:	e004      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800409a:	bf00      	nop
 800409c:	e002      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800409e:	bf00      	nop
 80040a0:	e000      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80040a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d109      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80040aa:	4b5a      	ldr	r3, [pc, #360]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ae:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b6:	4957      	ldr	r1, [pc, #348]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	650b      	str	r3, [r1, #80]	; 0x50
 80040bc:	e001      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040be:	7dfb      	ldrb	r3, [r7, #23]
 80040c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d044      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040d8:	d01b      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80040da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040de:	d805      	bhi.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d022      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80040e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80040ea:	e01b      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f0:	d01d      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80040f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040f6:	d01c      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80040f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040fc:	d01b      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80040fe:	e011      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	2101      	movs	r1, #1
 8004106:	4618      	mov	r0, r3
 8004108:	f000 ff3e 	bl	8004f88 <RCCEx_PLL2_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004110:	e012      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3324      	adds	r3, #36	; 0x24
 8004116:	2101      	movs	r1, #1
 8004118:	4618      	mov	r0, r3
 800411a:	f000 ffe7 	bl	80050ec <RCCEx_PLL3_Config>
 800411e:	4603      	mov	r3, r0
 8004120:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004122:	e009      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	75fb      	strb	r3, [r7, #23]
      break;
 8004128:	e006      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800412a:	bf00      	nop
 800412c:	e004      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800412e:	bf00      	nop
 8004130:	e002      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004132:	bf00      	nop
 8004134:	e000      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004138:	7dfb      	ldrb	r3, [r7, #23]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800413e:	4b35      	ldr	r3, [pc, #212]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800414c:	4931      	ldr	r1, [pc, #196]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800414e:	4313      	orrs	r3, r2
 8004150:	658b      	str	r3, [r1, #88]	; 0x58
 8004152:	e001      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d02d      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800416c:	d005      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800416e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004172:	d009      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004174:	2b00      	cmp	r3, #0
 8004176:	d013      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004178:	e00f      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800417a:	4b26      	ldr	r3, [pc, #152]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	4a25      	ldr	r2, [pc, #148]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004184:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004186:	e00c      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3304      	adds	r3, #4
 800418c:	2101      	movs	r1, #1
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fefa 	bl	8004f88 <RCCEx_PLL2_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004198:	e003      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
      break;
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80041a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d109      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041a8:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041b4:	4917      	ldr	r1, [pc, #92]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	650b      	str	r3, [r1, #80]	; 0x50
 80041ba:	e001      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041bc:	7dfb      	ldrb	r3, [r7, #23]
 80041be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d035      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d81b      	bhi.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80041d4:	a201      	add	r2, pc, #4	; (adr r2, 80041dc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80041d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041da:	bf00      	nop
 80041dc:	08004219 	.word	0x08004219
 80041e0:	080041ed 	.word	0x080041ed
 80041e4:	080041fb 	.word	0x080041fb
 80041e8:	08004219 	.word	0x08004219
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ec:	4b09      	ldr	r3, [pc, #36]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	4a08      	ldr	r2, [pc, #32]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80041f8:	e00f      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3304      	adds	r3, #4
 80041fe:	2102      	movs	r1, #2
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fec1 	bl	8004f88 <RCCEx_PLL2_Config>
 8004206:	4603      	mov	r3, r0
 8004208:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800420a:	e006      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	75fb      	strb	r3, [r7, #23]
      break;
 8004210:	e003      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004212:	bf00      	nop
 8004214:	58024400 	.word	0x58024400
      break;
 8004218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800421a:	7dfb      	ldrb	r3, [r7, #23]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d109      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004220:	4bba      	ldr	r3, [pc, #744]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004224:	f023 0203 	bic.w	r2, r3, #3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422c:	49b7      	ldr	r1, [pc, #732]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800422e:	4313      	orrs	r3, r2
 8004230:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004232:	e001      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8086 	beq.w	8004352 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004246:	4bb2      	ldr	r3, [pc, #712]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4ab1      	ldr	r2, [pc, #708]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800424c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004250:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004252:	f7fd fd21 	bl	8001c98 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004258:	e009      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425a:	f7fd fd1d 	bl	8001c98 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b64      	cmp	r3, #100	; 0x64
 8004266:	d902      	bls.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	75fb      	strb	r3, [r7, #23]
        break;
 800426c:	e005      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800426e:	4ba8      	ldr	r3, [pc, #672]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0ef      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800427a:	7dfb      	ldrb	r3, [r7, #23]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d166      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004280:	4ba2      	ldr	r3, [pc, #648]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004282:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800428a:	4053      	eors	r3, r2
 800428c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004290:	2b00      	cmp	r3, #0
 8004292:	d013      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004294:	4b9d      	ldr	r3, [pc, #628]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800429c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800429e:	4b9b      	ldr	r3, [pc, #620]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	4a9a      	ldr	r2, [pc, #616]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042aa:	4b98      	ldr	r3, [pc, #608]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	4a97      	ldr	r2, [pc, #604]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80042b6:	4a95      	ldr	r2, [pc, #596]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c6:	d115      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c8:	f7fd fce6 	bl	8001c98 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ce:	e00b      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d0:	f7fd fce2 	bl	8001c98 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f241 3288 	movw	r2, #5000	; 0x1388
 80042de:	4293      	cmp	r3, r2
 80042e0:	d902      	bls.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	75fb      	strb	r3, [r7, #23]
            break;
 80042e6:	e005      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042e8:	4b88      	ldr	r3, [pc, #544]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0ed      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d126      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004308:	d10d      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800430a:	4b80      	ldr	r3, [pc, #512]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004318:	0919      	lsrs	r1, r3, #4
 800431a:	4b7e      	ldr	r3, [pc, #504]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800431c:	400b      	ands	r3, r1
 800431e:	497b      	ldr	r1, [pc, #492]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004320:	4313      	orrs	r3, r2
 8004322:	610b      	str	r3, [r1, #16]
 8004324:	e005      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004326:	4b79      	ldr	r3, [pc, #484]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	4a78      	ldr	r2, [pc, #480]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800432c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004330:	6113      	str	r3, [r2, #16]
 8004332:	4b76      	ldr	r3, [pc, #472]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004334:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800433c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004340:	4972      	ldr	r1, [pc, #456]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004342:	4313      	orrs	r3, r2
 8004344:	670b      	str	r3, [r1, #112]	; 0x70
 8004346:	e004      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	75bb      	strb	r3, [r7, #22]
 800434c:	e001      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434e:	7dfb      	ldrb	r3, [r7, #23]
 8004350:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d07d      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004362:	2b28      	cmp	r3, #40	; 0x28
 8004364:	d866      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004366:	a201      	add	r2, pc, #4	; (adr r2, 800436c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436c:	0800443b 	.word	0x0800443b
 8004370:	08004435 	.word	0x08004435
 8004374:	08004435 	.word	0x08004435
 8004378:	08004435 	.word	0x08004435
 800437c:	08004435 	.word	0x08004435
 8004380:	08004435 	.word	0x08004435
 8004384:	08004435 	.word	0x08004435
 8004388:	08004435 	.word	0x08004435
 800438c:	08004411 	.word	0x08004411
 8004390:	08004435 	.word	0x08004435
 8004394:	08004435 	.word	0x08004435
 8004398:	08004435 	.word	0x08004435
 800439c:	08004435 	.word	0x08004435
 80043a0:	08004435 	.word	0x08004435
 80043a4:	08004435 	.word	0x08004435
 80043a8:	08004435 	.word	0x08004435
 80043ac:	08004423 	.word	0x08004423
 80043b0:	08004435 	.word	0x08004435
 80043b4:	08004435 	.word	0x08004435
 80043b8:	08004435 	.word	0x08004435
 80043bc:	08004435 	.word	0x08004435
 80043c0:	08004435 	.word	0x08004435
 80043c4:	08004435 	.word	0x08004435
 80043c8:	08004435 	.word	0x08004435
 80043cc:	0800443b 	.word	0x0800443b
 80043d0:	08004435 	.word	0x08004435
 80043d4:	08004435 	.word	0x08004435
 80043d8:	08004435 	.word	0x08004435
 80043dc:	08004435 	.word	0x08004435
 80043e0:	08004435 	.word	0x08004435
 80043e4:	08004435 	.word	0x08004435
 80043e8:	08004435 	.word	0x08004435
 80043ec:	0800443b 	.word	0x0800443b
 80043f0:	08004435 	.word	0x08004435
 80043f4:	08004435 	.word	0x08004435
 80043f8:	08004435 	.word	0x08004435
 80043fc:	08004435 	.word	0x08004435
 8004400:	08004435 	.word	0x08004435
 8004404:	08004435 	.word	0x08004435
 8004408:	08004435 	.word	0x08004435
 800440c:	0800443b 	.word	0x0800443b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3304      	adds	r3, #4
 8004414:	2101      	movs	r1, #1
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fdb6 	bl	8004f88 <RCCEx_PLL2_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004420:	e00c      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3324      	adds	r3, #36	; 0x24
 8004426:	2101      	movs	r1, #1
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fe5f 	bl	80050ec <RCCEx_PLL3_Config>
 800442e:	4603      	mov	r3, r0
 8004430:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004432:	e003      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	75fb      	strb	r3, [r7, #23]
      break;
 8004438:	e000      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800443a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800443c:	7dfb      	ldrb	r3, [r7, #23]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004442:	4b32      	ldr	r3, [pc, #200]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004446:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800444e:	492f      	ldr	r1, [pc, #188]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004450:	4313      	orrs	r3, r2
 8004452:	654b      	str	r3, [r1, #84]	; 0x54
 8004454:	e001      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004456:	7dfb      	ldrb	r3, [r7, #23]
 8004458:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d037      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446a:	2b05      	cmp	r3, #5
 800446c:	d820      	bhi.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800446e:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	080044b7 	.word	0x080044b7
 8004478:	0800448d 	.word	0x0800448d
 800447c:	0800449f 	.word	0x0800449f
 8004480:	080044b7 	.word	0x080044b7
 8004484:	080044b7 	.word	0x080044b7
 8004488:	080044b7 	.word	0x080044b7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3304      	adds	r3, #4
 8004490:	2101      	movs	r1, #1
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fd78 	bl	8004f88 <RCCEx_PLL2_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800449c:	e00c      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	3324      	adds	r3, #36	; 0x24
 80044a2:	2101      	movs	r1, #1
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fe21 	bl	80050ec <RCCEx_PLL3_Config>
 80044aa:	4603      	mov	r3, r0
 80044ac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80044ae:	e003      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	75fb      	strb	r3, [r7, #23]
      break;
 80044b4:	e000      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80044b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80044be:	4b13      	ldr	r3, [pc, #76]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c2:	f023 0207 	bic.w	r2, r3, #7
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ca:	4910      	ldr	r1, [pc, #64]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	654b      	str	r3, [r1, #84]	; 0x54
 80044d0:	e001      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d2:	7dfb      	ldrb	r3, [r7, #23]
 80044d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d040      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	2b05      	cmp	r3, #5
 80044ea:	d827      	bhi.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80044ec:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80044ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f2:	bf00      	nop
 80044f4:	08004543 	.word	0x08004543
 80044f8:	08004519 	.word	0x08004519
 80044fc:	0800452b 	.word	0x0800452b
 8004500:	08004543 	.word	0x08004543
 8004504:	08004543 	.word	0x08004543
 8004508:	08004543 	.word	0x08004543
 800450c:	58024400 	.word	0x58024400
 8004510:	58024800 	.word	0x58024800
 8004514:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3304      	adds	r3, #4
 800451c:	2101      	movs	r1, #1
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fd32 	bl	8004f88 <RCCEx_PLL2_Config>
 8004524:	4603      	mov	r3, r0
 8004526:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004528:	e00c      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3324      	adds	r3, #36	; 0x24
 800452e:	2101      	movs	r1, #1
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fddb 	bl	80050ec <RCCEx_PLL3_Config>
 8004536:	4603      	mov	r3, r0
 8004538:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800453a:	e003      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	75fb      	strb	r3, [r7, #23]
      break;
 8004540:	e000      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004542:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004544:	7dfb      	ldrb	r3, [r7, #23]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800454a:	4bb2      	ldr	r3, [pc, #712]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800454c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454e:	f023 0207 	bic.w	r2, r3, #7
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004558:	49ae      	ldr	r1, [pc, #696]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800455a:	4313      	orrs	r3, r2
 800455c:	658b      	str	r3, [r1, #88]	; 0x58
 800455e:	e001      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004560:	7dfb      	ldrb	r3, [r7, #23]
 8004562:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d044      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800457a:	d01b      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800457c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004580:	d805      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d022      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800458a:	d00a      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800458c:	e01b      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800458e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004592:	d01d      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004598:	d01c      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800459a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800459e:	d01b      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80045a0:	e011      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3304      	adds	r3, #4
 80045a6:	2100      	movs	r1, #0
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fced 	bl	8004f88 <RCCEx_PLL2_Config>
 80045ae:	4603      	mov	r3, r0
 80045b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80045b2:	e012      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3324      	adds	r3, #36	; 0x24
 80045b8:	2102      	movs	r1, #2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fd96 	bl	80050ec <RCCEx_PLL3_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80045c4:	e009      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	75fb      	strb	r3, [r7, #23]
      break;
 80045ca:	e006      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80045cc:	bf00      	nop
 80045ce:	e004      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80045d0:	bf00      	nop
 80045d2:	e002      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80045d4:	bf00      	nop
 80045d6:	e000      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80045d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045da:	7dfb      	ldrb	r3, [r7, #23]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10a      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045e0:	4b8c      	ldr	r3, [pc, #560]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80045e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ee:	4989      	ldr	r1, [pc, #548]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	654b      	str	r3, [r1, #84]	; 0x54
 80045f4:	e001      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
 80045f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d044      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800460c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004610:	d01b      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004616:	d805      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004618:	2b00      	cmp	r3, #0
 800461a:	d022      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800461c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004620:	d00a      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004622:	e01b      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004628:	d01d      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800462a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800462e:	d01c      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004630:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004634:	d01b      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004636:	e011      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3304      	adds	r3, #4
 800463c:	2100      	movs	r1, #0
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fca2 	bl	8004f88 <RCCEx_PLL2_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004648:	e012      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3324      	adds	r3, #36	; 0x24
 800464e:	2102      	movs	r1, #2
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fd4b 	bl	80050ec <RCCEx_PLL3_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800465a:	e009      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	75fb      	strb	r3, [r7, #23]
      break;
 8004660:	e006      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004662:	bf00      	nop
 8004664:	e004      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004666:	bf00      	nop
 8004668:	e002      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800466a:	bf00      	nop
 800466c:	e000      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800466e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004670:	7dfb      	ldrb	r3, [r7, #23]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10a      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004676:	4b67      	ldr	r3, [pc, #412]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004684:	4963      	ldr	r1, [pc, #396]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004686:	4313      	orrs	r3, r2
 8004688:	658b      	str	r3, [r1, #88]	; 0x58
 800468a:	e001      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468c:	7dfb      	ldrb	r3, [r7, #23]
 800468e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004698:	2b00      	cmp	r3, #0
 800469a:	d044      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046a6:	d01b      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80046a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046ac:	d805      	bhi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d022      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80046b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046b6:	d00a      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80046b8:	e01b      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80046ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046be:	d01d      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80046c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046c4:	d01c      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80046c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046ca:	d01b      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80046cc:	e011      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3304      	adds	r3, #4
 80046d2:	2100      	movs	r1, #0
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fc57 	bl	8004f88 <RCCEx_PLL2_Config>
 80046da:	4603      	mov	r3, r0
 80046dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80046de:	e012      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3324      	adds	r3, #36	; 0x24
 80046e4:	2102      	movs	r1, #2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fd00 	bl	80050ec <RCCEx_PLL3_Config>
 80046ec:	4603      	mov	r3, r0
 80046ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80046f0:	e009      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	75fb      	strb	r3, [r7, #23]
      break;
 80046f6:	e006      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80046f8:	bf00      	nop
 80046fa:	e004      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80046fc:	bf00      	nop
 80046fe:	e002      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004700:	bf00      	nop
 8004702:	e000      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004706:	7dfb      	ldrb	r3, [r7, #23]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800470c:	4b41      	ldr	r3, [pc, #260]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800470e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004710:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800471a:	493e      	ldr	r1, [pc, #248]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800471c:	4313      	orrs	r3, r2
 800471e:	658b      	str	r3, [r1, #88]	; 0x58
 8004720:	e001      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004722:	7dfb      	ldrb	r3, [r7, #23]
 8004724:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473c:	d10a      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3324      	adds	r3, #36	; 0x24
 8004742:	2102      	movs	r1, #2
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fcd1 	bl	80050ec <RCCEx_PLL3_Config>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004754:	4b2f      	ldr	r3, [pc, #188]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004758:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004762:	492c      	ldr	r1, [pc, #176]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004764:	4313      	orrs	r3, r2
 8004766:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0310 	and.w	r3, r3, #16
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01a      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800477e:	d10a      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3324      	adds	r3, #36	; 0x24
 8004784:	2102      	movs	r1, #2
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fcb0 	bl	80050ec <RCCEx_PLL3_Config>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004796:	4b1f      	ldr	r3, [pc, #124]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a4:	491b      	ldr	r1, [pc, #108]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d032      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c0:	d00d      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80047c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047c6:	d016      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d111      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3304      	adds	r3, #4
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fbd8 	bl	8004f88 <RCCEx_PLL2_Config>
 80047d8:	4603      	mov	r3, r0
 80047da:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80047dc:	e00c      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3324      	adds	r3, #36	; 0x24
 80047e2:	2102      	movs	r1, #2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fc81 	bl	80050ec <RCCEx_PLL3_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80047ee:	e003      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	75fb      	strb	r3, [r7, #23]
      break;
 80047f4:	e000      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80047f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047f8:	7dfb      	ldrb	r3, [r7, #23]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10c      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047fe:	4b05      	ldr	r3, [pc, #20]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004802:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800480c:	4901      	ldr	r1, [pc, #4]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800480e:	4313      	orrs	r3, r2
 8004810:	658b      	str	r3, [r1, #88]	; 0x58
 8004812:	e003      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004814:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004818:	7dfb      	ldrb	r3, [r7, #23]
 800481a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d02f      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004832:	d00c      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004834:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004838:	d015      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800483a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800483e:	d10f      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004840:	4b79      	ldr	r3, [pc, #484]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	4a78      	ldr	r2, [pc, #480]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800484a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800484c:	e00c      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3324      	adds	r3, #36	; 0x24
 8004852:	2101      	movs	r1, #1
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fc49 	bl	80050ec <RCCEx_PLL3_Config>
 800485a:	4603      	mov	r3, r0
 800485c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800485e:	e003      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	75fb      	strb	r3, [r7, #23]
      break;
 8004864:	e000      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004866:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004868:	7dfb      	ldrb	r3, [r7, #23]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10a      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800486e:	4b6e      	ldr	r3, [pc, #440]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004872:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800487c:	496a      	ldr	r1, [pc, #424]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800487e:	4313      	orrs	r3, r2
 8004880:	654b      	str	r3, [r1, #84]	; 0x54
 8004882:	e001      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004884:	7dfb      	ldrb	r3, [r7, #23]
 8004886:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d029      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800489c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a0:	d007      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80048a2:	e00f      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a4:	4b60      	ldr	r3, [pc, #384]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	4a5f      	ldr	r2, [pc, #380]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80048b0:	e00b      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3304      	adds	r3, #4
 80048b6:	2102      	movs	r1, #2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fb65 	bl	8004f88 <RCCEx_PLL2_Config>
 80048be:	4603      	mov	r3, r0
 80048c0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80048c2:	e002      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	75fb      	strb	r3, [r7, #23]
      break;
 80048c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ca:	7dfb      	ldrb	r3, [r7, #23]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d109      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80048d0:	4b55      	ldr	r3, [pc, #340]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048dc:	4952      	ldr	r1, [pc, #328]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80048e2:	e001      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e4:	7dfb      	ldrb	r3, [r7, #23]
 80048e6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3324      	adds	r3, #36	; 0x24
 80048f8:	2102      	movs	r1, #2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fbf6 	bl	80050ec <RCCEx_PLL3_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d02f      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800491a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800491e:	d00c      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004924:	d802      	bhi.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004926:	2b00      	cmp	r3, #0
 8004928:	d011      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800492a:	e00d      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800492c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004930:	d00f      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004936:	d00e      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004938:	e006      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800493a:	4b3b      	ldr	r3, [pc, #236]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	4a3a      	ldr	r2, [pc, #232]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004944:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004946:	e007      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	75fb      	strb	r3, [r7, #23]
      break;
 800494c:	e004      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800494e:	bf00      	nop
 8004950:	e002      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004952:	bf00      	nop
 8004954:	e000      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004956:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004958:	7dfb      	ldrb	r3, [r7, #23]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d109      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800495e:	4b32      	ldr	r3, [pc, #200]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004962:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800496a:	492f      	ldr	r1, [pc, #188]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800496c:	4313      	orrs	r3, r2
 800496e:	654b      	str	r3, [r1, #84]	; 0x54
 8004970:	e001      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004972:	7dfb      	ldrb	r3, [r7, #23]
 8004974:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d008      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004982:	4b29      	ldr	r3, [pc, #164]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004986:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498e:	4926      	ldr	r1, [pc, #152]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004990:	4313      	orrs	r3, r2
 8004992:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d009      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80049a0:	4b21      	ldr	r3, [pc, #132]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049ae:	491e      	ldr	r1, [pc, #120]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049c0:	4b19      	ldr	r3, [pc, #100]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049cc:	4916      	ldr	r1, [pc, #88]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00d      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049de:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	4a11      	ldr	r2, [pc, #68]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049e8:	6113      	str	r3, [r2, #16]
 80049ea:	4b0f      	ldr	r3, [pc, #60]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049ec:	691a      	ldr	r2, [r3, #16]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80049f4:	490c      	ldr	r1, [pc, #48]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	da08      	bge.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a02:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0e:	4906      	ldr	r1, [pc, #24]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004a14:	7dbb      	ldrb	r3, [r7, #22]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e000      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	58024400 	.word	0x58024400

08004a2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a30:	f7ff f8b2 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8004a34:	4601      	mov	r1, r0
 8004a36:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	091b      	lsrs	r3, r3, #4
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	4a04      	ldr	r2, [pc, #16]	; (8004a54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a42:	5cd3      	ldrb	r3, [r2, r3]
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	58024400 	.word	0x58024400
 8004a54:	08006d44 	.word	0x08006d44

08004a58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b089      	sub	sp, #36	; 0x24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a60:	4b9d      	ldr	r3, [pc, #628]	; (8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004a6a:	4b9b      	ldr	r3, [pc, #620]	; (8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6e:	0b1b      	lsrs	r3, r3, #12
 8004a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a76:	4b98      	ldr	r3, [pc, #608]	; (8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	091b      	lsrs	r3, r3, #4
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004a82:	4b95      	ldr	r3, [pc, #596]	; (8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a86:	08db      	lsrs	r3, r3, #3
 8004a88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	fb02 f303 	mul.w	r3, r2, r3
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 810a 	beq.w	8004cba <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d05a      	beq.n	8004b62 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d302      	bcc.n	8004ab6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d078      	beq.n	8004ba6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004ab4:	e099      	b.n	8004bea <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ab6:	4b88      	ldr	r3, [pc, #544]	; (8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d02d      	beq.n	8004b1e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ac2:	4b85      	ldr	r3, [pc, #532]	; (8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	08db      	lsrs	r3, r3, #3
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	4a83      	ldr	r2, [pc, #524]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004ace:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	ee07 3a90 	vmov	s15, r3
 8004ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aec:	4b7a      	ldr	r3, [pc, #488]	; (8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af4:	ee07 3a90 	vmov	s15, r3
 8004af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afc:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b00:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004b04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b18:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004b1c:	e087      	b.n	8004c2e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	ee07 3a90 	vmov	s15, r3
 8004b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b28:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004b2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b30:	4b69      	ldr	r3, [pc, #420]	; (8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b38:	ee07 3a90 	vmov	s15, r3
 8004b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b40:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b44:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004b48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b60:	e065      	b.n	8004c2e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	ee07 3a90 	vmov	s15, r3
 8004b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004b70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b74:	4b58      	ldr	r3, [pc, #352]	; (8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7c:	ee07 3a90 	vmov	s15, r3
 8004b80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b84:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b88:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004b8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ba4:	e043      	b.n	8004c2e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	ee07 3a90 	vmov	s15, r3
 8004bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004cec <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004bb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb8:	4b47      	ldr	r3, [pc, #284]	; (8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc0:	ee07 3a90 	vmov	s15, r3
 8004bc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bcc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004bd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004be8:	e021      	b.n	8004c2e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	ee07 3a90 	vmov	s15, r3
 8004bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004bf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bfc:	4b36      	ldr	r3, [pc, #216]	; (8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c04:	ee07 3a90 	vmov	s15, r3
 8004c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c10:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004c14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c2c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004c2e:	4b2a      	ldr	r3, [pc, #168]	; (8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	0a5b      	lsrs	r3, r3, #9
 8004c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c38:	ee07 3a90 	vmov	s15, r3
 8004c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c48:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c54:	ee17 2a90 	vmov	r2, s15
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004c5c:	4b1e      	ldr	r3, [pc, #120]	; (8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	0c1b      	lsrs	r3, r3, #16
 8004c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c82:	ee17 2a90 	vmov	r2, s15
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004c8a:	4b13      	ldr	r3, [pc, #76]	; (8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	0e1b      	lsrs	r3, r3, #24
 8004c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c94:	ee07 3a90 	vmov	s15, r3
 8004c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ca0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ca4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cb0:	ee17 2a90 	vmov	r2, s15
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004cb8:	e008      	b.n	8004ccc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	609a      	str	r2, [r3, #8]
}
 8004ccc:	bf00      	nop
 8004cce:	3724      	adds	r7, #36	; 0x24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	58024400 	.word	0x58024400
 8004cdc:	03d09000 	.word	0x03d09000
 8004ce0:	46000000 	.word	0x46000000
 8004ce4:	4c742400 	.word	0x4c742400
 8004ce8:	4a742400 	.word	0x4a742400
 8004cec:	4bbebc20 	.word	0x4bbebc20

08004cf0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b089      	sub	sp, #36	; 0x24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cf8:	4b9d      	ldr	r3, [pc, #628]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	f003 0303 	and.w	r3, r3, #3
 8004d00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004d02:	4b9b      	ldr	r3, [pc, #620]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	0d1b      	lsrs	r3, r3, #20
 8004d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d0e:	4b98      	ldr	r3, [pc, #608]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	0a1b      	lsrs	r3, r3, #8
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004d1a:	4b95      	ldr	r3, [pc, #596]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	08db      	lsrs	r3, r3, #3
 8004d20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	fb02 f303 	mul.w	r3, r2, r3
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 810a 	beq.w	8004f52 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d05a      	beq.n	8004dfa <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d302      	bcc.n	8004d4e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d078      	beq.n	8004e3e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004d4c:	e099      	b.n	8004e82 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d4e:	4b88      	ldr	r3, [pc, #544]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d02d      	beq.n	8004db6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d5a:	4b85      	ldr	r3, [pc, #532]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	08db      	lsrs	r3, r3, #3
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	4a83      	ldr	r2, [pc, #524]	; (8004f74 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004d66:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	ee07 3a90 	vmov	s15, r3
 8004d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d84:	4b7a      	ldr	r3, [pc, #488]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8c:	ee07 3a90 	vmov	s15, r3
 8004d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d94:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d98:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004d9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004da0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004da4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004da8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004db4:	e087      	b.n	8004ec6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	ee07 3a90 	vmov	s15, r3
 8004dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dc8:	4b69      	ldr	r3, [pc, #420]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd0:	ee07 3a90 	vmov	s15, r3
 8004dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ddc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004de0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004de4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004de8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004df8:	e065      	b.n	8004ec6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	ee07 3a90 	vmov	s15, r3
 8004e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e04:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004e08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0c:	4b58      	ldr	r3, [pc, #352]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e14:	ee07 3a90 	vmov	s15, r3
 8004e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e20:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004e24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e3c:	e043      	b.n	8004ec6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	ee07 3a90 	vmov	s15, r3
 8004e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e48:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004e4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e50:	4b47      	ldr	r3, [pc, #284]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e58:	ee07 3a90 	vmov	s15, r3
 8004e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e60:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e64:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004e68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e80:	e021      	b.n	8004ec6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	ee07 3a90 	vmov	s15, r3
 8004e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004e90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e94:	4b36      	ldr	r3, [pc, #216]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9c:	ee07 3a90 	vmov	s15, r3
 8004ea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea4:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ea8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004eac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ec4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004ec6:	4b2a      	ldr	r3, [pc, #168]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	0a5b      	lsrs	r3, r3, #9
 8004ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ed0:	ee07 3a90 	vmov	s15, r3
 8004ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004edc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eec:	ee17 2a90 	vmov	r2, s15
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004ef4:	4b1e      	ldr	r3, [pc, #120]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	0c1b      	lsrs	r3, r3, #16
 8004efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f1a:	ee17 2a90 	vmov	r2, s15
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004f22:	4b13      	ldr	r3, [pc, #76]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	0e1b      	lsrs	r3, r3, #24
 8004f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f2c:	ee07 3a90 	vmov	s15, r3
 8004f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f48:	ee17 2a90 	vmov	r2, s15
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f50:	e008      	b.n	8004f64 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	609a      	str	r2, [r3, #8]
}
 8004f64:	bf00      	nop
 8004f66:	3724      	adds	r7, #36	; 0x24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	58024400 	.word	0x58024400
 8004f74:	03d09000 	.word	0x03d09000
 8004f78:	46000000 	.word	0x46000000
 8004f7c:	4c742400 	.word	0x4c742400
 8004f80:	4a742400 	.word	0x4a742400
 8004f84:	4bbebc20 	.word	0x4bbebc20

08004f88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f96:	4b53      	ldr	r3, [pc, #332]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d101      	bne.n	8004fa6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e099      	b.n	80050da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004fa6:	4b4f      	ldr	r3, [pc, #316]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a4e      	ldr	r2, [pc, #312]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 8004fac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb2:	f7fc fe71 	bl	8001c98 <HAL_GetTick>
 8004fb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fb8:	e008      	b.n	8004fcc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004fba:	f7fc fe6d 	bl	8001c98 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e086      	b.n	80050da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fcc:	4b45      	ldr	r3, [pc, #276]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1f0      	bne.n	8004fba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004fd8:	4b42      	ldr	r3, [pc, #264]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 8004fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fdc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	031b      	lsls	r3, r3, #12
 8004fe6:	493f      	ldr	r1, [pc, #252]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	628b      	str	r3, [r1, #40]	; 0x28
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	025b      	lsls	r3, r3, #9
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	431a      	orrs	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	3b01      	subs	r3, #1
 8005008:	041b      	lsls	r3, r3, #16
 800500a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	3b01      	subs	r3, #1
 8005016:	061b      	lsls	r3, r3, #24
 8005018:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800501c:	4931      	ldr	r1, [pc, #196]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 800501e:	4313      	orrs	r3, r2
 8005020:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005022:	4b30      	ldr	r3, [pc, #192]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	492d      	ldr	r1, [pc, #180]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 8005030:	4313      	orrs	r3, r2
 8005032:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005034:	4b2b      	ldr	r3, [pc, #172]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	f023 0220 	bic.w	r2, r3, #32
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	4928      	ldr	r1, [pc, #160]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 8005042:	4313      	orrs	r3, r2
 8005044:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005046:	4b27      	ldr	r3, [pc, #156]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 8005048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504a:	4a26      	ldr	r2, [pc, #152]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 800504c:	f023 0310 	bic.w	r3, r3, #16
 8005050:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005052:	4b24      	ldr	r3, [pc, #144]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 8005054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005056:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <RCCEx_PLL2_Config+0x160>)
 8005058:	4013      	ands	r3, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	69d2      	ldr	r2, [r2, #28]
 800505e:	00d2      	lsls	r2, r2, #3
 8005060:	4920      	ldr	r1, [pc, #128]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 8005062:	4313      	orrs	r3, r2
 8005064:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005066:	4b1f      	ldr	r3, [pc, #124]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 8005068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506a:	4a1e      	ldr	r2, [pc, #120]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 800506c:	f043 0310 	orr.w	r3, r3, #16
 8005070:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d106      	bne.n	8005086 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005078:	4b1a      	ldr	r3, [pc, #104]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	4a19      	ldr	r2, [pc, #100]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 800507e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005082:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005084:	e00f      	b.n	80050a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d106      	bne.n	800509a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800508c:	4b15      	ldr	r3, [pc, #84]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	4a14      	ldr	r2, [pc, #80]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 8005092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005096:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005098:	e005      	b.n	80050a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800509a:	4b12      	ldr	r3, [pc, #72]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 800509c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509e:	4a11      	ldr	r2, [pc, #68]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 80050a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80050a6:	4b0f      	ldr	r3, [pc, #60]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a0e      	ldr	r2, [pc, #56]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 80050ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b2:	f7fc fdf1 	bl	8001c98 <HAL_GetTick>
 80050b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050b8:	e008      	b.n	80050cc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80050ba:	f7fc fded 	bl	8001c98 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e006      	b.n	80050da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050cc:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <RCCEx_PLL2_Config+0x15c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0f0      	beq.n	80050ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	58024400 	.word	0x58024400
 80050e8:	ffff0007 	.word	0xffff0007

080050ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050fa:	4b53      	ldr	r3, [pc, #332]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 80050fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	2b03      	cmp	r3, #3
 8005104:	d101      	bne.n	800510a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e099      	b.n	800523e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800510a:	4b4f      	ldr	r3, [pc, #316]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a4e      	ldr	r2, [pc, #312]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 8005110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005116:	f7fc fdbf 	bl	8001c98 <HAL_GetTick>
 800511a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800511c:	e008      	b.n	8005130 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800511e:	f7fc fdbb 	bl	8001c98 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e086      	b.n	800523e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005130:	4b45      	ldr	r3, [pc, #276]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1f0      	bne.n	800511e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800513c:	4b42      	ldr	r3, [pc, #264]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 800513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005140:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	051b      	lsls	r3, r3, #20
 800514a:	493f      	ldr	r1, [pc, #252]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 800514c:	4313      	orrs	r3, r2
 800514e:	628b      	str	r3, [r1, #40]	; 0x28
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	3b01      	subs	r3, #1
 8005156:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	3b01      	subs	r3, #1
 8005160:	025b      	lsls	r3, r3, #9
 8005162:	b29b      	uxth	r3, r3
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	3b01      	subs	r3, #1
 800516c:	041b      	lsls	r3, r3, #16
 800516e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	3b01      	subs	r3, #1
 800517a:	061b      	lsls	r3, r3, #24
 800517c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005180:	4931      	ldr	r1, [pc, #196]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 8005182:	4313      	orrs	r3, r2
 8005184:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005186:	4b30      	ldr	r3, [pc, #192]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	492d      	ldr	r1, [pc, #180]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 8005194:	4313      	orrs	r3, r2
 8005196:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005198:	4b2b      	ldr	r3, [pc, #172]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	4928      	ldr	r1, [pc, #160]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80051aa:	4b27      	ldr	r3, [pc, #156]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	4a26      	ldr	r2, [pc, #152]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 80051b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051b6:	4b24      	ldr	r3, [pc, #144]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 80051b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ba:	4b24      	ldr	r3, [pc, #144]	; (800524c <RCCEx_PLL3_Config+0x160>)
 80051bc:	4013      	ands	r3, r2
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	69d2      	ldr	r2, [r2, #28]
 80051c2:	00d2      	lsls	r2, r2, #3
 80051c4:	4920      	ldr	r1, [pc, #128]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051ca:	4b1f      	ldr	r3, [pc, #124]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 80051cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ce:	4a1e      	ldr	r2, [pc, #120]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 80051d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d106      	bne.n	80051ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80051dc:	4b1a      	ldr	r3, [pc, #104]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 80051de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e0:	4a19      	ldr	r2, [pc, #100]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 80051e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051e8:	e00f      	b.n	800520a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d106      	bne.n	80051fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80051f0:	4b15      	ldr	r3, [pc, #84]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	4a14      	ldr	r2, [pc, #80]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 80051f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051fc:	e005      	b.n	800520a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80051fe:	4b12      	ldr	r3, [pc, #72]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	4a11      	ldr	r2, [pc, #68]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 8005204:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005208:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800520a:	4b0f      	ldr	r3, [pc, #60]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a0e      	ldr	r2, [pc, #56]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 8005210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005216:	f7fc fd3f 	bl	8001c98 <HAL_GetTick>
 800521a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800521c:	e008      	b.n	8005230 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800521e:	f7fc fd3b 	bl	8001c98 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e006      	b.n	800523e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005230:	4b05      	ldr	r3, [pc, #20]	; (8005248 <RCCEx_PLL3_Config+0x15c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0f0      	beq.n	800521e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800523c:	7bfb      	ldrb	r3, [r7, #15]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	58024400 	.word	0x58024400
 800524c:	ffff0007 	.word	0xffff0007

08005250 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e042      	b.n	80052e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005268:	2b00      	cmp	r3, #0
 800526a:	d106      	bne.n	800527a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7fb fd6d 	bl	8000d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2224      	movs	r2, #36	; 0x24
 800527e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0201 	bic.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f8c2 	bl	800541c <UART_SetConfig>
 8005298:	4603      	mov	r3, r0
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e022      	b.n	80052e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fe66 	bl	8005f7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 feed 	bl	80060c0 <UART_CheckIdleState>
 80052e6:	4603      	mov	r3, r0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08a      	sub	sp, #40	; 0x28
 80052f4:	af02      	add	r7, sp, #8
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	4613      	mov	r3, r2
 80052fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005306:	2b20      	cmp	r3, #32
 8005308:	f040 8083 	bne.w	8005412 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <HAL_UART_Transmit+0x28>
 8005312:	88fb      	ldrh	r3, [r7, #6]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e07b      	b.n	8005414 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005322:	2b01      	cmp	r3, #1
 8005324:	d101      	bne.n	800532a <HAL_UART_Transmit+0x3a>
 8005326:	2302      	movs	r3, #2
 8005328:	e074      	b.n	8005414 <HAL_UART_Transmit+0x124>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2221      	movs	r2, #33	; 0x21
 800533e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005342:	f7fc fca9 	bl	8001c98 <HAL_GetTick>
 8005346:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	88fa      	ldrh	r2, [r7, #6]
 800534c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	88fa      	ldrh	r2, [r7, #6]
 8005354:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005360:	d108      	bne.n	8005374 <HAL_UART_Transmit+0x84>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d104      	bne.n	8005374 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800536a:	2300      	movs	r3, #0
 800536c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	e003      	b.n	800537c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005378:	2300      	movs	r3, #0
 800537a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005384:	e02c      	b.n	80053e0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2200      	movs	r2, #0
 800538e:	2180      	movs	r1, #128	; 0x80
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 fedd 	bl	8006150 <UART_WaitOnFlagUntilTimeout>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e039      	b.n	8005414 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10b      	bne.n	80053be <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	3302      	adds	r3, #2
 80053ba:	61bb      	str	r3, [r7, #24]
 80053bc:	e007      	b.n	80053ce <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	781a      	ldrb	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	3301      	adds	r3, #1
 80053cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1cc      	bne.n	8005386 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2200      	movs	r2, #0
 80053f4:	2140      	movs	r1, #64	; 0x40
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 feaa 	bl	8006150 <UART_WaitOnFlagUntilTimeout>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e006      	b.n	8005414 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2220      	movs	r2, #32
 800540a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	e000      	b.n	8005414 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005412:	2302      	movs	r3, #2
  }
}
 8005414:	4618      	mov	r0, r3
 8005416:	3720      	adds	r7, #32
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800541c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005420:	b08e      	sub	sp, #56	; 0x38
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	4313      	orrs	r3, r2
 8005442:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800544a:	4313      	orrs	r3, r2
 800544c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	4bc1      	ldr	r3, [pc, #772]	; (800575c <UART_SetConfig+0x340>)
 8005456:	4013      	ands	r3, r2
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6812      	ldr	r2, [r2, #0]
 800545c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800545e:	430b      	orrs	r3, r1
 8005460:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4ab7      	ldr	r2, [pc, #732]	; (8005760 <UART_SetConfig+0x344>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800548e:	4313      	orrs	r3, r2
 8005490:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	4bb2      	ldr	r3, [pc, #712]	; (8005764 <UART_SetConfig+0x348>)
 800549a:	4013      	ands	r3, r2
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054a2:	430b      	orrs	r3, r1
 80054a4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	f023 010f 	bic.w	r1, r3, #15
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4aa9      	ldr	r2, [pc, #676]	; (8005768 <UART_SetConfig+0x34c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d177      	bne.n	80055b6 <UART_SetConfig+0x19a>
 80054c6:	4ba9      	ldr	r3, [pc, #676]	; (800576c <UART_SetConfig+0x350>)
 80054c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054ce:	2b28      	cmp	r3, #40	; 0x28
 80054d0:	d86c      	bhi.n	80055ac <UART_SetConfig+0x190>
 80054d2:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <UART_SetConfig+0xbc>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	0800557d 	.word	0x0800557d
 80054dc:	080055ad 	.word	0x080055ad
 80054e0:	080055ad 	.word	0x080055ad
 80054e4:	080055ad 	.word	0x080055ad
 80054e8:	080055ad 	.word	0x080055ad
 80054ec:	080055ad 	.word	0x080055ad
 80054f0:	080055ad 	.word	0x080055ad
 80054f4:	080055ad 	.word	0x080055ad
 80054f8:	08005585 	.word	0x08005585
 80054fc:	080055ad 	.word	0x080055ad
 8005500:	080055ad 	.word	0x080055ad
 8005504:	080055ad 	.word	0x080055ad
 8005508:	080055ad 	.word	0x080055ad
 800550c:	080055ad 	.word	0x080055ad
 8005510:	080055ad 	.word	0x080055ad
 8005514:	080055ad 	.word	0x080055ad
 8005518:	0800558d 	.word	0x0800558d
 800551c:	080055ad 	.word	0x080055ad
 8005520:	080055ad 	.word	0x080055ad
 8005524:	080055ad 	.word	0x080055ad
 8005528:	080055ad 	.word	0x080055ad
 800552c:	080055ad 	.word	0x080055ad
 8005530:	080055ad 	.word	0x080055ad
 8005534:	080055ad 	.word	0x080055ad
 8005538:	08005595 	.word	0x08005595
 800553c:	080055ad 	.word	0x080055ad
 8005540:	080055ad 	.word	0x080055ad
 8005544:	080055ad 	.word	0x080055ad
 8005548:	080055ad 	.word	0x080055ad
 800554c:	080055ad 	.word	0x080055ad
 8005550:	080055ad 	.word	0x080055ad
 8005554:	080055ad 	.word	0x080055ad
 8005558:	0800559d 	.word	0x0800559d
 800555c:	080055ad 	.word	0x080055ad
 8005560:	080055ad 	.word	0x080055ad
 8005564:	080055ad 	.word	0x080055ad
 8005568:	080055ad 	.word	0x080055ad
 800556c:	080055ad 	.word	0x080055ad
 8005570:	080055ad 	.word	0x080055ad
 8005574:	080055ad 	.word	0x080055ad
 8005578:	080055a5 	.word	0x080055a5
 800557c:	2301      	movs	r3, #1
 800557e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005582:	e233      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005584:	2304      	movs	r3, #4
 8005586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800558a:	e22f      	b.n	80059ec <UART_SetConfig+0x5d0>
 800558c:	2308      	movs	r3, #8
 800558e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005592:	e22b      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005594:	2310      	movs	r3, #16
 8005596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800559a:	e227      	b.n	80059ec <UART_SetConfig+0x5d0>
 800559c:	2320      	movs	r3, #32
 800559e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055a2:	e223      	b.n	80059ec <UART_SetConfig+0x5d0>
 80055a4:	2340      	movs	r3, #64	; 0x40
 80055a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055aa:	e21f      	b.n	80059ec <UART_SetConfig+0x5d0>
 80055ac:	2380      	movs	r3, #128	; 0x80
 80055ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055b2:	bf00      	nop
 80055b4:	e21a      	b.n	80059ec <UART_SetConfig+0x5d0>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a6d      	ldr	r2, [pc, #436]	; (8005770 <UART_SetConfig+0x354>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d132      	bne.n	8005626 <UART_SetConfig+0x20a>
 80055c0:	4b6a      	ldr	r3, [pc, #424]	; (800576c <UART_SetConfig+0x350>)
 80055c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	2b05      	cmp	r3, #5
 80055ca:	d827      	bhi.n	800561c <UART_SetConfig+0x200>
 80055cc:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <UART_SetConfig+0x1b8>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	080055ed 	.word	0x080055ed
 80055d8:	080055f5 	.word	0x080055f5
 80055dc:	080055fd 	.word	0x080055fd
 80055e0:	08005605 	.word	0x08005605
 80055e4:	0800560d 	.word	0x0800560d
 80055e8:	08005615 	.word	0x08005615
 80055ec:	2300      	movs	r3, #0
 80055ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055f2:	e1fb      	b.n	80059ec <UART_SetConfig+0x5d0>
 80055f4:	2304      	movs	r3, #4
 80055f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055fa:	e1f7      	b.n	80059ec <UART_SetConfig+0x5d0>
 80055fc:	2308      	movs	r3, #8
 80055fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005602:	e1f3      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005604:	2310      	movs	r3, #16
 8005606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800560a:	e1ef      	b.n	80059ec <UART_SetConfig+0x5d0>
 800560c:	2320      	movs	r3, #32
 800560e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005612:	e1eb      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005614:	2340      	movs	r3, #64	; 0x40
 8005616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800561a:	e1e7      	b.n	80059ec <UART_SetConfig+0x5d0>
 800561c:	2380      	movs	r3, #128	; 0x80
 800561e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005622:	bf00      	nop
 8005624:	e1e2      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a52      	ldr	r2, [pc, #328]	; (8005774 <UART_SetConfig+0x358>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d132      	bne.n	8005696 <UART_SetConfig+0x27a>
 8005630:	4b4e      	ldr	r3, [pc, #312]	; (800576c <UART_SetConfig+0x350>)
 8005632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	2b05      	cmp	r3, #5
 800563a:	d827      	bhi.n	800568c <UART_SetConfig+0x270>
 800563c:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <UART_SetConfig+0x228>)
 800563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005642:	bf00      	nop
 8005644:	0800565d 	.word	0x0800565d
 8005648:	08005665 	.word	0x08005665
 800564c:	0800566d 	.word	0x0800566d
 8005650:	08005675 	.word	0x08005675
 8005654:	0800567d 	.word	0x0800567d
 8005658:	08005685 	.word	0x08005685
 800565c:	2300      	movs	r3, #0
 800565e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005662:	e1c3      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005664:	2304      	movs	r3, #4
 8005666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800566a:	e1bf      	b.n	80059ec <UART_SetConfig+0x5d0>
 800566c:	2308      	movs	r3, #8
 800566e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005672:	e1bb      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005674:	2310      	movs	r3, #16
 8005676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800567a:	e1b7      	b.n	80059ec <UART_SetConfig+0x5d0>
 800567c:	2320      	movs	r3, #32
 800567e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005682:	e1b3      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005684:	2340      	movs	r3, #64	; 0x40
 8005686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800568a:	e1af      	b.n	80059ec <UART_SetConfig+0x5d0>
 800568c:	2380      	movs	r3, #128	; 0x80
 800568e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005692:	bf00      	nop
 8005694:	e1aa      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a37      	ldr	r2, [pc, #220]	; (8005778 <UART_SetConfig+0x35c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d132      	bne.n	8005706 <UART_SetConfig+0x2ea>
 80056a0:	4b32      	ldr	r3, [pc, #200]	; (800576c <UART_SetConfig+0x350>)
 80056a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	2b05      	cmp	r3, #5
 80056aa:	d827      	bhi.n	80056fc <UART_SetConfig+0x2e0>
 80056ac:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <UART_SetConfig+0x298>)
 80056ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b2:	bf00      	nop
 80056b4:	080056cd 	.word	0x080056cd
 80056b8:	080056d5 	.word	0x080056d5
 80056bc:	080056dd 	.word	0x080056dd
 80056c0:	080056e5 	.word	0x080056e5
 80056c4:	080056ed 	.word	0x080056ed
 80056c8:	080056f5 	.word	0x080056f5
 80056cc:	2300      	movs	r3, #0
 80056ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056d2:	e18b      	b.n	80059ec <UART_SetConfig+0x5d0>
 80056d4:	2304      	movs	r3, #4
 80056d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056da:	e187      	b.n	80059ec <UART_SetConfig+0x5d0>
 80056dc:	2308      	movs	r3, #8
 80056de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056e2:	e183      	b.n	80059ec <UART_SetConfig+0x5d0>
 80056e4:	2310      	movs	r3, #16
 80056e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ea:	e17f      	b.n	80059ec <UART_SetConfig+0x5d0>
 80056ec:	2320      	movs	r3, #32
 80056ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056f2:	e17b      	b.n	80059ec <UART_SetConfig+0x5d0>
 80056f4:	2340      	movs	r3, #64	; 0x40
 80056f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056fa:	e177      	b.n	80059ec <UART_SetConfig+0x5d0>
 80056fc:	2380      	movs	r3, #128	; 0x80
 80056fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005702:	bf00      	nop
 8005704:	e172      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a1c      	ldr	r2, [pc, #112]	; (800577c <UART_SetConfig+0x360>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d144      	bne.n	800579a <UART_SetConfig+0x37e>
 8005710:	4b16      	ldr	r3, [pc, #88]	; (800576c <UART_SetConfig+0x350>)
 8005712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	2b05      	cmp	r3, #5
 800571a:	d839      	bhi.n	8005790 <UART_SetConfig+0x374>
 800571c:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <UART_SetConfig+0x308>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	0800573d 	.word	0x0800573d
 8005728:	08005745 	.word	0x08005745
 800572c:	0800574d 	.word	0x0800574d
 8005730:	08005755 	.word	0x08005755
 8005734:	08005781 	.word	0x08005781
 8005738:	08005789 	.word	0x08005789
 800573c:	2300      	movs	r3, #0
 800573e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005742:	e153      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005744:	2304      	movs	r3, #4
 8005746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800574a:	e14f      	b.n	80059ec <UART_SetConfig+0x5d0>
 800574c:	2308      	movs	r3, #8
 800574e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005752:	e14b      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005754:	2310      	movs	r3, #16
 8005756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800575a:	e147      	b.n	80059ec <UART_SetConfig+0x5d0>
 800575c:	cfff69f3 	.word	0xcfff69f3
 8005760:	58000c00 	.word	0x58000c00
 8005764:	11fff4ff 	.word	0x11fff4ff
 8005768:	40011000 	.word	0x40011000
 800576c:	58024400 	.word	0x58024400
 8005770:	40004400 	.word	0x40004400
 8005774:	40004800 	.word	0x40004800
 8005778:	40004c00 	.word	0x40004c00
 800577c:	40005000 	.word	0x40005000
 8005780:	2320      	movs	r3, #32
 8005782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005786:	e131      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005788:	2340      	movs	r3, #64	; 0x40
 800578a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800578e:	e12d      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005790:	2380      	movs	r3, #128	; 0x80
 8005792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005796:	bf00      	nop
 8005798:	e128      	b.n	80059ec <UART_SetConfig+0x5d0>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4ab6      	ldr	r2, [pc, #728]	; (8005a78 <UART_SetConfig+0x65c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d178      	bne.n	8005896 <UART_SetConfig+0x47a>
 80057a4:	4bb5      	ldr	r3, [pc, #724]	; (8005a7c <UART_SetConfig+0x660>)
 80057a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057ac:	2b28      	cmp	r3, #40	; 0x28
 80057ae:	d86d      	bhi.n	800588c <UART_SetConfig+0x470>
 80057b0:	a201      	add	r2, pc, #4	; (adr r2, 80057b8 <UART_SetConfig+0x39c>)
 80057b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b6:	bf00      	nop
 80057b8:	0800585d 	.word	0x0800585d
 80057bc:	0800588d 	.word	0x0800588d
 80057c0:	0800588d 	.word	0x0800588d
 80057c4:	0800588d 	.word	0x0800588d
 80057c8:	0800588d 	.word	0x0800588d
 80057cc:	0800588d 	.word	0x0800588d
 80057d0:	0800588d 	.word	0x0800588d
 80057d4:	0800588d 	.word	0x0800588d
 80057d8:	08005865 	.word	0x08005865
 80057dc:	0800588d 	.word	0x0800588d
 80057e0:	0800588d 	.word	0x0800588d
 80057e4:	0800588d 	.word	0x0800588d
 80057e8:	0800588d 	.word	0x0800588d
 80057ec:	0800588d 	.word	0x0800588d
 80057f0:	0800588d 	.word	0x0800588d
 80057f4:	0800588d 	.word	0x0800588d
 80057f8:	0800586d 	.word	0x0800586d
 80057fc:	0800588d 	.word	0x0800588d
 8005800:	0800588d 	.word	0x0800588d
 8005804:	0800588d 	.word	0x0800588d
 8005808:	0800588d 	.word	0x0800588d
 800580c:	0800588d 	.word	0x0800588d
 8005810:	0800588d 	.word	0x0800588d
 8005814:	0800588d 	.word	0x0800588d
 8005818:	08005875 	.word	0x08005875
 800581c:	0800588d 	.word	0x0800588d
 8005820:	0800588d 	.word	0x0800588d
 8005824:	0800588d 	.word	0x0800588d
 8005828:	0800588d 	.word	0x0800588d
 800582c:	0800588d 	.word	0x0800588d
 8005830:	0800588d 	.word	0x0800588d
 8005834:	0800588d 	.word	0x0800588d
 8005838:	0800587d 	.word	0x0800587d
 800583c:	0800588d 	.word	0x0800588d
 8005840:	0800588d 	.word	0x0800588d
 8005844:	0800588d 	.word	0x0800588d
 8005848:	0800588d 	.word	0x0800588d
 800584c:	0800588d 	.word	0x0800588d
 8005850:	0800588d 	.word	0x0800588d
 8005854:	0800588d 	.word	0x0800588d
 8005858:	08005885 	.word	0x08005885
 800585c:	2301      	movs	r3, #1
 800585e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005862:	e0c3      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005864:	2304      	movs	r3, #4
 8005866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800586a:	e0bf      	b.n	80059ec <UART_SetConfig+0x5d0>
 800586c:	2308      	movs	r3, #8
 800586e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005872:	e0bb      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005874:	2310      	movs	r3, #16
 8005876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800587a:	e0b7      	b.n	80059ec <UART_SetConfig+0x5d0>
 800587c:	2320      	movs	r3, #32
 800587e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005882:	e0b3      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005884:	2340      	movs	r3, #64	; 0x40
 8005886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800588a:	e0af      	b.n	80059ec <UART_SetConfig+0x5d0>
 800588c:	2380      	movs	r3, #128	; 0x80
 800588e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005892:	bf00      	nop
 8005894:	e0aa      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a79      	ldr	r2, [pc, #484]	; (8005a80 <UART_SetConfig+0x664>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d132      	bne.n	8005906 <UART_SetConfig+0x4ea>
 80058a0:	4b76      	ldr	r3, [pc, #472]	; (8005a7c <UART_SetConfig+0x660>)
 80058a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	2b05      	cmp	r3, #5
 80058aa:	d827      	bhi.n	80058fc <UART_SetConfig+0x4e0>
 80058ac:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <UART_SetConfig+0x498>)
 80058ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b2:	bf00      	nop
 80058b4:	080058cd 	.word	0x080058cd
 80058b8:	080058d5 	.word	0x080058d5
 80058bc:	080058dd 	.word	0x080058dd
 80058c0:	080058e5 	.word	0x080058e5
 80058c4:	080058ed 	.word	0x080058ed
 80058c8:	080058f5 	.word	0x080058f5
 80058cc:	2300      	movs	r3, #0
 80058ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058d2:	e08b      	b.n	80059ec <UART_SetConfig+0x5d0>
 80058d4:	2304      	movs	r3, #4
 80058d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058da:	e087      	b.n	80059ec <UART_SetConfig+0x5d0>
 80058dc:	2308      	movs	r3, #8
 80058de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058e2:	e083      	b.n	80059ec <UART_SetConfig+0x5d0>
 80058e4:	2310      	movs	r3, #16
 80058e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ea:	e07f      	b.n	80059ec <UART_SetConfig+0x5d0>
 80058ec:	2320      	movs	r3, #32
 80058ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058f2:	e07b      	b.n	80059ec <UART_SetConfig+0x5d0>
 80058f4:	2340      	movs	r3, #64	; 0x40
 80058f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058fa:	e077      	b.n	80059ec <UART_SetConfig+0x5d0>
 80058fc:	2380      	movs	r3, #128	; 0x80
 80058fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005902:	bf00      	nop
 8005904:	e072      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a5e      	ldr	r2, [pc, #376]	; (8005a84 <UART_SetConfig+0x668>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d132      	bne.n	8005976 <UART_SetConfig+0x55a>
 8005910:	4b5a      	ldr	r3, [pc, #360]	; (8005a7c <UART_SetConfig+0x660>)
 8005912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	2b05      	cmp	r3, #5
 800591a:	d827      	bhi.n	800596c <UART_SetConfig+0x550>
 800591c:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <UART_SetConfig+0x508>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	0800593d 	.word	0x0800593d
 8005928:	08005945 	.word	0x08005945
 800592c:	0800594d 	.word	0x0800594d
 8005930:	08005955 	.word	0x08005955
 8005934:	0800595d 	.word	0x0800595d
 8005938:	08005965 	.word	0x08005965
 800593c:	2300      	movs	r3, #0
 800593e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005942:	e053      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005944:	2304      	movs	r3, #4
 8005946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800594a:	e04f      	b.n	80059ec <UART_SetConfig+0x5d0>
 800594c:	2308      	movs	r3, #8
 800594e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005952:	e04b      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005954:	2310      	movs	r3, #16
 8005956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800595a:	e047      	b.n	80059ec <UART_SetConfig+0x5d0>
 800595c:	2320      	movs	r3, #32
 800595e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005962:	e043      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005964:	2340      	movs	r3, #64	; 0x40
 8005966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800596a:	e03f      	b.n	80059ec <UART_SetConfig+0x5d0>
 800596c:	2380      	movs	r3, #128	; 0x80
 800596e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005972:	bf00      	nop
 8005974:	e03a      	b.n	80059ec <UART_SetConfig+0x5d0>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a43      	ldr	r2, [pc, #268]	; (8005a88 <UART_SetConfig+0x66c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d132      	bne.n	80059e6 <UART_SetConfig+0x5ca>
 8005980:	4b3e      	ldr	r3, [pc, #248]	; (8005a7c <UART_SetConfig+0x660>)
 8005982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	2b05      	cmp	r3, #5
 800598a:	d827      	bhi.n	80059dc <UART_SetConfig+0x5c0>
 800598c:	a201      	add	r2, pc, #4	; (adr r2, 8005994 <UART_SetConfig+0x578>)
 800598e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005992:	bf00      	nop
 8005994:	080059ad 	.word	0x080059ad
 8005998:	080059b5 	.word	0x080059b5
 800599c:	080059bd 	.word	0x080059bd
 80059a0:	080059c5 	.word	0x080059c5
 80059a4:	080059cd 	.word	0x080059cd
 80059a8:	080059d5 	.word	0x080059d5
 80059ac:	2302      	movs	r3, #2
 80059ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059b2:	e01b      	b.n	80059ec <UART_SetConfig+0x5d0>
 80059b4:	2304      	movs	r3, #4
 80059b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ba:	e017      	b.n	80059ec <UART_SetConfig+0x5d0>
 80059bc:	2308      	movs	r3, #8
 80059be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059c2:	e013      	b.n	80059ec <UART_SetConfig+0x5d0>
 80059c4:	2310      	movs	r3, #16
 80059c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ca:	e00f      	b.n	80059ec <UART_SetConfig+0x5d0>
 80059cc:	2320      	movs	r3, #32
 80059ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059d2:	e00b      	b.n	80059ec <UART_SetConfig+0x5d0>
 80059d4:	2340      	movs	r3, #64	; 0x40
 80059d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059da:	e007      	b.n	80059ec <UART_SetConfig+0x5d0>
 80059dc:	2380      	movs	r3, #128	; 0x80
 80059de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059e2:	bf00      	nop
 80059e4:	e002      	b.n	80059ec <UART_SetConfig+0x5d0>
 80059e6:	2380      	movs	r3, #128	; 0x80
 80059e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a25      	ldr	r2, [pc, #148]	; (8005a88 <UART_SetConfig+0x66c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	f040 80b8 	bne.w	8005b68 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d019      	beq.n	8005a34 <UART_SetConfig+0x618>
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	dc04      	bgt.n	8005a0e <UART_SetConfig+0x5f2>
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d009      	beq.n	8005a1c <UART_SetConfig+0x600>
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d00b      	beq.n	8005a24 <UART_SetConfig+0x608>
 8005a0c:	e042      	b.n	8005a94 <UART_SetConfig+0x678>
 8005a0e:	2b20      	cmp	r3, #32
 8005a10:	d02b      	beq.n	8005a6a <UART_SetConfig+0x64e>
 8005a12:	2b40      	cmp	r3, #64	; 0x40
 8005a14:	d02c      	beq.n	8005a70 <UART_SetConfig+0x654>
 8005a16:	2b10      	cmp	r3, #16
 8005a18:	d014      	beq.n	8005a44 <UART_SetConfig+0x628>
 8005a1a:	e03b      	b.n	8005a94 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005a1c:	f7ff f806 	bl	8004a2c <HAL_RCCEx_GetD3PCLK1Freq>
 8005a20:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005a22:	e03d      	b.n	8005aa0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a24:	f107 0314 	add.w	r3, r7, #20
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff f815 	bl	8004a58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a32:	e035      	b.n	8005aa0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a34:	f107 0308 	add.w	r3, r7, #8
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff f959 	bl	8004cf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a42:	e02d      	b.n	8005aa0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a44:	4b0d      	ldr	r3, [pc, #52]	; (8005a7c <UART_SetConfig+0x660>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d009      	beq.n	8005a64 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a50:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <UART_SetConfig+0x660>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	08db      	lsrs	r3, r3, #3
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	4a0c      	ldr	r2, [pc, #48]	; (8005a8c <UART_SetConfig+0x670>)
 8005a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a62:	e01d      	b.n	8005aa0 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8005a64:	4b09      	ldr	r3, [pc, #36]	; (8005a8c <UART_SetConfig+0x670>)
 8005a66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a68:	e01a      	b.n	8005aa0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a6a:	4b09      	ldr	r3, [pc, #36]	; (8005a90 <UART_SetConfig+0x674>)
 8005a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a6e:	e017      	b.n	8005aa0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a76:	e013      	b.n	8005aa0 <UART_SetConfig+0x684>
 8005a78:	40011400 	.word	0x40011400
 8005a7c:	58024400 	.word	0x58024400
 8005a80:	40007800 	.word	0x40007800
 8005a84:	40007c00 	.word	0x40007c00
 8005a88:	58000c00 	.word	0x58000c00
 8005a8c:	03d09000 	.word	0x03d09000
 8005a90:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005a9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 824d 	beq.w	8005f42 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	4aad      	ldr	r2, [pc, #692]	; (8005d64 <UART_SetConfig+0x948>)
 8005aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aba:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	4413      	add	r3, r2
 8005ac6:	6a3a      	ldr	r2, [r7, #32]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d305      	bcc.n	8005ad8 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ad2:	6a3a      	ldr	r2, [r7, #32]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d903      	bls.n	8005ae0 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005ade:	e230      	b.n	8005f42 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f04f 0100 	mov.w	r1, #0
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	4a9d      	ldr	r2, [pc, #628]	; (8005d64 <UART_SetConfig+0x948>)
 8005aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	f04f 0400 	mov.w	r4, #0
 8005af8:	461a      	mov	r2, r3
 8005afa:	4623      	mov	r3, r4
 8005afc:	f7fa fc40 	bl	8000380 <__aeabi_uldivmod>
 8005b00:	4603      	mov	r3, r0
 8005b02:	460c      	mov	r4, r1
 8005b04:	4619      	mov	r1, r3
 8005b06:	4622      	mov	r2, r4
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	f04f 0400 	mov.w	r4, #0
 8005b10:	0214      	lsls	r4, r2, #8
 8005b12:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005b16:	020b      	lsls	r3, r1, #8
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6852      	ldr	r2, [r2, #4]
 8005b1c:	0852      	lsrs	r2, r2, #1
 8005b1e:	4611      	mov	r1, r2
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	eb13 0b01 	adds.w	fp, r3, r1
 8005b28:	eb44 0c02 	adc.w	ip, r4, r2
 8005b2c:	4658      	mov	r0, fp
 8005b2e:	4661      	mov	r1, ip
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f04f 0400 	mov.w	r4, #0
 8005b38:	461a      	mov	r2, r3
 8005b3a:	4623      	mov	r3, r4
 8005b3c:	f7fa fc20 	bl	8000380 <__aeabi_uldivmod>
 8005b40:	4603      	mov	r3, r0
 8005b42:	460c      	mov	r4, r1
 8005b44:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b4c:	d308      	bcc.n	8005b60 <UART_SetConfig+0x744>
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b54:	d204      	bcs.n	8005b60 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b5c:	60da      	str	r2, [r3, #12]
 8005b5e:	e1f0      	b.n	8005f42 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005b66:	e1ec      	b.n	8005f42 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b70:	f040 8100 	bne.w	8005d74 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8005b74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b78:	2b40      	cmp	r3, #64	; 0x40
 8005b7a:	f200 80b7 	bhi.w	8005cec <UART_SetConfig+0x8d0>
 8005b7e:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <UART_SetConfig+0x768>)
 8005b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b84:	08005c89 	.word	0x08005c89
 8005b88:	08005c91 	.word	0x08005c91
 8005b8c:	08005ced 	.word	0x08005ced
 8005b90:	08005ced 	.word	0x08005ced
 8005b94:	08005c99 	.word	0x08005c99
 8005b98:	08005ced 	.word	0x08005ced
 8005b9c:	08005ced 	.word	0x08005ced
 8005ba0:	08005ced 	.word	0x08005ced
 8005ba4:	08005ca9 	.word	0x08005ca9
 8005ba8:	08005ced 	.word	0x08005ced
 8005bac:	08005ced 	.word	0x08005ced
 8005bb0:	08005ced 	.word	0x08005ced
 8005bb4:	08005ced 	.word	0x08005ced
 8005bb8:	08005ced 	.word	0x08005ced
 8005bbc:	08005ced 	.word	0x08005ced
 8005bc0:	08005ced 	.word	0x08005ced
 8005bc4:	08005cb9 	.word	0x08005cb9
 8005bc8:	08005ced 	.word	0x08005ced
 8005bcc:	08005ced 	.word	0x08005ced
 8005bd0:	08005ced 	.word	0x08005ced
 8005bd4:	08005ced 	.word	0x08005ced
 8005bd8:	08005ced 	.word	0x08005ced
 8005bdc:	08005ced 	.word	0x08005ced
 8005be0:	08005ced 	.word	0x08005ced
 8005be4:	08005ced 	.word	0x08005ced
 8005be8:	08005ced 	.word	0x08005ced
 8005bec:	08005ced 	.word	0x08005ced
 8005bf0:	08005ced 	.word	0x08005ced
 8005bf4:	08005ced 	.word	0x08005ced
 8005bf8:	08005ced 	.word	0x08005ced
 8005bfc:	08005ced 	.word	0x08005ced
 8005c00:	08005ced 	.word	0x08005ced
 8005c04:	08005cdf 	.word	0x08005cdf
 8005c08:	08005ced 	.word	0x08005ced
 8005c0c:	08005ced 	.word	0x08005ced
 8005c10:	08005ced 	.word	0x08005ced
 8005c14:	08005ced 	.word	0x08005ced
 8005c18:	08005ced 	.word	0x08005ced
 8005c1c:	08005ced 	.word	0x08005ced
 8005c20:	08005ced 	.word	0x08005ced
 8005c24:	08005ced 	.word	0x08005ced
 8005c28:	08005ced 	.word	0x08005ced
 8005c2c:	08005ced 	.word	0x08005ced
 8005c30:	08005ced 	.word	0x08005ced
 8005c34:	08005ced 	.word	0x08005ced
 8005c38:	08005ced 	.word	0x08005ced
 8005c3c:	08005ced 	.word	0x08005ced
 8005c40:	08005ced 	.word	0x08005ced
 8005c44:	08005ced 	.word	0x08005ced
 8005c48:	08005ced 	.word	0x08005ced
 8005c4c:	08005ced 	.word	0x08005ced
 8005c50:	08005ced 	.word	0x08005ced
 8005c54:	08005ced 	.word	0x08005ced
 8005c58:	08005ced 	.word	0x08005ced
 8005c5c:	08005ced 	.word	0x08005ced
 8005c60:	08005ced 	.word	0x08005ced
 8005c64:	08005ced 	.word	0x08005ced
 8005c68:	08005ced 	.word	0x08005ced
 8005c6c:	08005ced 	.word	0x08005ced
 8005c70:	08005ced 	.word	0x08005ced
 8005c74:	08005ced 	.word	0x08005ced
 8005c78:	08005ced 	.word	0x08005ced
 8005c7c:	08005ced 	.word	0x08005ced
 8005c80:	08005ced 	.word	0x08005ced
 8005c84:	08005ce5 	.word	0x08005ce5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c88:	f7fd ffb6 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 8005c8c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005c8e:	e033      	b.n	8005cf8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c90:	f7fd ffc8 	bl	8003c24 <HAL_RCC_GetPCLK2Freq>
 8005c94:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005c96:	e02f      	b.n	8005cf8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c98:	f107 0314 	add.w	r3, r7, #20
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fe fedb 	bl	8004a58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ca6:	e027      	b.n	8005cf8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ca8:	f107 0308 	add.w	r3, r7, #8
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff f81f 	bl	8004cf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cb6:	e01f      	b.n	8005cf8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cb8:	4b2b      	ldr	r3, [pc, #172]	; (8005d68 <UART_SetConfig+0x94c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0320 	and.w	r3, r3, #32
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d009      	beq.n	8005cd8 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cc4:	4b28      	ldr	r3, [pc, #160]	; (8005d68 <UART_SetConfig+0x94c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	08db      	lsrs	r3, r3, #3
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	4a27      	ldr	r2, [pc, #156]	; (8005d6c <UART_SetConfig+0x950>)
 8005cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cd6:	e00f      	b.n	8005cf8 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8005cd8:	4b24      	ldr	r3, [pc, #144]	; (8005d6c <UART_SetConfig+0x950>)
 8005cda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cdc:	e00c      	b.n	8005cf8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cde:	4b24      	ldr	r3, [pc, #144]	; (8005d70 <UART_SetConfig+0x954>)
 8005ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ce2:	e009      	b.n	8005cf8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cea:	e005      	b.n	8005cf8 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005cf6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 8121 	beq.w	8005f42 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	4a17      	ldr	r2, [pc, #92]	; (8005d64 <UART_SetConfig+0x948>)
 8005d06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d12:	005a      	lsls	r2, r3, #1
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	085b      	lsrs	r3, r3, #1
 8005d1a:	441a      	add	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	2b0f      	cmp	r3, #15
 8005d2c:	d916      	bls.n	8005d5c <UART_SetConfig+0x940>
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d34:	d212      	bcs.n	8005d5c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	f023 030f 	bic.w	r3, r3, #15
 8005d3e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	085b      	lsrs	r3, r3, #1
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005d58:	60da      	str	r2, [r3, #12]
 8005d5a:	e0f2      	b.n	8005f42 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005d62:	e0ee      	b.n	8005f42 <UART_SetConfig+0xb26>
 8005d64:	08006d54 	.word	0x08006d54
 8005d68:	58024400 	.word	0x58024400
 8005d6c:	03d09000 	.word	0x03d09000
 8005d70:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d78:	2b40      	cmp	r3, #64	; 0x40
 8005d7a:	f200 80b7 	bhi.w	8005eec <UART_SetConfig+0xad0>
 8005d7e:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <UART_SetConfig+0x968>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005e89 	.word	0x08005e89
 8005d88:	08005e91 	.word	0x08005e91
 8005d8c:	08005eed 	.word	0x08005eed
 8005d90:	08005eed 	.word	0x08005eed
 8005d94:	08005e99 	.word	0x08005e99
 8005d98:	08005eed 	.word	0x08005eed
 8005d9c:	08005eed 	.word	0x08005eed
 8005da0:	08005eed 	.word	0x08005eed
 8005da4:	08005ea9 	.word	0x08005ea9
 8005da8:	08005eed 	.word	0x08005eed
 8005dac:	08005eed 	.word	0x08005eed
 8005db0:	08005eed 	.word	0x08005eed
 8005db4:	08005eed 	.word	0x08005eed
 8005db8:	08005eed 	.word	0x08005eed
 8005dbc:	08005eed 	.word	0x08005eed
 8005dc0:	08005eed 	.word	0x08005eed
 8005dc4:	08005eb9 	.word	0x08005eb9
 8005dc8:	08005eed 	.word	0x08005eed
 8005dcc:	08005eed 	.word	0x08005eed
 8005dd0:	08005eed 	.word	0x08005eed
 8005dd4:	08005eed 	.word	0x08005eed
 8005dd8:	08005eed 	.word	0x08005eed
 8005ddc:	08005eed 	.word	0x08005eed
 8005de0:	08005eed 	.word	0x08005eed
 8005de4:	08005eed 	.word	0x08005eed
 8005de8:	08005eed 	.word	0x08005eed
 8005dec:	08005eed 	.word	0x08005eed
 8005df0:	08005eed 	.word	0x08005eed
 8005df4:	08005eed 	.word	0x08005eed
 8005df8:	08005eed 	.word	0x08005eed
 8005dfc:	08005eed 	.word	0x08005eed
 8005e00:	08005eed 	.word	0x08005eed
 8005e04:	08005edf 	.word	0x08005edf
 8005e08:	08005eed 	.word	0x08005eed
 8005e0c:	08005eed 	.word	0x08005eed
 8005e10:	08005eed 	.word	0x08005eed
 8005e14:	08005eed 	.word	0x08005eed
 8005e18:	08005eed 	.word	0x08005eed
 8005e1c:	08005eed 	.word	0x08005eed
 8005e20:	08005eed 	.word	0x08005eed
 8005e24:	08005eed 	.word	0x08005eed
 8005e28:	08005eed 	.word	0x08005eed
 8005e2c:	08005eed 	.word	0x08005eed
 8005e30:	08005eed 	.word	0x08005eed
 8005e34:	08005eed 	.word	0x08005eed
 8005e38:	08005eed 	.word	0x08005eed
 8005e3c:	08005eed 	.word	0x08005eed
 8005e40:	08005eed 	.word	0x08005eed
 8005e44:	08005eed 	.word	0x08005eed
 8005e48:	08005eed 	.word	0x08005eed
 8005e4c:	08005eed 	.word	0x08005eed
 8005e50:	08005eed 	.word	0x08005eed
 8005e54:	08005eed 	.word	0x08005eed
 8005e58:	08005eed 	.word	0x08005eed
 8005e5c:	08005eed 	.word	0x08005eed
 8005e60:	08005eed 	.word	0x08005eed
 8005e64:	08005eed 	.word	0x08005eed
 8005e68:	08005eed 	.word	0x08005eed
 8005e6c:	08005eed 	.word	0x08005eed
 8005e70:	08005eed 	.word	0x08005eed
 8005e74:	08005eed 	.word	0x08005eed
 8005e78:	08005eed 	.word	0x08005eed
 8005e7c:	08005eed 	.word	0x08005eed
 8005e80:	08005eed 	.word	0x08005eed
 8005e84:	08005ee5 	.word	0x08005ee5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e88:	f7fd feb6 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 8005e8c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005e8e:	e033      	b.n	8005ef8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e90:	f7fd fec8 	bl	8003c24 <HAL_RCC_GetPCLK2Freq>
 8005e94:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005e96:	e02f      	b.n	8005ef8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e98:	f107 0314 	add.w	r3, r7, #20
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fe fddb 	bl	8004a58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ea6:	e027      	b.n	8005ef8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ea8:	f107 0308 	add.w	r3, r7, #8
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fe ff1f 	bl	8004cf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005eb6:	e01f      	b.n	8005ef8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eb8:	4b2c      	ldr	r3, [pc, #176]	; (8005f6c <UART_SetConfig+0xb50>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0320 	and.w	r3, r3, #32
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d009      	beq.n	8005ed8 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ec4:	4b29      	ldr	r3, [pc, #164]	; (8005f6c <UART_SetConfig+0xb50>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	08db      	lsrs	r3, r3, #3
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	4a28      	ldr	r2, [pc, #160]	; (8005f70 <UART_SetConfig+0xb54>)
 8005ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ed6:	e00f      	b.n	8005ef8 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8005ed8:	4b25      	ldr	r3, [pc, #148]	; (8005f70 <UART_SetConfig+0xb54>)
 8005eda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005edc:	e00c      	b.n	8005ef8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ede:	4b25      	ldr	r3, [pc, #148]	; (8005f74 <UART_SetConfig+0xb58>)
 8005ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ee2:	e009      	b.n	8005ef8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005eea:	e005      	b.n	8005ef8 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005ef6:	bf00      	nop
    }

    if (pclk != 0U)
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d021      	beq.n	8005f42 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	4a1d      	ldr	r2, [pc, #116]	; (8005f78 <UART_SetConfig+0xb5c>)
 8005f04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	085b      	lsrs	r3, r3, #1
 8005f16:	441a      	add	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f26:	2b0f      	cmp	r3, #15
 8005f28:	d908      	bls.n	8005f3c <UART_SetConfig+0xb20>
 8005f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f30:	d204      	bcs.n	8005f3c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f38:	60da      	str	r2, [r3, #12]
 8005f3a:	e002      	b.n	8005f42 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005f5e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3738      	adds	r7, #56	; 0x38
 8005f66:	46bd      	mov	sp, r7
 8005f68:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005f6c:	58024400 	.word	0x58024400
 8005f70:	03d09000 	.word	0x03d09000
 8005f74:	003d0900 	.word	0x003d0900
 8005f78:	08006d54 	.word	0x08006d54

08005f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00a      	beq.n	8005fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00a      	beq.n	8005fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006010:	f003 0310 	and.w	r3, r3, #16
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00a      	beq.n	800602e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006032:	f003 0320 	and.w	r3, r3, #32
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01a      	beq.n	8006092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800607a:	d10a      	bne.n	8006092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	605a      	str	r2, [r3, #4]
  }
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80060d0:	f7fb fde2 	bl	8001c98 <HAL_GetTick>
 80060d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0308 	and.w	r3, r3, #8
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d10e      	bne.n	8006102 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f82c 	bl	8006150 <UART_WaitOnFlagUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e022      	b.n	8006148 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b04      	cmp	r3, #4
 800610e:	d10e      	bne.n	800612e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f816 	bl	8006150 <UART_WaitOnFlagUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e00c      	b.n	8006148 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2220      	movs	r2, #32
 800613a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	603b      	str	r3, [r7, #0]
 800615c:	4613      	mov	r3, r2
 800615e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006160:	e062      	b.n	8006228 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006168:	d05e      	beq.n	8006228 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800616a:	f7fb fd95 	bl	8001c98 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	429a      	cmp	r2, r3
 8006178:	d302      	bcc.n	8006180 <UART_WaitOnFlagUntilTimeout+0x30>
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d11d      	bne.n	80061bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800618e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689a      	ldr	r2, [r3, #8]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0201 	bic.w	r2, r2, #1
 800619e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e045      	b.n	8006248 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0304 	and.w	r3, r3, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d02e      	beq.n	8006228 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d8:	d126      	bne.n	8006228 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061e2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061f2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0201 	bic.w	r2, r2, #1
 8006202:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2220      	movs	r2, #32
 8006208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2220      	movs	r2, #32
 8006210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2220      	movs	r2, #32
 8006218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e00f      	b.n	8006248 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	69da      	ldr	r2, [r3, #28]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	4013      	ands	r3, r2
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	429a      	cmp	r2, r3
 8006236:	bf0c      	ite	eq
 8006238:	2301      	moveq	r3, #1
 800623a:	2300      	movne	r3, #0
 800623c:	b2db      	uxtb	r3, r3
 800623e:	461a      	mov	r2, r3
 8006240:	79fb      	ldrb	r3, [r7, #7]
 8006242:	429a      	cmp	r2, r3
 8006244:	d08d      	beq.n	8006162 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800625e:	2b01      	cmp	r3, #1
 8006260:	d101      	bne.n	8006266 <HAL_UARTEx_DisableFifoMode+0x16>
 8006262:	2302      	movs	r3, #2
 8006264:	e027      	b.n	80062b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2224      	movs	r2, #36	; 0x24
 8006272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0201 	bic.w	r2, r2, #1
 800628c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006294:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d101      	bne.n	80062da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062d6:	2302      	movs	r3, #2
 80062d8:	e02d      	b.n	8006336 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2224      	movs	r2, #36	; 0x24
 80062e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f022 0201 	bic.w	r2, r2, #1
 8006300:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f850 	bl	80063bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2220      	movs	r2, #32
 8006328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800634e:	2b01      	cmp	r3, #1
 8006350:	d101      	bne.n	8006356 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006352:	2302      	movs	r3, #2
 8006354:	e02d      	b.n	80063b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2224      	movs	r2, #36	; 0x24
 8006362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0201 	bic.w	r2, r2, #1
 800637c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f812 	bl	80063bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063bc:	b480      	push	{r7}
 80063be:	b089      	sub	sp, #36	; 0x24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80063c4:	4a2f      	ldr	r2, [pc, #188]	; (8006484 <UARTEx_SetNbDataToProcess+0xc8>)
 80063c6:	f107 0314 	add.w	r3, r7, #20
 80063ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80063ce:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80063d2:	4a2d      	ldr	r2, [pc, #180]	; (8006488 <UARTEx_SetNbDataToProcess+0xcc>)
 80063d4:	f107 030c 	add.w	r3, r7, #12
 80063d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80063dc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d108      	bne.n	80063fa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063f8:	e03d      	b.n	8006476 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063fa:	2310      	movs	r3, #16
 80063fc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063fe:	2310      	movs	r3, #16
 8006400:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	0e5b      	lsrs	r3, r3, #25
 800640a:	b2db      	uxtb	r3, r3
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	0f5b      	lsrs	r3, r3, #29
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006422:	7fbb      	ldrb	r3, [r7, #30]
 8006424:	7f3a      	ldrb	r2, [r7, #28]
 8006426:	f107 0120 	add.w	r1, r7, #32
 800642a:	440a      	add	r2, r1
 800642c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006430:	fb02 f303 	mul.w	r3, r2, r3
 8006434:	7f3a      	ldrb	r2, [r7, #28]
 8006436:	f107 0120 	add.w	r1, r7, #32
 800643a:	440a      	add	r2, r1
 800643c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006440:	fb93 f3f2 	sdiv	r3, r3, r2
 8006444:	b29a      	uxth	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800644c:	7ffb      	ldrb	r3, [r7, #31]
 800644e:	7f7a      	ldrb	r2, [r7, #29]
 8006450:	f107 0120 	add.w	r1, r7, #32
 8006454:	440a      	add	r2, r1
 8006456:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800645a:	fb02 f303 	mul.w	r3, r2, r3
 800645e:	7f7a      	ldrb	r2, [r7, #29]
 8006460:	f107 0120 	add.w	r1, r7, #32
 8006464:	440a      	add	r2, r1
 8006466:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800646a:	fb93 f3f2 	sdiv	r3, r3, r2
 800646e:	b29a      	uxth	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006476:	bf00      	nop
 8006478:	3724      	adds	r7, #36	; 0x24
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	08006d34 	.word	0x08006d34
 8006488:	08006d3c 	.word	0x08006d3c

0800648c <__errno>:
 800648c:	4b01      	ldr	r3, [pc, #4]	; (8006494 <__errno+0x8>)
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	200000f8 	.word	0x200000f8

08006498 <__libc_init_array>:
 8006498:	b570      	push	{r4, r5, r6, lr}
 800649a:	4e0d      	ldr	r6, [pc, #52]	; (80064d0 <__libc_init_array+0x38>)
 800649c:	4c0d      	ldr	r4, [pc, #52]	; (80064d4 <__libc_init_array+0x3c>)
 800649e:	1ba4      	subs	r4, r4, r6
 80064a0:	10a4      	asrs	r4, r4, #2
 80064a2:	2500      	movs	r5, #0
 80064a4:	42a5      	cmp	r5, r4
 80064a6:	d109      	bne.n	80064bc <__libc_init_array+0x24>
 80064a8:	4e0b      	ldr	r6, [pc, #44]	; (80064d8 <__libc_init_array+0x40>)
 80064aa:	4c0c      	ldr	r4, [pc, #48]	; (80064dc <__libc_init_array+0x44>)
 80064ac:	f000 fc28 	bl	8006d00 <_init>
 80064b0:	1ba4      	subs	r4, r4, r6
 80064b2:	10a4      	asrs	r4, r4, #2
 80064b4:	2500      	movs	r5, #0
 80064b6:	42a5      	cmp	r5, r4
 80064b8:	d105      	bne.n	80064c6 <__libc_init_array+0x2e>
 80064ba:	bd70      	pop	{r4, r5, r6, pc}
 80064bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064c0:	4798      	blx	r3
 80064c2:	3501      	adds	r5, #1
 80064c4:	e7ee      	b.n	80064a4 <__libc_init_array+0xc>
 80064c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064ca:	4798      	blx	r3
 80064cc:	3501      	adds	r5, #1
 80064ce:	e7f2      	b.n	80064b6 <__libc_init_array+0x1e>
 80064d0:	08006da8 	.word	0x08006da8
 80064d4:	08006da8 	.word	0x08006da8
 80064d8:	08006da8 	.word	0x08006da8
 80064dc:	08006dac 	.word	0x08006dac

080064e0 <memcpy>:
 80064e0:	b510      	push	{r4, lr}
 80064e2:	1e43      	subs	r3, r0, #1
 80064e4:	440a      	add	r2, r1
 80064e6:	4291      	cmp	r1, r2
 80064e8:	d100      	bne.n	80064ec <memcpy+0xc>
 80064ea:	bd10      	pop	{r4, pc}
 80064ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064f4:	e7f7      	b.n	80064e6 <memcpy+0x6>

080064f6 <memset>:
 80064f6:	4402      	add	r2, r0
 80064f8:	4603      	mov	r3, r0
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d100      	bne.n	8006500 <memset+0xa>
 80064fe:	4770      	bx	lr
 8006500:	f803 1b01 	strb.w	r1, [r3], #1
 8006504:	e7f9      	b.n	80064fa <memset+0x4>
	...

08006508 <siprintf>:
 8006508:	b40e      	push	{r1, r2, r3}
 800650a:	b500      	push	{lr}
 800650c:	b09c      	sub	sp, #112	; 0x70
 800650e:	ab1d      	add	r3, sp, #116	; 0x74
 8006510:	9002      	str	r0, [sp, #8]
 8006512:	9006      	str	r0, [sp, #24]
 8006514:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006518:	4809      	ldr	r0, [pc, #36]	; (8006540 <siprintf+0x38>)
 800651a:	9107      	str	r1, [sp, #28]
 800651c:	9104      	str	r1, [sp, #16]
 800651e:	4909      	ldr	r1, [pc, #36]	; (8006544 <siprintf+0x3c>)
 8006520:	f853 2b04 	ldr.w	r2, [r3], #4
 8006524:	9105      	str	r1, [sp, #20]
 8006526:	6800      	ldr	r0, [r0, #0]
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	a902      	add	r1, sp, #8
 800652c:	f000 f866 	bl	80065fc <_svfiprintf_r>
 8006530:	9b02      	ldr	r3, [sp, #8]
 8006532:	2200      	movs	r2, #0
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	b01c      	add	sp, #112	; 0x70
 8006538:	f85d eb04 	ldr.w	lr, [sp], #4
 800653c:	b003      	add	sp, #12
 800653e:	4770      	bx	lr
 8006540:	200000f8 	.word	0x200000f8
 8006544:	ffff0208 	.word	0xffff0208

08006548 <__ssputs_r>:
 8006548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800654c:	688e      	ldr	r6, [r1, #8]
 800654e:	429e      	cmp	r6, r3
 8006550:	4682      	mov	sl, r0
 8006552:	460c      	mov	r4, r1
 8006554:	4690      	mov	r8, r2
 8006556:	4699      	mov	r9, r3
 8006558:	d837      	bhi.n	80065ca <__ssputs_r+0x82>
 800655a:	898a      	ldrh	r2, [r1, #12]
 800655c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006560:	d031      	beq.n	80065c6 <__ssputs_r+0x7e>
 8006562:	6825      	ldr	r5, [r4, #0]
 8006564:	6909      	ldr	r1, [r1, #16]
 8006566:	1a6f      	subs	r7, r5, r1
 8006568:	6965      	ldr	r5, [r4, #20]
 800656a:	2302      	movs	r3, #2
 800656c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006570:	fb95 f5f3 	sdiv	r5, r5, r3
 8006574:	f109 0301 	add.w	r3, r9, #1
 8006578:	443b      	add	r3, r7
 800657a:	429d      	cmp	r5, r3
 800657c:	bf38      	it	cc
 800657e:	461d      	movcc	r5, r3
 8006580:	0553      	lsls	r3, r2, #21
 8006582:	d530      	bpl.n	80065e6 <__ssputs_r+0x9e>
 8006584:	4629      	mov	r1, r5
 8006586:	f000 fb21 	bl	8006bcc <_malloc_r>
 800658a:	4606      	mov	r6, r0
 800658c:	b950      	cbnz	r0, 80065a4 <__ssputs_r+0x5c>
 800658e:	230c      	movs	r3, #12
 8006590:	f8ca 3000 	str.w	r3, [sl]
 8006594:	89a3      	ldrh	r3, [r4, #12]
 8006596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800659a:	81a3      	strh	r3, [r4, #12]
 800659c:	f04f 30ff 	mov.w	r0, #4294967295
 80065a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a4:	463a      	mov	r2, r7
 80065a6:	6921      	ldr	r1, [r4, #16]
 80065a8:	f7ff ff9a 	bl	80064e0 <memcpy>
 80065ac:	89a3      	ldrh	r3, [r4, #12]
 80065ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b6:	81a3      	strh	r3, [r4, #12]
 80065b8:	6126      	str	r6, [r4, #16]
 80065ba:	6165      	str	r5, [r4, #20]
 80065bc:	443e      	add	r6, r7
 80065be:	1bed      	subs	r5, r5, r7
 80065c0:	6026      	str	r6, [r4, #0]
 80065c2:	60a5      	str	r5, [r4, #8]
 80065c4:	464e      	mov	r6, r9
 80065c6:	454e      	cmp	r6, r9
 80065c8:	d900      	bls.n	80065cc <__ssputs_r+0x84>
 80065ca:	464e      	mov	r6, r9
 80065cc:	4632      	mov	r2, r6
 80065ce:	4641      	mov	r1, r8
 80065d0:	6820      	ldr	r0, [r4, #0]
 80065d2:	f000 fa93 	bl	8006afc <memmove>
 80065d6:	68a3      	ldr	r3, [r4, #8]
 80065d8:	1b9b      	subs	r3, r3, r6
 80065da:	60a3      	str	r3, [r4, #8]
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	441e      	add	r6, r3
 80065e0:	6026      	str	r6, [r4, #0]
 80065e2:	2000      	movs	r0, #0
 80065e4:	e7dc      	b.n	80065a0 <__ssputs_r+0x58>
 80065e6:	462a      	mov	r2, r5
 80065e8:	f000 fb4a 	bl	8006c80 <_realloc_r>
 80065ec:	4606      	mov	r6, r0
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d1e2      	bne.n	80065b8 <__ssputs_r+0x70>
 80065f2:	6921      	ldr	r1, [r4, #16]
 80065f4:	4650      	mov	r0, sl
 80065f6:	f000 fa9b 	bl	8006b30 <_free_r>
 80065fa:	e7c8      	b.n	800658e <__ssputs_r+0x46>

080065fc <_svfiprintf_r>:
 80065fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006600:	461d      	mov	r5, r3
 8006602:	898b      	ldrh	r3, [r1, #12]
 8006604:	061f      	lsls	r7, r3, #24
 8006606:	b09d      	sub	sp, #116	; 0x74
 8006608:	4680      	mov	r8, r0
 800660a:	460c      	mov	r4, r1
 800660c:	4616      	mov	r6, r2
 800660e:	d50f      	bpl.n	8006630 <_svfiprintf_r+0x34>
 8006610:	690b      	ldr	r3, [r1, #16]
 8006612:	b96b      	cbnz	r3, 8006630 <_svfiprintf_r+0x34>
 8006614:	2140      	movs	r1, #64	; 0x40
 8006616:	f000 fad9 	bl	8006bcc <_malloc_r>
 800661a:	6020      	str	r0, [r4, #0]
 800661c:	6120      	str	r0, [r4, #16]
 800661e:	b928      	cbnz	r0, 800662c <_svfiprintf_r+0x30>
 8006620:	230c      	movs	r3, #12
 8006622:	f8c8 3000 	str.w	r3, [r8]
 8006626:	f04f 30ff 	mov.w	r0, #4294967295
 800662a:	e0c8      	b.n	80067be <_svfiprintf_r+0x1c2>
 800662c:	2340      	movs	r3, #64	; 0x40
 800662e:	6163      	str	r3, [r4, #20]
 8006630:	2300      	movs	r3, #0
 8006632:	9309      	str	r3, [sp, #36]	; 0x24
 8006634:	2320      	movs	r3, #32
 8006636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800663a:	2330      	movs	r3, #48	; 0x30
 800663c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006640:	9503      	str	r5, [sp, #12]
 8006642:	f04f 0b01 	mov.w	fp, #1
 8006646:	4637      	mov	r7, r6
 8006648:	463d      	mov	r5, r7
 800664a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800664e:	b10b      	cbz	r3, 8006654 <_svfiprintf_r+0x58>
 8006650:	2b25      	cmp	r3, #37	; 0x25
 8006652:	d13e      	bne.n	80066d2 <_svfiprintf_r+0xd6>
 8006654:	ebb7 0a06 	subs.w	sl, r7, r6
 8006658:	d00b      	beq.n	8006672 <_svfiprintf_r+0x76>
 800665a:	4653      	mov	r3, sl
 800665c:	4632      	mov	r2, r6
 800665e:	4621      	mov	r1, r4
 8006660:	4640      	mov	r0, r8
 8006662:	f7ff ff71 	bl	8006548 <__ssputs_r>
 8006666:	3001      	adds	r0, #1
 8006668:	f000 80a4 	beq.w	80067b4 <_svfiprintf_r+0x1b8>
 800666c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800666e:	4453      	add	r3, sl
 8006670:	9309      	str	r3, [sp, #36]	; 0x24
 8006672:	783b      	ldrb	r3, [r7, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 809d 	beq.w	80067b4 <_svfiprintf_r+0x1b8>
 800667a:	2300      	movs	r3, #0
 800667c:	f04f 32ff 	mov.w	r2, #4294967295
 8006680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006684:	9304      	str	r3, [sp, #16]
 8006686:	9307      	str	r3, [sp, #28]
 8006688:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800668c:	931a      	str	r3, [sp, #104]	; 0x68
 800668e:	462f      	mov	r7, r5
 8006690:	2205      	movs	r2, #5
 8006692:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006696:	4850      	ldr	r0, [pc, #320]	; (80067d8 <_svfiprintf_r+0x1dc>)
 8006698:	f7f9 fe22 	bl	80002e0 <memchr>
 800669c:	9b04      	ldr	r3, [sp, #16]
 800669e:	b9d0      	cbnz	r0, 80066d6 <_svfiprintf_r+0xda>
 80066a0:	06d9      	lsls	r1, r3, #27
 80066a2:	bf44      	itt	mi
 80066a4:	2220      	movmi	r2, #32
 80066a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80066aa:	071a      	lsls	r2, r3, #28
 80066ac:	bf44      	itt	mi
 80066ae:	222b      	movmi	r2, #43	; 0x2b
 80066b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80066b4:	782a      	ldrb	r2, [r5, #0]
 80066b6:	2a2a      	cmp	r2, #42	; 0x2a
 80066b8:	d015      	beq.n	80066e6 <_svfiprintf_r+0xea>
 80066ba:	9a07      	ldr	r2, [sp, #28]
 80066bc:	462f      	mov	r7, r5
 80066be:	2000      	movs	r0, #0
 80066c0:	250a      	movs	r5, #10
 80066c2:	4639      	mov	r1, r7
 80066c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066c8:	3b30      	subs	r3, #48	; 0x30
 80066ca:	2b09      	cmp	r3, #9
 80066cc:	d94d      	bls.n	800676a <_svfiprintf_r+0x16e>
 80066ce:	b1b8      	cbz	r0, 8006700 <_svfiprintf_r+0x104>
 80066d0:	e00f      	b.n	80066f2 <_svfiprintf_r+0xf6>
 80066d2:	462f      	mov	r7, r5
 80066d4:	e7b8      	b.n	8006648 <_svfiprintf_r+0x4c>
 80066d6:	4a40      	ldr	r2, [pc, #256]	; (80067d8 <_svfiprintf_r+0x1dc>)
 80066d8:	1a80      	subs	r0, r0, r2
 80066da:	fa0b f000 	lsl.w	r0, fp, r0
 80066de:	4318      	orrs	r0, r3
 80066e0:	9004      	str	r0, [sp, #16]
 80066e2:	463d      	mov	r5, r7
 80066e4:	e7d3      	b.n	800668e <_svfiprintf_r+0x92>
 80066e6:	9a03      	ldr	r2, [sp, #12]
 80066e8:	1d11      	adds	r1, r2, #4
 80066ea:	6812      	ldr	r2, [r2, #0]
 80066ec:	9103      	str	r1, [sp, #12]
 80066ee:	2a00      	cmp	r2, #0
 80066f0:	db01      	blt.n	80066f6 <_svfiprintf_r+0xfa>
 80066f2:	9207      	str	r2, [sp, #28]
 80066f4:	e004      	b.n	8006700 <_svfiprintf_r+0x104>
 80066f6:	4252      	negs	r2, r2
 80066f8:	f043 0302 	orr.w	r3, r3, #2
 80066fc:	9207      	str	r2, [sp, #28]
 80066fe:	9304      	str	r3, [sp, #16]
 8006700:	783b      	ldrb	r3, [r7, #0]
 8006702:	2b2e      	cmp	r3, #46	; 0x2e
 8006704:	d10c      	bne.n	8006720 <_svfiprintf_r+0x124>
 8006706:	787b      	ldrb	r3, [r7, #1]
 8006708:	2b2a      	cmp	r3, #42	; 0x2a
 800670a:	d133      	bne.n	8006774 <_svfiprintf_r+0x178>
 800670c:	9b03      	ldr	r3, [sp, #12]
 800670e:	1d1a      	adds	r2, r3, #4
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	9203      	str	r2, [sp, #12]
 8006714:	2b00      	cmp	r3, #0
 8006716:	bfb8      	it	lt
 8006718:	f04f 33ff 	movlt.w	r3, #4294967295
 800671c:	3702      	adds	r7, #2
 800671e:	9305      	str	r3, [sp, #20]
 8006720:	4d2e      	ldr	r5, [pc, #184]	; (80067dc <_svfiprintf_r+0x1e0>)
 8006722:	7839      	ldrb	r1, [r7, #0]
 8006724:	2203      	movs	r2, #3
 8006726:	4628      	mov	r0, r5
 8006728:	f7f9 fdda 	bl	80002e0 <memchr>
 800672c:	b138      	cbz	r0, 800673e <_svfiprintf_r+0x142>
 800672e:	2340      	movs	r3, #64	; 0x40
 8006730:	1b40      	subs	r0, r0, r5
 8006732:	fa03 f000 	lsl.w	r0, r3, r0
 8006736:	9b04      	ldr	r3, [sp, #16]
 8006738:	4303      	orrs	r3, r0
 800673a:	3701      	adds	r7, #1
 800673c:	9304      	str	r3, [sp, #16]
 800673e:	7839      	ldrb	r1, [r7, #0]
 8006740:	4827      	ldr	r0, [pc, #156]	; (80067e0 <_svfiprintf_r+0x1e4>)
 8006742:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006746:	2206      	movs	r2, #6
 8006748:	1c7e      	adds	r6, r7, #1
 800674a:	f7f9 fdc9 	bl	80002e0 <memchr>
 800674e:	2800      	cmp	r0, #0
 8006750:	d038      	beq.n	80067c4 <_svfiprintf_r+0x1c8>
 8006752:	4b24      	ldr	r3, [pc, #144]	; (80067e4 <_svfiprintf_r+0x1e8>)
 8006754:	bb13      	cbnz	r3, 800679c <_svfiprintf_r+0x1a0>
 8006756:	9b03      	ldr	r3, [sp, #12]
 8006758:	3307      	adds	r3, #7
 800675a:	f023 0307 	bic.w	r3, r3, #7
 800675e:	3308      	adds	r3, #8
 8006760:	9303      	str	r3, [sp, #12]
 8006762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006764:	444b      	add	r3, r9
 8006766:	9309      	str	r3, [sp, #36]	; 0x24
 8006768:	e76d      	b.n	8006646 <_svfiprintf_r+0x4a>
 800676a:	fb05 3202 	mla	r2, r5, r2, r3
 800676e:	2001      	movs	r0, #1
 8006770:	460f      	mov	r7, r1
 8006772:	e7a6      	b.n	80066c2 <_svfiprintf_r+0xc6>
 8006774:	2300      	movs	r3, #0
 8006776:	3701      	adds	r7, #1
 8006778:	9305      	str	r3, [sp, #20]
 800677a:	4619      	mov	r1, r3
 800677c:	250a      	movs	r5, #10
 800677e:	4638      	mov	r0, r7
 8006780:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006784:	3a30      	subs	r2, #48	; 0x30
 8006786:	2a09      	cmp	r2, #9
 8006788:	d903      	bls.n	8006792 <_svfiprintf_r+0x196>
 800678a:	2b00      	cmp	r3, #0
 800678c:	d0c8      	beq.n	8006720 <_svfiprintf_r+0x124>
 800678e:	9105      	str	r1, [sp, #20]
 8006790:	e7c6      	b.n	8006720 <_svfiprintf_r+0x124>
 8006792:	fb05 2101 	mla	r1, r5, r1, r2
 8006796:	2301      	movs	r3, #1
 8006798:	4607      	mov	r7, r0
 800679a:	e7f0      	b.n	800677e <_svfiprintf_r+0x182>
 800679c:	ab03      	add	r3, sp, #12
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	4622      	mov	r2, r4
 80067a2:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <_svfiprintf_r+0x1ec>)
 80067a4:	a904      	add	r1, sp, #16
 80067a6:	4640      	mov	r0, r8
 80067a8:	f3af 8000 	nop.w
 80067ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80067b0:	4681      	mov	r9, r0
 80067b2:	d1d6      	bne.n	8006762 <_svfiprintf_r+0x166>
 80067b4:	89a3      	ldrh	r3, [r4, #12]
 80067b6:	065b      	lsls	r3, r3, #25
 80067b8:	f53f af35 	bmi.w	8006626 <_svfiprintf_r+0x2a>
 80067bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067be:	b01d      	add	sp, #116	; 0x74
 80067c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c4:	ab03      	add	r3, sp, #12
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	4622      	mov	r2, r4
 80067ca:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <_svfiprintf_r+0x1ec>)
 80067cc:	a904      	add	r1, sp, #16
 80067ce:	4640      	mov	r0, r8
 80067d0:	f000 f882 	bl	80068d8 <_printf_i>
 80067d4:	e7ea      	b.n	80067ac <_svfiprintf_r+0x1b0>
 80067d6:	bf00      	nop
 80067d8:	08006d6c 	.word	0x08006d6c
 80067dc:	08006d72 	.word	0x08006d72
 80067e0:	08006d76 	.word	0x08006d76
 80067e4:	00000000 	.word	0x00000000
 80067e8:	08006549 	.word	0x08006549

080067ec <_printf_common>:
 80067ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f0:	4691      	mov	r9, r2
 80067f2:	461f      	mov	r7, r3
 80067f4:	688a      	ldr	r2, [r1, #8]
 80067f6:	690b      	ldr	r3, [r1, #16]
 80067f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067fc:	4293      	cmp	r3, r2
 80067fe:	bfb8      	it	lt
 8006800:	4613      	movlt	r3, r2
 8006802:	f8c9 3000 	str.w	r3, [r9]
 8006806:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800680a:	4606      	mov	r6, r0
 800680c:	460c      	mov	r4, r1
 800680e:	b112      	cbz	r2, 8006816 <_printf_common+0x2a>
 8006810:	3301      	adds	r3, #1
 8006812:	f8c9 3000 	str.w	r3, [r9]
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	0699      	lsls	r1, r3, #26
 800681a:	bf42      	ittt	mi
 800681c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006820:	3302      	addmi	r3, #2
 8006822:	f8c9 3000 	strmi.w	r3, [r9]
 8006826:	6825      	ldr	r5, [r4, #0]
 8006828:	f015 0506 	ands.w	r5, r5, #6
 800682c:	d107      	bne.n	800683e <_printf_common+0x52>
 800682e:	f104 0a19 	add.w	sl, r4, #25
 8006832:	68e3      	ldr	r3, [r4, #12]
 8006834:	f8d9 2000 	ldr.w	r2, [r9]
 8006838:	1a9b      	subs	r3, r3, r2
 800683a:	42ab      	cmp	r3, r5
 800683c:	dc28      	bgt.n	8006890 <_printf_common+0xa4>
 800683e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006842:	6822      	ldr	r2, [r4, #0]
 8006844:	3300      	adds	r3, #0
 8006846:	bf18      	it	ne
 8006848:	2301      	movne	r3, #1
 800684a:	0692      	lsls	r2, r2, #26
 800684c:	d42d      	bmi.n	80068aa <_printf_common+0xbe>
 800684e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006852:	4639      	mov	r1, r7
 8006854:	4630      	mov	r0, r6
 8006856:	47c0      	blx	r8
 8006858:	3001      	adds	r0, #1
 800685a:	d020      	beq.n	800689e <_printf_common+0xb2>
 800685c:	6823      	ldr	r3, [r4, #0]
 800685e:	68e5      	ldr	r5, [r4, #12]
 8006860:	f8d9 2000 	ldr.w	r2, [r9]
 8006864:	f003 0306 	and.w	r3, r3, #6
 8006868:	2b04      	cmp	r3, #4
 800686a:	bf08      	it	eq
 800686c:	1aad      	subeq	r5, r5, r2
 800686e:	68a3      	ldr	r3, [r4, #8]
 8006870:	6922      	ldr	r2, [r4, #16]
 8006872:	bf0c      	ite	eq
 8006874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006878:	2500      	movne	r5, #0
 800687a:	4293      	cmp	r3, r2
 800687c:	bfc4      	itt	gt
 800687e:	1a9b      	subgt	r3, r3, r2
 8006880:	18ed      	addgt	r5, r5, r3
 8006882:	f04f 0900 	mov.w	r9, #0
 8006886:	341a      	adds	r4, #26
 8006888:	454d      	cmp	r5, r9
 800688a:	d11a      	bne.n	80068c2 <_printf_common+0xd6>
 800688c:	2000      	movs	r0, #0
 800688e:	e008      	b.n	80068a2 <_printf_common+0xb6>
 8006890:	2301      	movs	r3, #1
 8006892:	4652      	mov	r2, sl
 8006894:	4639      	mov	r1, r7
 8006896:	4630      	mov	r0, r6
 8006898:	47c0      	blx	r8
 800689a:	3001      	adds	r0, #1
 800689c:	d103      	bne.n	80068a6 <_printf_common+0xba>
 800689e:	f04f 30ff 	mov.w	r0, #4294967295
 80068a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a6:	3501      	adds	r5, #1
 80068a8:	e7c3      	b.n	8006832 <_printf_common+0x46>
 80068aa:	18e1      	adds	r1, r4, r3
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	2030      	movs	r0, #48	; 0x30
 80068b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068b4:	4422      	add	r2, r4
 80068b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068be:	3302      	adds	r3, #2
 80068c0:	e7c5      	b.n	800684e <_printf_common+0x62>
 80068c2:	2301      	movs	r3, #1
 80068c4:	4622      	mov	r2, r4
 80068c6:	4639      	mov	r1, r7
 80068c8:	4630      	mov	r0, r6
 80068ca:	47c0      	blx	r8
 80068cc:	3001      	adds	r0, #1
 80068ce:	d0e6      	beq.n	800689e <_printf_common+0xb2>
 80068d0:	f109 0901 	add.w	r9, r9, #1
 80068d4:	e7d8      	b.n	8006888 <_printf_common+0x9c>
	...

080068d8 <_printf_i>:
 80068d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80068e0:	460c      	mov	r4, r1
 80068e2:	7e09      	ldrb	r1, [r1, #24]
 80068e4:	b085      	sub	sp, #20
 80068e6:	296e      	cmp	r1, #110	; 0x6e
 80068e8:	4617      	mov	r7, r2
 80068ea:	4606      	mov	r6, r0
 80068ec:	4698      	mov	r8, r3
 80068ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068f0:	f000 80b3 	beq.w	8006a5a <_printf_i+0x182>
 80068f4:	d822      	bhi.n	800693c <_printf_i+0x64>
 80068f6:	2963      	cmp	r1, #99	; 0x63
 80068f8:	d036      	beq.n	8006968 <_printf_i+0x90>
 80068fa:	d80a      	bhi.n	8006912 <_printf_i+0x3a>
 80068fc:	2900      	cmp	r1, #0
 80068fe:	f000 80b9 	beq.w	8006a74 <_printf_i+0x19c>
 8006902:	2958      	cmp	r1, #88	; 0x58
 8006904:	f000 8083 	beq.w	8006a0e <_printf_i+0x136>
 8006908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800690c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006910:	e032      	b.n	8006978 <_printf_i+0xa0>
 8006912:	2964      	cmp	r1, #100	; 0x64
 8006914:	d001      	beq.n	800691a <_printf_i+0x42>
 8006916:	2969      	cmp	r1, #105	; 0x69
 8006918:	d1f6      	bne.n	8006908 <_printf_i+0x30>
 800691a:	6820      	ldr	r0, [r4, #0]
 800691c:	6813      	ldr	r3, [r2, #0]
 800691e:	0605      	lsls	r5, r0, #24
 8006920:	f103 0104 	add.w	r1, r3, #4
 8006924:	d52a      	bpl.n	800697c <_printf_i+0xa4>
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6011      	str	r1, [r2, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	da03      	bge.n	8006936 <_printf_i+0x5e>
 800692e:	222d      	movs	r2, #45	; 0x2d
 8006930:	425b      	negs	r3, r3
 8006932:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006936:	486f      	ldr	r0, [pc, #444]	; (8006af4 <_printf_i+0x21c>)
 8006938:	220a      	movs	r2, #10
 800693a:	e039      	b.n	80069b0 <_printf_i+0xd8>
 800693c:	2973      	cmp	r1, #115	; 0x73
 800693e:	f000 809d 	beq.w	8006a7c <_printf_i+0x1a4>
 8006942:	d808      	bhi.n	8006956 <_printf_i+0x7e>
 8006944:	296f      	cmp	r1, #111	; 0x6f
 8006946:	d020      	beq.n	800698a <_printf_i+0xb2>
 8006948:	2970      	cmp	r1, #112	; 0x70
 800694a:	d1dd      	bne.n	8006908 <_printf_i+0x30>
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	f043 0320 	orr.w	r3, r3, #32
 8006952:	6023      	str	r3, [r4, #0]
 8006954:	e003      	b.n	800695e <_printf_i+0x86>
 8006956:	2975      	cmp	r1, #117	; 0x75
 8006958:	d017      	beq.n	800698a <_printf_i+0xb2>
 800695a:	2978      	cmp	r1, #120	; 0x78
 800695c:	d1d4      	bne.n	8006908 <_printf_i+0x30>
 800695e:	2378      	movs	r3, #120	; 0x78
 8006960:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006964:	4864      	ldr	r0, [pc, #400]	; (8006af8 <_printf_i+0x220>)
 8006966:	e055      	b.n	8006a14 <_printf_i+0x13c>
 8006968:	6813      	ldr	r3, [r2, #0]
 800696a:	1d19      	adds	r1, r3, #4
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6011      	str	r1, [r2, #0]
 8006970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006978:	2301      	movs	r3, #1
 800697a:	e08c      	b.n	8006a96 <_printf_i+0x1be>
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6011      	str	r1, [r2, #0]
 8006980:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006984:	bf18      	it	ne
 8006986:	b21b      	sxthne	r3, r3
 8006988:	e7cf      	b.n	800692a <_printf_i+0x52>
 800698a:	6813      	ldr	r3, [r2, #0]
 800698c:	6825      	ldr	r5, [r4, #0]
 800698e:	1d18      	adds	r0, r3, #4
 8006990:	6010      	str	r0, [r2, #0]
 8006992:	0628      	lsls	r0, r5, #24
 8006994:	d501      	bpl.n	800699a <_printf_i+0xc2>
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	e002      	b.n	80069a0 <_printf_i+0xc8>
 800699a:	0668      	lsls	r0, r5, #25
 800699c:	d5fb      	bpl.n	8006996 <_printf_i+0xbe>
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	4854      	ldr	r0, [pc, #336]	; (8006af4 <_printf_i+0x21c>)
 80069a2:	296f      	cmp	r1, #111	; 0x6f
 80069a4:	bf14      	ite	ne
 80069a6:	220a      	movne	r2, #10
 80069a8:	2208      	moveq	r2, #8
 80069aa:	2100      	movs	r1, #0
 80069ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069b0:	6865      	ldr	r5, [r4, #4]
 80069b2:	60a5      	str	r5, [r4, #8]
 80069b4:	2d00      	cmp	r5, #0
 80069b6:	f2c0 8095 	blt.w	8006ae4 <_printf_i+0x20c>
 80069ba:	6821      	ldr	r1, [r4, #0]
 80069bc:	f021 0104 	bic.w	r1, r1, #4
 80069c0:	6021      	str	r1, [r4, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d13d      	bne.n	8006a42 <_printf_i+0x16a>
 80069c6:	2d00      	cmp	r5, #0
 80069c8:	f040 808e 	bne.w	8006ae8 <_printf_i+0x210>
 80069cc:	4665      	mov	r5, ip
 80069ce:	2a08      	cmp	r2, #8
 80069d0:	d10b      	bne.n	80069ea <_printf_i+0x112>
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	07db      	lsls	r3, r3, #31
 80069d6:	d508      	bpl.n	80069ea <_printf_i+0x112>
 80069d8:	6923      	ldr	r3, [r4, #16]
 80069da:	6862      	ldr	r2, [r4, #4]
 80069dc:	429a      	cmp	r2, r3
 80069de:	bfde      	ittt	le
 80069e0:	2330      	movle	r3, #48	; 0x30
 80069e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80069ea:	ebac 0305 	sub.w	r3, ip, r5
 80069ee:	6123      	str	r3, [r4, #16]
 80069f0:	f8cd 8000 	str.w	r8, [sp]
 80069f4:	463b      	mov	r3, r7
 80069f6:	aa03      	add	r2, sp, #12
 80069f8:	4621      	mov	r1, r4
 80069fa:	4630      	mov	r0, r6
 80069fc:	f7ff fef6 	bl	80067ec <_printf_common>
 8006a00:	3001      	adds	r0, #1
 8006a02:	d14d      	bne.n	8006aa0 <_printf_i+0x1c8>
 8006a04:	f04f 30ff 	mov.w	r0, #4294967295
 8006a08:	b005      	add	sp, #20
 8006a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a0e:	4839      	ldr	r0, [pc, #228]	; (8006af4 <_printf_i+0x21c>)
 8006a10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006a14:	6813      	ldr	r3, [r2, #0]
 8006a16:	6821      	ldr	r1, [r4, #0]
 8006a18:	1d1d      	adds	r5, r3, #4
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6015      	str	r5, [r2, #0]
 8006a1e:	060a      	lsls	r2, r1, #24
 8006a20:	d50b      	bpl.n	8006a3a <_printf_i+0x162>
 8006a22:	07ca      	lsls	r2, r1, #31
 8006a24:	bf44      	itt	mi
 8006a26:	f041 0120 	orrmi.w	r1, r1, #32
 8006a2a:	6021      	strmi	r1, [r4, #0]
 8006a2c:	b91b      	cbnz	r3, 8006a36 <_printf_i+0x15e>
 8006a2e:	6822      	ldr	r2, [r4, #0]
 8006a30:	f022 0220 	bic.w	r2, r2, #32
 8006a34:	6022      	str	r2, [r4, #0]
 8006a36:	2210      	movs	r2, #16
 8006a38:	e7b7      	b.n	80069aa <_printf_i+0xd2>
 8006a3a:	064d      	lsls	r5, r1, #25
 8006a3c:	bf48      	it	mi
 8006a3e:	b29b      	uxthmi	r3, r3
 8006a40:	e7ef      	b.n	8006a22 <_printf_i+0x14a>
 8006a42:	4665      	mov	r5, ip
 8006a44:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a48:	fb02 3311 	mls	r3, r2, r1, r3
 8006a4c:	5cc3      	ldrb	r3, [r0, r3]
 8006a4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006a52:	460b      	mov	r3, r1
 8006a54:	2900      	cmp	r1, #0
 8006a56:	d1f5      	bne.n	8006a44 <_printf_i+0x16c>
 8006a58:	e7b9      	b.n	80069ce <_printf_i+0xf6>
 8006a5a:	6813      	ldr	r3, [r2, #0]
 8006a5c:	6825      	ldr	r5, [r4, #0]
 8006a5e:	6961      	ldr	r1, [r4, #20]
 8006a60:	1d18      	adds	r0, r3, #4
 8006a62:	6010      	str	r0, [r2, #0]
 8006a64:	0628      	lsls	r0, r5, #24
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	d501      	bpl.n	8006a6e <_printf_i+0x196>
 8006a6a:	6019      	str	r1, [r3, #0]
 8006a6c:	e002      	b.n	8006a74 <_printf_i+0x19c>
 8006a6e:	066a      	lsls	r2, r5, #25
 8006a70:	d5fb      	bpl.n	8006a6a <_printf_i+0x192>
 8006a72:	8019      	strh	r1, [r3, #0]
 8006a74:	2300      	movs	r3, #0
 8006a76:	6123      	str	r3, [r4, #16]
 8006a78:	4665      	mov	r5, ip
 8006a7a:	e7b9      	b.n	80069f0 <_printf_i+0x118>
 8006a7c:	6813      	ldr	r3, [r2, #0]
 8006a7e:	1d19      	adds	r1, r3, #4
 8006a80:	6011      	str	r1, [r2, #0]
 8006a82:	681d      	ldr	r5, [r3, #0]
 8006a84:	6862      	ldr	r2, [r4, #4]
 8006a86:	2100      	movs	r1, #0
 8006a88:	4628      	mov	r0, r5
 8006a8a:	f7f9 fc29 	bl	80002e0 <memchr>
 8006a8e:	b108      	cbz	r0, 8006a94 <_printf_i+0x1bc>
 8006a90:	1b40      	subs	r0, r0, r5
 8006a92:	6060      	str	r0, [r4, #4]
 8006a94:	6863      	ldr	r3, [r4, #4]
 8006a96:	6123      	str	r3, [r4, #16]
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a9e:	e7a7      	b.n	80069f0 <_printf_i+0x118>
 8006aa0:	6923      	ldr	r3, [r4, #16]
 8006aa2:	462a      	mov	r2, r5
 8006aa4:	4639      	mov	r1, r7
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	47c0      	blx	r8
 8006aaa:	3001      	adds	r0, #1
 8006aac:	d0aa      	beq.n	8006a04 <_printf_i+0x12c>
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	079b      	lsls	r3, r3, #30
 8006ab2:	d413      	bmi.n	8006adc <_printf_i+0x204>
 8006ab4:	68e0      	ldr	r0, [r4, #12]
 8006ab6:	9b03      	ldr	r3, [sp, #12]
 8006ab8:	4298      	cmp	r0, r3
 8006aba:	bfb8      	it	lt
 8006abc:	4618      	movlt	r0, r3
 8006abe:	e7a3      	b.n	8006a08 <_printf_i+0x130>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	464a      	mov	r2, r9
 8006ac4:	4639      	mov	r1, r7
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	47c0      	blx	r8
 8006aca:	3001      	adds	r0, #1
 8006acc:	d09a      	beq.n	8006a04 <_printf_i+0x12c>
 8006ace:	3501      	adds	r5, #1
 8006ad0:	68e3      	ldr	r3, [r4, #12]
 8006ad2:	9a03      	ldr	r2, [sp, #12]
 8006ad4:	1a9b      	subs	r3, r3, r2
 8006ad6:	42ab      	cmp	r3, r5
 8006ad8:	dcf2      	bgt.n	8006ac0 <_printf_i+0x1e8>
 8006ada:	e7eb      	b.n	8006ab4 <_printf_i+0x1dc>
 8006adc:	2500      	movs	r5, #0
 8006ade:	f104 0919 	add.w	r9, r4, #25
 8006ae2:	e7f5      	b.n	8006ad0 <_printf_i+0x1f8>
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1ac      	bne.n	8006a42 <_printf_i+0x16a>
 8006ae8:	7803      	ldrb	r3, [r0, #0]
 8006aea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006aee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006af2:	e76c      	b.n	80069ce <_printf_i+0xf6>
 8006af4:	08006d7d 	.word	0x08006d7d
 8006af8:	08006d8e 	.word	0x08006d8e

08006afc <memmove>:
 8006afc:	4288      	cmp	r0, r1
 8006afe:	b510      	push	{r4, lr}
 8006b00:	eb01 0302 	add.w	r3, r1, r2
 8006b04:	d807      	bhi.n	8006b16 <memmove+0x1a>
 8006b06:	1e42      	subs	r2, r0, #1
 8006b08:	4299      	cmp	r1, r3
 8006b0a:	d00a      	beq.n	8006b22 <memmove+0x26>
 8006b0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b10:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006b14:	e7f8      	b.n	8006b08 <memmove+0xc>
 8006b16:	4283      	cmp	r3, r0
 8006b18:	d9f5      	bls.n	8006b06 <memmove+0xa>
 8006b1a:	1881      	adds	r1, r0, r2
 8006b1c:	1ad2      	subs	r2, r2, r3
 8006b1e:	42d3      	cmn	r3, r2
 8006b20:	d100      	bne.n	8006b24 <memmove+0x28>
 8006b22:	bd10      	pop	{r4, pc}
 8006b24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b28:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006b2c:	e7f7      	b.n	8006b1e <memmove+0x22>
	...

08006b30 <_free_r>:
 8006b30:	b538      	push	{r3, r4, r5, lr}
 8006b32:	4605      	mov	r5, r0
 8006b34:	2900      	cmp	r1, #0
 8006b36:	d045      	beq.n	8006bc4 <_free_r+0x94>
 8006b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b3c:	1f0c      	subs	r4, r1, #4
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	bfb8      	it	lt
 8006b42:	18e4      	addlt	r4, r4, r3
 8006b44:	f000 f8d2 	bl	8006cec <__malloc_lock>
 8006b48:	4a1f      	ldr	r2, [pc, #124]	; (8006bc8 <_free_r+0x98>)
 8006b4a:	6813      	ldr	r3, [r2, #0]
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	b933      	cbnz	r3, 8006b5e <_free_r+0x2e>
 8006b50:	6063      	str	r3, [r4, #4]
 8006b52:	6014      	str	r4, [r2, #0]
 8006b54:	4628      	mov	r0, r5
 8006b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b5a:	f000 b8c8 	b.w	8006cee <__malloc_unlock>
 8006b5e:	42a3      	cmp	r3, r4
 8006b60:	d90c      	bls.n	8006b7c <_free_r+0x4c>
 8006b62:	6821      	ldr	r1, [r4, #0]
 8006b64:	1862      	adds	r2, r4, r1
 8006b66:	4293      	cmp	r3, r2
 8006b68:	bf04      	itt	eq
 8006b6a:	681a      	ldreq	r2, [r3, #0]
 8006b6c:	685b      	ldreq	r3, [r3, #4]
 8006b6e:	6063      	str	r3, [r4, #4]
 8006b70:	bf04      	itt	eq
 8006b72:	1852      	addeq	r2, r2, r1
 8006b74:	6022      	streq	r2, [r4, #0]
 8006b76:	6004      	str	r4, [r0, #0]
 8006b78:	e7ec      	b.n	8006b54 <_free_r+0x24>
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	b10a      	cbz	r2, 8006b84 <_free_r+0x54>
 8006b80:	42a2      	cmp	r2, r4
 8006b82:	d9fa      	bls.n	8006b7a <_free_r+0x4a>
 8006b84:	6819      	ldr	r1, [r3, #0]
 8006b86:	1858      	adds	r0, r3, r1
 8006b88:	42a0      	cmp	r0, r4
 8006b8a:	d10b      	bne.n	8006ba4 <_free_r+0x74>
 8006b8c:	6820      	ldr	r0, [r4, #0]
 8006b8e:	4401      	add	r1, r0
 8006b90:	1858      	adds	r0, r3, r1
 8006b92:	4282      	cmp	r2, r0
 8006b94:	6019      	str	r1, [r3, #0]
 8006b96:	d1dd      	bne.n	8006b54 <_free_r+0x24>
 8006b98:	6810      	ldr	r0, [r2, #0]
 8006b9a:	6852      	ldr	r2, [r2, #4]
 8006b9c:	605a      	str	r2, [r3, #4]
 8006b9e:	4401      	add	r1, r0
 8006ba0:	6019      	str	r1, [r3, #0]
 8006ba2:	e7d7      	b.n	8006b54 <_free_r+0x24>
 8006ba4:	d902      	bls.n	8006bac <_free_r+0x7c>
 8006ba6:	230c      	movs	r3, #12
 8006ba8:	602b      	str	r3, [r5, #0]
 8006baa:	e7d3      	b.n	8006b54 <_free_r+0x24>
 8006bac:	6820      	ldr	r0, [r4, #0]
 8006bae:	1821      	adds	r1, r4, r0
 8006bb0:	428a      	cmp	r2, r1
 8006bb2:	bf04      	itt	eq
 8006bb4:	6811      	ldreq	r1, [r2, #0]
 8006bb6:	6852      	ldreq	r2, [r2, #4]
 8006bb8:	6062      	str	r2, [r4, #4]
 8006bba:	bf04      	itt	eq
 8006bbc:	1809      	addeq	r1, r1, r0
 8006bbe:	6021      	streq	r1, [r4, #0]
 8006bc0:	605c      	str	r4, [r3, #4]
 8006bc2:	e7c7      	b.n	8006b54 <_free_r+0x24>
 8006bc4:	bd38      	pop	{r3, r4, r5, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20000184 	.word	0x20000184

08006bcc <_malloc_r>:
 8006bcc:	b570      	push	{r4, r5, r6, lr}
 8006bce:	1ccd      	adds	r5, r1, #3
 8006bd0:	f025 0503 	bic.w	r5, r5, #3
 8006bd4:	3508      	adds	r5, #8
 8006bd6:	2d0c      	cmp	r5, #12
 8006bd8:	bf38      	it	cc
 8006bda:	250c      	movcc	r5, #12
 8006bdc:	2d00      	cmp	r5, #0
 8006bde:	4606      	mov	r6, r0
 8006be0:	db01      	blt.n	8006be6 <_malloc_r+0x1a>
 8006be2:	42a9      	cmp	r1, r5
 8006be4:	d903      	bls.n	8006bee <_malloc_r+0x22>
 8006be6:	230c      	movs	r3, #12
 8006be8:	6033      	str	r3, [r6, #0]
 8006bea:	2000      	movs	r0, #0
 8006bec:	bd70      	pop	{r4, r5, r6, pc}
 8006bee:	f000 f87d 	bl	8006cec <__malloc_lock>
 8006bf2:	4a21      	ldr	r2, [pc, #132]	; (8006c78 <_malloc_r+0xac>)
 8006bf4:	6814      	ldr	r4, [r2, #0]
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	b991      	cbnz	r1, 8006c20 <_malloc_r+0x54>
 8006bfa:	4c20      	ldr	r4, [pc, #128]	; (8006c7c <_malloc_r+0xb0>)
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	b91b      	cbnz	r3, 8006c08 <_malloc_r+0x3c>
 8006c00:	4630      	mov	r0, r6
 8006c02:	f000 f863 	bl	8006ccc <_sbrk_r>
 8006c06:	6020      	str	r0, [r4, #0]
 8006c08:	4629      	mov	r1, r5
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f000 f85e 	bl	8006ccc <_sbrk_r>
 8006c10:	1c43      	adds	r3, r0, #1
 8006c12:	d124      	bne.n	8006c5e <_malloc_r+0x92>
 8006c14:	230c      	movs	r3, #12
 8006c16:	6033      	str	r3, [r6, #0]
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f000 f868 	bl	8006cee <__malloc_unlock>
 8006c1e:	e7e4      	b.n	8006bea <_malloc_r+0x1e>
 8006c20:	680b      	ldr	r3, [r1, #0]
 8006c22:	1b5b      	subs	r3, r3, r5
 8006c24:	d418      	bmi.n	8006c58 <_malloc_r+0x8c>
 8006c26:	2b0b      	cmp	r3, #11
 8006c28:	d90f      	bls.n	8006c4a <_malloc_r+0x7e>
 8006c2a:	600b      	str	r3, [r1, #0]
 8006c2c:	50cd      	str	r5, [r1, r3]
 8006c2e:	18cc      	adds	r4, r1, r3
 8006c30:	4630      	mov	r0, r6
 8006c32:	f000 f85c 	bl	8006cee <__malloc_unlock>
 8006c36:	f104 000b 	add.w	r0, r4, #11
 8006c3a:	1d23      	adds	r3, r4, #4
 8006c3c:	f020 0007 	bic.w	r0, r0, #7
 8006c40:	1ac3      	subs	r3, r0, r3
 8006c42:	d0d3      	beq.n	8006bec <_malloc_r+0x20>
 8006c44:	425a      	negs	r2, r3
 8006c46:	50e2      	str	r2, [r4, r3]
 8006c48:	e7d0      	b.n	8006bec <_malloc_r+0x20>
 8006c4a:	428c      	cmp	r4, r1
 8006c4c:	684b      	ldr	r3, [r1, #4]
 8006c4e:	bf16      	itet	ne
 8006c50:	6063      	strne	r3, [r4, #4]
 8006c52:	6013      	streq	r3, [r2, #0]
 8006c54:	460c      	movne	r4, r1
 8006c56:	e7eb      	b.n	8006c30 <_malloc_r+0x64>
 8006c58:	460c      	mov	r4, r1
 8006c5a:	6849      	ldr	r1, [r1, #4]
 8006c5c:	e7cc      	b.n	8006bf8 <_malloc_r+0x2c>
 8006c5e:	1cc4      	adds	r4, r0, #3
 8006c60:	f024 0403 	bic.w	r4, r4, #3
 8006c64:	42a0      	cmp	r0, r4
 8006c66:	d005      	beq.n	8006c74 <_malloc_r+0xa8>
 8006c68:	1a21      	subs	r1, r4, r0
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f000 f82e 	bl	8006ccc <_sbrk_r>
 8006c70:	3001      	adds	r0, #1
 8006c72:	d0cf      	beq.n	8006c14 <_malloc_r+0x48>
 8006c74:	6025      	str	r5, [r4, #0]
 8006c76:	e7db      	b.n	8006c30 <_malloc_r+0x64>
 8006c78:	20000184 	.word	0x20000184
 8006c7c:	20000188 	.word	0x20000188

08006c80 <_realloc_r>:
 8006c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c82:	4607      	mov	r7, r0
 8006c84:	4614      	mov	r4, r2
 8006c86:	460e      	mov	r6, r1
 8006c88:	b921      	cbnz	r1, 8006c94 <_realloc_r+0x14>
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c90:	f7ff bf9c 	b.w	8006bcc <_malloc_r>
 8006c94:	b922      	cbnz	r2, 8006ca0 <_realloc_r+0x20>
 8006c96:	f7ff ff4b 	bl	8006b30 <_free_r>
 8006c9a:	4625      	mov	r5, r4
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ca0:	f000 f826 	bl	8006cf0 <_malloc_usable_size_r>
 8006ca4:	42a0      	cmp	r0, r4
 8006ca6:	d20f      	bcs.n	8006cc8 <_realloc_r+0x48>
 8006ca8:	4621      	mov	r1, r4
 8006caa:	4638      	mov	r0, r7
 8006cac:	f7ff ff8e 	bl	8006bcc <_malloc_r>
 8006cb0:	4605      	mov	r5, r0
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d0f2      	beq.n	8006c9c <_realloc_r+0x1c>
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4622      	mov	r2, r4
 8006cba:	f7ff fc11 	bl	80064e0 <memcpy>
 8006cbe:	4631      	mov	r1, r6
 8006cc0:	4638      	mov	r0, r7
 8006cc2:	f7ff ff35 	bl	8006b30 <_free_r>
 8006cc6:	e7e9      	b.n	8006c9c <_realloc_r+0x1c>
 8006cc8:	4635      	mov	r5, r6
 8006cca:	e7e7      	b.n	8006c9c <_realloc_r+0x1c>

08006ccc <_sbrk_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4c06      	ldr	r4, [pc, #24]	; (8006ce8 <_sbrk_r+0x1c>)
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	4605      	mov	r5, r0
 8006cd4:	4608      	mov	r0, r1
 8006cd6:	6023      	str	r3, [r4, #0]
 8006cd8:	f7fa f8b0 	bl	8000e3c <_sbrk>
 8006cdc:	1c43      	adds	r3, r0, #1
 8006cde:	d102      	bne.n	8006ce6 <_sbrk_r+0x1a>
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	b103      	cbz	r3, 8006ce6 <_sbrk_r+0x1a>
 8006ce4:	602b      	str	r3, [r5, #0]
 8006ce6:	bd38      	pop	{r3, r4, r5, pc}
 8006ce8:	200002ec 	.word	0x200002ec

08006cec <__malloc_lock>:
 8006cec:	4770      	bx	lr

08006cee <__malloc_unlock>:
 8006cee:	4770      	bx	lr

08006cf0 <_malloc_usable_size_r>:
 8006cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cf4:	1f18      	subs	r0, r3, #4
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	bfbc      	itt	lt
 8006cfa:	580b      	ldrlt	r3, [r1, r0]
 8006cfc:	18c0      	addlt	r0, r0, r3
 8006cfe:	4770      	bx	lr

08006d00 <_init>:
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	bf00      	nop
 8006d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d06:	bc08      	pop	{r3}
 8006d08:	469e      	mov	lr, r3
 8006d0a:	4770      	bx	lr

08006d0c <_fini>:
 8006d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0e:	bf00      	nop
 8006d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d12:	bc08      	pop	{r3}
 8006d14:	469e      	mov	lr, r3
 8006d16:	4770      	bx	lr
