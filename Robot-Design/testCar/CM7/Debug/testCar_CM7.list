
testCar_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c5c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006efc  08006efc  00016efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006f84  08006f84  00016f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006f8c  08006f8c  00016f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006f90  08006f90  00016f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000015c  20000000  08006f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000194  2000015c  080070f0  0002015c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002f0  080070f0  000202f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001aa9d  00000000  00000000  0002018a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002cbf  00000000  00000000  0003ac27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ed0  00000000  00000000  0003d8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000db8  00000000  00000000  0003e7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00038e25  00000000  00000000  0003f570  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e640  00000000  00000000  00078395  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00177918  00000000  00000000  000869d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  001fe2ed  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004068  00000000  00000000  001fe368  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2000015c 	.word	0x2000015c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006ee4 	.word	0x08006ee4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000160 	.word	0x20000160
 80002dc:	08006ee4 	.word	0x08006ee4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <SystemInit+0x104>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a3e      	ldr	r2, [pc, #248]	; (8000784 <SystemInit+0x104>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <SystemInit+0x104>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <SystemInit+0x104>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <SystemInit+0x108>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <SystemInit+0x108>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <SystemInit+0x10c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x10c>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <SystemInit+0x10c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <SystemInit+0x10c>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492e      	ldr	r1, [pc, #184]	; (800078c <SystemInit+0x10c>)
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x110>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemInit+0x108>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	d907      	bls.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemInit+0x108>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <SystemInit+0x108>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemInit+0x10c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemInit+0x10c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemInit+0x10c>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemInit+0x10c>)
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <SystemInit+0x114>)
 800070c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemInit+0x10c>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemInit+0x118>)
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <SystemInit+0x10c>)
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemInit+0x11c>)
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <SystemInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <SystemInit+0x10c>)
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <SystemInit+0x11c>)
 8000724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <SystemInit+0x10c>)
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <SystemInit+0x11c>)
 8000730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <SystemInit+0x10c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <SystemInit+0x10c>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <SystemInit+0x10c>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <SystemInit+0x120>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <SystemInit+0x120>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x124>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <SystemInit+0x128>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x12c>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x130>)
 800076c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000770:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x104>)
 8000774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000778:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	52002000 	.word	0x52002000
 800078c:	58024400 	.word	0x58024400
 8000790:	eaf6ed7f 	.word	0xeaf6ed7f
 8000794:	02020200 	.word	0x02020200
 8000798:	01ff0000 	.word	0x01ff0000
 800079c:	01010280 	.word	0x01010280
 80007a0:	580000c0 	.word	0x580000c0
 80007a4:	5c001000 	.word	0x5c001000
 80007a8:	ffff0000 	.word	0xffff0000
 80007ac:	51008108 	.word	0x51008108
 80007b0:	52004000 	.word	0x52004000

080007b4 <init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);  // left+
 80007b8:	2200      	movs	r2, #0
 80007ba:	2120      	movs	r1, #32
 80007bc:	480a      	ldr	r0, [pc, #40]	; (80007e8 <init+0x34>)
 80007be:	f001 fe11 	bl	80023e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);  // left-
 80007c2:	2200      	movs	r2, #0
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	4808      	ldr	r0, [pc, #32]	; (80007e8 <init+0x34>)
 80007c8:	f001 fe0c 	bl	80023e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);  // right+
 80007cc:	2200      	movs	r2, #0
 80007ce:	2120      	movs	r1, #32
 80007d0:	4806      	ldr	r0, [pc, #24]	; (80007ec <init+0x38>)
 80007d2:	f001 fe07 	bl	80023e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // right-
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <init+0x3c>)
 80007de:	f001 fe01 	bl	80023e4 <HAL_GPIO_WritePin>
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	58020000 	.word	0x58020000
 80007ec:	58020400 	.word	0x58020400
 80007f0:	58020c00 	.word	0x58020c00

080007f4 <turnLeft>:
void turnLeft()
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2140      	movs	r1, #64	; 0x40
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <turnLeft+0x1c>)
 80007fe:	f001 fdf1 	bl	80023e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	2120      	movs	r1, #32
 8000806:	4803      	ldr	r0, [pc, #12]	; (8000814 <turnLeft+0x20>)
 8000808:	f001 fdec 	bl	80023e4 <HAL_GPIO_WritePin>
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	58020000 	.word	0x58020000
 8000814:	58020400 	.word	0x58020400

08000818 <turnRight>:

void turnRight()
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2120      	movs	r1, #32
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <turnRight+0x20>)
 8000822:	f001 fddf 	bl	80023e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000826:	2201      	movs	r2, #1
 8000828:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <turnRight+0x24>)
 800082e:	f001 fdd9 	bl	80023e4 <HAL_GPIO_WritePin>
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	58020000 	.word	0x58020000
 800083c:	58020c00 	.word	0x58020c00

08000840 <forward>:

void forward()
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000844:	2201      	movs	r2, #1
 8000846:	2140      	movs	r1, #64	; 0x40
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <forward+0x20>)
 800084a:	f001 fdcb 	bl	80023e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000854:	4803      	ldr	r0, [pc, #12]	; (8000864 <forward+0x24>)
 8000856:	f001 fdc5 	bl	80023e4 <HAL_GPIO_WritePin>
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	58020000 	.word	0x58020000
 8000864:	58020c00 	.word	0x58020c00

08000868 <backward>:
void backward()
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	2120      	movs	r1, #32
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <backward+0x1c>)
 8000872:	f001 fdb7 	bl	80023e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000876:	2201      	movs	r2, #1
 8000878:	2120      	movs	r1, #32
 800087a:	4803      	ldr	r0, [pc, #12]	; (8000888 <backward+0x20>)
 800087c:	f001 fdb2 	bl	80023e4 <HAL_GPIO_WritePin>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58020000 	.word	0x58020000
 8000888:	58020400 	.word	0x58020400

0800088c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
    int32_t timeout;
    /* USER CODE END Boot_Mode_Sequence_0 */

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /* Wait until CPU2 boots and enters in stop mode or timeout*/
    timeout = 0xFFFF;
 8000892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000896:	60fb      	str	r3, [r7, #12]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000898:	bf00      	nop
 800089a:	4b4a      	ldr	r3, [pc, #296]	; (80009c4 <main+0x138>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d004      	beq.n	80008b0 <main+0x24>
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	1e5a      	subs	r2, r3, #1
 80008aa:	60fa      	str	r2, [r7, #12]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	dcf4      	bgt.n	800089a <main+0xe>
        ;
    if (timeout < 0) {
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	da01      	bge.n	80008ba <main+0x2e>
        Error_Handler();
 80008b6:	f000 fabd 	bl	8000e34 <Error_Handler>
    }
    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80008ba:	f001 fa3f 	bl	8001d3c <HAL_Init>

    /* USER CODE BEGIN Init */
    tofInit(0);
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 fbca 	bl	8001058 <tofInit>
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80008c4:	f000 f88a 	bl	80009dc <SystemClock_Config>
    /* USER CODE BEGIN Boot_Mode_Sequence_2 */
    /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
    HSEM notification */
    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 80008c8:	4b3e      	ldr	r3, [pc, #248]	; (80009c4 <main+0x138>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ce:	4a3d      	ldr	r2, [pc, #244]	; (80009c4 <main+0x138>)
 80008d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d8:	4b3a      	ldr	r3, [pc, #232]	; (80009c4 <main+0x138>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
    /*Take HSEM */
    HAL_HSEM_FastTake(HSEM_ID_0);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f001 fd96 	bl	8002418 <HAL_HSEM_FastTake>
    /*Release HSEM in order to notify the CPU2(CM4)*/
    HAL_HSEM_Release(HSEM_ID_0, 0);
 80008ec:	2100      	movs	r1, #0
 80008ee:	2000      	movs	r0, #0
 80008f0:	f001 fdac 	bl	800244c <HAL_HSEM_Release>
    /* wait until CPU2 wakes up from stop mode */
    timeout = 0xFFFF;
 80008f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f8:	60fb      	str	r3, [r7, #12]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 80008fa:	bf00      	nop
 80008fc:	4b31      	ldr	r3, [pc, #196]	; (80009c4 <main+0x138>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000904:	2b00      	cmp	r3, #0
 8000906:	d104      	bne.n	8000912 <main+0x86>
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	1e5a      	subs	r2, r3, #1
 800090c:	60fa      	str	r2, [r7, #12]
 800090e:	2b00      	cmp	r3, #0
 8000910:	dcf4      	bgt.n	80008fc <main+0x70>
        ;
    if (timeout < 0) {
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2b00      	cmp	r3, #0
 8000916:	da01      	bge.n	800091c <main+0x90>
        Error_Handler();
 8000918:	f000 fa8c 	bl	8000e34 <Error_Handler>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800091c:	f000 f986 	bl	8000c2c <MX_GPIO_Init>
    MX_I2C1_Init();
 8000920:	f000 f8f8 	bl	8000b14 <MX_I2C1_Init>
    MX_USART3_UART_Init();
 8000924:	f000 f936 	bl	8000b94 <MX_USART3_UART_Init>
    /* USER CODE BEGIN 2 */
    HAL_UART_Transmit(&huart3, (uint8_t *)"Reset!\n\r", sizeof("Reset!\n\r") - 1, HAL_MAX_DELAY);
 8000928:	f04f 33ff 	mov.w	r3, #4294967295
 800092c:	2208      	movs	r2, #8
 800092e:	4926      	ldr	r1, [pc, #152]	; (80009c8 <main+0x13c>)
 8000930:	4826      	ldr	r0, [pc, #152]	; (80009cc <main+0x140>)
 8000932:	f004 fdcf 	bl	80054d4 <HAL_UART_Transmit>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        /* USER CODE END WHILE */

        iDistance = tofReadDistance();
 8000936:	f001 f993 	bl	8001c60 <tofReadDistance>
 800093a:	60b8      	str	r0, [r7, #8]
        speech_len = sprintf(speech_c, "Distance = %d\n\r", iDistance);
 800093c:	68ba      	ldr	r2, [r7, #8]
 800093e:	4924      	ldr	r1, [pc, #144]	; (80009d0 <main+0x144>)
 8000940:	4824      	ldr	r0, [pc, #144]	; (80009d4 <main+0x148>)
 8000942:	f005 fed3 	bl	80066ec <siprintf>
 8000946:	4602      	mov	r2, r0
 8000948:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <main+0x14c>)
 800094a:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit(&huart3, speech_c, speech_len, HAL_MAX_DELAY);
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <main+0x14c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	b29a      	uxth	r2, r3
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
 8000956:	491f      	ldr	r1, [pc, #124]	; (80009d4 <main+0x148>)
 8000958:	481c      	ldr	r0, [pc, #112]	; (80009cc <main+0x140>)
 800095a:	f004 fdbb 	bl	80054d4 <HAL_UART_Transmit>
        if (iDistance <= 120 && iDistance > 30) {
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	2b78      	cmp	r3, #120	; 0x78
 8000962:	dc27      	bgt.n	80009b4 <main+0x128>
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	2b1e      	cmp	r3, #30
 8000968:	dd24      	ble.n	80009b4 <main+0x128>
            init();
 800096a:	f7ff ff23 	bl	80007b4 <init>
            HAL_Delay(1000);
 800096e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000972:	f001 fa75 	bl	8001e60 <HAL_Delay>
            backward();
 8000976:	f7ff ff77 	bl	8000868 <backward>
            HAL_Delay(1000);
 800097a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800097e:	f001 fa6f 	bl	8001e60 <HAL_Delay>
            init();
 8000982:	f7ff ff17 	bl	80007b4 <init>
            turnRight();
 8000986:	f7ff ff47 	bl	8000818 <turnRight>
            HAL_Delay(1000);
 800098a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800098e:	f001 fa67 	bl	8001e60 <HAL_Delay>
            init();
 8000992:	f7ff ff0f 	bl	80007b4 <init>
            forward();
 8000996:	f7ff ff53 	bl	8000840 <forward>
            HAL_Delay(1000);
 800099a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800099e:	f001 fa5f 	bl	8001e60 <HAL_Delay>
            init();
 80009a2:	f7ff ff07 	bl	80007b4 <init>
            turnLeft();
 80009a6:	f7ff ff25 	bl	80007f4 <turnLeft>
            HAL_Delay(1000);
 80009aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ae:	f001 fa57 	bl	8001e60 <HAL_Delay>
 80009b2:	e006      	b.n	80009c2 <main+0x136>
        }
        else {
            init();
 80009b4:	f7ff fefe 	bl	80007b4 <init>
            forward();
 80009b8:	f7ff ff42 	bl	8000840 <forward>
            HAL_Delay(100);
 80009bc:	2064      	movs	r0, #100	; 0x64
 80009be:	f001 fa4f 	bl	8001e60 <HAL_Delay>
    while (1) {
 80009c2:	e7b8      	b.n	8000936 <main+0xaa>
 80009c4:	58024400 	.word	0x58024400
 80009c8:	08006efc 	.word	0x08006efc
 80009cc:	20000190 	.word	0x20000190
 80009d0:	08006f08 	.word	0x08006f08
 80009d4:	20000268 	.word	0x20000268
 80009d8:	2000018c 	.word	0x2000018c

080009dc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b0cc      	sub	sp, #304	; 0x130
 80009e0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009e6:	224c      	movs	r2, #76	; 0x4c
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f005 fe75 	bl	80066da <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009f4:	2220      	movs	r2, #32
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f005 fe6e 	bl	80066da <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	4618      	mov	r0, r3
 8000a04:	23bc      	movs	r3, #188	; 0xbc
 8000a06:	461a      	mov	r2, r3
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f005 fe66 	bl	80066da <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a0e:	2004      	movs	r0, #4
 8000a10:	f002 fa22 	bl	8002e58 <HAL_PWREx_ConfigSupply>
    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	4b3c      	ldr	r3, [pc, #240]	; (8000b0c <SystemClock_Config+0x130>)
 8000a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1e:	4a3b      	ldr	r2, [pc, #236]	; (8000b0c <SystemClock_Config+0x130>)
 8000a20:	f023 0301 	bic.w	r3, r3, #1
 8000a24:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a26:	4b39      	ldr	r3, [pc, #228]	; (8000b0c <SystemClock_Config+0x130>)
 8000a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2a:	f003 0201 	and.w	r2, r3, #1
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	4b37      	ldr	r3, [pc, #220]	; (8000b10 <SystemClock_Config+0x134>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a3a:	4a35      	ldr	r2, [pc, #212]	; (8000b10 <SystemClock_Config+0x134>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b33      	ldr	r3, [pc, #204]	; (8000b10 <SystemClock_Config+0x134>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	681b      	ldr	r3, [r3, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000a52:	bf00      	nop
 8000a54:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <SystemClock_Config+0x134>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a60:	d1f8      	bne.n	8000a54 <SystemClock_Config+0x78>
    }
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a62:	2302      	movs	r3, #2
 8000a64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6e:	2340      	movs	r3, #64	; 0x40
 8000a70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a7a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 fa44 	bl	8002f0c <HAL_RCC_OscConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0xb2>
        Error_Handler();
 8000a8a:	f000 f9d3 	bl	8000e34 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 8000a8e:	233f      	movs	r3, #63	; 0x3f
 8000a90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000abe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f002 fe31 	bl	800372c <HAL_RCC_ClockConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0xf8>
        Error_Handler();
 8000ad0:	f000 f9b0 	bl	8000e34 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_I2C1;
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	220a      	movs	r2, #10
 8000ada:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	675a      	str	r2, [r3, #116]	; 0x74
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ae4:	f107 0308 	add.w	r3, r7, #8
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	4618      	mov	r0, r3
 8000af4:	f003 f99e 	bl	8003e34 <HAL_RCCEx_PeriphCLKConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x126>
        Error_Handler();
 8000afe:	f000 f999 	bl	8000e34 <Error_Handler>
    }
}
 8000b02:	bf00      	nop
 8000b04:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	58000400 	.word	0x58000400
 8000b10:	58024800 	.word	0x58024800

08000b14 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b1a:	4a1c      	ldr	r2, [pc, #112]	; (8000b8c <MX_I2C1_Init+0x78>)
 8000b1c:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x10707DBC;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b20:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <MX_I2C1_Init+0x7c>)
 8000b22:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000b4e:	480e      	ldr	r0, [pc, #56]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b50:	f001 fc90 	bl	8002474 <HAL_I2C_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_I2C1_Init+0x4a>
        Error_Handler();
 8000b5a:	f000 f96b 	bl	8000e34 <Error_Handler>
    }
    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b62:	f002 f8e1 	bl	8002d28 <HAL_I2CEx_ConfigAnalogFilter>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_I2C1_Init+0x5c>
        Error_Handler();
 8000b6c:	f000 f962 	bl	8000e34 <Error_Handler>
    }
    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000b70:	2100      	movs	r1, #0
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b74:	f002 f923 	bl	8002dbe <HAL_I2CEx_ConfigDigitalFilter>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_I2C1_Init+0x6e>
        Error_Handler();
 8000b7e:	f000 f959 	bl	8000e34 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	2000021c 	.word	0x2000021c
 8000b8c:	40005400 	.word	0x40005400
 8000b90:	10707dbc 	.word	0x10707dbc

08000b94 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
    /* USER CODE END USART3_Init 0 */

    /* USER CODE BEGIN USART3_Init 1 */

    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 8000b98:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <MX_USART3_UART_Init+0x90>)
 8000b9a:	4a23      	ldr	r2, [pc, #140]	; (8000c28 <MX_USART3_UART_Init+0x94>)
 8000b9c:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 8000b9e:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <MX_USART3_UART_Init+0x90>)
 8000ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba4:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <MX_USART3_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <MX_USART3_UART_Init+0x90>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <MX_USART3_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_USART3_UART_Init+0x90>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <MX_USART3_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_USART3_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <MX_USART3_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
    huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_USART3_UART_Init+0x90>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_USART3_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000bdc:	4811      	ldr	r0, [pc, #68]	; (8000c24 <MX_USART3_UART_Init+0x90>)
 8000bde:	f004 fc29 	bl	8005434 <HAL_UART_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_USART3_UART_Init+0x58>
        Error_Handler();
 8000be8:	f000 f924 	bl	8000e34 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000bec:	2100      	movs	r1, #0
 8000bee:	480d      	ldr	r0, [pc, #52]	; (8000c24 <MX_USART3_UART_Init+0x90>)
 8000bf0:	f005 fc59 	bl	80064a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_USART3_UART_Init+0x6a>
        Error_Handler();
 8000bfa:	f000 f91b 	bl	8000e34 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4808      	ldr	r0, [pc, #32]	; (8000c24 <MX_USART3_UART_Init+0x90>)
 8000c02:	f005 fc8e 	bl	8006522 <HAL_UARTEx_SetRxFifoThreshold>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_USART3_UART_Init+0x7c>
        Error_Handler();
 8000c0c:	f000 f912 	bl	8000e34 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_USART3_UART_Init+0x90>)
 8000c12:	f005 fc0f 	bl	8006434 <HAL_UARTEx_DisableFifoMode>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USART3_UART_Init+0x8c>
        Error_Handler();
 8000c1c:	f000 f90a 	bl	8000e34 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000190 	.word	0x20000190
 8000c28:	40004800 	.word	0x40004800

08000c2c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08c      	sub	sp, #48	; 0x30
 8000c30:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	4b76      	ldr	r3, [pc, #472]	; (8000e1c <MX_GPIO_Init+0x1f0>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	4a74      	ldr	r2, [pc, #464]	; (8000e1c <MX_GPIO_Init+0x1f0>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c52:	4b72      	ldr	r3, [pc, #456]	; (8000e1c <MX_GPIO_Init+0x1f0>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c60:	4b6e      	ldr	r3, [pc, #440]	; (8000e1c <MX_GPIO_Init+0x1f0>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c66:	4a6d      	ldr	r2, [pc, #436]	; (8000e1c <MX_GPIO_Init+0x1f0>)
 8000c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c70:	4b6a      	ldr	r3, [pc, #424]	; (8000e1c <MX_GPIO_Init+0x1f0>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b67      	ldr	r3, [pc, #412]	; (8000e1c <MX_GPIO_Init+0x1f0>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c84:	4a65      	ldr	r2, [pc, #404]	; (8000e1c <MX_GPIO_Init+0x1f0>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8e:	4b63      	ldr	r3, [pc, #396]	; (8000e1c <MX_GPIO_Init+0x1f0>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9c:	4b5f      	ldr	r3, [pc, #380]	; (8000e1c <MX_GPIO_Init+0x1f0>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca2:	4a5e      	ldr	r2, [pc, #376]	; (8000e1c <MX_GPIO_Init+0x1f0>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cac:	4b5b      	ldr	r3, [pc, #364]	; (8000e1c <MX_GPIO_Init+0x1f0>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cba:	4b58      	ldr	r3, [pc, #352]	; (8000e1c <MX_GPIO_Init+0x1f0>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc0:	4a56      	ldr	r2, [pc, #344]	; (8000e1c <MX_GPIO_Init+0x1f0>)
 8000cc2:	f043 0308 	orr.w	r3, r3, #8
 8000cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cca:	4b54      	ldr	r3, [pc, #336]	; (8000e1c <MX_GPIO_Init+0x1f0>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd8:	4b50      	ldr	r3, [pc, #320]	; (8000e1c <MX_GPIO_Init+0x1f0>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cde:	4a4f      	ldr	r2, [pc, #316]	; (8000e1c <MX_GPIO_Init+0x1f0>)
 8000ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce8:	4b4c      	ldr	r3, [pc, #304]	; (8000e1c <MX_GPIO_Init+0x1f0>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_6, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2160      	movs	r1, #96	; 0x60
 8000cfa:	4849      	ldr	r0, [pc, #292]	; (8000e20 <MX_GPIO_Init+0x1f4>)
 8000cfc:	f001 fb72 	bl	80023e4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d06:	4847      	ldr	r0, [pc, #284]	; (8000e24 <MX_GPIO_Init+0x1f8>)
 8000d08:	f001 fb6c 	bl	80023e4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2120      	movs	r1, #32
 8000d10:	4845      	ldr	r0, [pc, #276]	; (8000e28 <MX_GPIO_Init+0x1fc>)
 8000d12:	f001 fb67 	bl	80023e4 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PC1 PC4 PC5 */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000d16:	2332      	movs	r3, #50	; 0x32
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d26:	230b      	movs	r3, #11
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	483e      	ldr	r0, [pc, #248]	; (8000e2c <MX_GPIO_Init+0x200>)
 8000d32:	f001 f9a7 	bl	8002084 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA1 PA2 PA7 */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000d36:	2386      	movs	r3, #134	; 0x86
 8000d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d46:	230b      	movs	r3, #11
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4833      	ldr	r0, [pc, #204]	; (8000e20 <MX_GPIO_Init+0x1f4>)
 8000d52:	f001 f997 	bl	8002084 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA5 PA6 */
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8000d56:	2360      	movs	r3, #96	; 0x60
 8000d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	482c      	ldr	r0, [pc, #176]	; (8000e20 <MX_GPIO_Init+0x1f4>)
 8000d6e:	f001 f989 	bl	8002084 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB13 */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d84:	230b      	movs	r3, #11
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4826      	ldr	r0, [pc, #152]	; (8000e28 <MX_GPIO_Init+0x1fc>)
 8000d90:	f001 f978 	bl	8002084 <HAL_GPIO_Init>

    /*Configure GPIO pin : PD14 */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	481d      	ldr	r0, [pc, #116]	; (8000e24 <MX_GPIO_Init+0x1f8>)
 8000dae:	f001 f969 	bl	8002084 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA8 PA11 PA12 */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12;
 8000db2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000dc4:	230a      	movs	r3, #10
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4814      	ldr	r0, [pc, #80]	; (8000e20 <MX_GPIO_Init+0x1f4>)
 8000dd0:	f001 f958 	bl	8002084 <HAL_GPIO_Init>

    /*Configure GPIO pins : PG11 PG13 */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8000dd4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de6:	230b      	movs	r3, #11
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	480f      	ldr	r0, [pc, #60]	; (8000e30 <MX_GPIO_Init+0x204>)
 8000df2:	f001 f947 	bl	8002084 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB5 */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000df6:	2320      	movs	r3, #32
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4806      	ldr	r0, [pc, #24]	; (8000e28 <MX_GPIO_Init+0x1fc>)
 8000e0e:	f001 f939 	bl	8002084 <HAL_GPIO_Init>
}
 8000e12:	bf00      	nop
 8000e14:	3730      	adds	r7, #48	; 0x30
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	58020000 	.word	0x58020000
 8000e24:	58020c00 	.word	0x58020c00
 8000e28:	58020400 	.word	0x58020400
 8000e2c:	58020800 	.word	0x58020800
 8000e30:	58021800 	.word	0x58021800

08000e34 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000e3a:	e7fe      	b.n	8000e3a <Error_Handler+0x6>

08000e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_MspInit+0x30>)
 8000e44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e48:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <HAL_MspInit+0x30>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_MspInit+0x30>)
 8000e54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	58024400 	.word	0x58024400

08000e70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a1a      	ldr	r2, [pc, #104]	; (8000ef8 <HAL_I2C_MspInit+0x88>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d12d      	bne.n	8000eee <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <HAL_I2C_MspInit+0x8c>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e98:	4a18      	ldr	r2, [pc, #96]	; (8000efc <HAL_I2C_MspInit+0x8c>)
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <HAL_I2C_MspInit+0x8c>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eb0:	23c0      	movs	r3, #192	; 0xc0
 8000eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb4:	2312      	movs	r3, #18
 8000eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480d      	ldr	r0, [pc, #52]	; (8000f00 <HAL_I2C_MspInit+0x90>)
 8000ecc:	f001 f8da 	bl	8002084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_I2C_MspInit+0x8c>)
 8000ed2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ed6:	4a09      	ldr	r2, [pc, #36]	; (8000efc <HAL_I2C_MspInit+0x8c>)
 8000ed8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000edc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_I2C_MspInit+0x8c>)
 8000ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ee6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	; 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40005400 	.word	0x40005400
 8000efc:	58024400 	.word	0x58024400
 8000f00:	58020400 	.word	0x58020400

08000f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a1a      	ldr	r2, [pc, #104]	; (8000f8c <HAL_UART_MspInit+0x88>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d12e      	bne.n	8000f84 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f26:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <HAL_UART_MspInit+0x8c>)
 8000f28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f2c:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <HAL_UART_MspInit+0x8c>)
 8000f2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <HAL_UART_MspInit+0x8c>)
 8000f38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_UART_MspInit+0x8c>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	4a11      	ldr	r2, [pc, #68]	; (8000f90 <HAL_UART_MspInit+0x8c>)
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_UART_MspInit+0x8c>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f74:	2307      	movs	r3, #7
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <HAL_UART_MspInit+0x90>)
 8000f80:	f001 f880 	bl	8002084 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	; 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40004800 	.word	0x40004800
 8000f90:	58024400 	.word	0x58024400
 8000f94:	58020c00 	.word	0x58020c00

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <NMI_Handler+0x4>

08000f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <MemManage_Handler+0x4>

08000faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe4:	f000 ff1c 	bl	8001e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff4:	4a14      	ldr	r2, [pc, #80]	; (8001048 <_sbrk+0x5c>)
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <_sbrk+0x60>)
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d102      	bne.n	800100e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <_sbrk+0x64>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <_sbrk+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	429a      	cmp	r2, r3
 800101a:	d207      	bcs.n	800102c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800101c:	f005 fb28 	bl	8006670 <__errno>
 8001020:	4602      	mov	r2, r0
 8001022:	230c      	movs	r3, #12
 8001024:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	e009      	b.n	8001040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <_sbrk+0x64>)
 800103c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20020000 	.word	0x20020000
 800104c:	00000400 	.word	0x00000400
 8001050:	20000178 	.word	0x20000178
 8001054:	200002f0 	.word	0x200002f0

08001058 <tofInit>:
// Opens a file system handle to the I2C device
// reads the calibration data and sets the device
// into auto sensing mode
//
int tofInit(int bLongRange)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
    //MX_I2C1_Init();
	return initSensor(bLongRange); // finally, initialize the magic numbers in the sensor
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 fcdd 	bl	8001a20 <initSensor>
 8001066:	4603      	mov	r3, r0

} /* tofInit() */
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <readReg16>:

//
// Read a pair of registers as a 16-bit value
//
static unsigned short readReg16(unsigned char ucAddr)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af02      	add	r7, sp, #8
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
unsigned char ucTemp[2];
int rc;

	HAL_I2C_Master_Transmit(&hi2c1, 0x52, &ucAddr, 1, 100);
 800107a:	1dfa      	adds	r2, r7, #7
 800107c:	2364      	movs	r3, #100	; 0x64
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2301      	movs	r3, #1
 8001082:	2152      	movs	r1, #82	; 0x52
 8001084:	480b      	ldr	r0, [pc, #44]	; (80010b4 <readReg16+0x44>)
 8001086:	f001 fa85 	bl	8002594 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, 0x52, ucTemp, 2, 100);
 800108a:	f107 020c 	add.w	r2, r7, #12
 800108e:	2364      	movs	r3, #100	; 0x64
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2302      	movs	r3, #2
 8001094:	2152      	movs	r1, #82	; 0x52
 8001096:	4807      	ldr	r0, [pc, #28]	; (80010b4 <readReg16+0x44>)
 8001098:	f001 fb70 	bl	800277c <HAL_I2C_Master_Receive>
	
	return (unsigned short)((ucTemp[0]<<8) + ucTemp[1]);
 800109c:	7b3b      	ldrb	r3, [r7, #12]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	7b7b      	ldrb	r3, [r7, #13]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4413      	add	r3, r2
 80010aa:	b29b      	uxth	r3, r3
} /* readReg16() */
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2000021c 	.word	0x2000021c

080010b8 <readReg>:

//
// Read a single register value from I2C device
//
static unsigned char readReg(unsigned char ucAddr)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af02      	add	r7, sp, #8
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
unsigned char ucTemp;
int rc;

    ucTemp = ucAddr;
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, 0x52, &ucAddr, 1, 100);
 80010c6:	1dfa      	adds	r2, r7, #7
 80010c8:	2364      	movs	r3, #100	; 0x64
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	2152      	movs	r1, #82	; 0x52
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <readReg+0x3c>)
 80010d2:	f001 fa5f 	bl	8002594 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, 0x52, ucTemp, 2, 100);
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	461a      	mov	r2, r3
 80010da:	2364      	movs	r3, #100	; 0x64
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2302      	movs	r3, #2
 80010e0:	2152      	movs	r1, #82	; 0x52
 80010e2:	4804      	ldr	r0, [pc, #16]	; (80010f4 <readReg+0x3c>)
 80010e4:	f001 fb4a 	bl	800277c <HAL_I2C_Master_Receive>
	return ucTemp;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
} /* ReadReg() */
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000021c 	.word	0x2000021c

080010f8 <readMulti>:

static void readMulti(unsigned char ucAddr, unsigned char *pBuf, int iCount)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	4603      	mov	r3, r0
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	73fb      	strb	r3, [r7, #15]
int rc;

	HAL_I2C_Master_Transmit(&hi2c1, 0x52, &ucAddr, 1, 100);
 8001106:	f107 020f 	add.w	r2, r7, #15
 800110a:	2364      	movs	r3, #100	; 0x64
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2301      	movs	r3, #1
 8001110:	2152      	movs	r1, #82	; 0x52
 8001112:	4809      	ldr	r0, [pc, #36]	; (8001138 <readMulti+0x40>)
 8001114:	f001 fa3e 	bl	8002594 <HAL_I2C_Master_Transmit>
    rc = HAL_I2C_Master_Receive(&hi2c1, 0x52, pBuf, iCount, 100);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	b29a      	uxth	r2, r3
 800111c:	2364      	movs	r3, #100	; 0x64
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	4613      	mov	r3, r2
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	2152      	movs	r1, #82	; 0x52
 8001126:	4804      	ldr	r0, [pc, #16]	; (8001138 <readMulti+0x40>)
 8001128:	f001 fb28 	bl	800277c <HAL_I2C_Master_Receive>
 800112c:	4603      	mov	r3, r0
 800112e:	617b      	str	r3, [r7, #20]
} /* readMulti() */
 8001130:	bf00      	nop
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2000021c 	.word	0x2000021c

0800113c <writeMulti>:

static void writeMulti(unsigned char ucAddr, unsigned char *pBuf, int iCount)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af02      	add	r7, sp, #8
 8001142:	4603      	mov	r3, r0
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	73fb      	strb	r3, [r7, #15]
unsigned char ucTemp[16];
int rc;

	ucTemp[0] = ucAddr;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	743b      	strb	r3, [r7, #16]
	memcpy(&ucTemp[1], pBuf, iCount);
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	3301      	adds	r3, #1
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	4618      	mov	r0, r3
 800115a:	f005 fab3 	bl	80066c4 <memcpy>
    HAL_I2C_Master_Transmit(&hi2c1, 0x52,&ucTemp, iCount+1, 100);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	b29b      	uxth	r3, r3
 8001162:	3301      	adds	r3, #1
 8001164:	b299      	uxth	r1, r3
 8001166:	f107 0210 	add.w	r2, r7, #16
 800116a:	2364      	movs	r3, #100	; 0x64
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	460b      	mov	r3, r1
 8001170:	2152      	movs	r1, #82	; 0x52
 8001172:	4803      	ldr	r0, [pc, #12]	; (8001180 <writeMulti+0x44>)
 8001174:	f001 fa0e 	bl	8002594 <HAL_I2C_Master_Transmit>
} /* writeMulti() */
 8001178:	bf00      	nop
 800117a:	3720      	adds	r7, #32
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	2000021c 	.word	0x2000021c

08001184 <writeReg16>:
//
// Write a 16-bit value to a register
//
static void writeReg16(unsigned char ucAddr, unsigned short usValue)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	4603      	mov	r3, r0
 800118c:	460a      	mov	r2, r1
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	80bb      	strh	r3, [r7, #4]
unsigned char ucTemp[4];
int rc;

	ucTemp[0] = ucAddr;
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = (unsigned char)(usValue >> 8); // MSB first
 8001198:	88bb      	ldrh	r3, [r7, #4]
 800119a:	0a1b      	lsrs	r3, r3, #8
 800119c:	b29b      	uxth	r3, r3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	737b      	strb	r3, [r7, #13]
	ucTemp[2] = (unsigned char)usValue;
 80011a2:	88bb      	ldrh	r3, [r7, #4]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(&hi2c1, 0x52,&ucTemp, 3, 100);
 80011a8:	f107 020c 	add.w	r2, r7, #12
 80011ac:	2364      	movs	r3, #100	; 0x64
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2303      	movs	r3, #3
 80011b2:	2152      	movs	r1, #82	; 0x52
 80011b4:	4803      	ldr	r0, [pc, #12]	; (80011c4 <writeReg16+0x40>)
 80011b6:	f001 f9ed 	bl	8002594 <HAL_I2C_Master_Transmit>
} /* writeReg16() */
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000021c 	.word	0x2000021c

080011c8 <writeReg>:
//
// Write a single register/value pair
//
static void writeReg(unsigned char ucAddr, unsigned char ucValue)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	460a      	mov	r2, r1
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	4613      	mov	r3, r2
 80011d6:	71bb      	strb	r3, [r7, #6]
unsigned char ucTemp[2];
int rc;

	ucTemp[0] = ucAddr;
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = ucValue;
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, 0x52, &ucTemp, 2, 1);
 80011e0:	f107 020c 	add.w	r2, r7, #12
 80011e4:	2301      	movs	r3, #1
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2302      	movs	r3, #2
 80011ea:	2152      	movs	r1, #82	; 0x52
 80011ec:	4803      	ldr	r0, [pc, #12]	; (80011fc <writeReg+0x34>)
 80011ee:	f001 f9d1 	bl	8002594 <HAL_I2C_Master_Transmit>
	//if (rc != 2) {}; // suppress warning
} /* writeReg() */
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000021c 	.word	0x2000021c

08001200 <writeRegList>:

//
// Write a list of register/value pairs to the I2C device
//
static void writeRegList(unsigned char *ucList)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af02      	add	r7, sp, #8
 8001206:	6078      	str	r0, [r7, #4]
unsigned char ucCount = *ucList++; // count is the first element in the list
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	1c5a      	adds	r2, r3, #1
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	73fb      	strb	r3, [r7, #15]
int rc;

	while (ucCount)
 8001212:	e00d      	b.n	8001230 <writeRegList+0x30>
	{
        HAL_I2C_Master_Transmit(&hi2c1, 0x52, ucList, 2, 100);
 8001214:	2364      	movs	r3, #100	; 0x64
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2302      	movs	r3, #2
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	2152      	movs	r1, #82	; 0x52
 800121e:	4808      	ldr	r0, [pc, #32]	; (8001240 <writeRegList+0x40>)
 8001220:	f001 f9b8 	bl	8002594 <HAL_I2C_Master_Transmit>
		if (rc != 2) {};
		ucList += 2;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3302      	adds	r3, #2
 8001228:	607b      	str	r3, [r7, #4]
		ucCount--;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	3b01      	subs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
	while (ucCount)
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1ee      	bne.n	8001214 <writeRegList+0x14>
	}
} /* writeRegList() */
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000021c 	.word	0x2000021c

08001244 <getSpadInfo>:
0x44,0x00, 0x45,0x20, 0x47,0x08, 0x48,0x28, 0x67,0x00, 0x70,0x04, 0x71,0x01,
0x72,0xfe, 0x76,0x00, 0x77,0x00, 0xff,0x01, 0x0d,0x01, 0xff,0x00, 0x80,0x01,
0x01,0xf8, 0xff,0x01, 0x8e,0x01, 0x00,0x01, 0xff,0x00, 0x80,0x00};

static int getSpadInfo(unsigned char *pCount, unsigned char *pTypeIsAperture)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
int iTimeout;
unsigned char ucTemp;
#define MAX_TIMEOUT 50

  writeRegList(ucSPAD0);
 800124e:	482d      	ldr	r0, [pc, #180]	; (8001304 <getSpadInfo+0xc0>)
 8001250:	f7ff ffd6 	bl	8001200 <writeRegList>
  writeReg(0x83, readReg(0x83) | 0x04);
 8001254:	2083      	movs	r0, #131	; 0x83
 8001256:	f7ff ff2f 	bl	80010b8 <readReg>
 800125a:	4603      	mov	r3, r0
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	b2db      	uxtb	r3, r3
 8001262:	4619      	mov	r1, r3
 8001264:	2083      	movs	r0, #131	; 0x83
 8001266:	f7ff ffaf 	bl	80011c8 <writeReg>
  writeRegList(ucSPAD1);
 800126a:	4827      	ldr	r0, [pc, #156]	; (8001308 <getSpadInfo+0xc4>)
 800126c:	f7ff ffc8 	bl	8001200 <writeRegList>
  iTimeout = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  while(iTimeout < MAX_TIMEOUT)
 8001274:	e00c      	b.n	8001290 <getSpadInfo+0x4c>
  {
    if (readReg(0x83) != 0x00) break;
 8001276:	2083      	movs	r0, #131	; 0x83
 8001278:	f7ff ff1e 	bl	80010b8 <readReg>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10a      	bne.n	8001298 <getSpadInfo+0x54>
    iTimeout++;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3301      	adds	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
    HAL_Delay(500);
 8001288:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800128c:	f000 fde8 	bl	8001e60 <HAL_Delay>
  while(iTimeout < MAX_TIMEOUT)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b31      	cmp	r3, #49	; 0x31
 8001294:	ddef      	ble.n	8001276 <getSpadInfo+0x32>
 8001296:	e000      	b.n	800129a <getSpadInfo+0x56>
    if (readReg(0x83) != 0x00) break;
 8001298:	bf00      	nop
  }
  if (iTimeout == MAX_TIMEOUT)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2b32      	cmp	r3, #50	; 0x32
 800129e:	d101      	bne.n	80012a4 <getSpadInfo+0x60>
  {
    //fprintf(stderr, "Timeout while waiting for SPAD info\n");
    return 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e02b      	b.n	80012fc <getSpadInfo+0xb8>
  }
  writeReg(0x83,0x01);
 80012a4:	2101      	movs	r1, #1
 80012a6:	2083      	movs	r0, #131	; 0x83
 80012a8:	f7ff ff8e 	bl	80011c8 <writeReg>
  ucTemp = readReg(0x92);
 80012ac:	2092      	movs	r0, #146	; 0x92
 80012ae:	f7ff ff03 	bl	80010b8 <readReg>
 80012b2:	4603      	mov	r3, r0
 80012b4:	72fb      	strb	r3, [r7, #11]
  *pCount = (ucTemp & 0x7f);
 80012b6:	7afb      	ldrb	r3, [r7, #11]
 80012b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	701a      	strb	r2, [r3, #0]
  *pTypeIsAperture = (ucTemp & 0x80);
 80012c2:	7afb      	ldrb	r3, [r7, #11]
 80012c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	701a      	strb	r2, [r3, #0]
  writeReg(0x81,0x00);
 80012ce:	2100      	movs	r1, #0
 80012d0:	2081      	movs	r0, #129	; 0x81
 80012d2:	f7ff ff79 	bl	80011c8 <writeReg>
  writeReg(0xff,0x06);
 80012d6:	2106      	movs	r1, #6
 80012d8:	20ff      	movs	r0, #255	; 0xff
 80012da:	f7ff ff75 	bl	80011c8 <writeReg>
  writeReg(0x83, readReg(0x83) & ~0x04);
 80012de:	2083      	movs	r0, #131	; 0x83
 80012e0:	f7ff feea 	bl	80010b8 <readReg>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f023 0304 	bic.w	r3, r3, #4
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4619      	mov	r1, r3
 80012ee:	2083      	movs	r0, #131	; 0x83
 80012f0:	f7ff ff6a 	bl	80011c8 <writeReg>
  writeRegList(ucSPAD2);
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <getSpadInfo+0xc8>)
 80012f6:	f7ff ff83 	bl	8001200 <writeRegList>
  
  return 1;
 80012fa:	2301      	movs	r3, #1
} /* getSpadInfo() */
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2000001c 	.word	0x2000001c
 8001308:	20000028 	.word	0x20000028
 800130c:	20000034 	.word	0x20000034

08001310 <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
static uint16_t decodeTimeout(uint16_t reg_val)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 800131e:	88fa      	ldrh	r2, [r7, #6]
 8001320:	0a12      	lsrs	r2, r2, #8
 8001322:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8001324:	4093      	lsls	r3, r2
 8001326:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001328:	3301      	adds	r3, #1
 800132a:	b29b      	uxth	r3, r3
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
static uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	460a      	mov	r2, r1
 8001342:	80fb      	strh	r3, [r7, #6]
 8001344:	4613      	mov	r3, r2
 8001346:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001348:	797b      	ldrb	r3, [r7, #5]
 800134a:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <timeoutMclksToMicroseconds+0x48>)
 800134c:	fb02 f303 	mul.w	r3, r2, r3
 8001350:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001354:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <timeoutMclksToMicroseconds+0x4c>)
 8001356:	fba2 2303 	umull	r2, r3, r2, r3
 800135a:	099b      	lsrs	r3, r3, #6
 800135c:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	fb02 f203 	mul.w	r2, r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	085b      	lsrs	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	4a05      	ldr	r2, [pc, #20]	; (8001384 <timeoutMclksToMicroseconds+0x4c>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	099b      	lsrs	r3, r3, #6
}
 8001374:	4618      	mov	r0, r3
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	003a2f00 	.word	0x003a2f00
 8001384:	10624dd3 	.word	0x10624dd3

08001388 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
static uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <timeoutMicrosecondsToMclks+0x44>)
 8001398:	fb02 f303 	mul.w	r3, r2, r3
 800139c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80013a0:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <timeoutMicrosecondsToMclks+0x48>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	099b      	lsrs	r3, r3, #6
 80013a8:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013b0:	fb02 f203 	mul.w	r2, r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	085b      	lsrs	r3, r3, #1
 80013b8:	441a      	add	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	003a2f00 	.word	0x003a2f00
 80013d0:	10624dd3 	.word	0x10624dd3

080013d4 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
static uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d018      	beq.n	800141e <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 80013f2:	e005      	b.n	8001400 <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	085b      	lsrs	r3, r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 80013fa:	897b      	ldrh	r3, [r7, #10]
 80013fc:	3301      	adds	r3, #1
 80013fe:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f4      	bne.n	80013f4 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 800140a:	897b      	ldrh	r3, [r7, #10]
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	b29a      	uxth	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	b29b      	uxth	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	b29b      	uxth	r3, r3
 8001418:	4313      	orrs	r3, r2
 800141a:	b29b      	uxth	r3, r3
 800141c:	e000      	b.n	8001420 <encodeTimeout+0x4c>
  }
  else { return 0; }
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <getSequenceStepTimeouts>:

static void getSequenceStepTimeouts(uint8_t enables, SequenceStepTimeouts * timeouts)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  timeouts->pre_range_vcsel_period_pclks = ((readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 8001438:	2050      	movs	r0, #80	; 0x50
 800143a:	f7ff fe3d 	bl	80010b8 <readReg>
 800143e:	4603      	mov	r3, r0
 8001440:	b29b      	uxth	r3, r3
 8001442:	3301      	adds	r3, #1
 8001444:	b29b      	uxth	r3, r3
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b29a      	uxth	r2, r3
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 800144e:	2046      	movs	r0, #70	; 0x46
 8001450:	f7ff fe32 	bl	80010b8 <readReg>
 8001454:	4603      	mov	r3, r0
 8001456:	b29b      	uxth	r3, r3
 8001458:	3301      	adds	r3, #1
 800145a:	b29a      	uxth	r2, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4619      	mov	r1, r3
 800146c:	4610      	mov	r0, r2
 800146e:	f7ff ff63 	bl	8001338 <timeoutMclksToMicroseconds>
 8001472:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001478:	2051      	movs	r0, #81	; 0x51
 800147a:	f7ff fdf9 	bl	8001070 <readReg16>
 800147e:	4603      	mov	r3, r0
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff45 	bl	8001310 <decodeTimeout>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001496:	b2db      	uxtb	r3, r3
 8001498:	4619      	mov	r1, r3
 800149a:	4610      	mov	r0, r2
 800149c:	f7ff ff4c 	bl	8001338 <timeoutMclksToMicroseconds>
 80014a0:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = ((readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 80014a6:	2070      	movs	r0, #112	; 0x70
 80014a8:	f7ff fe06 	bl	80010b8 <readReg>
 80014ac:	4603      	mov	r3, r0
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	3301      	adds	r3, #1
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80014bc:	2071      	movs	r0, #113	; 0x71
 80014be:	f7ff fdd7 	bl	8001070 <readReg16>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff23 	bl	8001310 <decodeTimeout>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	811a      	strh	r2, [r3, #8]

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d007      	beq.n	80014ec <getSequenceStepTimeouts+0xc0>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	891a      	ldrh	r2, [r3, #8]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	88db      	ldrh	r3, [r3, #6]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4619      	mov	r1, r3
 80014f8:	4610      	mov	r0, r2
 80014fa:	f7ff ff1d 	bl	8001338 <timeoutMclksToMicroseconds>
 80014fe:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	615a      	str	r2, [r3, #20]
} /* getSequenceStepTimeouts() */
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
static int setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	; 0x30
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	460a      	mov	r2, r1
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	4613      	mov	r3, r2
 800151a:	71bb      	strb	r3, [r7, #6]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 800151c:	79bb      	ldrb	r3, [r7, #6]
 800151e:	085b      	lsrs	r3, r3, #1
 8001520:	b2db      	uxtb	r3, r3
 8001522:	3b01      	subs	r3, #1
 8001524:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001528:	2001      	movs	r0, #1
 800152a:	f7ff fdc5 	bl	80010b8 <readReg>
 800152e:	4603      	mov	r3, r0
 8001530:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  getSequenceStepTimeouts(enables, &timeouts);
 8001534:	f107 020c 	add.w	r2, r7, #12
 8001538:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800153c:	4611      	mov	r1, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff74 	bl	800142c <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d15c      	bne.n	8001604 <setVcselPulsePeriod+0xf8>
  {
    // "Set phase check limits"
    switch (period_pclks)
 800154a:	79bb      	ldrb	r3, [r7, #6]
 800154c:	3b0c      	subs	r3, #12
 800154e:	2b06      	cmp	r3, #6
 8001550:	d824      	bhi.n	800159c <setVcselPulsePeriod+0x90>
 8001552:	a201      	add	r2, pc, #4	; (adr r2, 8001558 <setVcselPulsePeriod+0x4c>)
 8001554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001558:	08001575 	.word	0x08001575
 800155c:	0800159d 	.word	0x0800159d
 8001560:	0800157f 	.word	0x0800157f
 8001564:	0800159d 	.word	0x0800159d
 8001568:	08001589 	.word	0x08001589
 800156c:	0800159d 	.word	0x0800159d
 8001570:	08001593 	.word	0x08001593
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 8001574:	2118      	movs	r1, #24
 8001576:	2057      	movs	r0, #87	; 0x57
 8001578:	f7ff fe26 	bl	80011c8 <writeReg>
        break;
 800157c:	e010      	b.n	80015a0 <setVcselPulsePeriod+0x94>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 800157e:	2130      	movs	r1, #48	; 0x30
 8001580:	2057      	movs	r0, #87	; 0x57
 8001582:	f7ff fe21 	bl	80011c8 <writeReg>
        break;
 8001586:	e00b      	b.n	80015a0 <setVcselPulsePeriod+0x94>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 8001588:	2140      	movs	r1, #64	; 0x40
 800158a:	2057      	movs	r0, #87	; 0x57
 800158c:	f7ff fe1c 	bl	80011c8 <writeReg>
        break;
 8001590:	e006      	b.n	80015a0 <setVcselPulsePeriod+0x94>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8001592:	2150      	movs	r1, #80	; 0x50
 8001594:	2057      	movs	r0, #87	; 0x57
 8001596:	f7ff fe17 	bl	80011c8 <writeReg>
        break;
 800159a:	e001      	b.n	80015a0 <setVcselPulsePeriod+0x94>

      default:
        // invalid period
        return 0;
 800159c:	2300      	movs	r3, #0
 800159e:	e0fe      	b.n	800179e <setVcselPulsePeriod+0x292>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 80015a0:	2108      	movs	r1, #8
 80015a2:	2056      	movs	r0, #86	; 0x56
 80015a4:	f7ff fe10 	bl	80011c8 <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 80015a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80015ac:	4619      	mov	r1, r3
 80015ae:	2050      	movs	r0, #80	; 0x50
 80015b0:	f7ff fe0a 	bl	80011c8 <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	79ba      	ldrb	r2, [r7, #6]
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fee4 	bl	8001388 <timeoutMicrosecondsToMclks>
 80015c0:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 80015c2:	857b      	strh	r3, [r7, #42]	; 0x2a

    writeReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80015c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ff04 	bl	80013d4 <encodeTimeout>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4619      	mov	r1, r3
 80015d0:	2051      	movs	r0, #81	; 0x51
 80015d2:	f7ff fdd7 	bl	8001184 <writeReg16>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	79ba      	ldrb	r2, [r7, #6]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fed3 	bl	8001388 <timeoutMicrosecondsToMclks>
 80015e2:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 80015e4:	853b      	strh	r3, [r7, #40]	; 0x28

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 80015e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015ec:	d804      	bhi.n	80015f8 <setVcselPulsePeriod+0xec>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 80015ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015f0:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 80015f2:	3b01      	subs	r3, #1
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	e000      	b.n	80015fa <setVcselPulsePeriod+0xee>
 80015f8:	23ff      	movs	r3, #255	; 0xff
 80015fa:	4619      	mov	r1, r3
 80015fc:	2046      	movs	r0, #70	; 0x46
 80015fe:	f7ff fde3 	bl	80011c8 <writeReg>
 8001602:	e0b3      	b.n	800176c <setVcselPulsePeriod+0x260>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	2b01      	cmp	r3, #1
 8001608:	f040 80ae 	bne.w	8001768 <setVcselPulsePeriod+0x25c>
  {
    switch (period_pclks)
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	3b08      	subs	r3, #8
 8001610:	2b06      	cmp	r3, #6
 8001612:	f200 8085 	bhi.w	8001720 <setVcselPulsePeriod+0x214>
 8001616:	a201      	add	r2, pc, #4	; (adr r2, 800161c <setVcselPulsePeriod+0x110>)
 8001618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161c:	08001639 	.word	0x08001639
 8001620:	08001721 	.word	0x08001721
 8001624:	08001673 	.word	0x08001673
 8001628:	08001721 	.word	0x08001721
 800162c:	080016ad 	.word	0x080016ad
 8001630:	08001721 	.word	0x08001721
 8001634:	080016e7 	.word	0x080016e7
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 8001638:	2110      	movs	r1, #16
 800163a:	2048      	movs	r0, #72	; 0x48
 800163c:	f7ff fdc4 	bl	80011c8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001640:	2108      	movs	r1, #8
 8001642:	2047      	movs	r0, #71	; 0x47
 8001644:	f7ff fdc0 	bl	80011c8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8001648:	2102      	movs	r1, #2
 800164a:	2032      	movs	r0, #50	; 0x32
 800164c:	f7ff fdbc 	bl	80011c8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 8001650:	210c      	movs	r1, #12
 8001652:	2030      	movs	r0, #48	; 0x30
 8001654:	f7ff fdb8 	bl	80011c8 <writeReg>
        writeReg(0xFF, 0x01);
 8001658:	2101      	movs	r1, #1
 800165a:	20ff      	movs	r0, #255	; 0xff
 800165c:	f7ff fdb4 	bl	80011c8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 8001660:	2130      	movs	r1, #48	; 0x30
 8001662:	2030      	movs	r0, #48	; 0x30
 8001664:	f7ff fdb0 	bl	80011c8 <writeReg>
        writeReg(0xFF, 0x00);
 8001668:	2100      	movs	r1, #0
 800166a:	20ff      	movs	r0, #255	; 0xff
 800166c:	f7ff fdac 	bl	80011c8 <writeReg>
        break;
 8001670:	e058      	b.n	8001724 <setVcselPulsePeriod+0x218>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 8001672:	2128      	movs	r1, #40	; 0x28
 8001674:	2048      	movs	r0, #72	; 0x48
 8001676:	f7ff fda7 	bl	80011c8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 800167a:	2108      	movs	r1, #8
 800167c:	2047      	movs	r0, #71	; 0x47
 800167e:	f7ff fda3 	bl	80011c8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001682:	2103      	movs	r1, #3
 8001684:	2032      	movs	r0, #50	; 0x32
 8001686:	f7ff fd9f 	bl	80011c8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 800168a:	2109      	movs	r1, #9
 800168c:	2030      	movs	r0, #48	; 0x30
 800168e:	f7ff fd9b 	bl	80011c8 <writeReg>
        writeReg(0xFF, 0x01);
 8001692:	2101      	movs	r1, #1
 8001694:	20ff      	movs	r0, #255	; 0xff
 8001696:	f7ff fd97 	bl	80011c8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 800169a:	2120      	movs	r1, #32
 800169c:	2030      	movs	r0, #48	; 0x30
 800169e:	f7ff fd93 	bl	80011c8 <writeReg>
        writeReg(0xFF, 0x00);
 80016a2:	2100      	movs	r1, #0
 80016a4:	20ff      	movs	r0, #255	; 0xff
 80016a6:	f7ff fd8f 	bl	80011c8 <writeReg>
        break;
 80016aa:	e03b      	b.n	8001724 <setVcselPulsePeriod+0x218>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 80016ac:	2138      	movs	r1, #56	; 0x38
 80016ae:	2048      	movs	r0, #72	; 0x48
 80016b0:	f7ff fd8a 	bl	80011c8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80016b4:	2108      	movs	r1, #8
 80016b6:	2047      	movs	r0, #71	; 0x47
 80016b8:	f7ff fd86 	bl	80011c8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80016bc:	2103      	movs	r1, #3
 80016be:	2032      	movs	r0, #50	; 0x32
 80016c0:	f7ff fd82 	bl	80011c8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 80016c4:	2108      	movs	r1, #8
 80016c6:	2030      	movs	r0, #48	; 0x30
 80016c8:	f7ff fd7e 	bl	80011c8 <writeReg>
        writeReg(0xFF, 0x01);
 80016cc:	2101      	movs	r1, #1
 80016ce:	20ff      	movs	r0, #255	; 0xff
 80016d0:	f7ff fd7a 	bl	80011c8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 80016d4:	2120      	movs	r1, #32
 80016d6:	2030      	movs	r0, #48	; 0x30
 80016d8:	f7ff fd76 	bl	80011c8 <writeReg>
        writeReg(0xFF, 0x00);
 80016dc:	2100      	movs	r1, #0
 80016de:	20ff      	movs	r0, #255	; 0xff
 80016e0:	f7ff fd72 	bl	80011c8 <writeReg>
        break;
 80016e4:	e01e      	b.n	8001724 <setVcselPulsePeriod+0x218>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 80016e6:	2148      	movs	r1, #72	; 0x48
 80016e8:	2048      	movs	r0, #72	; 0x48
 80016ea:	f7ff fd6d 	bl	80011c8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80016ee:	2108      	movs	r1, #8
 80016f0:	2047      	movs	r0, #71	; 0x47
 80016f2:	f7ff fd69 	bl	80011c8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80016f6:	2103      	movs	r1, #3
 80016f8:	2032      	movs	r0, #50	; 0x32
 80016fa:	f7ff fd65 	bl	80011c8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 80016fe:	2107      	movs	r1, #7
 8001700:	2030      	movs	r0, #48	; 0x30
 8001702:	f7ff fd61 	bl	80011c8 <writeReg>
        writeReg(0xFF, 0x01);
 8001706:	2101      	movs	r1, #1
 8001708:	20ff      	movs	r0, #255	; 0xff
 800170a:	f7ff fd5d 	bl	80011c8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 800170e:	2120      	movs	r1, #32
 8001710:	2030      	movs	r0, #48	; 0x30
 8001712:	f7ff fd59 	bl	80011c8 <writeReg>
        writeReg(0xFF, 0x00);
 8001716:	2100      	movs	r1, #0
 8001718:	20ff      	movs	r0, #255	; 0xff
 800171a:	f7ff fd55 	bl	80011c8 <writeReg>
        break;
 800171e:	e001      	b.n	8001724 <setVcselPulsePeriod+0x218>

      default:
        // invalid period
        return 0;
 8001720:	2300      	movs	r3, #0
 8001722:	e03c      	b.n	800179e <setVcselPulsePeriod+0x292>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001724:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001728:	4619      	mov	r1, r3
 800172a:	2070      	movs	r0, #112	; 0x70
 800172c:	f7ff fd4c 	bl	80011c8 <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8001730:	6a3b      	ldr	r3, [r7, #32]
 8001732:	79ba      	ldrb	r2, [r7, #6]
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fe26 	bl	8001388 <timeoutMicrosecondsToMclks>
 800173c:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 800173e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8001740:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <setVcselPulsePeriod+0x248>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 800174c:	8a7a      	ldrh	r2, [r7, #18]
 800174e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001750:	4413      	add	r3, r2
 8001752:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001754:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fe3c 	bl	80013d4 <encodeTimeout>
 800175c:	4603      	mov	r3, r0
 800175e:	4619      	mov	r1, r3
 8001760:	2071      	movs	r0, #113	; 0x71
 8001762:	f7ff fd0f 	bl	8001184 <writeReg16>
 8001766:	e001      	b.n	800176c <setVcselPulsePeriod+0x260>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return 0;
 8001768:	2300      	movs	r3, #0
 800176a:	e018      	b.n	800179e <setVcselPulsePeriod+0x292>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(measurement_timing_budget_us);
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <setVcselPulsePeriod+0x29c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f000 f81b 	bl	80017ac <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001776:	2001      	movs	r0, #1
 8001778:	f7ff fc9e 	bl	80010b8 <readReg>
 800177c:	4603      	mov	r3, r0
 800177e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001782:	2102      	movs	r1, #2
 8001784:	2001      	movs	r0, #1
 8001786:	f7ff fd1f 	bl	80011c8 <writeReg>
  performSingleRefCalibration(0x0);
 800178a:	2000      	movs	r0, #0
 800178c:	f000 f916 	bl	80019bc <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 8001790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001794:	4619      	mov	r1, r3
 8001796:	2001      	movs	r0, #1
 8001798:	f7ff fd16 	bl	80011c8 <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return 1;
 800179c:	2301      	movs	r3, #1
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3730      	adds	r7, #48	; 0x30
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000180 	.word	0x20000180

080017ac <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
static int setMeasurementTimingBudget(uint32_t budget_us)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b090      	sub	sp, #64	; 0x40
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
uint16_t final_range_timeout_mclks;

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 80017b4:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 80017b8:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const EndOverhead        = 960;
 80017ba:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80017be:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const MsrcOverhead       = 660;
 80017c0:	f44f 7325 	mov.w	r3, #660	; 0x294
 80017c4:	86bb      	strh	r3, [r7, #52]	; 0x34
  uint16_t const TccOverhead        = 590;
 80017c6:	f240 234e 	movw	r3, #590	; 0x24e
 80017ca:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const DssOverhead        = 690;
 80017cc:	f240 23b2 	movw	r3, #690	; 0x2b2
 80017d0:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const PreRangeOverhead   = 660;
 80017d2:	f44f 7325 	mov.w	r3, #660	; 0x294
 80017d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const FinalRangeOverhead = 550;
 80017d8:	f240 2326 	movw	r3, #550	; 0x226
 80017dc:	85bb      	strh	r3, [r7, #44]	; 0x2c

  uint32_t const MinTimingBudget = 20000;
 80017de:	f644 6320 	movw	r3, #20000	; 0x4e20
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28

  if (budget_us < MinTimingBudget) { return 0; }
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d201      	bcs.n	80017f0 <setMeasurementTimingBudget+0x44>
 80017ec:	2300      	movs	r3, #0
 80017ee:	e074      	b.n	80018da <setMeasurementTimingBudget+0x12e>

  used_budget_us = StartOverhead + EndOverhead;
 80017f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80017f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017f4:	4413      	add	r3, r2
 80017f6:	63fb      	str	r3, [r7, #60]	; 0x3c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 80017f8:	2001      	movs	r0, #1
 80017fa:	f7ff fc5d 	bl	80010b8 <readReg>
 80017fe:	4603      	mov	r3, r0
 8001800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  getSequenceStepTimeouts(enables, &timeouts);
 8001804:	f107 0208 	add.w	r2, r7, #8
 8001808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800180c:	4611      	mov	r1, r2
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fe0c 	bl	800142c <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 8001814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <setMeasurementTimingBudget+0x80>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001824:	4413      	add	r3, r2
 8001826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001828:	4413      	add	r3, r2
 800182a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 800182c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <setMeasurementTimingBudget+0x9c>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800183c:	4413      	add	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001842:	4413      	add	r3, r2
 8001844:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001846:	e00b      	b.n	8001860 <setMeasurementTimingBudget+0xb4>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 8001848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <setMeasurementTimingBudget+0xb4>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001858:	4413      	add	r3, r2
 800185a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800185c:	4413      	add	r3, r2
 800185e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8001860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <setMeasurementTimingBudget+0xcc>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001870:	4413      	add	r3, r2
 8001872:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001874:	4413      	add	r3, r2
 8001876:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 8001878:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800187c:	2b00      	cmp	r3, #0
 800187e:	da2b      	bge.n	80018d8 <setMeasurementTimingBudget+0x12c>
  {
    used_budget_us += FinalRangeOverhead;
 8001880:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001882:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001884:	4413      	add	r3, r2
 8001886:	63fb      	str	r3, [r7, #60]	; 0x3c
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8001888:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	429a      	cmp	r2, r3
 800188e:	d901      	bls.n	8001894 <setMeasurementTimingBudget+0xe8>
    {
      // "Requested timeout too big."
      return 0;
 8001890:	2300      	movs	r3, #0
 8001892:	e022      	b.n	80018da <setMeasurementTimingBudget+0x12e>
    }

    final_range_timeout_us = budget_us - used_budget_us;
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	623b      	str	r3, [r7, #32]
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 800189c:	897b      	ldrh	r3, [r7, #10]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	4619      	mov	r1, r3
 80018a2:	6a38      	ldr	r0, [r7, #32]
 80018a4:	f7ff fd70 	bl	8001388 <timeoutMicrosecondsToMclks>
 80018a8:	4603      	mov	r3, r0
    final_range_timeout_mclks =
 80018aa:	877b      	strh	r3, [r7, #58]	; 0x3a

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 80018ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <setMeasurementTimingBudget+0x114>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80018b8:	89fa      	ldrh	r2, [r7, #14]
 80018ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80018bc:	4413      	add	r3, r2
 80018be:	877b      	strh	r3, [r7, #58]	; 0x3a
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80018c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fd86 	bl	80013d4 <encodeTimeout>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4619      	mov	r1, r3
 80018cc:	2071      	movs	r0, #113	; 0x71
 80018ce:	f7ff fc59 	bl	8001184 <writeReg16>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 80018d2:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <setMeasurementTimingBudget+0x138>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6013      	str	r3, [r2, #0]
  }
  return 1;
 80018d8:	2301      	movs	r3, #1
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3740      	adds	r7, #64	; 0x40
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000180 	.word	0x20000180

080018e8 <getMeasurementTimingBudget>:

static uint32_t getMeasurementTimingBudget(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	; 0x30
 80018ec:	af00      	add	r7, sp, #0
  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 80018ee:	f240 7376 	movw	r3, #1910	; 0x776
 80018f2:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const EndOverhead        = 960;
 80018f4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80018f8:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const MsrcOverhead       = 660;
 80018fa:	f44f 7325 	mov.w	r3, #660	; 0x294
 80018fe:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const TccOverhead        = 590;
 8001900:	f240 234e 	movw	r3, #590	; 0x24e
 8001904:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t const DssOverhead        = 690;
 8001906:	f240 23b2 	movw	r3, #690	; 0x2b2
 800190a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t const PreRangeOverhead   = 660;
 800190c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001910:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 8001912:	f240 2326 	movw	r3, #550	; 0x226
 8001916:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 8001918:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800191a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800191c:	4413      	add	r3, r2
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001920:	2001      	movs	r0, #1
 8001922:	f7ff fbc9 	bl	80010b8 <readReg>
 8001926:	4603      	mov	r3, r0
 8001928:	777b      	strb	r3, [r7, #29]
  getSequenceStepTimeouts(enables, &timeouts);
 800192a:	1d3a      	adds	r2, r7, #4
 800192c:	7f7b      	ldrb	r3, [r7, #29]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fd7b 	bl	800142c <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 8001936:	7f7b      	ldrb	r3, [r7, #29]
 8001938:	f003 0310 	and.w	r3, r3, #16
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <getMeasurementTimingBudget+0x64>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001944:	4413      	add	r3, r2
 8001946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001948:	4413      	add	r3, r2
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 800194c:	7f7b      	ldrb	r3, [r7, #29]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d007      	beq.n	8001966 <getMeasurementTimingBudget+0x7e>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800195a:	4413      	add	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001960:	4413      	add	r3, r2
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001964:	e00a      	b.n	800197c <getMeasurementTimingBudget+0x94>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 8001966:	7f7b      	ldrb	r3, [r7, #29]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <getMeasurementTimingBudget+0x94>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001974:	4413      	add	r3, r2
 8001976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001978:	4413      	add	r3, r2
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 800197c:	7f7b      	ldrb	r3, [r7, #29]
 800197e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001982:	2b00      	cmp	r3, #0
 8001984:	d005      	beq.n	8001992 <getMeasurementTimingBudget+0xaa>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	8c3b      	ldrh	r3, [r7, #32]
 800198a:	4413      	add	r3, r2
 800198c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800198e:	4413      	add	r3, r2
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 8001992:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001996:	2b00      	cmp	r3, #0
 8001998:	da05      	bge.n	80019a6 <getMeasurementTimingBudget+0xbe>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	8bfb      	ldrh	r3, [r7, #30]
 800199e:	4413      	add	r3, r2
 80019a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019a2:	4413      	add	r3, r2
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 80019a6:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <getMeasurementTimingBudget+0xd0>)
 80019a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019aa:	6013      	str	r3, [r2, #0]
  return budget_us;
 80019ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3730      	adds	r7, #48	; 0x30
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000180 	.word	0x20000180

080019bc <performSingleRefCalibration>:

static int performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
int iTimeout;
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	4619      	mov	r1, r3
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff fbf9 	bl	80011c8 <writeReg>

  iTimeout = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80019da:	e00b      	b.n	80019f4 <performSingleRefCalibration+0x38>
  {
    iTimeout++;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3301      	adds	r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(500);
 80019e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019e6:	f000 fa3b 	bl	8001e60 <HAL_Delay>
    if (iTimeout > 100) { return 0; }
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2b64      	cmp	r3, #100	; 0x64
 80019ee:	dd01      	ble.n	80019f4 <performSingleRefCalibration+0x38>
 80019f0:	2300      	movs	r3, #0
 80019f2:	e010      	b.n	8001a16 <performSingleRefCalibration+0x5a>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80019f4:	2013      	movs	r0, #19
 80019f6:	f7ff fb5f 	bl	80010b8 <readReg>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0eb      	beq.n	80019dc <performSingleRefCalibration+0x20>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001a04:	2101      	movs	r1, #1
 8001a06:	200b      	movs	r0, #11
 8001a08:	f7ff fbde 	bl	80011c8 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7ff fbda 	bl	80011c8 <writeReg>

  return 1;
 8001a14:	2301      	movs	r3, #1
} /* performSingleRefCalibration() */
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <initSensor>:

//
// Initialize the vl53l0x
//
static int initSensor(int bLongRangeMode)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
unsigned char spad_count=0, spad_type_is_aperture=0, ref_spad_map[6];
 8001a28:	2300      	movs	r3, #0
 8001a2a:	75bb      	strb	r3, [r7, #22]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	757b      	strb	r3, [r7, #21]
unsigned char ucFirstSPAD, ucSPADsEnabled;
int i;

// set 2.8V mode
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
  readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8001a30:	2089      	movs	r0, #137	; 0x89
 8001a32:	f7ff fb41 	bl	80010b8 <readReg>
 8001a36:	4603      	mov	r3, r0
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	4619      	mov	r1, r3
 8001a40:	2089      	movs	r0, #137	; 0x89
 8001a42:	f7ff fbc1 	bl	80011c8 <writeReg>
// Set I2C standard mode
  writeRegList(ucI2CMode);
 8001a46:	486b      	ldr	r0, [pc, #428]	; (8001bf4 <initSensor+0x1d4>)
 8001a48:	f7ff fbda 	bl	8001200 <writeRegList>
  stop_variable = readReg(0x91);
 8001a4c:	2091      	movs	r0, #145	; 0x91
 8001a4e:	f7ff fb33 	bl	80010b8 <readReg>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b68      	ldr	r3, [pc, #416]	; (8001bf8 <initSensor+0x1d8>)
 8001a58:	701a      	strb	r2, [r3, #0]
  writeRegList(ucI2CMode2);
 8001a5a:	4868      	ldr	r0, [pc, #416]	; (8001bfc <initSensor+0x1dc>)
 8001a5c:	f7ff fbd0 	bl	8001200 <writeRegList>
// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(REG_MSRC_CONFIG_CONTROL, readReg(REG_MSRC_CONFIG_CONTROL) | 0x12);
 8001a60:	2060      	movs	r0, #96	; 0x60
 8001a62:	f7ff fb29 	bl	80010b8 <readReg>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f043 0312 	orr.w	r3, r3, #18
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	4619      	mov	r1, r3
 8001a70:	2060      	movs	r0, #96	; 0x60
 8001a72:	f7ff fba9 	bl	80011c8 <writeReg>
  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 32); // 0.25
 8001a76:	2120      	movs	r1, #32
 8001a78:	2044      	movs	r0, #68	; 0x44
 8001a7a:	f7ff fb83 	bl	8001184 <writeReg16>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8001a7e:	21ff      	movs	r1, #255	; 0xff
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7ff fba1 	bl	80011c8 <writeReg>
  getSpadInfo(&spad_count, &spad_type_is_aperture);
 8001a86:	f107 0215 	add.w	r2, r7, #21
 8001a8a:	f107 0316 	add.w	r3, r7, #22
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fbd7 	bl	8001244 <getSpadInfo>

  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8001a96:	f107 030c 	add.w	r3, r7, #12
 8001a9a:	2206      	movs	r2, #6
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	20b0      	movs	r0, #176	; 0xb0
 8001aa0:	f7ff fb2a 	bl	80010f8 <readMulti>
//printf("initial spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0], ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);
  writeRegList(ucSPAD);
 8001aa4:	4856      	ldr	r0, [pc, #344]	; (8001c00 <initSensor+0x1e0>)
 8001aa6:	f7ff fbab 	bl	8001200 <writeRegList>
  ucFirstSPAD = (spad_type_is_aperture) ? 12: 0;
 8001aaa:	7d7b      	ldrb	r3, [r7, #21]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <initSensor+0x94>
 8001ab0:	230c      	movs	r3, #12
 8001ab2:	e000      	b.n	8001ab6 <initSensor+0x96>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	75fb      	strb	r3, [r7, #23]
  ucSPADsEnabled = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	77fb      	strb	r3, [r7, #31]
// clear bits for unused SPADs
  for (i=0; i<48; i++)
 8001abc:	2300      	movs	r3, #0
 8001abe:	61bb      	str	r3, [r7, #24]
 8001ac0:	e03a      	b.n	8001b38 <initSensor+0x118>
  {
    if (i < ucFirstSPAD || ucSPADsEnabled == spad_count)
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	db03      	blt.n	8001ad2 <initSensor+0xb2>
 8001aca:	7dbb      	ldrb	r3, [r7, #22]
 8001acc:	7ffa      	ldrb	r2, [r7, #31]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d11b      	bne.n	8001b0a <initSensor+0xea>
    {
      ref_spad_map[i>>3] &= ~(1<<(i & 7));
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	10db      	asrs	r3, r3, #3
 8001ad6:	f107 0220 	add.w	r2, r7, #32
 8001ada:	4413      	add	r3, r2
 8001adc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001ae0:	b25a      	sxtb	r2, r3
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	2101      	movs	r1, #1
 8001aea:	fa01 f303 	lsl.w	r3, r1, r3
 8001aee:	b25b      	sxtb	r3, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	b25b      	sxtb	r3, r3
 8001af4:	4013      	ands	r3, r2
 8001af6:	b25a      	sxtb	r2, r3
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	10db      	asrs	r3, r3, #3
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	f107 0120 	add.w	r1, r7, #32
 8001b02:	440b      	add	r3, r1
 8001b04:	f803 2c14 	strb.w	r2, [r3, #-20]
 8001b08:	e013      	b.n	8001b32 <initSensor+0x112>
    }
    else if (ref_spad_map[i>>3] & (1<< (i & 7)))
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	10db      	asrs	r3, r3, #3
 8001b0e:	f107 0220 	add.w	r2, r7, #32
 8001b12:	4413      	add	r3, r2
 8001b14:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	fa42 f303 	asr.w	r3, r2, r3
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <initSensor+0x112>
    {
      ucSPADsEnabled++;
 8001b2c:	7ffb      	ldrb	r3, [r7, #31]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	77fb      	strb	r3, [r7, #31]
  for (i=0; i<48; i++)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	3301      	adds	r3, #1
 8001b36:	61bb      	str	r3, [r7, #24]
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	2b2f      	cmp	r3, #47	; 0x2f
 8001b3c:	ddc1      	ble.n	8001ac2 <initSensor+0xa2>
    }
  } // for i
  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	2206      	movs	r2, #6
 8001b44:	4619      	mov	r1, r3
 8001b46:	20b0      	movs	r0, #176	; 0xb0
 8001b48:	f7ff faf8 	bl	800113c <writeMulti>
//printf("final spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0], 
//ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);

// load default tuning settings
  writeRegList(ucDefTuning); // long list of magic numbers
 8001b4c:	482d      	ldr	r0, [pc, #180]	; (8001c04 <initSensor+0x1e4>)
 8001b4e:	f7ff fb57 	bl	8001200 <writeRegList>

// change some settings for long range mode
  if (bLongRangeMode)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00b      	beq.n	8001b70 <initSensor+0x150>
  {
	writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 13); // 0.1
 8001b58:	210d      	movs	r1, #13
 8001b5a:	2044      	movs	r0, #68	; 0x44
 8001b5c:	f7ff fb12 	bl	8001184 <writeReg16>
	setVcselPulsePeriod(VcselPeriodPreRange, 18);
 8001b60:	2112      	movs	r1, #18
 8001b62:	2000      	movs	r0, #0
 8001b64:	f7ff fcd2 	bl	800150c <setVcselPulsePeriod>
	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 8001b68:	210e      	movs	r1, #14
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f7ff fcce 	bl	800150c <setVcselPulsePeriod>
  }

// set interrupt configuration to "new sample ready"
  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8001b70:	2104      	movs	r1, #4
 8001b72:	200a      	movs	r0, #10
 8001b74:	f7ff fb28 	bl	80011c8 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8001b78:	2084      	movs	r0, #132	; 0x84
 8001b7a:	f7ff fa9d 	bl	80010b8 <readReg>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f023 0310 	bic.w	r3, r3, #16
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	4619      	mov	r1, r3
 8001b88:	2084      	movs	r0, #132	; 0x84
 8001b8a:	f7ff fb1d 	bl	80011c8 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001b8e:	2101      	movs	r1, #1
 8001b90:	200b      	movs	r0, #11
 8001b92:	f7ff fb19 	bl	80011c8 <writeReg>
  measurement_timing_budget_us = getMeasurementTimingBudget();
 8001b96:	f7ff fea7 	bl	80018e8 <getMeasurementTimingBudget>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <initSensor+0x1e8>)
 8001b9e:	601a      	str	r2, [r3, #0]
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 8001ba0:	21e8      	movs	r1, #232	; 0xe8
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f7ff fb10 	bl	80011c8 <writeReg>
  setMeasurementTimingBudget(measurement_timing_budget_us);
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <initSensor+0x1e8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fdfd 	bl	80017ac <setMeasurementTimingBudget>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f7ff fb07 	bl	80011c8 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return 0; }
 8001bba:	2040      	movs	r0, #64	; 0x40
 8001bbc:	f7ff fefe 	bl	80019bc <performSingleRefCalibration>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <initSensor+0x1aa>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e010      	b.n	8001bec <initSensor+0x1cc>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001bca:	2102      	movs	r1, #2
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f7ff fafb 	bl	80011c8 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return 0; }
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f7ff fef2 	bl	80019bc <performSingleRefCalibration>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <initSensor+0x1c2>
 8001bde:	2300      	movs	r3, #0
 8001be0:	e004      	b.n	8001bec <initSensor+0x1cc>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 8001be2:	21e8      	movs	r1, #232	; 0xe8
 8001be4:	2001      	movs	r0, #1
 8001be6:	f7ff faef 	bl	80011c8 <writeReg>
  return 1;
 8001bea:	2301      	movs	r3, #1
} /* initSensor() */
 8001bec:	4618      	mov	r0, r3
 8001bee:	3720      	adds	r7, #32
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	2000017c 	.word	0x2000017c
 8001bfc:	20000014 	.word	0x20000014
 8001c00:	20000040 	.word	0x20000040
 8001c04:	2000004c 	.word	0x2000004c
 8001c08:	20000180 	.word	0x20000180

08001c0c <readRangeContinuousMillimeters>:

uint16_t readRangeContinuousMillimeters(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
int iTimeout = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
uint16_t range;

  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001c16:	e00c      	b.n	8001c32 <readRangeContinuousMillimeters+0x26>
  {
    iTimeout++;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	607b      	str	r3, [r7, #4]
    HAL_Delay(500);
 8001c1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c22:	f000 f91d 	bl	8001e60 <HAL_Delay>
    if (iTimeout > 5)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	dd02      	ble.n	8001c32 <readRangeContinuousMillimeters+0x26>
    {
      return -1;
 8001c2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c30:	e011      	b.n	8001c56 <readRangeContinuousMillimeters+0x4a>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001c32:	2013      	movs	r0, #19
 8001c34:	f7ff fa40 	bl	80010b8 <readReg>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0ea      	beq.n	8001c18 <readRangeContinuousMillimeters+0xc>
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  range = readReg16(RESULT_RANGE_STATUS + 10);
 8001c42:	201e      	movs	r0, #30
 8001c44:	f7ff fa14 	bl	8001070 <readReg16>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	807b      	strh	r3, [r7, #2]

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	200b      	movs	r0, #11
 8001c50:	f7ff faba 	bl	80011c8 <writeReg>

  return range;
 8001c54:	887b      	ldrh	r3, [r7, #2]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <tofReadDistance>:
//
// Read the current distance in mm
//
int tofReadDistance(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
int iTimeout;

  writeReg(0x80, 0x01);
 8001c66:	2101      	movs	r1, #1
 8001c68:	2080      	movs	r0, #128	; 0x80
 8001c6a:	f7ff faad 	bl	80011c8 <writeReg>
  writeReg(0xFF, 0x01);
 8001c6e:	2101      	movs	r1, #1
 8001c70:	20ff      	movs	r0, #255	; 0xff
 8001c72:	f7ff faa9 	bl	80011c8 <writeReg>
  writeReg(0x00, 0x00);
 8001c76:	2100      	movs	r1, #0
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f7ff faa5 	bl	80011c8 <writeReg>
  writeReg(0x91, stop_variable);
 8001c7e:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <tofReadDistance+0x84>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	4619      	mov	r1, r3
 8001c84:	2091      	movs	r0, #145	; 0x91
 8001c86:	f7ff fa9f 	bl	80011c8 <writeReg>
  writeReg(0x00, 0x01);
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f7ff fa9b 	bl	80011c8 <writeReg>
  writeReg(0xFF, 0x00);
 8001c92:	2100      	movs	r1, #0
 8001c94:	20ff      	movs	r0, #255	; 0xff
 8001c96:	f7ff fa97 	bl	80011c8 <writeReg>
  writeReg(0x80, 0x00);
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	2080      	movs	r0, #128	; 0x80
 8001c9e:	f7ff fa93 	bl	80011c8 <writeReg>

  writeReg(SYSRANGE_START, 0x01);
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f7ff fa8f 	bl	80011c8 <writeReg>

  // "Wait until start bit has been cleared"
  iTimeout = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
  while (readReg(SYSRANGE_START) & 0x01)
 8001cae:	e00a      	b.n	8001cc6 <tofReadDistance+0x66>
  {
    iTimeout++;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	607b      	str	r3, [r7, #4]
    HAL_Delay(5);
 8001cb6:	2005      	movs	r0, #5
 8001cb8:	f000 f8d2 	bl	8001e60 <HAL_Delay>
    if (iTimeout > 50)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b32      	cmp	r3, #50	; 0x32
 8001cc0:	dd01      	ble.n	8001cc6 <tofReadDistance+0x66>
    {
      return 200;
 8001cc2:	23c8      	movs	r3, #200	; 0xc8
 8001cc4:	e00a      	b.n	8001cdc <tofReadDistance+0x7c>
  while (readReg(SYSRANGE_START) & 0x01)
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7ff f9f6 	bl	80010b8 <readReg>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1ec      	bne.n	8001cb0 <tofReadDistance+0x50>
    }
  }
  
  return readRangeContinuousMillimeters();
 8001cd6:	f7ff ff99 	bl	8001c0c <readRangeContinuousMillimeters>
 8001cda:	4603      	mov	r3, r0

} /* tofReadDistance() */
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	2000017c 	.word	0x2000017c

08001ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d20 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001cec:	f7fe fcc8 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cf0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cf2:	e003      	b.n	8001cfc <LoopCopyDataInit>

08001cf4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001cf6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cf8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cfa:	3104      	adds	r1, #4

08001cfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cfc:	480a      	ldr	r0, [pc, #40]	; (8001d28 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001d00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d04:	d3f6      	bcc.n	8001cf4 <CopyDataInit>
  ldr  r2, =_sbss
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001d08:	e002      	b.n	8001d10 <LoopFillZerobss>

08001d0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d0c:	f842 3b04 	str.w	r3, [r2], #4

08001d10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001d12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d14:	d3f9      	bcc.n	8001d0a <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8001d16:	f004 fcb1 	bl	800667c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d1a:	f7fe fdb7 	bl	800088c <main>
  bx  lr    
 8001d1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d24:	08006f94 	.word	0x08006f94
  ldr  r0, =_sdata
 8001d28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d2c:	2000015c 	.word	0x2000015c
  ldr  r2, =_sbss
 8001d30:	2000015c 	.word	0x2000015c
  ldr  r3, = _ebss
 8001d34:	200002f0 	.word	0x200002f0

08001d38 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d38:	e7fe      	b.n	8001d38 <ADC3_IRQHandler>
	...

08001d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d42:	2003      	movs	r0, #3
 8001d44:	f000 f96c 	bl	8002020 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d48:	f001 fea6 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 8001d4c:	4601      	mov	r1, r0
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <HAL_Init+0x68>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	4a13      	ldr	r2, [pc, #76]	; (8001da8 <HAL_Init+0x6c>)
 8001d5a:	5cd3      	ldrb	r3, [r2, r3]
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	fa21 f303 	lsr.w	r3, r1, r3
 8001d64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <HAL_Init+0x68>)
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	4a0e      	ldr	r2, [pc, #56]	; (8001da8 <HAL_Init+0x6c>)
 8001d70:	5cd3      	ldrb	r3, [r2, r3]
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7c:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <HAL_Init+0x70>)
 8001d7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d80:	4a0b      	ldr	r2, [pc, #44]	; (8001db0 <HAL_Init+0x74>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d86:	2000      	movs	r0, #0
 8001d88:	f000 f814 	bl	8001db4 <HAL_InitTick>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e002      	b.n	8001d9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d96:	f7ff f851 	bl	8000e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	58024400 	.word	0x58024400
 8001da8:	08006f28 	.word	0x08006f28
 8001dac:	20000004 	.word	0x20000004
 8001db0:	20000000 	.word	0x20000000

08001db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001dbc:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_InitTick+0x60>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e021      	b.n	8001e0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001dc8:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <HAL_InitTick+0x64>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <HAL_InitTick+0x60>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f943 	bl	800206a <HAL_SYSTICK_Config>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00e      	b.n	8001e0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b0f      	cmp	r3, #15
 8001df2:	d80a      	bhi.n	8001e0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df4:	2200      	movs	r2, #0
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f000 f91b 	bl	8002036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e00:	4a06      	ldr	r2, [pc, #24]	; (8001e1c <HAL_InitTick+0x68>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200000f4 	.word	0x200000f4
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	200000f0 	.word	0x200000f0

08001e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_IncTick+0x20>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_IncTick+0x24>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <HAL_IncTick+0x24>)
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	200000f4 	.word	0x200000f4
 8001e44:	200002e8 	.word	0x200002e8

08001e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_GetTick+0x14>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	200002e8 	.word	0x200002e8

08001e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e68:	f7ff ffee 	bl	8001e48 <HAL_GetTick>
 8001e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e78:	d005      	beq.n	8001e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_Delay+0x40>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e86:	bf00      	nop
 8001e88:	f7ff ffde 	bl	8001e48 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d8f7      	bhi.n	8001e88 <HAL_Delay+0x28>
  {
  }
}
 8001e98:	bf00      	nop
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200000f4 	.word	0x200000f4

08001ea4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ea8:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <HAL_GetREVID+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	0c1b      	lsrs	r3, r3, #16
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	5c001000 	.word	0x5c001000

08001ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <__NVIC_SetPriorityGrouping+0x40>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eea:	4a04      	ldr	r2, [pc, #16]	; (8001efc <__NVIC_SetPriorityGrouping+0x40>)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	60d3      	str	r3, [r2, #12]
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000ed00 	.word	0xe000ed00
 8001f00:	05fa0000 	.word	0x05fa0000

08001f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <__NVIC_GetPriorityGrouping+0x18>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	f003 0307 	and.w	r3, r3, #7
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	db0a      	blt.n	8001f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	490c      	ldr	r1, [pc, #48]	; (8001f6c <__NVIC_SetPriority+0x4c>)
 8001f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	440b      	add	r3, r1
 8001f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f48:	e00a      	b.n	8001f60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4908      	ldr	r1, [pc, #32]	; (8001f70 <__NVIC_SetPriority+0x50>)
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	3b04      	subs	r3, #4
 8001f58:	0112      	lsls	r2, r2, #4
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	761a      	strb	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f1c3 0307 	rsb	r3, r3, #7
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	bf28      	it	cs
 8001f92:	2304      	movcs	r3, #4
 8001f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d902      	bls.n	8001fa4 <NVIC_EncodePriority+0x30>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3b03      	subs	r3, #3
 8001fa2:	e000      	b.n	8001fa6 <NVIC_EncodePriority+0x32>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	43d9      	mvns	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	4313      	orrs	r3, r2
         );
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fec:	d301      	bcc.n	8001ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00f      	b.n	8002012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <SysTick_Config+0x40>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f7ff ff8e 	bl	8001f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <SysTick_Config+0x40>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200a:	4b04      	ldr	r3, [pc, #16]	; (800201c <SysTick_Config+0x40>)
 800200c:	2207      	movs	r2, #7
 800200e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	e000e010 	.word	0xe000e010

08002020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ff47 	bl	8001ebc <__NVIC_SetPriorityGrouping>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002044:	f7ff ff5e 	bl	8001f04 <__NVIC_GetPriorityGrouping>
 8002048:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f7ff ff90 	bl	8001f74 <NVIC_EncodePriority>
 8002054:	4602      	mov	r2, r0
 8002056:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff5f 	bl	8001f20 <__NVIC_SetPriority>
}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ffb2 	bl	8001fdc <SysTick_Config>
 8002078:	4603      	mov	r3, r0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002092:	4b89      	ldr	r3, [pc, #548]	; (80022b8 <HAL_GPIO_Init+0x234>)
 8002094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002096:	e194      	b.n	80023c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	2101      	movs	r1, #1
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	fa01 f303 	lsl.w	r3, r1, r3
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 8186 	beq.w	80023bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d00b      	beq.n	80020d0 <HAL_GPIO_Init+0x4c>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d007      	beq.n	80020d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020c4:	2b11      	cmp	r3, #17
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b12      	cmp	r3, #18
 80020ce:	d130      	bne.n	8002132 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2203      	movs	r2, #3
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002106:	2201      	movs	r2, #1
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	091b      	lsrs	r3, r3, #4
 800211c:	f003 0201 	and.w	r2, r3, #1
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	2203      	movs	r2, #3
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0xee>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b12      	cmp	r3, #18
 8002170:	d123      	bne.n	80021ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	08da      	lsrs	r2, r3, #3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3208      	adds	r2, #8
 800217a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	220f      	movs	r2, #15
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	691a      	ldr	r2, [r3, #16]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	08da      	lsrs	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3208      	adds	r2, #8
 80021b4:	69b9      	ldr	r1, [r7, #24]
 80021b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	2203      	movs	r2, #3
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0203 	and.w	r2, r3, #3
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 80e0 	beq.w	80023bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fc:	4b2f      	ldr	r3, [pc, #188]	; (80022bc <HAL_GPIO_Init+0x238>)
 80021fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002202:	4a2e      	ldr	r2, [pc, #184]	; (80022bc <HAL_GPIO_Init+0x238>)
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800220c:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <HAL_GPIO_Init+0x238>)
 800220e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800221a:	4a29      	ldr	r2, [pc, #164]	; (80022c0 <HAL_GPIO_Init+0x23c>)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	220f      	movs	r2, #15
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a20      	ldr	r2, [pc, #128]	; (80022c4 <HAL_GPIO_Init+0x240>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d052      	beq.n	80022ec <HAL_GPIO_Init+0x268>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a1f      	ldr	r2, [pc, #124]	; (80022c8 <HAL_GPIO_Init+0x244>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d031      	beq.n	80022b2 <HAL_GPIO_Init+0x22e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a1e      	ldr	r2, [pc, #120]	; (80022cc <HAL_GPIO_Init+0x248>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d02b      	beq.n	80022ae <HAL_GPIO_Init+0x22a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_GPIO_Init+0x24c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d025      	beq.n	80022aa <HAL_GPIO_Init+0x226>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a1c      	ldr	r2, [pc, #112]	; (80022d4 <HAL_GPIO_Init+0x250>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d01f      	beq.n	80022a6 <HAL_GPIO_Init+0x222>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a1b      	ldr	r2, [pc, #108]	; (80022d8 <HAL_GPIO_Init+0x254>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d019      	beq.n	80022a2 <HAL_GPIO_Init+0x21e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a1a      	ldr	r2, [pc, #104]	; (80022dc <HAL_GPIO_Init+0x258>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d013      	beq.n	800229e <HAL_GPIO_Init+0x21a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <HAL_GPIO_Init+0x25c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00d      	beq.n	800229a <HAL_GPIO_Init+0x216>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <HAL_GPIO_Init+0x260>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d007      	beq.n	8002296 <HAL_GPIO_Init+0x212>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <HAL_GPIO_Init+0x264>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d101      	bne.n	8002292 <HAL_GPIO_Init+0x20e>
 800228e:	2309      	movs	r3, #9
 8002290:	e02d      	b.n	80022ee <HAL_GPIO_Init+0x26a>
 8002292:	230a      	movs	r3, #10
 8002294:	e02b      	b.n	80022ee <HAL_GPIO_Init+0x26a>
 8002296:	2308      	movs	r3, #8
 8002298:	e029      	b.n	80022ee <HAL_GPIO_Init+0x26a>
 800229a:	2307      	movs	r3, #7
 800229c:	e027      	b.n	80022ee <HAL_GPIO_Init+0x26a>
 800229e:	2306      	movs	r3, #6
 80022a0:	e025      	b.n	80022ee <HAL_GPIO_Init+0x26a>
 80022a2:	2305      	movs	r3, #5
 80022a4:	e023      	b.n	80022ee <HAL_GPIO_Init+0x26a>
 80022a6:	2304      	movs	r3, #4
 80022a8:	e021      	b.n	80022ee <HAL_GPIO_Init+0x26a>
 80022aa:	2303      	movs	r3, #3
 80022ac:	e01f      	b.n	80022ee <HAL_GPIO_Init+0x26a>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e01d      	b.n	80022ee <HAL_GPIO_Init+0x26a>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e01b      	b.n	80022ee <HAL_GPIO_Init+0x26a>
 80022b6:	bf00      	nop
 80022b8:	58000080 	.word	0x58000080
 80022bc:	58024400 	.word	0x58024400
 80022c0:	58000400 	.word	0x58000400
 80022c4:	58020000 	.word	0x58020000
 80022c8:	58020400 	.word	0x58020400
 80022cc:	58020800 	.word	0x58020800
 80022d0:	58020c00 	.word	0x58020c00
 80022d4:	58021000 	.word	0x58021000
 80022d8:	58021400 	.word	0x58021400
 80022dc:	58021800 	.word	0x58021800
 80022e0:	58021c00 	.word	0x58021c00
 80022e4:	58022000 	.word	0x58022000
 80022e8:	58022400 	.word	0x58022400
 80022ec:	2300      	movs	r3, #0
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	f002 0203 	and.w	r2, r2, #3
 80022f4:	0092      	lsls	r2, r2, #2
 80022f6:	4093      	lsls	r3, r2
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022fe:	4938      	ldr	r1, [pc, #224]	; (80023e0 <HAL_GPIO_Init+0x35c>)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	3302      	adds	r3, #2
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002386:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800238e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	3301      	adds	r3, #1
 80023c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f47f ae63 	bne.w	8002098 <HAL_GPIO_Init+0x14>
  }
}
 80023d2:	bf00      	nop
 80023d4:	3724      	adds	r7, #36	; 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	58000400 	.word	0x58000400

080023e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
 80023f0:	4613      	mov	r3, r2
 80023f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023f4:	787b      	ldrb	r3, [r7, #1]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023fa:	887a      	ldrh	r2, [r7, #2]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002400:	e003      	b.n	800240a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002402:	887b      	ldrh	r3, [r7, #2]
 8002404:	041a      	lsls	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	619a      	str	r2, [r3, #24]
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002420:	4a08      	ldr	r2, [pc, #32]	; (8002444 <HAL_HSEM_FastTake+0x2c>)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3320      	adds	r3, #32
 8002426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242a:	4a07      	ldr	r2, [pc, #28]	; (8002448 <HAL_HSEM_FastTake+0x30>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d101      	bne.n	8002434 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	e000      	b.n	8002436 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	58026400 	.word	0x58026400
 8002448:	80000300 	.word	0x80000300

0800244c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002456:	4906      	ldr	r1, [pc, #24]	; (8002470 <HAL_HSEM_Release+0x24>)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	58026400 	.word	0x58026400

08002474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e07f      	b.n	8002586 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7fe fce8 	bl	8000e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2224      	movs	r2, #36	; 0x24
 80024a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0201 	bic.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d107      	bne.n	80024ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	e006      	b.n	80024fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d104      	bne.n	800250e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800250c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <HAL_I2C_Init+0x11c>)
 800251a:	430b      	orrs	r3, r1
 800251c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800252c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	ea42 0103 	orr.w	r1, r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	021a      	lsls	r2, r3, #8
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69d9      	ldr	r1, [r3, #28]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1a      	ldr	r2, [r3, #32]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	02008000 	.word	0x02008000

08002594 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	461a      	mov	r2, r3
 80025a0:	460b      	mov	r3, r1
 80025a2:	817b      	strh	r3, [r7, #10]
 80025a4:	4613      	mov	r3, r2
 80025a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	f040 80da 	bne.w	800276a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_I2C_Master_Transmit+0x30>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e0d3      	b.n	800276c <HAL_I2C_Master_Transmit+0x1d8>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025cc:	f7ff fc3c 	bl	8001e48 <HAL_GetTick>
 80025d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	2319      	movs	r3, #25
 80025d8:	2201      	movs	r2, #1
 80025da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f9e6 	bl	80029b0 <I2C_WaitOnFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e0be      	b.n	800276c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2221      	movs	r2, #33	; 0x21
 80025f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2210      	movs	r2, #16
 80025fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	893a      	ldrh	r2, [r7, #8]
 800260e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	2bff      	cmp	r3, #255	; 0xff
 800261e:	d90e      	bls.n	800263e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	22ff      	movs	r2, #255	; 0xff
 8002624:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	b2da      	uxtb	r2, r3
 800262c:	8979      	ldrh	r1, [r7, #10]
 800262e:	4b51      	ldr	r3, [pc, #324]	; (8002774 <HAL_I2C_Master_Transmit+0x1e0>)
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fb48 	bl	8002ccc <I2C_TransferConfig>
 800263c:	e06c      	b.n	8002718 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	b2da      	uxtb	r2, r3
 800264e:	8979      	ldrh	r1, [r7, #10]
 8002650:	4b48      	ldr	r3, [pc, #288]	; (8002774 <HAL_I2C_Master_Transmit+0x1e0>)
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fb37 	bl	8002ccc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800265e:	e05b      	b.n	8002718 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	6a39      	ldr	r1, [r7, #32]
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f9e3 	bl	8002a30 <I2C_WaitOnTXISFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e07b      	b.n	800276c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d034      	beq.n	8002718 <HAL_I2C_Master_Transmit+0x184>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d130      	bne.n	8002718 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	2200      	movs	r2, #0
 80026be:	2180      	movs	r1, #128	; 0x80
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f975 	bl	80029b0 <I2C_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e04d      	b.n	800276c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2bff      	cmp	r3, #255	; 0xff
 80026d8:	d90e      	bls.n	80026f8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	22ff      	movs	r2, #255	; 0xff
 80026de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	8979      	ldrh	r1, [r7, #10]
 80026e8:	2300      	movs	r3, #0
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 faeb 	bl	8002ccc <I2C_TransferConfig>
 80026f6:	e00f      	b.n	8002718 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002706:	b2da      	uxtb	r2, r3
 8002708:	8979      	ldrh	r1, [r7, #10]
 800270a:	2300      	movs	r3, #0
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 fada 	bl	8002ccc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271c:	b29b      	uxth	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d19e      	bne.n	8002660 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	6a39      	ldr	r1, [r7, #32]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 f9c2 	bl	8002ab0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e01a      	b.n	800276c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2220      	movs	r2, #32
 800273c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_I2C_Master_Transmit+0x1e4>)
 800274a:	400b      	ands	r3, r1
 800274c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2220      	movs	r2, #32
 8002752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	e000      	b.n	800276c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800276a:	2302      	movs	r3, #2
  }
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	80002000 	.word	0x80002000
 8002778:	fe00e800 	.word	0xfe00e800

0800277c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af02      	add	r7, sp, #8
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	461a      	mov	r2, r3
 8002788:	460b      	mov	r3, r1
 800278a:	817b      	strh	r3, [r7, #10]
 800278c:	4613      	mov	r3, r2
 800278e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b20      	cmp	r3, #32
 800279a:	f040 80db 	bne.w	8002954 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_I2C_Master_Receive+0x30>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e0d4      	b.n	8002956 <HAL_I2C_Master_Receive+0x1da>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027b4:	f7ff fb48 	bl	8001e48 <HAL_GetTick>
 80027b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	2319      	movs	r3, #25
 80027c0:	2201      	movs	r2, #1
 80027c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f8f2 	bl	80029b0 <I2C_WaitOnFlagUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e0bf      	b.n	8002956 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2222      	movs	r2, #34	; 0x22
 80027da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2210      	movs	r2, #16
 80027e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	893a      	ldrh	r2, [r7, #8]
 80027f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002802:	b29b      	uxth	r3, r3
 8002804:	2bff      	cmp	r3, #255	; 0xff
 8002806:	d90e      	bls.n	8002826 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	22ff      	movs	r2, #255	; 0xff
 800280c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002812:	b2da      	uxtb	r2, r3
 8002814:	8979      	ldrh	r1, [r7, #10]
 8002816:	4b52      	ldr	r3, [pc, #328]	; (8002960 <HAL_I2C_Master_Receive+0x1e4>)
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 fa54 	bl	8002ccc <I2C_TransferConfig>
 8002824:	e06d      	b.n	8002902 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	b2da      	uxtb	r2, r3
 8002836:	8979      	ldrh	r1, [r7, #10]
 8002838:	4b49      	ldr	r3, [pc, #292]	; (8002960 <HAL_I2C_Master_Receive+0x1e4>)
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 fa43 	bl	8002ccc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002846:	e05c      	b.n	8002902 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	6a39      	ldr	r1, [r7, #32]
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f96b 	bl	8002b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e07c      	b.n	8002956 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002892:	b29b      	uxth	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d034      	beq.n	8002902 <HAL_I2C_Master_Receive+0x186>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289c:	2b00      	cmp	r3, #0
 800289e:	d130      	bne.n	8002902 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	2200      	movs	r2, #0
 80028a8:	2180      	movs	r1, #128	; 0x80
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f880 	bl	80029b0 <I2C_WaitOnFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e04d      	b.n	8002956 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2bff      	cmp	r3, #255	; 0xff
 80028c2:	d90e      	bls.n	80028e2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	22ff      	movs	r2, #255	; 0xff
 80028c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	8979      	ldrh	r1, [r7, #10]
 80028d2:	2300      	movs	r3, #0
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f9f6 	bl	8002ccc <I2C_TransferConfig>
 80028e0:	e00f      	b.n	8002902 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	8979      	ldrh	r1, [r7, #10]
 80028f4:	2300      	movs	r3, #0
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 f9e5 	bl	8002ccc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d19d      	bne.n	8002848 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	6a39      	ldr	r1, [r7, #32]
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f8cd 	bl	8002ab0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e01a      	b.n	8002956 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2220      	movs	r2, #32
 8002926:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6859      	ldr	r1, [r3, #4]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <HAL_I2C_Master_Receive+0x1e8>)
 8002934:	400b      	ands	r3, r1
 8002936:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	e000      	b.n	8002956 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002954:	2302      	movs	r3, #2
  }
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	80002400 	.word	0x80002400
 8002964:	fe00e800 	.word	0xfe00e800

08002968 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b02      	cmp	r3, #2
 800297c:	d103      	bne.n	8002986 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2200      	movs	r2, #0
 8002984:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d007      	beq.n	80029a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	619a      	str	r2, [r3, #24]
  }
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c0:	e022      	b.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d01e      	beq.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ca:	f7ff fa3d 	bl	8001e48 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d302      	bcc.n	80029e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d113      	bne.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	f043 0220 	orr.w	r2, r3, #32
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e00f      	b.n	8002a28 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	4013      	ands	r3, r2
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	bf0c      	ite	eq
 8002a18:	2301      	moveq	r3, #1
 8002a1a:	2300      	movne	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d0cd      	beq.n	80029c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a3c:	e02c      	b.n	8002a98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f8dc 	bl	8002c00 <I2C_IsAcknowledgeFailed>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e02a      	b.n	8002aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d01e      	beq.n	8002a98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5a:	f7ff f9f5 	bl	8001e48 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d302      	bcc.n	8002a70 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d113      	bne.n	8002a98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	f043 0220 	orr.w	r2, r3, #32
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e007      	b.n	8002aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d1cb      	bne.n	8002a3e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002abc:	e028      	b.n	8002b10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 f89c 	bl	8002c00 <I2C_IsAcknowledgeFailed>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e026      	b.n	8002b20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad2:	f7ff f9b9 	bl	8001e48 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d302      	bcc.n	8002ae8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d113      	bne.n	8002b10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aec:	f043 0220 	orr.w	r2, r3, #32
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e007      	b.n	8002b20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	d1cf      	bne.n	8002abe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b34:	e055      	b.n	8002be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68b9      	ldr	r1, [r7, #8]
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f860 	bl	8002c00 <I2C_IsAcknowledgeFailed>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e053      	b.n	8002bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d129      	bne.n	8002bac <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d105      	bne.n	8002b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e03f      	b.n	8002bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2220      	movs	r2, #32
 8002b78:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6859      	ldr	r1, [r3, #4]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002b86:	400b      	ands	r3, r1
 8002b88:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e022      	b.n	8002bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bac:	f7ff f94c 	bl	8001e48 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d302      	bcc.n	8002bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10f      	bne.n	8002be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	f043 0220 	orr.w	r2, r3, #32
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e007      	b.n	8002bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d1a2      	bne.n	8002b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	fe00e800 	.word	0xfe00e800

08002c00 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b10      	cmp	r3, #16
 8002c18:	d151      	bne.n	8002cbe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c1a:	e022      	b.n	8002c62 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c22:	d01e      	beq.n	8002c62 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c24:	f7ff f910 	bl	8001e48 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d302      	bcc.n	8002c3a <I2C_IsAcknowledgeFailed+0x3a>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d113      	bne.n	8002c62 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	f043 0220 	orr.w	r2, r3, #32
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e02e      	b.n	8002cc0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d1d5      	bne.n	8002c1c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2210      	movs	r2, #16
 8002c76:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f7ff fe71 	bl	8002968 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <I2C_IsAcknowledgeFailed+0xc8>)
 8002c92:	400b      	ands	r3, r1
 8002c94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f043 0204 	orr.w	r2, r3, #4
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	fe00e800 	.word	0xfe00e800

08002ccc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	817b      	strh	r3, [r7, #10]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	0d5b      	lsrs	r3, r3, #21
 8002ce8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002cec:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <I2C_TransferConfig+0x58>)
 8002cee:	430b      	orrs	r3, r1
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	ea02 0103 	and.w	r1, r2, r3
 8002cf6:	897b      	ldrh	r3, [r7, #10]
 8002cf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cfc:	7a7b      	ldrb	r3, [r7, #9]
 8002cfe:	041b      	lsls	r3, r3, #16
 8002d00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	03ff63ff 	.word	0x03ff63ff

08002d28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d138      	bne.n	8002db0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e032      	b.n	8002db2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2224      	movs	r2, #36	; 0x24
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0201 	bic.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6819      	ldr	r1, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e000      	b.n	8002db2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
  }
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d139      	bne.n	8002e48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e033      	b.n	8002e4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2224      	movs	r2, #36	; 0x24
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0201 	bic.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	e000      	b.n	8002e4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e48:	2302      	movs	r3, #2
  }
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002e60:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	2b06      	cmp	r3, #6
 8002e6a:	d00a      	beq.n	8002e82 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e6c:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d001      	beq.n	8002e7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e040      	b.n	8002f00 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e03e      	b.n	8002f00 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e82:	4b21      	ldr	r3, [pc, #132]	; (8002f08 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002e8a:	491f      	ldr	r1, [pc, #124]	; (8002f08 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002e92:	f7fe ffd9 	bl	8001e48 <HAL_GetTick>
 8002e96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e98:	e009      	b.n	8002eae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e9a:	f7fe ffd5 	bl	8001e48 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ea8:	d901      	bls.n	8002eae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e028      	b.n	8002f00 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002eae:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <HAL_PWREx_ConfigSupply+0xb0>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eba:	d1ee      	bne.n	8002e9a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b1e      	cmp	r3, #30
 8002ec0:	d008      	beq.n	8002ed4 <HAL_PWREx_ConfigSupply+0x7c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b2e      	cmp	r3, #46	; 0x2e
 8002ec6:	d005      	beq.n	8002ed4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b1d      	cmp	r3, #29
 8002ecc:	d002      	beq.n	8002ed4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b2d      	cmp	r3, #45	; 0x2d
 8002ed2:	d114      	bne.n	8002efe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002ed4:	f7fe ffb8 	bl	8001e48 <HAL_GetTick>
 8002ed8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002eda:	e009      	b.n	8002ef0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002edc:	f7fe ffb4 	bl	8001e48 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eea:	d901      	bls.n	8002ef0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e007      	b.n	8002f00 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efc:	d1ee      	bne.n	8002edc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	58024800 	.word	0x58024800

08002f0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08c      	sub	sp, #48	; 0x30
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e3ff      	b.n	800371e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 8087 	beq.w	800303a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f2c:	4b99      	ldr	r3, [pc, #612]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f36:	4b97      	ldr	r3, [pc, #604]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3e:	2b10      	cmp	r3, #16
 8002f40:	d007      	beq.n	8002f52 <HAL_RCC_OscConfig+0x46>
 8002f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f44:	2b18      	cmp	r3, #24
 8002f46:	d110      	bne.n	8002f6a <HAL_RCC_OscConfig+0x5e>
 8002f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d10b      	bne.n	8002f6a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f52:	4b90      	ldr	r3, [pc, #576]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d06c      	beq.n	8003038 <HAL_RCC_OscConfig+0x12c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d168      	bne.n	8003038 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e3d9      	b.n	800371e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f72:	d106      	bne.n	8002f82 <HAL_RCC_OscConfig+0x76>
 8002f74:	4b87      	ldr	r3, [pc, #540]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a86      	ldr	r2, [pc, #536]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8002f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	e02e      	b.n	8002fe0 <HAL_RCC_OscConfig+0xd4>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x98>
 8002f8a:	4b82      	ldr	r3, [pc, #520]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a81      	ldr	r2, [pc, #516]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8002f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	4b7f      	ldr	r3, [pc, #508]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a7e      	ldr	r2, [pc, #504]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8002f9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	e01d      	b.n	8002fe0 <HAL_RCC_OscConfig+0xd4>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0xbc>
 8002fae:	4b79      	ldr	r3, [pc, #484]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a78      	ldr	r2, [pc, #480]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8002fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	4b76      	ldr	r3, [pc, #472]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a75      	ldr	r2, [pc, #468]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8002fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0xd4>
 8002fc8:	4b72      	ldr	r3, [pc, #456]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a71      	ldr	r2, [pc, #452]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8002fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	4b6f      	ldr	r3, [pc, #444]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a6e      	ldr	r2, [pc, #440]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8002fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d013      	beq.n	8003010 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fe ff2e 	bl	8001e48 <HAL_GetTick>
 8002fec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7fe ff2a 	bl	8001e48 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	; 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e38d      	b.n	800371e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003002:	4b64      	ldr	r3, [pc, #400]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0xe4>
 800300e:	e014      	b.n	800303a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fe ff1a 	bl	8001e48 <HAL_GetTick>
 8003014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003018:	f7fe ff16 	bl	8001e48 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b64      	cmp	r3, #100	; 0x64
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e379      	b.n	800371e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800302a:	4b5a      	ldr	r3, [pc, #360]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x10c>
 8003036:	e000      	b.n	800303a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 80ae 	beq.w	80031a4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003048:	4b52      	ldr	r3, [pc, #328]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003050:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003052:	4b50      	ldr	r3, [pc, #320]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d007      	beq.n	800306e <HAL_RCC_OscConfig+0x162>
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	2b18      	cmp	r3, #24
 8003062:	d13a      	bne.n	80030da <HAL_RCC_OscConfig+0x1ce>
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d135      	bne.n	80030da <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800306e:	4b49      	ldr	r3, [pc, #292]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_RCC_OscConfig+0x17a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e34b      	b.n	800371e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003086:	f7fe ff0d 	bl	8001ea4 <HAL_GetREVID>
 800308a:	4602      	mov	r2, r0
 800308c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003090:	429a      	cmp	r2, r3
 8003092:	d817      	bhi.n	80030c4 <HAL_RCC_OscConfig+0x1b8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	d108      	bne.n	80030ae <HAL_RCC_OscConfig+0x1a2>
 800309c:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80030a4:	4a3b      	ldr	r2, [pc, #236]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 80030a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030aa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030ac:	e07a      	b.n	80031a4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ae:	4b39      	ldr	r3, [pc, #228]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	031b      	lsls	r3, r3, #12
 80030bc:	4935      	ldr	r1, [pc, #212]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030c2:	e06f      	b.n	80031a4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c4:	4b33      	ldr	r3, [pc, #204]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	4930      	ldr	r1, [pc, #192]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d8:	e064      	b.n	80031a4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d045      	beq.n	800316e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030e2:	4b2c      	ldr	r3, [pc, #176]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 0219 	bic.w	r2, r3, #25
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	4929      	ldr	r1, [pc, #164]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fe fea8 	bl	8001e48 <HAL_GetTick>
 80030f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030fc:	f7fe fea4 	bl	8001e48 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e307      	b.n	800371e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800310e:	4b21      	ldr	r3, [pc, #132]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311a:	f7fe fec3 	bl	8001ea4 <HAL_GetREVID>
 800311e:	4602      	mov	r2, r0
 8003120:	f241 0303 	movw	r3, #4099	; 0x1003
 8003124:	429a      	cmp	r2, r3
 8003126:	d817      	bhi.n	8003158 <HAL_RCC_OscConfig+0x24c>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d108      	bne.n	8003142 <HAL_RCC_OscConfig+0x236>
 8003130:	4b18      	ldr	r3, [pc, #96]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003138:	4a16      	ldr	r2, [pc, #88]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 800313a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313e:	6053      	str	r3, [r2, #4]
 8003140:	e030      	b.n	80031a4 <HAL_RCC_OscConfig+0x298>
 8003142:	4b14      	ldr	r3, [pc, #80]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	031b      	lsls	r3, r3, #12
 8003150:	4910      	ldr	r1, [pc, #64]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8003152:	4313      	orrs	r3, r2
 8003154:	604b      	str	r3, [r1, #4]
 8003156:	e025      	b.n	80031a4 <HAL_RCC_OscConfig+0x298>
 8003158:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	061b      	lsls	r3, r3, #24
 8003166:	490b      	ldr	r1, [pc, #44]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8003168:	4313      	orrs	r3, r2
 800316a:	604b      	str	r3, [r1, #4]
 800316c:	e01a      	b.n	80031a4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800316e:	4b09      	ldr	r3, [pc, #36]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a08      	ldr	r2, [pc, #32]	; (8003194 <HAL_RCC_OscConfig+0x288>)
 8003174:	f023 0301 	bic.w	r3, r3, #1
 8003178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317a:	f7fe fe65 	bl	8001e48 <HAL_GetTick>
 800317e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003180:	e00a      	b.n	8003198 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003182:	f7fe fe61 	bl	8001e48 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d903      	bls.n	8003198 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e2c4      	b.n	800371e <HAL_RCC_OscConfig+0x812>
 8003194:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003198:	4ba4      	ldr	r3, [pc, #656]	; (800342c <HAL_RCC_OscConfig+0x520>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1ee      	bne.n	8003182 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80a9 	beq.w	8003304 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031b2:	4b9e      	ldr	r3, [pc, #632]	; (800342c <HAL_RCC_OscConfig+0x520>)
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031bc:	4b9b      	ldr	r3, [pc, #620]	; (800342c <HAL_RCC_OscConfig+0x520>)
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d007      	beq.n	80031d8 <HAL_RCC_OscConfig+0x2cc>
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2b18      	cmp	r3, #24
 80031cc:	d13a      	bne.n	8003244 <HAL_RCC_OscConfig+0x338>
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d135      	bne.n	8003244 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031d8:	4b94      	ldr	r3, [pc, #592]	; (800342c <HAL_RCC_OscConfig+0x520>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_RCC_OscConfig+0x2e4>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	2b80      	cmp	r3, #128	; 0x80
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e296      	b.n	800371e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031f0:	f7fe fe58 	bl	8001ea4 <HAL_GetREVID>
 80031f4:	4602      	mov	r2, r0
 80031f6:	f241 0303 	movw	r3, #4099	; 0x1003
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d817      	bhi.n	800322e <HAL_RCC_OscConfig+0x322>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	2b20      	cmp	r3, #32
 8003204:	d108      	bne.n	8003218 <HAL_RCC_OscConfig+0x30c>
 8003206:	4b89      	ldr	r3, [pc, #548]	; (800342c <HAL_RCC_OscConfig+0x520>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800320e:	4a87      	ldr	r2, [pc, #540]	; (800342c <HAL_RCC_OscConfig+0x520>)
 8003210:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003214:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003216:	e075      	b.n	8003304 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003218:	4b84      	ldr	r3, [pc, #528]	; (800342c <HAL_RCC_OscConfig+0x520>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	069b      	lsls	r3, r3, #26
 8003226:	4981      	ldr	r1, [pc, #516]	; (800342c <HAL_RCC_OscConfig+0x520>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800322c:	e06a      	b.n	8003304 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800322e:	4b7f      	ldr	r3, [pc, #508]	; (800342c <HAL_RCC_OscConfig+0x520>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	061b      	lsls	r3, r3, #24
 800323c:	497b      	ldr	r1, [pc, #492]	; (800342c <HAL_RCC_OscConfig+0x520>)
 800323e:	4313      	orrs	r3, r2
 8003240:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003242:	e05f      	b.n	8003304 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d042      	beq.n	80032d2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800324c:	4b77      	ldr	r3, [pc, #476]	; (800342c <HAL_RCC_OscConfig+0x520>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a76      	ldr	r2, [pc, #472]	; (800342c <HAL_RCC_OscConfig+0x520>)
 8003252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fe fdf6 	bl	8001e48 <HAL_GetTick>
 800325c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003260:	f7fe fdf2 	bl	8001e48 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e255      	b.n	800371e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003272:	4b6e      	ldr	r3, [pc, #440]	; (800342c <HAL_RCC_OscConfig+0x520>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800327e:	f7fe fe11 	bl	8001ea4 <HAL_GetREVID>
 8003282:	4602      	mov	r2, r0
 8003284:	f241 0303 	movw	r3, #4099	; 0x1003
 8003288:	429a      	cmp	r2, r3
 800328a:	d817      	bhi.n	80032bc <HAL_RCC_OscConfig+0x3b0>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	2b20      	cmp	r3, #32
 8003292:	d108      	bne.n	80032a6 <HAL_RCC_OscConfig+0x39a>
 8003294:	4b65      	ldr	r3, [pc, #404]	; (800342c <HAL_RCC_OscConfig+0x520>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800329c:	4a63      	ldr	r2, [pc, #396]	; (800342c <HAL_RCC_OscConfig+0x520>)
 800329e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032a2:	6053      	str	r3, [r2, #4]
 80032a4:	e02e      	b.n	8003304 <HAL_RCC_OscConfig+0x3f8>
 80032a6:	4b61      	ldr	r3, [pc, #388]	; (800342c <HAL_RCC_OscConfig+0x520>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	069b      	lsls	r3, r3, #26
 80032b4:	495d      	ldr	r1, [pc, #372]	; (800342c <HAL_RCC_OscConfig+0x520>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	604b      	str	r3, [r1, #4]
 80032ba:	e023      	b.n	8003304 <HAL_RCC_OscConfig+0x3f8>
 80032bc:	4b5b      	ldr	r3, [pc, #364]	; (800342c <HAL_RCC_OscConfig+0x520>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	061b      	lsls	r3, r3, #24
 80032ca:	4958      	ldr	r1, [pc, #352]	; (800342c <HAL_RCC_OscConfig+0x520>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60cb      	str	r3, [r1, #12]
 80032d0:	e018      	b.n	8003304 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80032d2:	4b56      	ldr	r3, [pc, #344]	; (800342c <HAL_RCC_OscConfig+0x520>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a55      	ldr	r2, [pc, #340]	; (800342c <HAL_RCC_OscConfig+0x520>)
 80032d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032de:	f7fe fdb3 	bl	8001e48 <HAL_GetTick>
 80032e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80032e6:	f7fe fdaf 	bl	8001e48 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e212      	b.n	800371e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032f8:	4b4c      	ldr	r3, [pc, #304]	; (800342c <HAL_RCC_OscConfig+0x520>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f0      	bne.n	80032e6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d036      	beq.n	800337e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d019      	beq.n	800334c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003318:	4b44      	ldr	r3, [pc, #272]	; (800342c <HAL_RCC_OscConfig+0x520>)
 800331a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800331c:	4a43      	ldr	r2, [pc, #268]	; (800342c <HAL_RCC_OscConfig+0x520>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003324:	f7fe fd90 	bl	8001e48 <HAL_GetTick>
 8003328:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800332c:	f7fe fd8c 	bl	8001e48 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e1ef      	b.n	800371e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800333e:	4b3b      	ldr	r3, [pc, #236]	; (800342c <HAL_RCC_OscConfig+0x520>)
 8003340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x420>
 800334a:	e018      	b.n	800337e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800334c:	4b37      	ldr	r3, [pc, #220]	; (800342c <HAL_RCC_OscConfig+0x520>)
 800334e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003350:	4a36      	ldr	r2, [pc, #216]	; (800342c <HAL_RCC_OscConfig+0x520>)
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003358:	f7fe fd76 	bl	8001e48 <HAL_GetTick>
 800335c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003360:	f7fe fd72 	bl	8001e48 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e1d5      	b.n	800371e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003372:	4b2e      	ldr	r3, [pc, #184]	; (800342c <HAL_RCC_OscConfig+0x520>)
 8003374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d036      	beq.n	80033f8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d019      	beq.n	80033c6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003392:	4b26      	ldr	r3, [pc, #152]	; (800342c <HAL_RCC_OscConfig+0x520>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a25      	ldr	r2, [pc, #148]	; (800342c <HAL_RCC_OscConfig+0x520>)
 8003398:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800339c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800339e:	f7fe fd53 	bl	8001e48 <HAL_GetTick>
 80033a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80033a6:	f7fe fd4f 	bl	8001e48 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e1b2      	b.n	800371e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033b8:	4b1c      	ldr	r3, [pc, #112]	; (800342c <HAL_RCC_OscConfig+0x520>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f0      	beq.n	80033a6 <HAL_RCC_OscConfig+0x49a>
 80033c4:	e018      	b.n	80033f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033c6:	4b19      	ldr	r3, [pc, #100]	; (800342c <HAL_RCC_OscConfig+0x520>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a18      	ldr	r2, [pc, #96]	; (800342c <HAL_RCC_OscConfig+0x520>)
 80033cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033d2:	f7fe fd39 	bl	8001e48 <HAL_GetTick>
 80033d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80033da:	f7fe fd35 	bl	8001e48 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e198      	b.n	800371e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <HAL_RCC_OscConfig+0x520>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1f0      	bne.n	80033da <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8085 	beq.w	8003510 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003406:	4b0a      	ldr	r3, [pc, #40]	; (8003430 <HAL_RCC_OscConfig+0x524>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a09      	ldr	r2, [pc, #36]	; (8003430 <HAL_RCC_OscConfig+0x524>)
 800340c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003410:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003412:	f7fe fd19 	bl	8001e48 <HAL_GetTick>
 8003416:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003418:	e00c      	b.n	8003434 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800341a:	f7fe fd15 	bl	8001e48 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b64      	cmp	r3, #100	; 0x64
 8003426:	d905      	bls.n	8003434 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e178      	b.n	800371e <HAL_RCC_OscConfig+0x812>
 800342c:	58024400 	.word	0x58024400
 8003430:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003434:	4b96      	ldr	r3, [pc, #600]	; (8003690 <HAL_RCC_OscConfig+0x784>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0ec      	beq.n	800341a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d106      	bne.n	8003456 <HAL_RCC_OscConfig+0x54a>
 8003448:	4b92      	ldr	r3, [pc, #584]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	4a91      	ldr	r2, [pc, #580]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6713      	str	r3, [r2, #112]	; 0x70
 8003454:	e02d      	b.n	80034b2 <HAL_RCC_OscConfig+0x5a6>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10c      	bne.n	8003478 <HAL_RCC_OscConfig+0x56c>
 800345e:	4b8d      	ldr	r3, [pc, #564]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003462:	4a8c      	ldr	r2, [pc, #560]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	6713      	str	r3, [r2, #112]	; 0x70
 800346a:	4b8a      	ldr	r3, [pc, #552]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	4a89      	ldr	r2, [pc, #548]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 8003470:	f023 0304 	bic.w	r3, r3, #4
 8003474:	6713      	str	r3, [r2, #112]	; 0x70
 8003476:	e01c      	b.n	80034b2 <HAL_RCC_OscConfig+0x5a6>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b05      	cmp	r3, #5
 800347e:	d10c      	bne.n	800349a <HAL_RCC_OscConfig+0x58e>
 8003480:	4b84      	ldr	r3, [pc, #528]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	4a83      	ldr	r2, [pc, #524]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 8003486:	f043 0304 	orr.w	r3, r3, #4
 800348a:	6713      	str	r3, [r2, #112]	; 0x70
 800348c:	4b81      	ldr	r3, [pc, #516]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	4a80      	ldr	r2, [pc, #512]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	6713      	str	r3, [r2, #112]	; 0x70
 8003498:	e00b      	b.n	80034b2 <HAL_RCC_OscConfig+0x5a6>
 800349a:	4b7e      	ldr	r3, [pc, #504]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	4a7d      	ldr	r2, [pc, #500]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	6713      	str	r3, [r2, #112]	; 0x70
 80034a6:	4b7b      	ldr	r3, [pc, #492]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	4a7a      	ldr	r2, [pc, #488]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 80034ac:	f023 0304 	bic.w	r3, r3, #4
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d015      	beq.n	80034e6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ba:	f7fe fcc5 	bl	8001e48 <HAL_GetTick>
 80034be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034c0:	e00a      	b.n	80034d8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c2:	f7fe fcc1 	bl	8001e48 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e122      	b.n	800371e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034d8:	4b6e      	ldr	r3, [pc, #440]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0ee      	beq.n	80034c2 <HAL_RCC_OscConfig+0x5b6>
 80034e4:	e014      	b.n	8003510 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e6:	f7fe fcaf 	bl	8001e48 <HAL_GetTick>
 80034ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034ec:	e00a      	b.n	8003504 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ee:	f7fe fcab 	bl	8001e48 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e10c      	b.n	800371e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003504:	4b63      	ldr	r3, [pc, #396]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1ee      	bne.n	80034ee <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8101 	beq.w	800371c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800351a:	4b5e      	ldr	r3, [pc, #376]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003522:	2b18      	cmp	r3, #24
 8003524:	f000 80bc 	beq.w	80036a0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	2b02      	cmp	r3, #2
 800352e:	f040 8095 	bne.w	800365c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003532:	4b58      	ldr	r3, [pc, #352]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a57      	ldr	r2, [pc, #348]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 8003538:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800353c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353e:	f7fe fc83 	bl	8001e48 <HAL_GetTick>
 8003542:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003546:	f7fe fc7f 	bl	8001e48 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e0e2      	b.n	800371e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003558:	4b4e      	ldr	r3, [pc, #312]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1f0      	bne.n	8003546 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003564:	4b4b      	ldr	r3, [pc, #300]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 8003566:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003568:	4b4b      	ldr	r3, [pc, #300]	; (8003698 <HAL_RCC_OscConfig+0x78c>)
 800356a:	4013      	ands	r3, r2
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003574:	0112      	lsls	r2, r2, #4
 8003576:	430a      	orrs	r2, r1
 8003578:	4946      	ldr	r1, [pc, #280]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 800357a:	4313      	orrs	r3, r2
 800357c:	628b      	str	r3, [r1, #40]	; 0x28
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	3b01      	subs	r3, #1
 8003584:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358c:	3b01      	subs	r3, #1
 800358e:	025b      	lsls	r3, r3, #9
 8003590:	b29b      	uxth	r3, r3
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	3b01      	subs	r3, #1
 800359a:	041b      	lsls	r3, r3, #16
 800359c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a6:	3b01      	subs	r3, #1
 80035a8:	061b      	lsls	r3, r3, #24
 80035aa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80035ae:	4939      	ldr	r1, [pc, #228]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80035b4:	4b37      	ldr	r3, [pc, #220]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	4a36      	ldr	r2, [pc, #216]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80035c0:	4b34      	ldr	r3, [pc, #208]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 80035c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035c4:	4b35      	ldr	r3, [pc, #212]	; (800369c <HAL_RCC_OscConfig+0x790>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80035cc:	00d2      	lsls	r2, r2, #3
 80035ce:	4931      	ldr	r1, [pc, #196]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80035d4:	4b2f      	ldr	r3, [pc, #188]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	f023 020c 	bic.w	r2, r3, #12
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	492c      	ldr	r1, [pc, #176]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80035e6:	4b2b      	ldr	r3, [pc, #172]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	f023 0202 	bic.w	r2, r3, #2
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	4928      	ldr	r1, [pc, #160]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80035f8:	4b26      	ldr	r3, [pc, #152]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	4a25      	ldr	r2, [pc, #148]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 80035fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003602:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003604:	4b23      	ldr	r3, [pc, #140]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	4a22      	ldr	r2, [pc, #136]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 800360a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800360e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003610:	4b20      	ldr	r3, [pc, #128]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	4a1f      	ldr	r2, [pc, #124]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 8003616:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800361a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800361c:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	4a1c      	ldr	r2, [pc, #112]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003628:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a19      	ldr	r2, [pc, #100]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 800362e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fe fc08 	bl	8001e48 <HAL_GetTick>
 8003638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800363c:	f7fe fc04 	bl	8001e48 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e067      	b.n	800371e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800364e:	4b11      	ldr	r3, [pc, #68]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0x730>
 800365a:	e05f      	b.n	800371c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365c:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0c      	ldr	r2, [pc, #48]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 8003662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fe fbee 	bl	8001e48 <HAL_GetTick>
 800366c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003670:	f7fe fbea 	bl	8001e48 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e04d      	b.n	800371e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003682:	4b04      	ldr	r3, [pc, #16]	; (8003694 <HAL_RCC_OscConfig+0x788>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x764>
 800368e:	e045      	b.n	800371c <HAL_RCC_OscConfig+0x810>
 8003690:	58024800 	.word	0x58024800
 8003694:	58024400 	.word	0x58024400
 8003698:	fffffc0c 	.word	0xfffffc0c
 800369c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80036a0:	4b21      	ldr	r3, [pc, #132]	; (8003728 <HAL_RCC_OscConfig+0x81c>)
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80036a6:	4b20      	ldr	r3, [pc, #128]	; (8003728 <HAL_RCC_OscConfig+0x81c>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d031      	beq.n	8003718 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f003 0203 	and.w	r2, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d12a      	bne.n	8003718 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	091b      	lsrs	r3, r3, #4
 80036c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d122      	bne.n	8003718 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036de:	429a      	cmp	r2, r3
 80036e0:	d11a      	bne.n	8003718 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	0a5b      	lsrs	r3, r3, #9
 80036e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ee:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d111      	bne.n	8003718 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	0c1b      	lsrs	r3, r3, #16
 80036f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003702:	429a      	cmp	r2, r3
 8003704:	d108      	bne.n	8003718 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	0e1b      	lsrs	r3, r3, #24
 800370a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003714:	429a      	cmp	r2, r3
 8003716:	d001      	beq.n	800371c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3730      	adds	r7, #48	; 0x30
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	58024400 	.word	0x58024400

0800372c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e19c      	b.n	8003a7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003740:	4b8a      	ldr	r3, [pc, #552]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d910      	bls.n	8003770 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374e:	4b87      	ldr	r3, [pc, #540]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 020f 	bic.w	r2, r3, #15
 8003756:	4985      	ldr	r1, [pc, #532]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	4b83      	ldr	r3, [pc, #524]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d001      	beq.n	8003770 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e184      	b.n	8003a7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d010      	beq.n	800379e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	4b7b      	ldr	r3, [pc, #492]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003788:	429a      	cmp	r2, r3
 800378a:	d908      	bls.n	800379e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800378c:	4b78      	ldr	r3, [pc, #480]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	4975      	ldr	r1, [pc, #468]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 800379a:	4313      	orrs	r3, r2
 800379c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d010      	beq.n	80037cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	4b70      	ldr	r3, [pc, #448]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d908      	bls.n	80037cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037ba:	4b6d      	ldr	r3, [pc, #436]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	496a      	ldr	r1, [pc, #424]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d010      	beq.n	80037fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699a      	ldr	r2, [r3, #24]
 80037dc:	4b64      	ldr	r3, [pc, #400]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d908      	bls.n	80037fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037e8:	4b61      	ldr	r3, [pc, #388]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	495e      	ldr	r1, [pc, #376]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d010      	beq.n	8003828 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69da      	ldr	r2, [r3, #28]
 800380a:	4b59      	ldr	r3, [pc, #356]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003812:	429a      	cmp	r2, r3
 8003814:	d908      	bls.n	8003828 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003816:	4b56      	ldr	r3, [pc, #344]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	4953      	ldr	r1, [pc, #332]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003824:	4313      	orrs	r3, r2
 8003826:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d010      	beq.n	8003856 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	4b4d      	ldr	r3, [pc, #308]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	429a      	cmp	r2, r3
 8003842:	d908      	bls.n	8003856 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003844:	4b4a      	ldr	r3, [pc, #296]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	f023 020f 	bic.w	r2, r3, #15
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4947      	ldr	r1, [pc, #284]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003852:	4313      	orrs	r3, r2
 8003854:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d055      	beq.n	800390e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003862:	4b43      	ldr	r3, [pc, #268]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	4940      	ldr	r1, [pc, #256]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003870:	4313      	orrs	r3, r2
 8003872:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d107      	bne.n	800388c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800387c:	4b3c      	ldr	r3, [pc, #240]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d121      	bne.n	80038cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0f6      	b.n	8003a7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b03      	cmp	r3, #3
 8003892:	d107      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003894:	4b36      	ldr	r3, [pc, #216]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d115      	bne.n	80038cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0ea      	b.n	8003a7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d107      	bne.n	80038bc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038ac:	4b30      	ldr	r3, [pc, #192]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d109      	bne.n	80038cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0de      	b.n	8003a7a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038bc:	4b2c      	ldr	r3, [pc, #176]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0d6      	b.n	8003a7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038cc:	4b28      	ldr	r3, [pc, #160]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f023 0207 	bic.w	r2, r3, #7
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4925      	ldr	r1, [pc, #148]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038de:	f7fe fab3 	bl	8001e48 <HAL_GetTick>
 80038e2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e4:	e00a      	b.n	80038fc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e6:	f7fe faaf 	bl	8001e48 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e0be      	b.n	8003a7a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fc:	4b1c      	ldr	r3, [pc, #112]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	429a      	cmp	r2, r3
 800390c:	d1eb      	bne.n	80038e6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d010      	beq.n	800393c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	4b14      	ldr	r3, [pc, #80]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	429a      	cmp	r2, r3
 8003928:	d208      	bcs.n	800393c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800392a:	4b11      	ldr	r3, [pc, #68]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f023 020f 	bic.w	r2, r3, #15
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	490e      	ldr	r1, [pc, #56]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003938:	4313      	orrs	r3, r2
 800393a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d214      	bcs.n	8003974 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b08      	ldr	r3, [pc, #32]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 020f 	bic.w	r2, r3, #15
 8003952:	4906      	ldr	r1, [pc, #24]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	4b04      	ldr	r3, [pc, #16]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d005      	beq.n	8003974 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e086      	b.n	8003a7a <HAL_RCC_ClockConfig+0x34e>
 800396c:	52002000 	.word	0x52002000
 8003970:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d010      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	4b3f      	ldr	r3, [pc, #252]	; (8003a84 <HAL_RCC_ClockConfig+0x358>)
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800398c:	429a      	cmp	r2, r3
 800398e:	d208      	bcs.n	80039a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003990:	4b3c      	ldr	r3, [pc, #240]	; (8003a84 <HAL_RCC_ClockConfig+0x358>)
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	4939      	ldr	r1, [pc, #228]	; (8003a84 <HAL_RCC_ClockConfig+0x358>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d010      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695a      	ldr	r2, [r3, #20]
 80039b2:	4b34      	ldr	r3, [pc, #208]	; (8003a84 <HAL_RCC_ClockConfig+0x358>)
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d208      	bcs.n	80039d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039be:	4b31      	ldr	r3, [pc, #196]	; (8003a84 <HAL_RCC_ClockConfig+0x358>)
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	492e      	ldr	r1, [pc, #184]	; (8003a84 <HAL_RCC_ClockConfig+0x358>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d010      	beq.n	80039fe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699a      	ldr	r2, [r3, #24]
 80039e0:	4b28      	ldr	r3, [pc, #160]	; (8003a84 <HAL_RCC_ClockConfig+0x358>)
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d208      	bcs.n	80039fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039ec:	4b25      	ldr	r3, [pc, #148]	; (8003a84 <HAL_RCC_ClockConfig+0x358>)
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	4922      	ldr	r1, [pc, #136]	; (8003a84 <HAL_RCC_ClockConfig+0x358>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d010      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69da      	ldr	r2, [r3, #28]
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <HAL_RCC_ClockConfig+0x358>)
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d208      	bcs.n	8003a2c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003a1a:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <HAL_RCC_ClockConfig+0x358>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	4917      	ldr	r1, [pc, #92]	; (8003a84 <HAL_RCC_ClockConfig+0x358>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a2c:	f000 f834 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 8003a30:	4601      	mov	r1, r0
 8003a32:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <HAL_RCC_ClockConfig+0x358>)
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	4a12      	ldr	r2, [pc, #72]	; (8003a88 <HAL_RCC_ClockConfig+0x35c>)
 8003a3e:	5cd3      	ldrb	r3, [r2, r3]
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	fa21 f303 	lsr.w	r3, r1, r3
 8003a48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <HAL_RCC_ClockConfig+0x358>)
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	4a0d      	ldr	r2, [pc, #52]	; (8003a88 <HAL_RCC_ClockConfig+0x35c>)
 8003a54:	5cd3      	ldrb	r3, [r2, r3]
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a60:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <HAL_RCC_ClockConfig+0x360>)
 8003a62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a64:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <HAL_RCC_ClockConfig+0x364>)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_RCC_ClockConfig+0x368>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe f9a0 	bl	8001db4 <HAL_InitTick>
 8003a74:	4603      	mov	r3, r0
 8003a76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	58024400 	.word	0x58024400
 8003a88:	08006f28 	.word	0x08006f28
 8003a8c:	20000004 	.word	0x20000004
 8003a90:	20000000 	.word	0x20000000
 8003a94:	200000f0 	.word	0x200000f0

08003a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b089      	sub	sp, #36	; 0x24
 8003a9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a9e:	4baf      	ldr	r3, [pc, #700]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aa6:	2b18      	cmp	r3, #24
 8003aa8:	f200 814e 	bhi.w	8003d48 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003aac:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab2:	bf00      	nop
 8003ab4:	08003b19 	.word	0x08003b19
 8003ab8:	08003d49 	.word	0x08003d49
 8003abc:	08003d49 	.word	0x08003d49
 8003ac0:	08003d49 	.word	0x08003d49
 8003ac4:	08003d49 	.word	0x08003d49
 8003ac8:	08003d49 	.word	0x08003d49
 8003acc:	08003d49 	.word	0x08003d49
 8003ad0:	08003d49 	.word	0x08003d49
 8003ad4:	08003b3f 	.word	0x08003b3f
 8003ad8:	08003d49 	.word	0x08003d49
 8003adc:	08003d49 	.word	0x08003d49
 8003ae0:	08003d49 	.word	0x08003d49
 8003ae4:	08003d49 	.word	0x08003d49
 8003ae8:	08003d49 	.word	0x08003d49
 8003aec:	08003d49 	.word	0x08003d49
 8003af0:	08003d49 	.word	0x08003d49
 8003af4:	08003b45 	.word	0x08003b45
 8003af8:	08003d49 	.word	0x08003d49
 8003afc:	08003d49 	.word	0x08003d49
 8003b00:	08003d49 	.word	0x08003d49
 8003b04:	08003d49 	.word	0x08003d49
 8003b08:	08003d49 	.word	0x08003d49
 8003b0c:	08003d49 	.word	0x08003d49
 8003b10:	08003d49 	.word	0x08003d49
 8003b14:	08003b4b 	.word	0x08003b4b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b18:	4b90      	ldr	r3, [pc, #576]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d009      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b24:	4b8d      	ldr	r3, [pc, #564]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	08db      	lsrs	r3, r3, #3
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	4a8c      	ldr	r2, [pc, #560]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
 8003b34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003b36:	e10a      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003b38:	4b89      	ldr	r3, [pc, #548]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003b3a:	61bb      	str	r3, [r7, #24]
    break;
 8003b3c:	e107      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003b3e:	4b89      	ldr	r3, [pc, #548]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003b40:	61bb      	str	r3, [r7, #24]
    break;
 8003b42:	e104      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003b44:	4b88      	ldr	r3, [pc, #544]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003b46:	61bb      	str	r3, [r7, #24]
    break;
 8003b48:	e101      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b4a:	4b84      	ldr	r3, [pc, #528]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003b54:	4b81      	ldr	r3, [pc, #516]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b5e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003b60:	4b7e      	ldr	r3, [pc, #504]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003b6a:	4b7c      	ldr	r3, [pc, #496]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6e:	08db      	lsrs	r3, r3, #3
 8003b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	fb02 f303 	mul.w	r3, r2, r3
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b82:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 80da 	beq.w	8003d42 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d05a      	beq.n	8003c4a <HAL_RCC_GetSysClockFreq+0x1b2>
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d302      	bcc.n	8003b9e <HAL_RCC_GetSysClockFreq+0x106>
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d078      	beq.n	8003c8e <HAL_RCC_GetSysClockFreq+0x1f6>
 8003b9c:	e099      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b9e:	4b6f      	ldr	r3, [pc, #444]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d02d      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003baa:	4b6c      	ldr	r3, [pc, #432]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	08db      	lsrs	r3, r3, #3
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	4a6a      	ldr	r2, [pc, #424]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	ee07 3a90 	vmov	s15, r3
 8003bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd4:	4b61      	ldr	r3, [pc, #388]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bdc:	ee07 3a90 	vmov	s15, r3
 8003be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003be8:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003d6c <HAL_RCC_GetSysClockFreq+0x2d4>
 8003bec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c00:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003c04:	e087      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	ee07 3a90 	vmov	s15, r3
 8003c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c10:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003d70 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003c14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c18:	4b50      	ldr	r3, [pc, #320]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c20:	ee07 3a90 	vmov	s15, r3
 8003c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c28:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c2c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003d6c <HAL_RCC_GetSysClockFreq+0x2d4>
 8003c30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c48:	e065      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	ee07 3a90 	vmov	s15, r3
 8003c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c54:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003d74 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003c58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c5c:	4b3f      	ldr	r3, [pc, #252]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c64:	ee07 3a90 	vmov	s15, r3
 8003c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c70:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003d6c <HAL_RCC_GetSysClockFreq+0x2d4>
 8003c74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c8c:	e043      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	ee07 3a90 	vmov	s15, r3
 8003c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c98:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003d78 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ca0:	4b2e      	ldr	r3, [pc, #184]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca8:	ee07 3a90 	vmov	s15, r3
 8003cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cb4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003d6c <HAL_RCC_GetSysClockFreq+0x2d4>
 8003cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ccc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cd0:	e021      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	ee07 3a90 	vmov	s15, r3
 8003cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cdc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003d74 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cf8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003d6c <HAL_RCC_GetSysClockFreq+0x2d4>
 8003cfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d14:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003d16:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	0a5b      	lsrs	r3, r3, #9
 8003d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d20:	3301      	adds	r3, #1
 8003d22:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d3a:	ee17 3a90 	vmov	r3, s15
 8003d3e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003d40:	e005      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
    break;
 8003d46:	e002      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003d48:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003d4a:	61bb      	str	r3, [r7, #24]
    break;
 8003d4c:	bf00      	nop
  }

  return sysclockfreq;
 8003d4e:	69bb      	ldr	r3, [r7, #24]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3724      	adds	r7, #36	; 0x24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	58024400 	.word	0x58024400
 8003d60:	03d09000 	.word	0x03d09000
 8003d64:	003d0900 	.word	0x003d0900
 8003d68:	017d7840 	.word	0x017d7840
 8003d6c:	46000000 	.word	0x46000000
 8003d70:	4c742400 	.word	0x4c742400
 8003d74:	4a742400 	.word	0x4a742400
 8003d78:	4bbebc20 	.word	0x4bbebc20

08003d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003d82:	f7ff fe89 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 8003d86:	4601      	mov	r1, r0
 8003d88:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <HAL_RCC_GetHCLKFreq+0x50>)
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	0a1b      	lsrs	r3, r3, #8
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	4a0f      	ldr	r2, [pc, #60]	; (8003dd0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d94:	5cd3      	ldrb	r3, [r2, r3]
 8003d96:	f003 031f 	and.w	r3, r3, #31
 8003d9a:	fa21 f303 	lsr.w	r3, r1, r3
 8003d9e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003da0:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <HAL_RCC_GetHCLKFreq+0x50>)
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	4a09      	ldr	r2, [pc, #36]	; (8003dd0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003daa:	5cd3      	ldrb	r3, [r2, r3]
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	fa22 f303 	lsr.w	r3, r2, r3
 8003db6:	4a07      	ldr	r2, [pc, #28]	; (8003dd4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003db8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003dba:	4a07      	ldr	r2, [pc, #28]	; (8003dd8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003dc0:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	58024400 	.word	0x58024400
 8003dd0:	08006f28 	.word	0x08006f28
 8003dd4:	20000004 	.word	0x20000004
 8003dd8:	20000000 	.word	0x20000000

08003ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003de0:	f7ff ffcc 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003de4:	4601      	mov	r1, r0
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	091b      	lsrs	r3, r3, #4
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	4a04      	ldr	r2, [pc, #16]	; (8003e04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003df2:	5cd3      	ldrb	r3, [r2, r3]
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	58024400 	.word	0x58024400
 8003e04:	08006f28 	.word	0x08006f28

08003e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003e0c:	f7ff ffb6 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003e10:	4601      	mov	r1, r0
 8003e12:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	0a1b      	lsrs	r3, r3, #8
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	4a04      	ldr	r2, [pc, #16]	; (8003e30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e1e:	5cd3      	ldrb	r3, [r2, r3]
 8003e20:	f003 031f 	and.w	r3, r3, #31
 8003e24:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	58024400 	.word	0x58024400
 8003e30:	08006f28 	.word	0x08006f28

08003e34 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e40:	2300      	movs	r3, #0
 8003e42:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d03d      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e58:	d013      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e5e:	d802      	bhi.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d007      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003e64:	e01f      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003e66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e6a:	d013      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003e6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e70:	d01c      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003e72:	e018      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e74:	4baf      	ldr	r3, [pc, #700]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	4aae      	ldr	r2, [pc, #696]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003e80:	e015      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3304      	adds	r3, #4
 8003e86:	2102      	movs	r1, #2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f001 f96f 	bl	800516c <RCCEx_PLL2_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003e92:	e00c      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3324      	adds	r3, #36	; 0x24
 8003e98:	2102      	movs	r1, #2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f001 fa18 	bl	80052d0 <RCCEx_PLL3_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003ea4:	e003      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eaa:	e000      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d109      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003eb4:	4b9f      	ldr	r3, [pc, #636]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ec0:	499c      	ldr	r1, [pc, #624]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	650b      	str	r3, [r1, #80]	; 0x50
 8003ec6:	e001      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
 8003eca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d03d      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d826      	bhi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003ee0:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003efd 	.word	0x08003efd
 8003eec:	08003f0b 	.word	0x08003f0b
 8003ef0:	08003f1d 	.word	0x08003f1d
 8003ef4:	08003f35 	.word	0x08003f35
 8003ef8:	08003f35 	.word	0x08003f35
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003efc:	4b8d      	ldr	r3, [pc, #564]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	4a8c      	ldr	r2, [pc, #560]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f08:	e015      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	f001 f92b 	bl	800516c <RCCEx_PLL2_Config>
 8003f16:	4603      	mov	r3, r0
 8003f18:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f1a:	e00c      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3324      	adds	r3, #36	; 0x24
 8003f20:	2100      	movs	r1, #0
 8003f22:	4618      	mov	r0, r3
 8003f24:	f001 f9d4 	bl	80052d0 <RCCEx_PLL3_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f2c:	e003      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	75fb      	strb	r3, [r7, #23]
      break;
 8003f32:	e000      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d109      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f3c:	4b7d      	ldr	r3, [pc, #500]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f40:	f023 0207 	bic.w	r2, r3, #7
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f48:	497a      	ldr	r1, [pc, #488]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	650b      	str	r3, [r1, #80]	; 0x50
 8003f4e:	e001      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f50:	7dfb      	ldrb	r3, [r7, #23]
 8003f52:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d03e      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f64:	2b80      	cmp	r3, #128	; 0x80
 8003f66:	d01c      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003f68:	2b80      	cmp	r3, #128	; 0x80
 8003f6a:	d804      	bhi.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003f70:	2b40      	cmp	r3, #64	; 0x40
 8003f72:	d00d      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003f74:	e01e      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003f76:	2bc0      	cmp	r3, #192	; 0xc0
 8003f78:	d01f      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f7e:	d01e      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003f80:	e018      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f82:	4b6c      	ldr	r3, [pc, #432]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f86:	4a6b      	ldr	r2, [pc, #428]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003f8e:	e017      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3304      	adds	r3, #4
 8003f94:	2100      	movs	r1, #0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f001 f8e8 	bl	800516c <RCCEx_PLL2_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003fa0:	e00e      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3324      	adds	r3, #36	; 0x24
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f001 f991 	bl	80052d0 <RCCEx_PLL3_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003fb2:	e005      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb8:	e002      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003fba:	bf00      	nop
 8003fbc:	e000      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003fc6:	4b5b      	ldr	r3, [pc, #364]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd2:	4958      	ldr	r1, [pc, #352]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	650b      	str	r3, [r1, #80]	; 0x50
 8003fd8:	e001      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fda:	7dfb      	ldrb	r3, [r7, #23]
 8003fdc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d044      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ff0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ff4:	d01f      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ffa:	d805      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004000:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004004:	d00e      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004006:	e01f      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004008:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800400c:	d01f      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800400e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004012:	d01e      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004014:	e018      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004016:	4b47      	ldr	r3, [pc, #284]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	4a46      	ldr	r2, [pc, #280]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800401c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004020:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004022:	e017      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	2100      	movs	r1, #0
 800402a:	4618      	mov	r0, r3
 800402c:	f001 f89e 	bl	800516c <RCCEx_PLL2_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004034:	e00e      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3324      	adds	r3, #36	; 0x24
 800403a:	2100      	movs	r1, #0
 800403c:	4618      	mov	r0, r3
 800403e:	f001 f947 	bl	80052d0 <RCCEx_PLL3_Config>
 8004042:	4603      	mov	r3, r0
 8004044:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004046:	e005      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	75fb      	strb	r3, [r7, #23]
      break;
 800404c:	e002      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800404e:	bf00      	nop
 8004050:	e000      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004052:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004054:	7dfb      	ldrb	r3, [r7, #23]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10a      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800405a:	4b36      	ldr	r3, [pc, #216]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800405c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004068:	4932      	ldr	r1, [pc, #200]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800406a:	4313      	orrs	r3, r2
 800406c:	658b      	str	r3, [r1, #88]	; 0x58
 800406e:	e001      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004070:	7dfb      	ldrb	r3, [r7, #23]
 8004072:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800407c:	2b00      	cmp	r3, #0
 800407e:	d044      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004086:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800408a:	d01f      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800408c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004090:	d805      	bhi.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004096:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800409a:	d00e      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x286>
 800409c:	e01f      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800409e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040a2:	d01f      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80040a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040a8:	d01e      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80040aa:	e018      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ac:	4b21      	ldr	r3, [pc, #132]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	4a20      	ldr	r2, [pc, #128]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040b8:	e017      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3304      	adds	r3, #4
 80040be:	2100      	movs	r1, #0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f001 f853 	bl	800516c <RCCEx_PLL2_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80040ca:	e00e      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3324      	adds	r3, #36	; 0x24
 80040d0:	2100      	movs	r1, #0
 80040d2:	4618      	mov	r0, r3
 80040d4:	f001 f8fc 	bl	80052d0 <RCCEx_PLL3_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040dc:	e005      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	75fb      	strb	r3, [r7, #23]
      break;
 80040e2:	e002      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80040e4:	bf00      	nop
 80040e6:	e000      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80040e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ea:	7dfb      	ldrb	r3, [r7, #23]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10a      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80040f0:	4b10      	ldr	r3, [pc, #64]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040fe:	490d      	ldr	r1, [pc, #52]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004100:	4313      	orrs	r3, r2
 8004102:	658b      	str	r3, [r1, #88]	; 0x58
 8004104:	e001      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004106:	7dfb      	ldrb	r3, [r7, #23]
 8004108:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d035      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411a:	2b10      	cmp	r3, #16
 800411c:	d00c      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800411e:	2b10      	cmp	r3, #16
 8004120:	d802      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004122:	2b00      	cmp	r3, #0
 8004124:	d01b      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004126:	e017      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004128:	2b20      	cmp	r3, #32
 800412a:	d00c      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800412c:	2b30      	cmp	r3, #48	; 0x30
 800412e:	d018      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004130:	e012      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004132:	bf00      	nop
 8004134:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004138:	4baf      	ldr	r3, [pc, #700]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	4aae      	ldr	r2, [pc, #696]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800413e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004142:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004144:	e00e      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3304      	adds	r3, #4
 800414a:	2102      	movs	r1, #2
 800414c:	4618      	mov	r0, r3
 800414e:	f001 f80d 	bl	800516c <RCCEx_PLL2_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004156:	e005      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	75fb      	strb	r3, [r7, #23]
      break;
 800415c:	e002      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800415e:	bf00      	nop
 8004160:	e000      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004162:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004164:	7dfb      	ldrb	r3, [r7, #23]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800416a:	4ba3      	ldr	r3, [pc, #652]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800416c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004176:	49a0      	ldr	r1, [pc, #640]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004178:	4313      	orrs	r3, r2
 800417a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800417c:	e001      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417e:	7dfb      	ldrb	r3, [r7, #23]
 8004180:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d042      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004196:	d01f      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800419c:	d805      	bhi.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80041a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a6:	d00e      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80041a8:	e01f      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80041aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041ae:	d01f      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80041b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041b4:	d01e      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80041b6:	e018      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b8:	4b8f      	ldr	r3, [pc, #572]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	4a8e      	ldr	r2, [pc, #568]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80041c4:	e017      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	2100      	movs	r1, #0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 ffcd 	bl	800516c <RCCEx_PLL2_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80041d6:	e00e      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3324      	adds	r3, #36	; 0x24
 80041dc:	2100      	movs	r1, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	f001 f876 	bl	80052d0 <RCCEx_PLL3_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80041e8:	e005      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	75fb      	strb	r3, [r7, #23]
      break;
 80041ee:	e002      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80041f0:	bf00      	nop
 80041f2:	e000      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80041f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d109      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80041fc:	4b7e      	ldr	r3, [pc, #504]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004200:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004208:	497b      	ldr	r1, [pc, #492]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800420a:	4313      	orrs	r3, r2
 800420c:	650b      	str	r3, [r1, #80]	; 0x50
 800420e:	e001      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004210:	7dfb      	ldrb	r3, [r7, #23]
 8004212:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d042      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004224:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004228:	d01b      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800422a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800422e:	d805      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004230:	2b00      	cmp	r3, #0
 8004232:	d022      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004238:	d00a      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800423a:	e01b      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800423c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004240:	d01d      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004242:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004246:	d01c      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004248:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800424c:	d01b      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800424e:	e011      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3304      	adds	r3, #4
 8004254:	2101      	movs	r1, #1
 8004256:	4618      	mov	r0, r3
 8004258:	f000 ff88 	bl	800516c <RCCEx_PLL2_Config>
 800425c:	4603      	mov	r3, r0
 800425e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004260:	e012      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	3324      	adds	r3, #36	; 0x24
 8004266:	2101      	movs	r1, #1
 8004268:	4618      	mov	r0, r3
 800426a:	f001 f831 	bl	80052d0 <RCCEx_PLL3_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004272:	e009      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	75fb      	strb	r3, [r7, #23]
      break;
 8004278:	e006      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800427a:	bf00      	nop
 800427c:	e004      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800427e:	bf00      	nop
 8004280:	e002      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004282:	bf00      	nop
 8004284:	e000      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004286:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004288:	7dfb      	ldrb	r3, [r7, #23]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800428e:	4b5a      	ldr	r3, [pc, #360]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004292:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429a:	4957      	ldr	r1, [pc, #348]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800429c:	4313      	orrs	r3, r2
 800429e:	650b      	str	r3, [r1, #80]	; 0x50
 80042a0:	e001      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a2:	7dfb      	ldrb	r3, [r7, #23]
 80042a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d044      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042bc:	d01b      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80042be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042c2:	d805      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d022      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80042c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042cc:	d00a      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80042ce:	e01b      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80042d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d4:	d01d      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80042d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042da:	d01c      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80042dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042e0:	d01b      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80042e2:	e011      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3304      	adds	r3, #4
 80042e8:	2101      	movs	r1, #1
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 ff3e 	bl	800516c <RCCEx_PLL2_Config>
 80042f0:	4603      	mov	r3, r0
 80042f2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80042f4:	e012      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3324      	adds	r3, #36	; 0x24
 80042fa:	2101      	movs	r1, #1
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 ffe7 	bl	80052d0 <RCCEx_PLL3_Config>
 8004302:	4603      	mov	r3, r0
 8004304:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004306:	e009      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	75fb      	strb	r3, [r7, #23]
      break;
 800430c:	e006      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800430e:	bf00      	nop
 8004310:	e004      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004312:	bf00      	nop
 8004314:	e002      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004316:	bf00      	nop
 8004318:	e000      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800431a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800431c:	7dfb      	ldrb	r3, [r7, #23]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10a      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004322:	4b35      	ldr	r3, [pc, #212]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004326:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004330:	4931      	ldr	r1, [pc, #196]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004332:	4313      	orrs	r3, r2
 8004334:	658b      	str	r3, [r1, #88]	; 0x58
 8004336:	e001      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004338:	7dfb      	ldrb	r3, [r7, #23]
 800433a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d02d      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800434c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004350:	d005      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004356:	d009      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004358:	2b00      	cmp	r3, #0
 800435a:	d013      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800435c:	e00f      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800435e:	4b26      	ldr	r3, [pc, #152]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004368:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800436a:	e00c      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	2101      	movs	r1, #1
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fefa 	bl	800516c <RCCEx_PLL2_Config>
 8004378:	4603      	mov	r3, r0
 800437a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800437c:	e003      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	75fb      	strb	r3, [r7, #23]
      break;
 8004382:	e000      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004386:	7dfb      	ldrb	r3, [r7, #23]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d109      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800438c:	4b1a      	ldr	r3, [pc, #104]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800438e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004390:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004398:	4917      	ldr	r1, [pc, #92]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800439a:	4313      	orrs	r3, r2
 800439c:	650b      	str	r3, [r1, #80]	; 0x50
 800439e:	e001      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
 80043a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d035      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d81b      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80043b8:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043fd 	.word	0x080043fd
 80043c4:	080043d1 	.word	0x080043d1
 80043c8:	080043df 	.word	0x080043df
 80043cc:	080043fd 	.word	0x080043fd
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d0:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	4a08      	ldr	r2, [pc, #32]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80043d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80043dc:	e00f      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3304      	adds	r3, #4
 80043e2:	2102      	movs	r1, #2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fec1 	bl	800516c <RCCEx_PLL2_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80043ee:	e006      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	75fb      	strb	r3, [r7, #23]
      break;
 80043f4:	e003      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80043f6:	bf00      	nop
 80043f8:	58024400 	.word	0x58024400
      break;
 80043fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043fe:	7dfb      	ldrb	r3, [r7, #23]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d109      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004404:	4bba      	ldr	r3, [pc, #744]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004408:	f023 0203 	bic.w	r2, r3, #3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004410:	49b7      	ldr	r1, [pc, #732]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004416:	e001      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004418:	7dfb      	ldrb	r3, [r7, #23]
 800441a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8086 	beq.w	8004536 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800442a:	4bb2      	ldr	r3, [pc, #712]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4ab1      	ldr	r2, [pc, #708]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004434:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004436:	f7fd fd07 	bl	8001e48 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800443c:	e009      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443e:	f7fd fd03 	bl	8001e48 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b64      	cmp	r3, #100	; 0x64
 800444a:	d902      	bls.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	75fb      	strb	r3, [r7, #23]
        break;
 8004450:	e005      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004452:	4ba8      	ldr	r3, [pc, #672]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0ef      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800445e:	7dfb      	ldrb	r3, [r7, #23]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d166      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004464:	4ba2      	ldr	r3, [pc, #648]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004466:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800446e:	4053      	eors	r3, r2
 8004470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004474:	2b00      	cmp	r3, #0
 8004476:	d013      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004478:	4b9d      	ldr	r3, [pc, #628]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800447a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004480:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004482:	4b9b      	ldr	r3, [pc, #620]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004486:	4a9a      	ldr	r2, [pc, #616]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800448e:	4b98      	ldr	r3, [pc, #608]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	4a97      	ldr	r2, [pc, #604]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004498:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800449a:	4a95      	ldr	r2, [pc, #596]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044aa:	d115      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ac:	f7fd fccc 	bl	8001e48 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044b2:	e00b      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b4:	f7fd fcc8 	bl	8001e48 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d902      	bls.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	75fb      	strb	r3, [r7, #23]
            break;
 80044ca:	e005      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044cc:	4b88      	ldr	r3, [pc, #544]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0ed      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d126      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ec:	d10d      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80044ee:	4b80      	ldr	r3, [pc, #512]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044fc:	0919      	lsrs	r1, r3, #4
 80044fe:	4b7e      	ldr	r3, [pc, #504]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004500:	400b      	ands	r3, r1
 8004502:	497b      	ldr	r1, [pc, #492]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004504:	4313      	orrs	r3, r2
 8004506:	610b      	str	r3, [r1, #16]
 8004508:	e005      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800450a:	4b79      	ldr	r3, [pc, #484]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	4a78      	ldr	r2, [pc, #480]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004510:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004514:	6113      	str	r3, [r2, #16]
 8004516:	4b76      	ldr	r3, [pc, #472]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004518:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004524:	4972      	ldr	r1, [pc, #456]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004526:	4313      	orrs	r3, r2
 8004528:	670b      	str	r3, [r1, #112]	; 0x70
 800452a:	e004      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800452c:	7dfb      	ldrb	r3, [r7, #23]
 800452e:	75bb      	strb	r3, [r7, #22]
 8004530:	e001      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004532:	7dfb      	ldrb	r3, [r7, #23]
 8004534:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d07d      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004546:	2b28      	cmp	r3, #40	; 0x28
 8004548:	d866      	bhi.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800454a:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800454c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004550:	0800461f 	.word	0x0800461f
 8004554:	08004619 	.word	0x08004619
 8004558:	08004619 	.word	0x08004619
 800455c:	08004619 	.word	0x08004619
 8004560:	08004619 	.word	0x08004619
 8004564:	08004619 	.word	0x08004619
 8004568:	08004619 	.word	0x08004619
 800456c:	08004619 	.word	0x08004619
 8004570:	080045f5 	.word	0x080045f5
 8004574:	08004619 	.word	0x08004619
 8004578:	08004619 	.word	0x08004619
 800457c:	08004619 	.word	0x08004619
 8004580:	08004619 	.word	0x08004619
 8004584:	08004619 	.word	0x08004619
 8004588:	08004619 	.word	0x08004619
 800458c:	08004619 	.word	0x08004619
 8004590:	08004607 	.word	0x08004607
 8004594:	08004619 	.word	0x08004619
 8004598:	08004619 	.word	0x08004619
 800459c:	08004619 	.word	0x08004619
 80045a0:	08004619 	.word	0x08004619
 80045a4:	08004619 	.word	0x08004619
 80045a8:	08004619 	.word	0x08004619
 80045ac:	08004619 	.word	0x08004619
 80045b0:	0800461f 	.word	0x0800461f
 80045b4:	08004619 	.word	0x08004619
 80045b8:	08004619 	.word	0x08004619
 80045bc:	08004619 	.word	0x08004619
 80045c0:	08004619 	.word	0x08004619
 80045c4:	08004619 	.word	0x08004619
 80045c8:	08004619 	.word	0x08004619
 80045cc:	08004619 	.word	0x08004619
 80045d0:	0800461f 	.word	0x0800461f
 80045d4:	08004619 	.word	0x08004619
 80045d8:	08004619 	.word	0x08004619
 80045dc:	08004619 	.word	0x08004619
 80045e0:	08004619 	.word	0x08004619
 80045e4:	08004619 	.word	0x08004619
 80045e8:	08004619 	.word	0x08004619
 80045ec:	08004619 	.word	0x08004619
 80045f0:	0800461f 	.word	0x0800461f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3304      	adds	r3, #4
 80045f8:	2101      	movs	r1, #1
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fdb6 	bl	800516c <RCCEx_PLL2_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004604:	e00c      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3324      	adds	r3, #36	; 0x24
 800460a:	2101      	movs	r1, #1
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fe5f 	bl	80052d0 <RCCEx_PLL3_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004616:	e003      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	75fb      	strb	r3, [r7, #23]
      break;
 800461c:	e000      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800461e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004620:	7dfb      	ldrb	r3, [r7, #23]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004626:	4b32      	ldr	r3, [pc, #200]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004632:	492f      	ldr	r1, [pc, #188]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004634:	4313      	orrs	r3, r2
 8004636:	654b      	str	r3, [r1, #84]	; 0x54
 8004638:	e001      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463a:	7dfb      	ldrb	r3, [r7, #23]
 800463c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d037      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464e:	2b05      	cmp	r3, #5
 8004650:	d820      	bhi.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004652:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	0800469b 	.word	0x0800469b
 800465c:	08004671 	.word	0x08004671
 8004660:	08004683 	.word	0x08004683
 8004664:	0800469b 	.word	0x0800469b
 8004668:	0800469b 	.word	0x0800469b
 800466c:	0800469b 	.word	0x0800469b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3304      	adds	r3, #4
 8004674:	2101      	movs	r1, #1
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fd78 	bl	800516c <RCCEx_PLL2_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004680:	e00c      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3324      	adds	r3, #36	; 0x24
 8004686:	2101      	movs	r1, #1
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fe21 	bl	80052d0 <RCCEx_PLL3_Config>
 800468e:	4603      	mov	r3, r0
 8004690:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004692:	e003      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	75fb      	strb	r3, [r7, #23]
      break;
 8004698:	e000      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800469a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800469c:	7dfb      	ldrb	r3, [r7, #23]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80046a2:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80046a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a6:	f023 0207 	bic.w	r2, r3, #7
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ae:	4910      	ldr	r1, [pc, #64]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	654b      	str	r3, [r1, #84]	; 0x54
 80046b4:	e001      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b6:	7dfb      	ldrb	r3, [r7, #23]
 80046b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d040      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046cc:	2b05      	cmp	r3, #5
 80046ce:	d827      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80046d0:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80046d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d6:	bf00      	nop
 80046d8:	08004727 	.word	0x08004727
 80046dc:	080046fd 	.word	0x080046fd
 80046e0:	0800470f 	.word	0x0800470f
 80046e4:	08004727 	.word	0x08004727
 80046e8:	08004727 	.word	0x08004727
 80046ec:	08004727 	.word	0x08004727
 80046f0:	58024400 	.word	0x58024400
 80046f4:	58024800 	.word	0x58024800
 80046f8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	2101      	movs	r1, #1
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fd32 	bl	800516c <RCCEx_PLL2_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800470c:	e00c      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3324      	adds	r3, #36	; 0x24
 8004712:	2101      	movs	r1, #1
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fddb 	bl	80052d0 <RCCEx_PLL3_Config>
 800471a:	4603      	mov	r3, r0
 800471c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800471e:	e003      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	75fb      	strb	r3, [r7, #23]
      break;
 8004724:	e000      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004726:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004728:	7dfb      	ldrb	r3, [r7, #23]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10a      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800472e:	4bb2      	ldr	r3, [pc, #712]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004732:	f023 0207 	bic.w	r2, r3, #7
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473c:	49ae      	ldr	r1, [pc, #696]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800473e:	4313      	orrs	r3, r2
 8004740:	658b      	str	r3, [r1, #88]	; 0x58
 8004742:	e001      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004744:	7dfb      	ldrb	r3, [r7, #23]
 8004746:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b00      	cmp	r3, #0
 8004752:	d044      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800475a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800475e:	d01b      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004764:	d805      	bhi.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d022      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800476a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800476e:	d00a      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004770:	e01b      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004776:	d01d      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004778:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800477c:	d01c      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800477e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004782:	d01b      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004784:	e011      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3304      	adds	r3, #4
 800478a:	2100      	movs	r1, #0
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fced 	bl	800516c <RCCEx_PLL2_Config>
 8004792:	4603      	mov	r3, r0
 8004794:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004796:	e012      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3324      	adds	r3, #36	; 0x24
 800479c:	2102      	movs	r1, #2
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fd96 	bl	80052d0 <RCCEx_PLL3_Config>
 80047a4:	4603      	mov	r3, r0
 80047a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80047a8:	e009      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	75fb      	strb	r3, [r7, #23]
      break;
 80047ae:	e006      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80047b0:	bf00      	nop
 80047b2:	e004      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80047b4:	bf00      	nop
 80047b6:	e002      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80047b8:	bf00      	nop
 80047ba:	e000      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80047bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047be:	7dfb      	ldrb	r3, [r7, #23]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10a      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047c4:	4b8c      	ldr	r3, [pc, #560]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80047c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047d2:	4989      	ldr	r1, [pc, #548]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	654b      	str	r3, [r1, #84]	; 0x54
 80047d8:	e001      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047da:	7dfb      	ldrb	r3, [r7, #23]
 80047dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d044      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047f4:	d01b      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80047f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047fa:	d805      	bhi.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d022      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004806:	e01b      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480c:	d01d      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800480e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004812:	d01c      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004814:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004818:	d01b      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800481a:	e011      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3304      	adds	r3, #4
 8004820:	2100      	movs	r1, #0
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fca2 	bl	800516c <RCCEx_PLL2_Config>
 8004828:	4603      	mov	r3, r0
 800482a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800482c:	e012      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3324      	adds	r3, #36	; 0x24
 8004832:	2102      	movs	r1, #2
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fd4b 	bl	80052d0 <RCCEx_PLL3_Config>
 800483a:	4603      	mov	r3, r0
 800483c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800483e:	e009      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	75fb      	strb	r3, [r7, #23]
      break;
 8004844:	e006      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004846:	bf00      	nop
 8004848:	e004      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800484a:	bf00      	nop
 800484c:	e002      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800484e:	bf00      	nop
 8004850:	e000      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004852:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004854:	7dfb      	ldrb	r3, [r7, #23]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10a      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800485a:	4b67      	ldr	r3, [pc, #412]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800485c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004868:	4963      	ldr	r1, [pc, #396]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800486a:	4313      	orrs	r3, r2
 800486c:	658b      	str	r3, [r1, #88]	; 0x58
 800486e:	e001      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004870:	7dfb      	ldrb	r3, [r7, #23]
 8004872:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487c:	2b00      	cmp	r3, #0
 800487e:	d044      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004886:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800488a:	d01b      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800488c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004890:	d805      	bhi.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d022      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489a:	d00a      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800489c:	e01b      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800489e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a2:	d01d      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80048a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048a8:	d01c      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80048aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048ae:	d01b      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80048b0:	e011      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3304      	adds	r3, #4
 80048b6:	2100      	movs	r1, #0
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fc57 	bl	800516c <RCCEx_PLL2_Config>
 80048be:	4603      	mov	r3, r0
 80048c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80048c2:	e012      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3324      	adds	r3, #36	; 0x24
 80048c8:	2102      	movs	r1, #2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fd00 	bl	80052d0 <RCCEx_PLL3_Config>
 80048d0:	4603      	mov	r3, r0
 80048d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80048d4:	e009      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	75fb      	strb	r3, [r7, #23]
      break;
 80048da:	e006      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80048dc:	bf00      	nop
 80048de:	e004      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80048e0:	bf00      	nop
 80048e2:	e002      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80048e4:	bf00      	nop
 80048e6:	e000      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80048e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ea:	7dfb      	ldrb	r3, [r7, #23]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80048f0:	4b41      	ldr	r3, [pc, #260]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80048f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048fe:	493e      	ldr	r1, [pc, #248]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004900:	4313      	orrs	r3, r2
 8004902:	658b      	str	r3, [r1, #88]	; 0x58
 8004904:	e001      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004906:	7dfb      	ldrb	r3, [r7, #23]
 8004908:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d01a      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800491c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004920:	d10a      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3324      	adds	r3, #36	; 0x24
 8004926:	2102      	movs	r1, #2
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fcd1 	bl	80052d0 <RCCEx_PLL3_Config>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004938:	4b2f      	ldr	r3, [pc, #188]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800493a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004946:	492c      	ldr	r1, [pc, #176]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004948:	4313      	orrs	r3, r2
 800494a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01a      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800495e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004962:	d10a      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3324      	adds	r3, #36	; 0x24
 8004968:	2102      	movs	r1, #2
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fcb0 	bl	80052d0 <RCCEx_PLL3_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800497a:	4b1f      	ldr	r3, [pc, #124]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800497c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004988:	491b      	ldr	r1, [pc, #108]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800498a:	4313      	orrs	r3, r2
 800498c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d032      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a4:	d00d      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80049a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049aa:	d016      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d111      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3304      	adds	r3, #4
 80049b4:	2100      	movs	r1, #0
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fbd8 	bl	800516c <RCCEx_PLL2_Config>
 80049bc:	4603      	mov	r3, r0
 80049be:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80049c0:	e00c      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3324      	adds	r3, #36	; 0x24
 80049c6:	2102      	movs	r1, #2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fc81 	bl	80052d0 <RCCEx_PLL3_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80049d2:	e003      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	75fb      	strb	r3, [r7, #23]
      break;
 80049d8:	e000      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80049da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049dc:	7dfb      	ldrb	r3, [r7, #23]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10c      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049e2:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80049e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049f0:	4901      	ldr	r1, [pc, #4]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	658b      	str	r3, [r1, #88]	; 0x58
 80049f6:	e003      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80049f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fc:	7dfb      	ldrb	r3, [r7, #23]
 80049fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d02f      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a16:	d00c      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004a18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a1c:	d015      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8004a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a22:	d10f      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a24:	4b79      	ldr	r3, [pc, #484]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	4a78      	ldr	r2, [pc, #480]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004a30:	e00c      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3324      	adds	r3, #36	; 0x24
 8004a36:	2101      	movs	r1, #1
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fc49 	bl	80052d0 <RCCEx_PLL3_Config>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004a42:	e003      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	75fb      	strb	r3, [r7, #23]
      break;
 8004a48:	e000      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004a4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10a      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a52:	4b6e      	ldr	r3, [pc, #440]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a60:	496a      	ldr	r1, [pc, #424]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	654b      	str	r3, [r1, #84]	; 0x54
 8004a66:	e001      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a68:	7dfb      	ldrb	r3, [r7, #23]
 8004a6a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d029      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a84:	d007      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004a86:	e00f      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a88:	4b60      	ldr	r3, [pc, #384]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	4a5f      	ldr	r2, [pc, #380]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004a94:	e00b      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	2102      	movs	r1, #2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fb65 	bl	800516c <RCCEx_PLL2_Config>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004aa6:	e002      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8004aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d109      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004ab4:	4b55      	ldr	r3, [pc, #340]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac0:	4952      	ldr	r1, [pc, #328]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ac6:	e001      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
 8004aca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00a      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3324      	adds	r3, #36	; 0x24
 8004adc:	2102      	movs	r1, #2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fbf6 	bl	80052d0 <RCCEx_PLL3_Config>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d02f      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b02:	d00c      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b08:	d802      	bhi.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d011      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8004b0e:	e00d      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8004b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b14:	d00f      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004b16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b1a:	d00e      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004b1c:	e006      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b1e:	4b3b      	ldr	r3, [pc, #236]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	4a3a      	ldr	r2, [pc, #232]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004b2a:	e007      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b30:	e004      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004b32:	bf00      	nop
 8004b34:	e002      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004b36:	bf00      	nop
 8004b38:	e000      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004b3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b3c:	7dfb      	ldrb	r3, [r7, #23]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d109      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b42:	4b32      	ldr	r3, [pc, #200]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b4e:	492f      	ldr	r1, [pc, #188]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	654b      	str	r3, [r1, #84]	; 0x54
 8004b54:	e001      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
 8004b58:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d008      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b66:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b72:	4926      	ldr	r1, [pc, #152]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d009      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b84:	4b21      	ldr	r3, [pc, #132]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b92:	491e      	ldr	r1, [pc, #120]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ba4:	4b19      	ldr	r3, [pc, #100]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bb0:	4916      	ldr	r1, [pc, #88]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00d      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	4a11      	ldr	r2, [pc, #68]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004bc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004bcc:	6113      	str	r3, [r2, #16]
 8004bce:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004bd0:	691a      	ldr	r2, [r3, #16]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004bd8:	490c      	ldr	r1, [pc, #48]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	da08      	bge.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004be6:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf2:	4906      	ldr	r1, [pc, #24]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004bf8:	7dbb      	ldrb	r3, [r7, #22]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e000      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	58024400 	.word	0x58024400

08004c10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004c14:	f7ff f8b2 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8004c18:	4601      	mov	r1, r0
 8004c1a:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	091b      	lsrs	r3, r3, #4
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	4a04      	ldr	r2, [pc, #16]	; (8004c38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004c26:	5cd3      	ldrb	r3, [r2, r3]
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	58024400 	.word	0x58024400
 8004c38:	08006f28 	.word	0x08006f28

08004c3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b089      	sub	sp, #36	; 0x24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c44:	4b9d      	ldr	r3, [pc, #628]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c48:	f003 0303 	and.w	r3, r3, #3
 8004c4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004c4e:	4b9b      	ldr	r3, [pc, #620]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c52:	0b1b      	lsrs	r3, r3, #12
 8004c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c58:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c5a:	4b98      	ldr	r3, [pc, #608]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	091b      	lsrs	r3, r3, #4
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004c66:	4b95      	ldr	r3, [pc, #596]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	08db      	lsrs	r3, r3, #3
 8004c6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	fb02 f303 	mul.w	r3, r2, r3
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 810a 	beq.w	8004e9e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d05a      	beq.n	8004d46 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d302      	bcc.n	8004c9a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d078      	beq.n	8004d8a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004c98:	e099      	b.n	8004dce <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c9a:	4b88      	ldr	r3, [pc, #544]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d02d      	beq.n	8004d02 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ca6:	4b85      	ldr	r3, [pc, #532]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	08db      	lsrs	r3, r3, #3
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	4a83      	ldr	r2, [pc, #524]	; (8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	ee07 3a90 	vmov	s15, r3
 8004cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd0:	4b7a      	ldr	r3, [pc, #488]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd8:	ee07 3a90 	vmov	s15, r3
 8004cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce0:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ce4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004ce8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004d00:	e087      	b.n	8004e12 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	ee07 3a90 	vmov	s15, r3
 8004d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004d10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d14:	4b69      	ldr	r3, [pc, #420]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1c:	ee07 3a90 	vmov	s15, r3
 8004d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d24:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d28:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004d2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d44:	e065      	b.n	8004e12 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	ee07 3a90 	vmov	s15, r3
 8004d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d50:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004d54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d58:	4b58      	ldr	r3, [pc, #352]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d60:	ee07 3a90 	vmov	s15, r3
 8004d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d68:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d6c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004d70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d88:	e043      	b.n	8004e12 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	ee07 3a90 	vmov	s15, r3
 8004d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d94:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004d98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d9c:	4b47      	ldr	r3, [pc, #284]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da4:	ee07 3a90 	vmov	s15, r3
 8004da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dac:	ed97 6a03 	vldr	s12, [r7, #12]
 8004db0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004db4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004db8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004dcc:	e021      	b.n	8004e12 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	ee07 3a90 	vmov	s15, r3
 8004dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004ddc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de0:	4b36      	ldr	r3, [pc, #216]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de8:	ee07 3a90 	vmov	s15, r3
 8004dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df0:	ed97 6a03 	vldr	s12, [r7, #12]
 8004df4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004df8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e10:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004e12:	4b2a      	ldr	r3, [pc, #168]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	0a5b      	lsrs	r3, r3, #9
 8004e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e1c:	ee07 3a90 	vmov	s15, r3
 8004e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e38:	ee17 2a90 	vmov	r2, s15
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004e40:	4b1e      	ldr	r3, [pc, #120]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	0c1b      	lsrs	r3, r3, #16
 8004e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e66:	ee17 2a90 	vmov	r2, s15
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004e6e:	4b13      	ldr	r3, [pc, #76]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	0e1b      	lsrs	r3, r3, #24
 8004e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e78:	ee07 3a90 	vmov	s15, r3
 8004e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e88:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e94:	ee17 2a90 	vmov	r2, s15
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	609a      	str	r2, [r3, #8]
}
 8004eb0:	bf00      	nop
 8004eb2:	3724      	adds	r7, #36	; 0x24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	58024400 	.word	0x58024400
 8004ec0:	03d09000 	.word	0x03d09000
 8004ec4:	46000000 	.word	0x46000000
 8004ec8:	4c742400 	.word	0x4c742400
 8004ecc:	4a742400 	.word	0x4a742400
 8004ed0:	4bbebc20 	.word	0x4bbebc20

08004ed4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b089      	sub	sp, #36	; 0x24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004edc:	4b9d      	ldr	r3, [pc, #628]	; (8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	f003 0303 	and.w	r3, r3, #3
 8004ee4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004ee6:	4b9b      	ldr	r3, [pc, #620]	; (8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	0d1b      	lsrs	r3, r3, #20
 8004eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ef0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ef2:	4b98      	ldr	r3, [pc, #608]	; (8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	0a1b      	lsrs	r3, r3, #8
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004efe:	4b95      	ldr	r3, [pc, #596]	; (8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f02:	08db      	lsrs	r3, r3, #3
 8004f04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	fb02 f303 	mul.w	r3, r2, r3
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 810a 	beq.w	8005136 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d05a      	beq.n	8004fde <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d302      	bcc.n	8004f32 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d078      	beq.n	8005022 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004f30:	e099      	b.n	8005066 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f32:	4b88      	ldr	r3, [pc, #544]	; (8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d02d      	beq.n	8004f9a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f3e:	4b85      	ldr	r3, [pc, #532]	; (8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	08db      	lsrs	r3, r3, #3
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	4a83      	ldr	r2, [pc, #524]	; (8005158 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	ee07 3a90 	vmov	s15, r3
 8004f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	ee07 3a90 	vmov	s15, r3
 8004f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f68:	4b7a      	ldr	r3, [pc, #488]	; (8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f70:	ee07 3a90 	vmov	s15, r3
 8004f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f78:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f7c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800515c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f94:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004f98:	e087      	b.n	80050aa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	ee07 3a90 	vmov	s15, r3
 8004fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fac:	4b69      	ldr	r3, [pc, #420]	; (8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb4:	ee07 3a90 	vmov	s15, r3
 8004fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fc0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800515c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fdc:	e065      	b.n	80050aa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	ee07 3a90 	vmov	s15, r3
 8004fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ff0:	4b58      	ldr	r3, [pc, #352]	; (8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff8:	ee07 3a90 	vmov	s15, r3
 8004ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005000:	ed97 6a03 	vldr	s12, [r7, #12]
 8005004:	eddf 5a55 	vldr	s11, [pc, #340]	; 800515c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800500c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005020:	e043      	b.n	80050aa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	ee07 3a90 	vmov	s15, r3
 8005028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005034:	4b47      	ldr	r3, [pc, #284]	; (8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503c:	ee07 3a90 	vmov	s15, r3
 8005040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005044:	ed97 6a03 	vldr	s12, [r7, #12]
 8005048:	eddf 5a44 	vldr	s11, [pc, #272]	; 800515c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800504c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005050:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005054:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800505c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005060:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005064:	e021      	b.n	80050aa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	ee07 3a90 	vmov	s15, r3
 800506c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005070:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005074:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005078:	4b36      	ldr	r3, [pc, #216]	; (8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005080:	ee07 3a90 	vmov	s15, r3
 8005084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005088:	ed97 6a03 	vldr	s12, [r7, #12]
 800508c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800515c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005090:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005094:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005098:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800509c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050a8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80050aa:	4b2a      	ldr	r3, [pc, #168]	; (8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	0a5b      	lsrs	r3, r3, #9
 80050b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050b4:	ee07 3a90 	vmov	s15, r3
 80050b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80050c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050d0:	ee17 2a90 	vmov	r2, s15
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80050d8:	4b1e      	ldr	r3, [pc, #120]	; (8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	0c1b      	lsrs	r3, r3, #16
 80050de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050e2:	ee07 3a90 	vmov	s15, r3
 80050e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80050f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050fe:	ee17 2a90 	vmov	r2, s15
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005106:	4b13      	ldr	r3, [pc, #76]	; (8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	0e1b      	lsrs	r3, r3, #24
 800510c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005110:	ee07 3a90 	vmov	s15, r3
 8005114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800511c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005120:	edd7 6a07 	vldr	s13, [r7, #28]
 8005124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800512c:	ee17 2a90 	vmov	r2, s15
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005134:	e008      	b.n	8005148 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	609a      	str	r2, [r3, #8]
}
 8005148:	bf00      	nop
 800514a:	3724      	adds	r7, #36	; 0x24
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	58024400 	.word	0x58024400
 8005158:	03d09000 	.word	0x03d09000
 800515c:	46000000 	.word	0x46000000
 8005160:	4c742400 	.word	0x4c742400
 8005164:	4a742400 	.word	0x4a742400
 8005168:	4bbebc20 	.word	0x4bbebc20

0800516c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800517a:	4b53      	ldr	r3, [pc, #332]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 800517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b03      	cmp	r3, #3
 8005184:	d101      	bne.n	800518a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e099      	b.n	80052be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800518a:	4b4f      	ldr	r3, [pc, #316]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a4e      	ldr	r2, [pc, #312]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 8005190:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005196:	f7fc fe57 	bl	8001e48 <HAL_GetTick>
 800519a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800519c:	e008      	b.n	80051b0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800519e:	f7fc fe53 	bl	8001e48 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e086      	b.n	80052be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051b0:	4b45      	ldr	r3, [pc, #276]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f0      	bne.n	800519e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80051bc:	4b42      	ldr	r3, [pc, #264]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 80051be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	031b      	lsls	r3, r3, #12
 80051ca:	493f      	ldr	r1, [pc, #252]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	628b      	str	r3, [r1, #40]	; 0x28
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	3b01      	subs	r3, #1
 80051e0:	025b      	lsls	r3, r3, #9
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	041b      	lsls	r3, r3, #16
 80051ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	061b      	lsls	r3, r3, #24
 80051fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005200:	4931      	ldr	r1, [pc, #196]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 8005202:	4313      	orrs	r3, r2
 8005204:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005206:	4b30      	ldr	r3, [pc, #192]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 8005208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	492d      	ldr	r1, [pc, #180]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 8005214:	4313      	orrs	r3, r2
 8005216:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005218:	4b2b      	ldr	r3, [pc, #172]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	f023 0220 	bic.w	r2, r3, #32
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	4928      	ldr	r1, [pc, #160]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 8005226:	4313      	orrs	r3, r2
 8005228:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800522a:	4b27      	ldr	r3, [pc, #156]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	4a26      	ldr	r2, [pc, #152]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 8005230:	f023 0310 	bic.w	r3, r3, #16
 8005234:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005236:	4b24      	ldr	r3, [pc, #144]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 8005238:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800523a:	4b24      	ldr	r3, [pc, #144]	; (80052cc <RCCEx_PLL2_Config+0x160>)
 800523c:	4013      	ands	r3, r2
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	69d2      	ldr	r2, [r2, #28]
 8005242:	00d2      	lsls	r2, r2, #3
 8005244:	4920      	ldr	r1, [pc, #128]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 8005246:	4313      	orrs	r3, r2
 8005248:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800524a:	4b1f      	ldr	r3, [pc, #124]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 800524c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524e:	4a1e      	ldr	r2, [pc, #120]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 8005250:	f043 0310 	orr.w	r3, r3, #16
 8005254:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d106      	bne.n	800526a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800525c:	4b1a      	ldr	r3, [pc, #104]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	4a19      	ldr	r2, [pc, #100]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 8005262:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005266:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005268:	e00f      	b.n	800528a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d106      	bne.n	800527e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005270:	4b15      	ldr	r3, [pc, #84]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	4a14      	ldr	r2, [pc, #80]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 8005276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800527a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800527c:	e005      	b.n	800528a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800527e:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 8005280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005282:	4a11      	ldr	r2, [pc, #68]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 8005284:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005288:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800528a:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a0e      	ldr	r2, [pc, #56]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 8005290:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005296:	f7fc fdd7 	bl	8001e48 <HAL_GetTick>
 800529a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800529c:	e008      	b.n	80052b0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800529e:	f7fc fdd3 	bl	8001e48 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e006      	b.n	80052be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052b0:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <RCCEx_PLL2_Config+0x15c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0f0      	beq.n	800529e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	58024400 	.word	0x58024400
 80052cc:	ffff0007 	.word	0xffff0007

080052d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052de:	4b53      	ldr	r3, [pc, #332]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	d101      	bne.n	80052ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e099      	b.n	8005422 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80052ee:	4b4f      	ldr	r3, [pc, #316]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a4e      	ldr	r2, [pc, #312]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 80052f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052fa:	f7fc fda5 	bl	8001e48 <HAL_GetTick>
 80052fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005300:	e008      	b.n	8005314 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005302:	f7fc fda1 	bl	8001e48 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e086      	b.n	8005422 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005314:	4b45      	ldr	r3, [pc, #276]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1f0      	bne.n	8005302 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005320:	4b42      	ldr	r3, [pc, #264]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 8005322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005324:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	051b      	lsls	r3, r3, #20
 800532e:	493f      	ldr	r1, [pc, #252]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 8005330:	4313      	orrs	r3, r2
 8005332:	628b      	str	r3, [r1, #40]	; 0x28
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	3b01      	subs	r3, #1
 800533a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	3b01      	subs	r3, #1
 8005344:	025b      	lsls	r3, r3, #9
 8005346:	b29b      	uxth	r3, r3
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	3b01      	subs	r3, #1
 8005350:	041b      	lsls	r3, r3, #16
 8005352:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	3b01      	subs	r3, #1
 800535e:	061b      	lsls	r3, r3, #24
 8005360:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005364:	4931      	ldr	r1, [pc, #196]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 8005366:	4313      	orrs	r3, r2
 8005368:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800536a:	4b30      	ldr	r3, [pc, #192]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	492d      	ldr	r1, [pc, #180]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 8005378:	4313      	orrs	r3, r2
 800537a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800537c:	4b2b      	ldr	r3, [pc, #172]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	4928      	ldr	r1, [pc, #160]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 800538a:	4313      	orrs	r3, r2
 800538c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800538e:	4b27      	ldr	r3, [pc, #156]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 8005390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005392:	4a26      	ldr	r2, [pc, #152]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 8005394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005398:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800539a:	4b24      	ldr	r3, [pc, #144]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 800539c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800539e:	4b24      	ldr	r3, [pc, #144]	; (8005430 <RCCEx_PLL3_Config+0x160>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	69d2      	ldr	r2, [r2, #28]
 80053a6:	00d2      	lsls	r2, r2, #3
 80053a8:	4920      	ldr	r1, [pc, #128]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80053ae:	4b1f      	ldr	r3, [pc, #124]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	4a1e      	ldr	r2, [pc, #120]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 80053b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d106      	bne.n	80053ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80053c0:	4b1a      	ldr	r3, [pc, #104]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	4a19      	ldr	r2, [pc, #100]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 80053c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80053ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053cc:	e00f      	b.n	80053ee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d106      	bne.n	80053e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80053d4:	4b15      	ldr	r3, [pc, #84]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	4a14      	ldr	r2, [pc, #80]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 80053da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053e0:	e005      	b.n	80053ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80053e2:	4b12      	ldr	r3, [pc, #72]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	4a11      	ldr	r2, [pc, #68]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 80053e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80053ee:	4b0f      	ldr	r3, [pc, #60]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a0e      	ldr	r2, [pc, #56]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 80053f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053fa:	f7fc fd25 	bl	8001e48 <HAL_GetTick>
 80053fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005400:	e008      	b.n	8005414 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005402:	f7fc fd21 	bl	8001e48 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e006      	b.n	8005422 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005414:	4b05      	ldr	r3, [pc, #20]	; (800542c <RCCEx_PLL3_Config+0x15c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0f0      	beq.n	8005402 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005420:	7bfb      	ldrb	r3, [r7, #15]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	58024400 	.word	0x58024400
 8005430:	ffff0007 	.word	0xffff0007

08005434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e042      	b.n	80054cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800544c:	2b00      	cmp	r3, #0
 800544e:	d106      	bne.n	800545e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7fb fd53 	bl	8000f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2224      	movs	r2, #36	; 0x24
 8005462:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0201 	bic.w	r2, r2, #1
 8005474:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f8c2 	bl	8005600 <UART_SetConfig>
 800547c:	4603      	mov	r3, r0
 800547e:	2b01      	cmp	r3, #1
 8005480:	d101      	bne.n	8005486 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e022      	b.n	80054cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fe66 	bl	8006160 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0201 	orr.w	r2, r2, #1
 80054c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 feed 	bl	80062a4 <UART_CheckIdleState>
 80054ca:	4603      	mov	r3, r0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08a      	sub	sp, #40	; 0x28
 80054d8:	af02      	add	r7, sp, #8
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	4613      	mov	r3, r2
 80054e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ea:	2b20      	cmp	r3, #32
 80054ec:	f040 8083 	bne.w	80055f6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <HAL_UART_Transmit+0x28>
 80054f6:	88fb      	ldrh	r3, [r7, #6]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e07b      	b.n	80055f8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <HAL_UART_Transmit+0x3a>
 800550a:	2302      	movs	r3, #2
 800550c:	e074      	b.n	80055f8 <HAL_UART_Transmit+0x124>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2221      	movs	r2, #33	; 0x21
 8005522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005526:	f7fc fc8f 	bl	8001e48 <HAL_GetTick>
 800552a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	88fa      	ldrh	r2, [r7, #6]
 8005530:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	88fa      	ldrh	r2, [r7, #6]
 8005538:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005544:	d108      	bne.n	8005558 <HAL_UART_Transmit+0x84>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d104      	bne.n	8005558 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	e003      	b.n	8005560 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800555c:	2300      	movs	r3, #0
 800555e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005568:	e02c      	b.n	80055c4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2200      	movs	r2, #0
 8005572:	2180      	movs	r1, #128	; 0x80
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 fedd 	bl	8006334 <UART_WaitOnFlagUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e039      	b.n	80055f8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10b      	bne.n	80055a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005598:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	3302      	adds	r3, #2
 800559e:	61bb      	str	r3, [r7, #24]
 80055a0:	e007      	b.n	80055b2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	781a      	ldrb	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	3301      	adds	r3, #1
 80055b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1cc      	bne.n	800556a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2200      	movs	r2, #0
 80055d8:	2140      	movs	r1, #64	; 0x40
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 feaa 	bl	8006334 <UART_WaitOnFlagUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e006      	b.n	80055f8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	e000      	b.n	80055f8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80055f6:	2302      	movs	r3, #2
  }
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3720      	adds	r7, #32
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005600:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005604:	b08e      	sub	sp, #56	; 0x38
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	431a      	orrs	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	4313      	orrs	r3, r2
 8005626:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800562c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800562e:	4313      	orrs	r3, r2
 8005630:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	4bc1      	ldr	r3, [pc, #772]	; (8005940 <UART_SetConfig+0x340>)
 800563a:	4013      	ands	r3, r2
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6812      	ldr	r2, [r2, #0]
 8005640:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005642:	430b      	orrs	r3, r1
 8005644:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4ab7      	ldr	r2, [pc, #732]	; (8005944 <UART_SetConfig+0x344>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d004      	beq.n	8005676 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005672:	4313      	orrs	r3, r2
 8005674:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	4bb2      	ldr	r3, [pc, #712]	; (8005948 <UART_SetConfig+0x348>)
 800567e:	4013      	ands	r3, r2
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6812      	ldr	r2, [r2, #0]
 8005684:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005686:	430b      	orrs	r3, r1
 8005688:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	f023 010f 	bic.w	r1, r3, #15
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4aa9      	ldr	r2, [pc, #676]	; (800594c <UART_SetConfig+0x34c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d177      	bne.n	800579a <UART_SetConfig+0x19a>
 80056aa:	4ba9      	ldr	r3, [pc, #676]	; (8005950 <UART_SetConfig+0x350>)
 80056ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056b2:	2b28      	cmp	r3, #40	; 0x28
 80056b4:	d86c      	bhi.n	8005790 <UART_SetConfig+0x190>
 80056b6:	a201      	add	r2, pc, #4	; (adr r2, 80056bc <UART_SetConfig+0xbc>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	08005761 	.word	0x08005761
 80056c0:	08005791 	.word	0x08005791
 80056c4:	08005791 	.word	0x08005791
 80056c8:	08005791 	.word	0x08005791
 80056cc:	08005791 	.word	0x08005791
 80056d0:	08005791 	.word	0x08005791
 80056d4:	08005791 	.word	0x08005791
 80056d8:	08005791 	.word	0x08005791
 80056dc:	08005769 	.word	0x08005769
 80056e0:	08005791 	.word	0x08005791
 80056e4:	08005791 	.word	0x08005791
 80056e8:	08005791 	.word	0x08005791
 80056ec:	08005791 	.word	0x08005791
 80056f0:	08005791 	.word	0x08005791
 80056f4:	08005791 	.word	0x08005791
 80056f8:	08005791 	.word	0x08005791
 80056fc:	08005771 	.word	0x08005771
 8005700:	08005791 	.word	0x08005791
 8005704:	08005791 	.word	0x08005791
 8005708:	08005791 	.word	0x08005791
 800570c:	08005791 	.word	0x08005791
 8005710:	08005791 	.word	0x08005791
 8005714:	08005791 	.word	0x08005791
 8005718:	08005791 	.word	0x08005791
 800571c:	08005779 	.word	0x08005779
 8005720:	08005791 	.word	0x08005791
 8005724:	08005791 	.word	0x08005791
 8005728:	08005791 	.word	0x08005791
 800572c:	08005791 	.word	0x08005791
 8005730:	08005791 	.word	0x08005791
 8005734:	08005791 	.word	0x08005791
 8005738:	08005791 	.word	0x08005791
 800573c:	08005781 	.word	0x08005781
 8005740:	08005791 	.word	0x08005791
 8005744:	08005791 	.word	0x08005791
 8005748:	08005791 	.word	0x08005791
 800574c:	08005791 	.word	0x08005791
 8005750:	08005791 	.word	0x08005791
 8005754:	08005791 	.word	0x08005791
 8005758:	08005791 	.word	0x08005791
 800575c:	08005789 	.word	0x08005789
 8005760:	2301      	movs	r3, #1
 8005762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005766:	e233      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005768:	2304      	movs	r3, #4
 800576a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800576e:	e22f      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005770:	2308      	movs	r3, #8
 8005772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005776:	e22b      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005778:	2310      	movs	r3, #16
 800577a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800577e:	e227      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005780:	2320      	movs	r3, #32
 8005782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005786:	e223      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005788:	2340      	movs	r3, #64	; 0x40
 800578a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800578e:	e21f      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005790:	2380      	movs	r3, #128	; 0x80
 8005792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005796:	bf00      	nop
 8005798:	e21a      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a6d      	ldr	r2, [pc, #436]	; (8005954 <UART_SetConfig+0x354>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d132      	bne.n	800580a <UART_SetConfig+0x20a>
 80057a4:	4b6a      	ldr	r3, [pc, #424]	; (8005950 <UART_SetConfig+0x350>)
 80057a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	2b05      	cmp	r3, #5
 80057ae:	d827      	bhi.n	8005800 <UART_SetConfig+0x200>
 80057b0:	a201      	add	r2, pc, #4	; (adr r2, 80057b8 <UART_SetConfig+0x1b8>)
 80057b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b6:	bf00      	nop
 80057b8:	080057d1 	.word	0x080057d1
 80057bc:	080057d9 	.word	0x080057d9
 80057c0:	080057e1 	.word	0x080057e1
 80057c4:	080057e9 	.word	0x080057e9
 80057c8:	080057f1 	.word	0x080057f1
 80057cc:	080057f9 	.word	0x080057f9
 80057d0:	2300      	movs	r3, #0
 80057d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057d6:	e1fb      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 80057d8:	2304      	movs	r3, #4
 80057da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057de:	e1f7      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 80057e0:	2308      	movs	r3, #8
 80057e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057e6:	e1f3      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 80057e8:	2310      	movs	r3, #16
 80057ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ee:	e1ef      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 80057f0:	2320      	movs	r3, #32
 80057f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057f6:	e1eb      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 80057f8:	2340      	movs	r3, #64	; 0x40
 80057fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057fe:	e1e7      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005800:	2380      	movs	r3, #128	; 0x80
 8005802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005806:	bf00      	nop
 8005808:	e1e2      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a52      	ldr	r2, [pc, #328]	; (8005958 <UART_SetConfig+0x358>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d132      	bne.n	800587a <UART_SetConfig+0x27a>
 8005814:	4b4e      	ldr	r3, [pc, #312]	; (8005950 <UART_SetConfig+0x350>)
 8005816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	2b05      	cmp	r3, #5
 800581e:	d827      	bhi.n	8005870 <UART_SetConfig+0x270>
 8005820:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <UART_SetConfig+0x228>)
 8005822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005826:	bf00      	nop
 8005828:	08005841 	.word	0x08005841
 800582c:	08005849 	.word	0x08005849
 8005830:	08005851 	.word	0x08005851
 8005834:	08005859 	.word	0x08005859
 8005838:	08005861 	.word	0x08005861
 800583c:	08005869 	.word	0x08005869
 8005840:	2300      	movs	r3, #0
 8005842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005846:	e1c3      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005848:	2304      	movs	r3, #4
 800584a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800584e:	e1bf      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005850:	2308      	movs	r3, #8
 8005852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005856:	e1bb      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005858:	2310      	movs	r3, #16
 800585a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800585e:	e1b7      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005860:	2320      	movs	r3, #32
 8005862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005866:	e1b3      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005868:	2340      	movs	r3, #64	; 0x40
 800586a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800586e:	e1af      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005870:	2380      	movs	r3, #128	; 0x80
 8005872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005876:	bf00      	nop
 8005878:	e1aa      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a37      	ldr	r2, [pc, #220]	; (800595c <UART_SetConfig+0x35c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d132      	bne.n	80058ea <UART_SetConfig+0x2ea>
 8005884:	4b32      	ldr	r3, [pc, #200]	; (8005950 <UART_SetConfig+0x350>)
 8005886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	2b05      	cmp	r3, #5
 800588e:	d827      	bhi.n	80058e0 <UART_SetConfig+0x2e0>
 8005890:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <UART_SetConfig+0x298>)
 8005892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005896:	bf00      	nop
 8005898:	080058b1 	.word	0x080058b1
 800589c:	080058b9 	.word	0x080058b9
 80058a0:	080058c1 	.word	0x080058c1
 80058a4:	080058c9 	.word	0x080058c9
 80058a8:	080058d1 	.word	0x080058d1
 80058ac:	080058d9 	.word	0x080058d9
 80058b0:	2300      	movs	r3, #0
 80058b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058b6:	e18b      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 80058b8:	2304      	movs	r3, #4
 80058ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058be:	e187      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 80058c0:	2308      	movs	r3, #8
 80058c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058c6:	e183      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 80058c8:	2310      	movs	r3, #16
 80058ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ce:	e17f      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 80058d0:	2320      	movs	r3, #32
 80058d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058d6:	e17b      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 80058d8:	2340      	movs	r3, #64	; 0x40
 80058da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058de:	e177      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 80058e0:	2380      	movs	r3, #128	; 0x80
 80058e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058e6:	bf00      	nop
 80058e8:	e172      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1c      	ldr	r2, [pc, #112]	; (8005960 <UART_SetConfig+0x360>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d144      	bne.n	800597e <UART_SetConfig+0x37e>
 80058f4:	4b16      	ldr	r3, [pc, #88]	; (8005950 <UART_SetConfig+0x350>)
 80058f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	2b05      	cmp	r3, #5
 80058fe:	d839      	bhi.n	8005974 <UART_SetConfig+0x374>
 8005900:	a201      	add	r2, pc, #4	; (adr r2, 8005908 <UART_SetConfig+0x308>)
 8005902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005906:	bf00      	nop
 8005908:	08005921 	.word	0x08005921
 800590c:	08005929 	.word	0x08005929
 8005910:	08005931 	.word	0x08005931
 8005914:	08005939 	.word	0x08005939
 8005918:	08005965 	.word	0x08005965
 800591c:	0800596d 	.word	0x0800596d
 8005920:	2300      	movs	r3, #0
 8005922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005926:	e153      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005928:	2304      	movs	r3, #4
 800592a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800592e:	e14f      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005930:	2308      	movs	r3, #8
 8005932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005936:	e14b      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005938:	2310      	movs	r3, #16
 800593a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800593e:	e147      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005940:	cfff69f3 	.word	0xcfff69f3
 8005944:	58000c00 	.word	0x58000c00
 8005948:	11fff4ff 	.word	0x11fff4ff
 800594c:	40011000 	.word	0x40011000
 8005950:	58024400 	.word	0x58024400
 8005954:	40004400 	.word	0x40004400
 8005958:	40004800 	.word	0x40004800
 800595c:	40004c00 	.word	0x40004c00
 8005960:	40005000 	.word	0x40005000
 8005964:	2320      	movs	r3, #32
 8005966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800596a:	e131      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 800596c:	2340      	movs	r3, #64	; 0x40
 800596e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005972:	e12d      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005974:	2380      	movs	r3, #128	; 0x80
 8005976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800597a:	bf00      	nop
 800597c:	e128      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4ab6      	ldr	r2, [pc, #728]	; (8005c5c <UART_SetConfig+0x65c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d178      	bne.n	8005a7a <UART_SetConfig+0x47a>
 8005988:	4bb5      	ldr	r3, [pc, #724]	; (8005c60 <UART_SetConfig+0x660>)
 800598a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005990:	2b28      	cmp	r3, #40	; 0x28
 8005992:	d86d      	bhi.n	8005a70 <UART_SetConfig+0x470>
 8005994:	a201      	add	r2, pc, #4	; (adr r2, 800599c <UART_SetConfig+0x39c>)
 8005996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599a:	bf00      	nop
 800599c:	08005a41 	.word	0x08005a41
 80059a0:	08005a71 	.word	0x08005a71
 80059a4:	08005a71 	.word	0x08005a71
 80059a8:	08005a71 	.word	0x08005a71
 80059ac:	08005a71 	.word	0x08005a71
 80059b0:	08005a71 	.word	0x08005a71
 80059b4:	08005a71 	.word	0x08005a71
 80059b8:	08005a71 	.word	0x08005a71
 80059bc:	08005a49 	.word	0x08005a49
 80059c0:	08005a71 	.word	0x08005a71
 80059c4:	08005a71 	.word	0x08005a71
 80059c8:	08005a71 	.word	0x08005a71
 80059cc:	08005a71 	.word	0x08005a71
 80059d0:	08005a71 	.word	0x08005a71
 80059d4:	08005a71 	.word	0x08005a71
 80059d8:	08005a71 	.word	0x08005a71
 80059dc:	08005a51 	.word	0x08005a51
 80059e0:	08005a71 	.word	0x08005a71
 80059e4:	08005a71 	.word	0x08005a71
 80059e8:	08005a71 	.word	0x08005a71
 80059ec:	08005a71 	.word	0x08005a71
 80059f0:	08005a71 	.word	0x08005a71
 80059f4:	08005a71 	.word	0x08005a71
 80059f8:	08005a71 	.word	0x08005a71
 80059fc:	08005a59 	.word	0x08005a59
 8005a00:	08005a71 	.word	0x08005a71
 8005a04:	08005a71 	.word	0x08005a71
 8005a08:	08005a71 	.word	0x08005a71
 8005a0c:	08005a71 	.word	0x08005a71
 8005a10:	08005a71 	.word	0x08005a71
 8005a14:	08005a71 	.word	0x08005a71
 8005a18:	08005a71 	.word	0x08005a71
 8005a1c:	08005a61 	.word	0x08005a61
 8005a20:	08005a71 	.word	0x08005a71
 8005a24:	08005a71 	.word	0x08005a71
 8005a28:	08005a71 	.word	0x08005a71
 8005a2c:	08005a71 	.word	0x08005a71
 8005a30:	08005a71 	.word	0x08005a71
 8005a34:	08005a71 	.word	0x08005a71
 8005a38:	08005a71 	.word	0x08005a71
 8005a3c:	08005a69 	.word	0x08005a69
 8005a40:	2301      	movs	r3, #1
 8005a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a46:	e0c3      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a4e:	e0bf      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005a50:	2308      	movs	r3, #8
 8005a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a56:	e0bb      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005a58:	2310      	movs	r3, #16
 8005a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a5e:	e0b7      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005a60:	2320      	movs	r3, #32
 8005a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a66:	e0b3      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005a68:	2340      	movs	r3, #64	; 0x40
 8005a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a6e:	e0af      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a76:	bf00      	nop
 8005a78:	e0aa      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a79      	ldr	r2, [pc, #484]	; (8005c64 <UART_SetConfig+0x664>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d132      	bne.n	8005aea <UART_SetConfig+0x4ea>
 8005a84:	4b76      	ldr	r3, [pc, #472]	; (8005c60 <UART_SetConfig+0x660>)
 8005a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	2b05      	cmp	r3, #5
 8005a8e:	d827      	bhi.n	8005ae0 <UART_SetConfig+0x4e0>
 8005a90:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <UART_SetConfig+0x498>)
 8005a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a96:	bf00      	nop
 8005a98:	08005ab1 	.word	0x08005ab1
 8005a9c:	08005ab9 	.word	0x08005ab9
 8005aa0:	08005ac1 	.word	0x08005ac1
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005ad1 	.word	0x08005ad1
 8005aac:	08005ad9 	.word	0x08005ad9
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ab6:	e08b      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005ab8:	2304      	movs	r3, #4
 8005aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005abe:	e087      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005ac0:	2308      	movs	r3, #8
 8005ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ac6:	e083      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005ac8:	2310      	movs	r3, #16
 8005aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ace:	e07f      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005ad0:	2320      	movs	r3, #32
 8005ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ad6:	e07b      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005ad8:	2340      	movs	r3, #64	; 0x40
 8005ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ade:	e077      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005ae0:	2380      	movs	r3, #128	; 0x80
 8005ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ae6:	bf00      	nop
 8005ae8:	e072      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a5e      	ldr	r2, [pc, #376]	; (8005c68 <UART_SetConfig+0x668>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d132      	bne.n	8005b5a <UART_SetConfig+0x55a>
 8005af4:	4b5a      	ldr	r3, [pc, #360]	; (8005c60 <UART_SetConfig+0x660>)
 8005af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	2b05      	cmp	r3, #5
 8005afe:	d827      	bhi.n	8005b50 <UART_SetConfig+0x550>
 8005b00:	a201      	add	r2, pc, #4	; (adr r2, 8005b08 <UART_SetConfig+0x508>)
 8005b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b06:	bf00      	nop
 8005b08:	08005b21 	.word	0x08005b21
 8005b0c:	08005b29 	.word	0x08005b29
 8005b10:	08005b31 	.word	0x08005b31
 8005b14:	08005b39 	.word	0x08005b39
 8005b18:	08005b41 	.word	0x08005b41
 8005b1c:	08005b49 	.word	0x08005b49
 8005b20:	2300      	movs	r3, #0
 8005b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b26:	e053      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005b28:	2304      	movs	r3, #4
 8005b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b2e:	e04f      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005b30:	2308      	movs	r3, #8
 8005b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b36:	e04b      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005b38:	2310      	movs	r3, #16
 8005b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b3e:	e047      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005b40:	2320      	movs	r3, #32
 8005b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b46:	e043      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005b48:	2340      	movs	r3, #64	; 0x40
 8005b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4e:	e03f      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005b50:	2380      	movs	r3, #128	; 0x80
 8005b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b56:	bf00      	nop
 8005b58:	e03a      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a43      	ldr	r2, [pc, #268]	; (8005c6c <UART_SetConfig+0x66c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d132      	bne.n	8005bca <UART_SetConfig+0x5ca>
 8005b64:	4b3e      	ldr	r3, [pc, #248]	; (8005c60 <UART_SetConfig+0x660>)
 8005b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	2b05      	cmp	r3, #5
 8005b6e:	d827      	bhi.n	8005bc0 <UART_SetConfig+0x5c0>
 8005b70:	a201      	add	r2, pc, #4	; (adr r2, 8005b78 <UART_SetConfig+0x578>)
 8005b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b76:	bf00      	nop
 8005b78:	08005b91 	.word	0x08005b91
 8005b7c:	08005b99 	.word	0x08005b99
 8005b80:	08005ba1 	.word	0x08005ba1
 8005b84:	08005ba9 	.word	0x08005ba9
 8005b88:	08005bb1 	.word	0x08005bb1
 8005b8c:	08005bb9 	.word	0x08005bb9
 8005b90:	2302      	movs	r3, #2
 8005b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b96:	e01b      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005b98:	2304      	movs	r3, #4
 8005b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b9e:	e017      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005ba0:	2308      	movs	r3, #8
 8005ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ba6:	e013      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005ba8:	2310      	movs	r3, #16
 8005baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bae:	e00f      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005bb0:	2320      	movs	r3, #32
 8005bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bb6:	e00b      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005bb8:	2340      	movs	r3, #64	; 0x40
 8005bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bbe:	e007      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005bc0:	2380      	movs	r3, #128	; 0x80
 8005bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc6:	bf00      	nop
 8005bc8:	e002      	b.n	8005bd0 <UART_SetConfig+0x5d0>
 8005bca:	2380      	movs	r3, #128	; 0x80
 8005bcc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a25      	ldr	r2, [pc, #148]	; (8005c6c <UART_SetConfig+0x66c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	f040 80b8 	bne.w	8005d4c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d019      	beq.n	8005c18 <UART_SetConfig+0x618>
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	dc04      	bgt.n	8005bf2 <UART_SetConfig+0x5f2>
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d009      	beq.n	8005c00 <UART_SetConfig+0x600>
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d00b      	beq.n	8005c08 <UART_SetConfig+0x608>
 8005bf0:	e042      	b.n	8005c78 <UART_SetConfig+0x678>
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	d02b      	beq.n	8005c4e <UART_SetConfig+0x64e>
 8005bf6:	2b40      	cmp	r3, #64	; 0x40
 8005bf8:	d02c      	beq.n	8005c54 <UART_SetConfig+0x654>
 8005bfa:	2b10      	cmp	r3, #16
 8005bfc:	d014      	beq.n	8005c28 <UART_SetConfig+0x628>
 8005bfe:	e03b      	b.n	8005c78 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005c00:	f7ff f806 	bl	8004c10 <HAL_RCCEx_GetD3PCLK1Freq>
 8005c04:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005c06:	e03d      	b.n	8005c84 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c08:	f107 0314 	add.w	r3, r7, #20
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff f815 	bl	8004c3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c16:	e035      	b.n	8005c84 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c18:	f107 0308 	add.w	r3, r7, #8
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff f959 	bl	8004ed4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c26:	e02d      	b.n	8005c84 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c28:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <UART_SetConfig+0x660>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0320 	and.w	r3, r3, #32
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d009      	beq.n	8005c48 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c34:	4b0a      	ldr	r3, [pc, #40]	; (8005c60 <UART_SetConfig+0x660>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	08db      	lsrs	r3, r3, #3
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	4a0c      	ldr	r2, [pc, #48]	; (8005c70 <UART_SetConfig+0x670>)
 8005c40:	fa22 f303 	lsr.w	r3, r2, r3
 8005c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c46:	e01d      	b.n	8005c84 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8005c48:	4b09      	ldr	r3, [pc, #36]	; (8005c70 <UART_SetConfig+0x670>)
 8005c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c4c:	e01a      	b.n	8005c84 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c4e:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <UART_SetConfig+0x674>)
 8005c50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c52:	e017      	b.n	8005c84 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c5a:	e013      	b.n	8005c84 <UART_SetConfig+0x684>
 8005c5c:	40011400 	.word	0x40011400
 8005c60:	58024400 	.word	0x58024400
 8005c64:	40007800 	.word	0x40007800
 8005c68:	40007c00 	.word	0x40007c00
 8005c6c:	58000c00 	.word	0x58000c00
 8005c70:	03d09000 	.word	0x03d09000
 8005c74:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005c82:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 824d 	beq.w	8006126 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	4aad      	ldr	r2, [pc, #692]	; (8005f48 <UART_SetConfig+0x948>)
 8005c92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c96:	461a      	mov	r2, r3
 8005c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c9e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	4413      	add	r3, r2
 8005caa:	6a3a      	ldr	r2, [r7, #32]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d305      	bcc.n	8005cbc <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cb6:	6a3a      	ldr	r2, [r7, #32]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d903      	bls.n	8005cc4 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005cc2:	e230      	b.n	8006126 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f04f 0100 	mov.w	r1, #0
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	4a9d      	ldr	r2, [pc, #628]	; (8005f48 <UART_SetConfig+0x948>)
 8005cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f04f 0400 	mov.w	r4, #0
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4623      	mov	r3, r4
 8005ce0:	f7fa fb4e 	bl	8000380 <__aeabi_uldivmod>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4622      	mov	r2, r4
 8005cec:	f04f 0300 	mov.w	r3, #0
 8005cf0:	f04f 0400 	mov.w	r4, #0
 8005cf4:	0214      	lsls	r4, r2, #8
 8005cf6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005cfa:	020b      	lsls	r3, r1, #8
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	6852      	ldr	r2, [r2, #4]
 8005d00:	0852      	lsrs	r2, r2, #1
 8005d02:	4611      	mov	r1, r2
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	eb13 0b01 	adds.w	fp, r3, r1
 8005d0c:	eb44 0c02 	adc.w	ip, r4, r2
 8005d10:	4658      	mov	r0, fp
 8005d12:	4661      	mov	r1, ip
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f04f 0400 	mov.w	r4, #0
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	4623      	mov	r3, r4
 8005d20:	f7fa fb2e 	bl	8000380 <__aeabi_uldivmod>
 8005d24:	4603      	mov	r3, r0
 8005d26:	460c      	mov	r4, r1
 8005d28:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d30:	d308      	bcc.n	8005d44 <UART_SetConfig+0x744>
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d38:	d204      	bcs.n	8005d44 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d40:	60da      	str	r2, [r3, #12]
 8005d42:	e1f0      	b.n	8006126 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005d4a:	e1ec      	b.n	8006126 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d54:	f040 8100 	bne.w	8005f58 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8005d58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d5c:	2b40      	cmp	r3, #64	; 0x40
 8005d5e:	f200 80b7 	bhi.w	8005ed0 <UART_SetConfig+0x8d0>
 8005d62:	a201      	add	r2, pc, #4	; (adr r2, 8005d68 <UART_SetConfig+0x768>)
 8005d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d68:	08005e6d 	.word	0x08005e6d
 8005d6c:	08005e75 	.word	0x08005e75
 8005d70:	08005ed1 	.word	0x08005ed1
 8005d74:	08005ed1 	.word	0x08005ed1
 8005d78:	08005e7d 	.word	0x08005e7d
 8005d7c:	08005ed1 	.word	0x08005ed1
 8005d80:	08005ed1 	.word	0x08005ed1
 8005d84:	08005ed1 	.word	0x08005ed1
 8005d88:	08005e8d 	.word	0x08005e8d
 8005d8c:	08005ed1 	.word	0x08005ed1
 8005d90:	08005ed1 	.word	0x08005ed1
 8005d94:	08005ed1 	.word	0x08005ed1
 8005d98:	08005ed1 	.word	0x08005ed1
 8005d9c:	08005ed1 	.word	0x08005ed1
 8005da0:	08005ed1 	.word	0x08005ed1
 8005da4:	08005ed1 	.word	0x08005ed1
 8005da8:	08005e9d 	.word	0x08005e9d
 8005dac:	08005ed1 	.word	0x08005ed1
 8005db0:	08005ed1 	.word	0x08005ed1
 8005db4:	08005ed1 	.word	0x08005ed1
 8005db8:	08005ed1 	.word	0x08005ed1
 8005dbc:	08005ed1 	.word	0x08005ed1
 8005dc0:	08005ed1 	.word	0x08005ed1
 8005dc4:	08005ed1 	.word	0x08005ed1
 8005dc8:	08005ed1 	.word	0x08005ed1
 8005dcc:	08005ed1 	.word	0x08005ed1
 8005dd0:	08005ed1 	.word	0x08005ed1
 8005dd4:	08005ed1 	.word	0x08005ed1
 8005dd8:	08005ed1 	.word	0x08005ed1
 8005ddc:	08005ed1 	.word	0x08005ed1
 8005de0:	08005ed1 	.word	0x08005ed1
 8005de4:	08005ed1 	.word	0x08005ed1
 8005de8:	08005ec3 	.word	0x08005ec3
 8005dec:	08005ed1 	.word	0x08005ed1
 8005df0:	08005ed1 	.word	0x08005ed1
 8005df4:	08005ed1 	.word	0x08005ed1
 8005df8:	08005ed1 	.word	0x08005ed1
 8005dfc:	08005ed1 	.word	0x08005ed1
 8005e00:	08005ed1 	.word	0x08005ed1
 8005e04:	08005ed1 	.word	0x08005ed1
 8005e08:	08005ed1 	.word	0x08005ed1
 8005e0c:	08005ed1 	.word	0x08005ed1
 8005e10:	08005ed1 	.word	0x08005ed1
 8005e14:	08005ed1 	.word	0x08005ed1
 8005e18:	08005ed1 	.word	0x08005ed1
 8005e1c:	08005ed1 	.word	0x08005ed1
 8005e20:	08005ed1 	.word	0x08005ed1
 8005e24:	08005ed1 	.word	0x08005ed1
 8005e28:	08005ed1 	.word	0x08005ed1
 8005e2c:	08005ed1 	.word	0x08005ed1
 8005e30:	08005ed1 	.word	0x08005ed1
 8005e34:	08005ed1 	.word	0x08005ed1
 8005e38:	08005ed1 	.word	0x08005ed1
 8005e3c:	08005ed1 	.word	0x08005ed1
 8005e40:	08005ed1 	.word	0x08005ed1
 8005e44:	08005ed1 	.word	0x08005ed1
 8005e48:	08005ed1 	.word	0x08005ed1
 8005e4c:	08005ed1 	.word	0x08005ed1
 8005e50:	08005ed1 	.word	0x08005ed1
 8005e54:	08005ed1 	.word	0x08005ed1
 8005e58:	08005ed1 	.word	0x08005ed1
 8005e5c:	08005ed1 	.word	0x08005ed1
 8005e60:	08005ed1 	.word	0x08005ed1
 8005e64:	08005ed1 	.word	0x08005ed1
 8005e68:	08005ec9 	.word	0x08005ec9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e6c:	f7fd ffb6 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 8005e70:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005e72:	e033      	b.n	8005edc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e74:	f7fd ffc8 	bl	8003e08 <HAL_RCC_GetPCLK2Freq>
 8005e78:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005e7a:	e02f      	b.n	8005edc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e7c:	f107 0314 	add.w	r3, r7, #20
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7fe fedb 	bl	8004c3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e8a:	e027      	b.n	8005edc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e8c:	f107 0308 	add.w	r3, r7, #8
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff f81f 	bl	8004ed4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e9a:	e01f      	b.n	8005edc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e9c:	4b2b      	ldr	r3, [pc, #172]	; (8005f4c <UART_SetConfig+0x94c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d009      	beq.n	8005ebc <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ea8:	4b28      	ldr	r3, [pc, #160]	; (8005f4c <UART_SetConfig+0x94c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	08db      	lsrs	r3, r3, #3
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	4a27      	ldr	r2, [pc, #156]	; (8005f50 <UART_SetConfig+0x950>)
 8005eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005eba:	e00f      	b.n	8005edc <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8005ebc:	4b24      	ldr	r3, [pc, #144]	; (8005f50 <UART_SetConfig+0x950>)
 8005ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ec0:	e00c      	b.n	8005edc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ec2:	4b24      	ldr	r3, [pc, #144]	; (8005f54 <UART_SetConfig+0x954>)
 8005ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ec6:	e009      	b.n	8005edc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ec8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ece:	e005      	b.n	8005edc <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005eda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 8121 	beq.w	8006126 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	4a17      	ldr	r2, [pc, #92]	; (8005f48 <UART_SetConfig+0x948>)
 8005eea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ef6:	005a      	lsls	r2, r3, #1
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	085b      	lsrs	r3, r3, #1
 8005efe:	441a      	add	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0e:	2b0f      	cmp	r3, #15
 8005f10:	d916      	bls.n	8005f40 <UART_SetConfig+0x940>
 8005f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f18:	d212      	bcs.n	8005f40 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	f023 030f 	bic.w	r3, r3, #15
 8005f22:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f26:	085b      	lsrs	r3, r3, #1
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f32:	4313      	orrs	r3, r2
 8005f34:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005f3c:	60da      	str	r2, [r3, #12]
 8005f3e:	e0f2      	b.n	8006126 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005f46:	e0ee      	b.n	8006126 <UART_SetConfig+0xb26>
 8005f48:	08006f38 	.word	0x08006f38
 8005f4c:	58024400 	.word	0x58024400
 8005f50:	03d09000 	.word	0x03d09000
 8005f54:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f5c:	2b40      	cmp	r3, #64	; 0x40
 8005f5e:	f200 80b7 	bhi.w	80060d0 <UART_SetConfig+0xad0>
 8005f62:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <UART_SetConfig+0x968>)
 8005f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f68:	0800606d 	.word	0x0800606d
 8005f6c:	08006075 	.word	0x08006075
 8005f70:	080060d1 	.word	0x080060d1
 8005f74:	080060d1 	.word	0x080060d1
 8005f78:	0800607d 	.word	0x0800607d
 8005f7c:	080060d1 	.word	0x080060d1
 8005f80:	080060d1 	.word	0x080060d1
 8005f84:	080060d1 	.word	0x080060d1
 8005f88:	0800608d 	.word	0x0800608d
 8005f8c:	080060d1 	.word	0x080060d1
 8005f90:	080060d1 	.word	0x080060d1
 8005f94:	080060d1 	.word	0x080060d1
 8005f98:	080060d1 	.word	0x080060d1
 8005f9c:	080060d1 	.word	0x080060d1
 8005fa0:	080060d1 	.word	0x080060d1
 8005fa4:	080060d1 	.word	0x080060d1
 8005fa8:	0800609d 	.word	0x0800609d
 8005fac:	080060d1 	.word	0x080060d1
 8005fb0:	080060d1 	.word	0x080060d1
 8005fb4:	080060d1 	.word	0x080060d1
 8005fb8:	080060d1 	.word	0x080060d1
 8005fbc:	080060d1 	.word	0x080060d1
 8005fc0:	080060d1 	.word	0x080060d1
 8005fc4:	080060d1 	.word	0x080060d1
 8005fc8:	080060d1 	.word	0x080060d1
 8005fcc:	080060d1 	.word	0x080060d1
 8005fd0:	080060d1 	.word	0x080060d1
 8005fd4:	080060d1 	.word	0x080060d1
 8005fd8:	080060d1 	.word	0x080060d1
 8005fdc:	080060d1 	.word	0x080060d1
 8005fe0:	080060d1 	.word	0x080060d1
 8005fe4:	080060d1 	.word	0x080060d1
 8005fe8:	080060c3 	.word	0x080060c3
 8005fec:	080060d1 	.word	0x080060d1
 8005ff0:	080060d1 	.word	0x080060d1
 8005ff4:	080060d1 	.word	0x080060d1
 8005ff8:	080060d1 	.word	0x080060d1
 8005ffc:	080060d1 	.word	0x080060d1
 8006000:	080060d1 	.word	0x080060d1
 8006004:	080060d1 	.word	0x080060d1
 8006008:	080060d1 	.word	0x080060d1
 800600c:	080060d1 	.word	0x080060d1
 8006010:	080060d1 	.word	0x080060d1
 8006014:	080060d1 	.word	0x080060d1
 8006018:	080060d1 	.word	0x080060d1
 800601c:	080060d1 	.word	0x080060d1
 8006020:	080060d1 	.word	0x080060d1
 8006024:	080060d1 	.word	0x080060d1
 8006028:	080060d1 	.word	0x080060d1
 800602c:	080060d1 	.word	0x080060d1
 8006030:	080060d1 	.word	0x080060d1
 8006034:	080060d1 	.word	0x080060d1
 8006038:	080060d1 	.word	0x080060d1
 800603c:	080060d1 	.word	0x080060d1
 8006040:	080060d1 	.word	0x080060d1
 8006044:	080060d1 	.word	0x080060d1
 8006048:	080060d1 	.word	0x080060d1
 800604c:	080060d1 	.word	0x080060d1
 8006050:	080060d1 	.word	0x080060d1
 8006054:	080060d1 	.word	0x080060d1
 8006058:	080060d1 	.word	0x080060d1
 800605c:	080060d1 	.word	0x080060d1
 8006060:	080060d1 	.word	0x080060d1
 8006064:	080060d1 	.word	0x080060d1
 8006068:	080060c9 	.word	0x080060c9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800606c:	f7fd feb6 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 8006070:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006072:	e033      	b.n	80060dc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006074:	f7fd fec8 	bl	8003e08 <HAL_RCC_GetPCLK2Freq>
 8006078:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800607a:	e02f      	b.n	80060dc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800607c:	f107 0314 	add.w	r3, r7, #20
 8006080:	4618      	mov	r0, r3
 8006082:	f7fe fddb 	bl	8004c3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800608a:	e027      	b.n	80060dc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800608c:	f107 0308 	add.w	r3, r7, #8
 8006090:	4618      	mov	r0, r3
 8006092:	f7fe ff1f 	bl	8004ed4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800609a:	e01f      	b.n	80060dc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800609c:	4b2c      	ldr	r3, [pc, #176]	; (8006150 <UART_SetConfig+0xb50>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0320 	and.w	r3, r3, #32
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d009      	beq.n	80060bc <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060a8:	4b29      	ldr	r3, [pc, #164]	; (8006150 <UART_SetConfig+0xb50>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	08db      	lsrs	r3, r3, #3
 80060ae:	f003 0303 	and.w	r3, r3, #3
 80060b2:	4a28      	ldr	r2, [pc, #160]	; (8006154 <UART_SetConfig+0xb54>)
 80060b4:	fa22 f303 	lsr.w	r3, r2, r3
 80060b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060ba:	e00f      	b.n	80060dc <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80060bc:	4b25      	ldr	r3, [pc, #148]	; (8006154 <UART_SetConfig+0xb54>)
 80060be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060c0:	e00c      	b.n	80060dc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060c2:	4b25      	ldr	r3, [pc, #148]	; (8006158 <UART_SetConfig+0xb58>)
 80060c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060c6:	e009      	b.n	80060dc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060ce:	e005      	b.n	80060dc <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80060da:	bf00      	nop
    }

    if (pclk != 0U)
 80060dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d021      	beq.n	8006126 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	4a1d      	ldr	r2, [pc, #116]	; (800615c <UART_SetConfig+0xb5c>)
 80060e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060ec:	461a      	mov	r2, r3
 80060ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	085b      	lsrs	r3, r3, #1
 80060fa:	441a      	add	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	fbb2 f3f3 	udiv	r3, r2, r3
 8006104:	b29b      	uxth	r3, r3
 8006106:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	2b0f      	cmp	r3, #15
 800610c:	d908      	bls.n	8006120 <UART_SetConfig+0xb20>
 800610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006114:	d204      	bcs.n	8006120 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800611c:	60da      	str	r2, [r3, #12]
 800611e:	e002      	b.n	8006126 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006142:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006146:	4618      	mov	r0, r3
 8006148:	3738      	adds	r7, #56	; 0x38
 800614a:	46bd      	mov	sp, r7
 800614c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006150:	58024400 	.word	0x58024400
 8006154:	03d09000 	.word	0x03d09000
 8006158:	003d0900 	.word	0x003d0900
 800615c:	08006f38 	.word	0x08006f38

08006160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	f003 0310 	and.w	r3, r3, #16
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00a      	beq.n	8006212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006216:	f003 0320 	and.w	r3, r3, #32
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623c:	2b00      	cmp	r3, #0
 800623e:	d01a      	beq.n	8006276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800625e:	d10a      	bne.n	8006276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	605a      	str	r2, [r3, #4]
  }
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af02      	add	r7, sp, #8
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80062b4:	f7fb fdc8 	bl	8001e48 <HAL_GetTick>
 80062b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b08      	cmp	r3, #8
 80062c6:	d10e      	bne.n	80062e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f82c 	bl	8006334 <UART_WaitOnFlagUntilTimeout>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e022      	b.n	800632c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d10e      	bne.n	8006312 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f816 	bl	8006334 <UART_WaitOnFlagUntilTimeout>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e00c      	b.n	800632c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2220      	movs	r2, #32
 8006316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2220      	movs	r2, #32
 800631e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	4613      	mov	r3, r2
 8006342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006344:	e062      	b.n	800640c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634c:	d05e      	beq.n	800640c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634e:	f7fb fd7b 	bl	8001e48 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	429a      	cmp	r2, r3
 800635c:	d302      	bcc.n	8006364 <UART_WaitOnFlagUntilTimeout+0x30>
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d11d      	bne.n	80063a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006372:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 0201 	bic.w	r2, r2, #1
 8006382:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2220      	movs	r2, #32
 8006388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2220      	movs	r2, #32
 8006390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e045      	b.n	800642c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d02e      	beq.n	800640c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063bc:	d126      	bne.n	800640c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063d6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689a      	ldr	r2, [r3, #8]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0201 	bic.w	r2, r2, #1
 80063e6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e00f      	b.n	800642c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69da      	ldr	r2, [r3, #28]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	4013      	ands	r3, r2
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	429a      	cmp	r2, r3
 800641a:	bf0c      	ite	eq
 800641c:	2301      	moveq	r3, #1
 800641e:	2300      	movne	r3, #0
 8006420:	b2db      	uxtb	r3, r3
 8006422:	461a      	mov	r2, r3
 8006424:	79fb      	ldrb	r3, [r7, #7]
 8006426:	429a      	cmp	r2, r3
 8006428:	d08d      	beq.n	8006346 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006442:	2b01      	cmp	r3, #1
 8006444:	d101      	bne.n	800644a <HAL_UARTEx_DisableFifoMode+0x16>
 8006446:	2302      	movs	r3, #2
 8006448:	e027      	b.n	800649a <HAL_UARTEx_DisableFifoMode+0x66>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2224      	movs	r2, #36	; 0x24
 8006456:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 0201 	bic.w	r2, r2, #1
 8006470:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006478:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2220      	movs	r2, #32
 800648c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b084      	sub	sp, #16
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e02d      	b.n	800651a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2224      	movs	r2, #36	; 0x24
 80064ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0201 	bic.w	r2, r2, #1
 80064e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f850 	bl	80065a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2220      	movs	r2, #32
 800650c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006532:	2b01      	cmp	r3, #1
 8006534:	d101      	bne.n	800653a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006536:	2302      	movs	r3, #2
 8006538:	e02d      	b.n	8006596 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2224      	movs	r2, #36	; 0x24
 8006546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 0201 	bic.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f812 	bl	80065a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
	...

080065a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b089      	sub	sp, #36	; 0x24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80065a8:	4a2f      	ldr	r2, [pc, #188]	; (8006668 <UARTEx_SetNbDataToProcess+0xc8>)
 80065aa:	f107 0314 	add.w	r3, r7, #20
 80065ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065b2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80065b6:	4a2d      	ldr	r2, [pc, #180]	; (800666c <UARTEx_SetNbDataToProcess+0xcc>)
 80065b8:	f107 030c 	add.w	r3, r7, #12
 80065bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065c0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d108      	bne.n	80065de <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065dc:	e03d      	b.n	800665a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065de:	2310      	movs	r3, #16
 80065e0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065e2:	2310      	movs	r3, #16
 80065e4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	0e5b      	lsrs	r3, r3, #25
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	f003 0307 	and.w	r3, r3, #7
 80065f4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	0f5b      	lsrs	r3, r3, #29
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006606:	7fbb      	ldrb	r3, [r7, #30]
 8006608:	7f3a      	ldrb	r2, [r7, #28]
 800660a:	f107 0120 	add.w	r1, r7, #32
 800660e:	440a      	add	r2, r1
 8006610:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006614:	fb02 f303 	mul.w	r3, r2, r3
 8006618:	7f3a      	ldrb	r2, [r7, #28]
 800661a:	f107 0120 	add.w	r1, r7, #32
 800661e:	440a      	add	r2, r1
 8006620:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006624:	fb93 f3f2 	sdiv	r3, r3, r2
 8006628:	b29a      	uxth	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006630:	7ffb      	ldrb	r3, [r7, #31]
 8006632:	7f7a      	ldrb	r2, [r7, #29]
 8006634:	f107 0120 	add.w	r1, r7, #32
 8006638:	440a      	add	r2, r1
 800663a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800663e:	fb02 f303 	mul.w	r3, r2, r3
 8006642:	7f7a      	ldrb	r2, [r7, #29]
 8006644:	f107 0120 	add.w	r1, r7, #32
 8006648:	440a      	add	r2, r1
 800664a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800664e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006652:	b29a      	uxth	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800665a:	bf00      	nop
 800665c:	3724      	adds	r7, #36	; 0x24
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	08006f18 	.word	0x08006f18
 800666c:	08006f20 	.word	0x08006f20

08006670 <__errno>:
 8006670:	4b01      	ldr	r3, [pc, #4]	; (8006678 <__errno+0x8>)
 8006672:	6818      	ldr	r0, [r3, #0]
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	200000f8 	.word	0x200000f8

0800667c <__libc_init_array>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	4e0d      	ldr	r6, [pc, #52]	; (80066b4 <__libc_init_array+0x38>)
 8006680:	4c0d      	ldr	r4, [pc, #52]	; (80066b8 <__libc_init_array+0x3c>)
 8006682:	1ba4      	subs	r4, r4, r6
 8006684:	10a4      	asrs	r4, r4, #2
 8006686:	2500      	movs	r5, #0
 8006688:	42a5      	cmp	r5, r4
 800668a:	d109      	bne.n	80066a0 <__libc_init_array+0x24>
 800668c:	4e0b      	ldr	r6, [pc, #44]	; (80066bc <__libc_init_array+0x40>)
 800668e:	4c0c      	ldr	r4, [pc, #48]	; (80066c0 <__libc_init_array+0x44>)
 8006690:	f000 fc28 	bl	8006ee4 <_init>
 8006694:	1ba4      	subs	r4, r4, r6
 8006696:	10a4      	asrs	r4, r4, #2
 8006698:	2500      	movs	r5, #0
 800669a:	42a5      	cmp	r5, r4
 800669c:	d105      	bne.n	80066aa <__libc_init_array+0x2e>
 800669e:	bd70      	pop	{r4, r5, r6, pc}
 80066a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066a4:	4798      	blx	r3
 80066a6:	3501      	adds	r5, #1
 80066a8:	e7ee      	b.n	8006688 <__libc_init_array+0xc>
 80066aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066ae:	4798      	blx	r3
 80066b0:	3501      	adds	r5, #1
 80066b2:	e7f2      	b.n	800669a <__libc_init_array+0x1e>
 80066b4:	08006f8c 	.word	0x08006f8c
 80066b8:	08006f8c 	.word	0x08006f8c
 80066bc:	08006f8c 	.word	0x08006f8c
 80066c0:	08006f90 	.word	0x08006f90

080066c4 <memcpy>:
 80066c4:	b510      	push	{r4, lr}
 80066c6:	1e43      	subs	r3, r0, #1
 80066c8:	440a      	add	r2, r1
 80066ca:	4291      	cmp	r1, r2
 80066cc:	d100      	bne.n	80066d0 <memcpy+0xc>
 80066ce:	bd10      	pop	{r4, pc}
 80066d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066d8:	e7f7      	b.n	80066ca <memcpy+0x6>

080066da <memset>:
 80066da:	4402      	add	r2, r0
 80066dc:	4603      	mov	r3, r0
 80066de:	4293      	cmp	r3, r2
 80066e0:	d100      	bne.n	80066e4 <memset+0xa>
 80066e2:	4770      	bx	lr
 80066e4:	f803 1b01 	strb.w	r1, [r3], #1
 80066e8:	e7f9      	b.n	80066de <memset+0x4>
	...

080066ec <siprintf>:
 80066ec:	b40e      	push	{r1, r2, r3}
 80066ee:	b500      	push	{lr}
 80066f0:	b09c      	sub	sp, #112	; 0x70
 80066f2:	ab1d      	add	r3, sp, #116	; 0x74
 80066f4:	9002      	str	r0, [sp, #8]
 80066f6:	9006      	str	r0, [sp, #24]
 80066f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066fc:	4809      	ldr	r0, [pc, #36]	; (8006724 <siprintf+0x38>)
 80066fe:	9107      	str	r1, [sp, #28]
 8006700:	9104      	str	r1, [sp, #16]
 8006702:	4909      	ldr	r1, [pc, #36]	; (8006728 <siprintf+0x3c>)
 8006704:	f853 2b04 	ldr.w	r2, [r3], #4
 8006708:	9105      	str	r1, [sp, #20]
 800670a:	6800      	ldr	r0, [r0, #0]
 800670c:	9301      	str	r3, [sp, #4]
 800670e:	a902      	add	r1, sp, #8
 8006710:	f000 f866 	bl	80067e0 <_svfiprintf_r>
 8006714:	9b02      	ldr	r3, [sp, #8]
 8006716:	2200      	movs	r2, #0
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	b01c      	add	sp, #112	; 0x70
 800671c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006720:	b003      	add	sp, #12
 8006722:	4770      	bx	lr
 8006724:	200000f8 	.word	0x200000f8
 8006728:	ffff0208 	.word	0xffff0208

0800672c <__ssputs_r>:
 800672c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006730:	688e      	ldr	r6, [r1, #8]
 8006732:	429e      	cmp	r6, r3
 8006734:	4682      	mov	sl, r0
 8006736:	460c      	mov	r4, r1
 8006738:	4690      	mov	r8, r2
 800673a:	4699      	mov	r9, r3
 800673c:	d837      	bhi.n	80067ae <__ssputs_r+0x82>
 800673e:	898a      	ldrh	r2, [r1, #12]
 8006740:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006744:	d031      	beq.n	80067aa <__ssputs_r+0x7e>
 8006746:	6825      	ldr	r5, [r4, #0]
 8006748:	6909      	ldr	r1, [r1, #16]
 800674a:	1a6f      	subs	r7, r5, r1
 800674c:	6965      	ldr	r5, [r4, #20]
 800674e:	2302      	movs	r3, #2
 8006750:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006754:	fb95 f5f3 	sdiv	r5, r5, r3
 8006758:	f109 0301 	add.w	r3, r9, #1
 800675c:	443b      	add	r3, r7
 800675e:	429d      	cmp	r5, r3
 8006760:	bf38      	it	cc
 8006762:	461d      	movcc	r5, r3
 8006764:	0553      	lsls	r3, r2, #21
 8006766:	d530      	bpl.n	80067ca <__ssputs_r+0x9e>
 8006768:	4629      	mov	r1, r5
 800676a:	f000 fb21 	bl	8006db0 <_malloc_r>
 800676e:	4606      	mov	r6, r0
 8006770:	b950      	cbnz	r0, 8006788 <__ssputs_r+0x5c>
 8006772:	230c      	movs	r3, #12
 8006774:	f8ca 3000 	str.w	r3, [sl]
 8006778:	89a3      	ldrh	r3, [r4, #12]
 800677a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800677e:	81a3      	strh	r3, [r4, #12]
 8006780:	f04f 30ff 	mov.w	r0, #4294967295
 8006784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006788:	463a      	mov	r2, r7
 800678a:	6921      	ldr	r1, [r4, #16]
 800678c:	f7ff ff9a 	bl	80066c4 <memcpy>
 8006790:	89a3      	ldrh	r3, [r4, #12]
 8006792:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800679a:	81a3      	strh	r3, [r4, #12]
 800679c:	6126      	str	r6, [r4, #16]
 800679e:	6165      	str	r5, [r4, #20]
 80067a0:	443e      	add	r6, r7
 80067a2:	1bed      	subs	r5, r5, r7
 80067a4:	6026      	str	r6, [r4, #0]
 80067a6:	60a5      	str	r5, [r4, #8]
 80067a8:	464e      	mov	r6, r9
 80067aa:	454e      	cmp	r6, r9
 80067ac:	d900      	bls.n	80067b0 <__ssputs_r+0x84>
 80067ae:	464e      	mov	r6, r9
 80067b0:	4632      	mov	r2, r6
 80067b2:	4641      	mov	r1, r8
 80067b4:	6820      	ldr	r0, [r4, #0]
 80067b6:	f000 fa93 	bl	8006ce0 <memmove>
 80067ba:	68a3      	ldr	r3, [r4, #8]
 80067bc:	1b9b      	subs	r3, r3, r6
 80067be:	60a3      	str	r3, [r4, #8]
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	441e      	add	r6, r3
 80067c4:	6026      	str	r6, [r4, #0]
 80067c6:	2000      	movs	r0, #0
 80067c8:	e7dc      	b.n	8006784 <__ssputs_r+0x58>
 80067ca:	462a      	mov	r2, r5
 80067cc:	f000 fb4a 	bl	8006e64 <_realloc_r>
 80067d0:	4606      	mov	r6, r0
 80067d2:	2800      	cmp	r0, #0
 80067d4:	d1e2      	bne.n	800679c <__ssputs_r+0x70>
 80067d6:	6921      	ldr	r1, [r4, #16]
 80067d8:	4650      	mov	r0, sl
 80067da:	f000 fa9b 	bl	8006d14 <_free_r>
 80067de:	e7c8      	b.n	8006772 <__ssputs_r+0x46>

080067e0 <_svfiprintf_r>:
 80067e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e4:	461d      	mov	r5, r3
 80067e6:	898b      	ldrh	r3, [r1, #12]
 80067e8:	061f      	lsls	r7, r3, #24
 80067ea:	b09d      	sub	sp, #116	; 0x74
 80067ec:	4680      	mov	r8, r0
 80067ee:	460c      	mov	r4, r1
 80067f0:	4616      	mov	r6, r2
 80067f2:	d50f      	bpl.n	8006814 <_svfiprintf_r+0x34>
 80067f4:	690b      	ldr	r3, [r1, #16]
 80067f6:	b96b      	cbnz	r3, 8006814 <_svfiprintf_r+0x34>
 80067f8:	2140      	movs	r1, #64	; 0x40
 80067fa:	f000 fad9 	bl	8006db0 <_malloc_r>
 80067fe:	6020      	str	r0, [r4, #0]
 8006800:	6120      	str	r0, [r4, #16]
 8006802:	b928      	cbnz	r0, 8006810 <_svfiprintf_r+0x30>
 8006804:	230c      	movs	r3, #12
 8006806:	f8c8 3000 	str.w	r3, [r8]
 800680a:	f04f 30ff 	mov.w	r0, #4294967295
 800680e:	e0c8      	b.n	80069a2 <_svfiprintf_r+0x1c2>
 8006810:	2340      	movs	r3, #64	; 0x40
 8006812:	6163      	str	r3, [r4, #20]
 8006814:	2300      	movs	r3, #0
 8006816:	9309      	str	r3, [sp, #36]	; 0x24
 8006818:	2320      	movs	r3, #32
 800681a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800681e:	2330      	movs	r3, #48	; 0x30
 8006820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006824:	9503      	str	r5, [sp, #12]
 8006826:	f04f 0b01 	mov.w	fp, #1
 800682a:	4637      	mov	r7, r6
 800682c:	463d      	mov	r5, r7
 800682e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006832:	b10b      	cbz	r3, 8006838 <_svfiprintf_r+0x58>
 8006834:	2b25      	cmp	r3, #37	; 0x25
 8006836:	d13e      	bne.n	80068b6 <_svfiprintf_r+0xd6>
 8006838:	ebb7 0a06 	subs.w	sl, r7, r6
 800683c:	d00b      	beq.n	8006856 <_svfiprintf_r+0x76>
 800683e:	4653      	mov	r3, sl
 8006840:	4632      	mov	r2, r6
 8006842:	4621      	mov	r1, r4
 8006844:	4640      	mov	r0, r8
 8006846:	f7ff ff71 	bl	800672c <__ssputs_r>
 800684a:	3001      	adds	r0, #1
 800684c:	f000 80a4 	beq.w	8006998 <_svfiprintf_r+0x1b8>
 8006850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006852:	4453      	add	r3, sl
 8006854:	9309      	str	r3, [sp, #36]	; 0x24
 8006856:	783b      	ldrb	r3, [r7, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 809d 	beq.w	8006998 <_svfiprintf_r+0x1b8>
 800685e:	2300      	movs	r3, #0
 8006860:	f04f 32ff 	mov.w	r2, #4294967295
 8006864:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006868:	9304      	str	r3, [sp, #16]
 800686a:	9307      	str	r3, [sp, #28]
 800686c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006870:	931a      	str	r3, [sp, #104]	; 0x68
 8006872:	462f      	mov	r7, r5
 8006874:	2205      	movs	r2, #5
 8006876:	f817 1b01 	ldrb.w	r1, [r7], #1
 800687a:	4850      	ldr	r0, [pc, #320]	; (80069bc <_svfiprintf_r+0x1dc>)
 800687c:	f7f9 fd30 	bl	80002e0 <memchr>
 8006880:	9b04      	ldr	r3, [sp, #16]
 8006882:	b9d0      	cbnz	r0, 80068ba <_svfiprintf_r+0xda>
 8006884:	06d9      	lsls	r1, r3, #27
 8006886:	bf44      	itt	mi
 8006888:	2220      	movmi	r2, #32
 800688a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800688e:	071a      	lsls	r2, r3, #28
 8006890:	bf44      	itt	mi
 8006892:	222b      	movmi	r2, #43	; 0x2b
 8006894:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006898:	782a      	ldrb	r2, [r5, #0]
 800689a:	2a2a      	cmp	r2, #42	; 0x2a
 800689c:	d015      	beq.n	80068ca <_svfiprintf_r+0xea>
 800689e:	9a07      	ldr	r2, [sp, #28]
 80068a0:	462f      	mov	r7, r5
 80068a2:	2000      	movs	r0, #0
 80068a4:	250a      	movs	r5, #10
 80068a6:	4639      	mov	r1, r7
 80068a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068ac:	3b30      	subs	r3, #48	; 0x30
 80068ae:	2b09      	cmp	r3, #9
 80068b0:	d94d      	bls.n	800694e <_svfiprintf_r+0x16e>
 80068b2:	b1b8      	cbz	r0, 80068e4 <_svfiprintf_r+0x104>
 80068b4:	e00f      	b.n	80068d6 <_svfiprintf_r+0xf6>
 80068b6:	462f      	mov	r7, r5
 80068b8:	e7b8      	b.n	800682c <_svfiprintf_r+0x4c>
 80068ba:	4a40      	ldr	r2, [pc, #256]	; (80069bc <_svfiprintf_r+0x1dc>)
 80068bc:	1a80      	subs	r0, r0, r2
 80068be:	fa0b f000 	lsl.w	r0, fp, r0
 80068c2:	4318      	orrs	r0, r3
 80068c4:	9004      	str	r0, [sp, #16]
 80068c6:	463d      	mov	r5, r7
 80068c8:	e7d3      	b.n	8006872 <_svfiprintf_r+0x92>
 80068ca:	9a03      	ldr	r2, [sp, #12]
 80068cc:	1d11      	adds	r1, r2, #4
 80068ce:	6812      	ldr	r2, [r2, #0]
 80068d0:	9103      	str	r1, [sp, #12]
 80068d2:	2a00      	cmp	r2, #0
 80068d4:	db01      	blt.n	80068da <_svfiprintf_r+0xfa>
 80068d6:	9207      	str	r2, [sp, #28]
 80068d8:	e004      	b.n	80068e4 <_svfiprintf_r+0x104>
 80068da:	4252      	negs	r2, r2
 80068dc:	f043 0302 	orr.w	r3, r3, #2
 80068e0:	9207      	str	r2, [sp, #28]
 80068e2:	9304      	str	r3, [sp, #16]
 80068e4:	783b      	ldrb	r3, [r7, #0]
 80068e6:	2b2e      	cmp	r3, #46	; 0x2e
 80068e8:	d10c      	bne.n	8006904 <_svfiprintf_r+0x124>
 80068ea:	787b      	ldrb	r3, [r7, #1]
 80068ec:	2b2a      	cmp	r3, #42	; 0x2a
 80068ee:	d133      	bne.n	8006958 <_svfiprintf_r+0x178>
 80068f0:	9b03      	ldr	r3, [sp, #12]
 80068f2:	1d1a      	adds	r2, r3, #4
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	9203      	str	r2, [sp, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	bfb8      	it	lt
 80068fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006900:	3702      	adds	r7, #2
 8006902:	9305      	str	r3, [sp, #20]
 8006904:	4d2e      	ldr	r5, [pc, #184]	; (80069c0 <_svfiprintf_r+0x1e0>)
 8006906:	7839      	ldrb	r1, [r7, #0]
 8006908:	2203      	movs	r2, #3
 800690a:	4628      	mov	r0, r5
 800690c:	f7f9 fce8 	bl	80002e0 <memchr>
 8006910:	b138      	cbz	r0, 8006922 <_svfiprintf_r+0x142>
 8006912:	2340      	movs	r3, #64	; 0x40
 8006914:	1b40      	subs	r0, r0, r5
 8006916:	fa03 f000 	lsl.w	r0, r3, r0
 800691a:	9b04      	ldr	r3, [sp, #16]
 800691c:	4303      	orrs	r3, r0
 800691e:	3701      	adds	r7, #1
 8006920:	9304      	str	r3, [sp, #16]
 8006922:	7839      	ldrb	r1, [r7, #0]
 8006924:	4827      	ldr	r0, [pc, #156]	; (80069c4 <_svfiprintf_r+0x1e4>)
 8006926:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800692a:	2206      	movs	r2, #6
 800692c:	1c7e      	adds	r6, r7, #1
 800692e:	f7f9 fcd7 	bl	80002e0 <memchr>
 8006932:	2800      	cmp	r0, #0
 8006934:	d038      	beq.n	80069a8 <_svfiprintf_r+0x1c8>
 8006936:	4b24      	ldr	r3, [pc, #144]	; (80069c8 <_svfiprintf_r+0x1e8>)
 8006938:	bb13      	cbnz	r3, 8006980 <_svfiprintf_r+0x1a0>
 800693a:	9b03      	ldr	r3, [sp, #12]
 800693c:	3307      	adds	r3, #7
 800693e:	f023 0307 	bic.w	r3, r3, #7
 8006942:	3308      	adds	r3, #8
 8006944:	9303      	str	r3, [sp, #12]
 8006946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006948:	444b      	add	r3, r9
 800694a:	9309      	str	r3, [sp, #36]	; 0x24
 800694c:	e76d      	b.n	800682a <_svfiprintf_r+0x4a>
 800694e:	fb05 3202 	mla	r2, r5, r2, r3
 8006952:	2001      	movs	r0, #1
 8006954:	460f      	mov	r7, r1
 8006956:	e7a6      	b.n	80068a6 <_svfiprintf_r+0xc6>
 8006958:	2300      	movs	r3, #0
 800695a:	3701      	adds	r7, #1
 800695c:	9305      	str	r3, [sp, #20]
 800695e:	4619      	mov	r1, r3
 8006960:	250a      	movs	r5, #10
 8006962:	4638      	mov	r0, r7
 8006964:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006968:	3a30      	subs	r2, #48	; 0x30
 800696a:	2a09      	cmp	r2, #9
 800696c:	d903      	bls.n	8006976 <_svfiprintf_r+0x196>
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0c8      	beq.n	8006904 <_svfiprintf_r+0x124>
 8006972:	9105      	str	r1, [sp, #20]
 8006974:	e7c6      	b.n	8006904 <_svfiprintf_r+0x124>
 8006976:	fb05 2101 	mla	r1, r5, r1, r2
 800697a:	2301      	movs	r3, #1
 800697c:	4607      	mov	r7, r0
 800697e:	e7f0      	b.n	8006962 <_svfiprintf_r+0x182>
 8006980:	ab03      	add	r3, sp, #12
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	4622      	mov	r2, r4
 8006986:	4b11      	ldr	r3, [pc, #68]	; (80069cc <_svfiprintf_r+0x1ec>)
 8006988:	a904      	add	r1, sp, #16
 800698a:	4640      	mov	r0, r8
 800698c:	f3af 8000 	nop.w
 8006990:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006994:	4681      	mov	r9, r0
 8006996:	d1d6      	bne.n	8006946 <_svfiprintf_r+0x166>
 8006998:	89a3      	ldrh	r3, [r4, #12]
 800699a:	065b      	lsls	r3, r3, #25
 800699c:	f53f af35 	bmi.w	800680a <_svfiprintf_r+0x2a>
 80069a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069a2:	b01d      	add	sp, #116	; 0x74
 80069a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a8:	ab03      	add	r3, sp, #12
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	4622      	mov	r2, r4
 80069ae:	4b07      	ldr	r3, [pc, #28]	; (80069cc <_svfiprintf_r+0x1ec>)
 80069b0:	a904      	add	r1, sp, #16
 80069b2:	4640      	mov	r0, r8
 80069b4:	f000 f882 	bl	8006abc <_printf_i>
 80069b8:	e7ea      	b.n	8006990 <_svfiprintf_r+0x1b0>
 80069ba:	bf00      	nop
 80069bc:	08006f50 	.word	0x08006f50
 80069c0:	08006f56 	.word	0x08006f56
 80069c4:	08006f5a 	.word	0x08006f5a
 80069c8:	00000000 	.word	0x00000000
 80069cc:	0800672d 	.word	0x0800672d

080069d0 <_printf_common>:
 80069d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069d4:	4691      	mov	r9, r2
 80069d6:	461f      	mov	r7, r3
 80069d8:	688a      	ldr	r2, [r1, #8]
 80069da:	690b      	ldr	r3, [r1, #16]
 80069dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069e0:	4293      	cmp	r3, r2
 80069e2:	bfb8      	it	lt
 80069e4:	4613      	movlt	r3, r2
 80069e6:	f8c9 3000 	str.w	r3, [r9]
 80069ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069ee:	4606      	mov	r6, r0
 80069f0:	460c      	mov	r4, r1
 80069f2:	b112      	cbz	r2, 80069fa <_printf_common+0x2a>
 80069f4:	3301      	adds	r3, #1
 80069f6:	f8c9 3000 	str.w	r3, [r9]
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	0699      	lsls	r1, r3, #26
 80069fe:	bf42      	ittt	mi
 8006a00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006a04:	3302      	addmi	r3, #2
 8006a06:	f8c9 3000 	strmi.w	r3, [r9]
 8006a0a:	6825      	ldr	r5, [r4, #0]
 8006a0c:	f015 0506 	ands.w	r5, r5, #6
 8006a10:	d107      	bne.n	8006a22 <_printf_common+0x52>
 8006a12:	f104 0a19 	add.w	sl, r4, #25
 8006a16:	68e3      	ldr	r3, [r4, #12]
 8006a18:	f8d9 2000 	ldr.w	r2, [r9]
 8006a1c:	1a9b      	subs	r3, r3, r2
 8006a1e:	42ab      	cmp	r3, r5
 8006a20:	dc28      	bgt.n	8006a74 <_printf_common+0xa4>
 8006a22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006a26:	6822      	ldr	r2, [r4, #0]
 8006a28:	3300      	adds	r3, #0
 8006a2a:	bf18      	it	ne
 8006a2c:	2301      	movne	r3, #1
 8006a2e:	0692      	lsls	r2, r2, #26
 8006a30:	d42d      	bmi.n	8006a8e <_printf_common+0xbe>
 8006a32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a36:	4639      	mov	r1, r7
 8006a38:	4630      	mov	r0, r6
 8006a3a:	47c0      	blx	r8
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	d020      	beq.n	8006a82 <_printf_common+0xb2>
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	68e5      	ldr	r5, [r4, #12]
 8006a44:	f8d9 2000 	ldr.w	r2, [r9]
 8006a48:	f003 0306 	and.w	r3, r3, #6
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	bf08      	it	eq
 8006a50:	1aad      	subeq	r5, r5, r2
 8006a52:	68a3      	ldr	r3, [r4, #8]
 8006a54:	6922      	ldr	r2, [r4, #16]
 8006a56:	bf0c      	ite	eq
 8006a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a5c:	2500      	movne	r5, #0
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	bfc4      	itt	gt
 8006a62:	1a9b      	subgt	r3, r3, r2
 8006a64:	18ed      	addgt	r5, r5, r3
 8006a66:	f04f 0900 	mov.w	r9, #0
 8006a6a:	341a      	adds	r4, #26
 8006a6c:	454d      	cmp	r5, r9
 8006a6e:	d11a      	bne.n	8006aa6 <_printf_common+0xd6>
 8006a70:	2000      	movs	r0, #0
 8006a72:	e008      	b.n	8006a86 <_printf_common+0xb6>
 8006a74:	2301      	movs	r3, #1
 8006a76:	4652      	mov	r2, sl
 8006a78:	4639      	mov	r1, r7
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	47c0      	blx	r8
 8006a7e:	3001      	adds	r0, #1
 8006a80:	d103      	bne.n	8006a8a <_printf_common+0xba>
 8006a82:	f04f 30ff 	mov.w	r0, #4294967295
 8006a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a8a:	3501      	adds	r5, #1
 8006a8c:	e7c3      	b.n	8006a16 <_printf_common+0x46>
 8006a8e:	18e1      	adds	r1, r4, r3
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	2030      	movs	r0, #48	; 0x30
 8006a94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a98:	4422      	add	r2, r4
 8006a9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006aa2:	3302      	adds	r3, #2
 8006aa4:	e7c5      	b.n	8006a32 <_printf_common+0x62>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	4622      	mov	r2, r4
 8006aaa:	4639      	mov	r1, r7
 8006aac:	4630      	mov	r0, r6
 8006aae:	47c0      	blx	r8
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d0e6      	beq.n	8006a82 <_printf_common+0xb2>
 8006ab4:	f109 0901 	add.w	r9, r9, #1
 8006ab8:	e7d8      	b.n	8006a6c <_printf_common+0x9c>
	...

08006abc <_printf_i>:
 8006abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ac0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006ac4:	460c      	mov	r4, r1
 8006ac6:	7e09      	ldrb	r1, [r1, #24]
 8006ac8:	b085      	sub	sp, #20
 8006aca:	296e      	cmp	r1, #110	; 0x6e
 8006acc:	4617      	mov	r7, r2
 8006ace:	4606      	mov	r6, r0
 8006ad0:	4698      	mov	r8, r3
 8006ad2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ad4:	f000 80b3 	beq.w	8006c3e <_printf_i+0x182>
 8006ad8:	d822      	bhi.n	8006b20 <_printf_i+0x64>
 8006ada:	2963      	cmp	r1, #99	; 0x63
 8006adc:	d036      	beq.n	8006b4c <_printf_i+0x90>
 8006ade:	d80a      	bhi.n	8006af6 <_printf_i+0x3a>
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	f000 80b9 	beq.w	8006c58 <_printf_i+0x19c>
 8006ae6:	2958      	cmp	r1, #88	; 0x58
 8006ae8:	f000 8083 	beq.w	8006bf2 <_printf_i+0x136>
 8006aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006af0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006af4:	e032      	b.n	8006b5c <_printf_i+0xa0>
 8006af6:	2964      	cmp	r1, #100	; 0x64
 8006af8:	d001      	beq.n	8006afe <_printf_i+0x42>
 8006afa:	2969      	cmp	r1, #105	; 0x69
 8006afc:	d1f6      	bne.n	8006aec <_printf_i+0x30>
 8006afe:	6820      	ldr	r0, [r4, #0]
 8006b00:	6813      	ldr	r3, [r2, #0]
 8006b02:	0605      	lsls	r5, r0, #24
 8006b04:	f103 0104 	add.w	r1, r3, #4
 8006b08:	d52a      	bpl.n	8006b60 <_printf_i+0xa4>
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6011      	str	r1, [r2, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	da03      	bge.n	8006b1a <_printf_i+0x5e>
 8006b12:	222d      	movs	r2, #45	; 0x2d
 8006b14:	425b      	negs	r3, r3
 8006b16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006b1a:	486f      	ldr	r0, [pc, #444]	; (8006cd8 <_printf_i+0x21c>)
 8006b1c:	220a      	movs	r2, #10
 8006b1e:	e039      	b.n	8006b94 <_printf_i+0xd8>
 8006b20:	2973      	cmp	r1, #115	; 0x73
 8006b22:	f000 809d 	beq.w	8006c60 <_printf_i+0x1a4>
 8006b26:	d808      	bhi.n	8006b3a <_printf_i+0x7e>
 8006b28:	296f      	cmp	r1, #111	; 0x6f
 8006b2a:	d020      	beq.n	8006b6e <_printf_i+0xb2>
 8006b2c:	2970      	cmp	r1, #112	; 0x70
 8006b2e:	d1dd      	bne.n	8006aec <_printf_i+0x30>
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	f043 0320 	orr.w	r3, r3, #32
 8006b36:	6023      	str	r3, [r4, #0]
 8006b38:	e003      	b.n	8006b42 <_printf_i+0x86>
 8006b3a:	2975      	cmp	r1, #117	; 0x75
 8006b3c:	d017      	beq.n	8006b6e <_printf_i+0xb2>
 8006b3e:	2978      	cmp	r1, #120	; 0x78
 8006b40:	d1d4      	bne.n	8006aec <_printf_i+0x30>
 8006b42:	2378      	movs	r3, #120	; 0x78
 8006b44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b48:	4864      	ldr	r0, [pc, #400]	; (8006cdc <_printf_i+0x220>)
 8006b4a:	e055      	b.n	8006bf8 <_printf_i+0x13c>
 8006b4c:	6813      	ldr	r3, [r2, #0]
 8006b4e:	1d19      	adds	r1, r3, #4
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6011      	str	r1, [r2, #0]
 8006b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e08c      	b.n	8006c7a <_printf_i+0x1be>
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6011      	str	r1, [r2, #0]
 8006b64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b68:	bf18      	it	ne
 8006b6a:	b21b      	sxthne	r3, r3
 8006b6c:	e7cf      	b.n	8006b0e <_printf_i+0x52>
 8006b6e:	6813      	ldr	r3, [r2, #0]
 8006b70:	6825      	ldr	r5, [r4, #0]
 8006b72:	1d18      	adds	r0, r3, #4
 8006b74:	6010      	str	r0, [r2, #0]
 8006b76:	0628      	lsls	r0, r5, #24
 8006b78:	d501      	bpl.n	8006b7e <_printf_i+0xc2>
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	e002      	b.n	8006b84 <_printf_i+0xc8>
 8006b7e:	0668      	lsls	r0, r5, #25
 8006b80:	d5fb      	bpl.n	8006b7a <_printf_i+0xbe>
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	4854      	ldr	r0, [pc, #336]	; (8006cd8 <_printf_i+0x21c>)
 8006b86:	296f      	cmp	r1, #111	; 0x6f
 8006b88:	bf14      	ite	ne
 8006b8a:	220a      	movne	r2, #10
 8006b8c:	2208      	moveq	r2, #8
 8006b8e:	2100      	movs	r1, #0
 8006b90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b94:	6865      	ldr	r5, [r4, #4]
 8006b96:	60a5      	str	r5, [r4, #8]
 8006b98:	2d00      	cmp	r5, #0
 8006b9a:	f2c0 8095 	blt.w	8006cc8 <_printf_i+0x20c>
 8006b9e:	6821      	ldr	r1, [r4, #0]
 8006ba0:	f021 0104 	bic.w	r1, r1, #4
 8006ba4:	6021      	str	r1, [r4, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d13d      	bne.n	8006c26 <_printf_i+0x16a>
 8006baa:	2d00      	cmp	r5, #0
 8006bac:	f040 808e 	bne.w	8006ccc <_printf_i+0x210>
 8006bb0:	4665      	mov	r5, ip
 8006bb2:	2a08      	cmp	r2, #8
 8006bb4:	d10b      	bne.n	8006bce <_printf_i+0x112>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	07db      	lsls	r3, r3, #31
 8006bba:	d508      	bpl.n	8006bce <_printf_i+0x112>
 8006bbc:	6923      	ldr	r3, [r4, #16]
 8006bbe:	6862      	ldr	r2, [r4, #4]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	bfde      	ittt	le
 8006bc4:	2330      	movle	r3, #48	; 0x30
 8006bc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bce:	ebac 0305 	sub.w	r3, ip, r5
 8006bd2:	6123      	str	r3, [r4, #16]
 8006bd4:	f8cd 8000 	str.w	r8, [sp]
 8006bd8:	463b      	mov	r3, r7
 8006bda:	aa03      	add	r2, sp, #12
 8006bdc:	4621      	mov	r1, r4
 8006bde:	4630      	mov	r0, r6
 8006be0:	f7ff fef6 	bl	80069d0 <_printf_common>
 8006be4:	3001      	adds	r0, #1
 8006be6:	d14d      	bne.n	8006c84 <_printf_i+0x1c8>
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bec:	b005      	add	sp, #20
 8006bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bf2:	4839      	ldr	r0, [pc, #228]	; (8006cd8 <_printf_i+0x21c>)
 8006bf4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006bf8:	6813      	ldr	r3, [r2, #0]
 8006bfa:	6821      	ldr	r1, [r4, #0]
 8006bfc:	1d1d      	adds	r5, r3, #4
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6015      	str	r5, [r2, #0]
 8006c02:	060a      	lsls	r2, r1, #24
 8006c04:	d50b      	bpl.n	8006c1e <_printf_i+0x162>
 8006c06:	07ca      	lsls	r2, r1, #31
 8006c08:	bf44      	itt	mi
 8006c0a:	f041 0120 	orrmi.w	r1, r1, #32
 8006c0e:	6021      	strmi	r1, [r4, #0]
 8006c10:	b91b      	cbnz	r3, 8006c1a <_printf_i+0x15e>
 8006c12:	6822      	ldr	r2, [r4, #0]
 8006c14:	f022 0220 	bic.w	r2, r2, #32
 8006c18:	6022      	str	r2, [r4, #0]
 8006c1a:	2210      	movs	r2, #16
 8006c1c:	e7b7      	b.n	8006b8e <_printf_i+0xd2>
 8006c1e:	064d      	lsls	r5, r1, #25
 8006c20:	bf48      	it	mi
 8006c22:	b29b      	uxthmi	r3, r3
 8006c24:	e7ef      	b.n	8006c06 <_printf_i+0x14a>
 8006c26:	4665      	mov	r5, ip
 8006c28:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c2c:	fb02 3311 	mls	r3, r2, r1, r3
 8006c30:	5cc3      	ldrb	r3, [r0, r3]
 8006c32:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006c36:	460b      	mov	r3, r1
 8006c38:	2900      	cmp	r1, #0
 8006c3a:	d1f5      	bne.n	8006c28 <_printf_i+0x16c>
 8006c3c:	e7b9      	b.n	8006bb2 <_printf_i+0xf6>
 8006c3e:	6813      	ldr	r3, [r2, #0]
 8006c40:	6825      	ldr	r5, [r4, #0]
 8006c42:	6961      	ldr	r1, [r4, #20]
 8006c44:	1d18      	adds	r0, r3, #4
 8006c46:	6010      	str	r0, [r2, #0]
 8006c48:	0628      	lsls	r0, r5, #24
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	d501      	bpl.n	8006c52 <_printf_i+0x196>
 8006c4e:	6019      	str	r1, [r3, #0]
 8006c50:	e002      	b.n	8006c58 <_printf_i+0x19c>
 8006c52:	066a      	lsls	r2, r5, #25
 8006c54:	d5fb      	bpl.n	8006c4e <_printf_i+0x192>
 8006c56:	8019      	strh	r1, [r3, #0]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	6123      	str	r3, [r4, #16]
 8006c5c:	4665      	mov	r5, ip
 8006c5e:	e7b9      	b.n	8006bd4 <_printf_i+0x118>
 8006c60:	6813      	ldr	r3, [r2, #0]
 8006c62:	1d19      	adds	r1, r3, #4
 8006c64:	6011      	str	r1, [r2, #0]
 8006c66:	681d      	ldr	r5, [r3, #0]
 8006c68:	6862      	ldr	r2, [r4, #4]
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f7f9 fb37 	bl	80002e0 <memchr>
 8006c72:	b108      	cbz	r0, 8006c78 <_printf_i+0x1bc>
 8006c74:	1b40      	subs	r0, r0, r5
 8006c76:	6060      	str	r0, [r4, #4]
 8006c78:	6863      	ldr	r3, [r4, #4]
 8006c7a:	6123      	str	r3, [r4, #16]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c82:	e7a7      	b.n	8006bd4 <_printf_i+0x118>
 8006c84:	6923      	ldr	r3, [r4, #16]
 8006c86:	462a      	mov	r2, r5
 8006c88:	4639      	mov	r1, r7
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	47c0      	blx	r8
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d0aa      	beq.n	8006be8 <_printf_i+0x12c>
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	079b      	lsls	r3, r3, #30
 8006c96:	d413      	bmi.n	8006cc0 <_printf_i+0x204>
 8006c98:	68e0      	ldr	r0, [r4, #12]
 8006c9a:	9b03      	ldr	r3, [sp, #12]
 8006c9c:	4298      	cmp	r0, r3
 8006c9e:	bfb8      	it	lt
 8006ca0:	4618      	movlt	r0, r3
 8006ca2:	e7a3      	b.n	8006bec <_printf_i+0x130>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	464a      	mov	r2, r9
 8006ca8:	4639      	mov	r1, r7
 8006caa:	4630      	mov	r0, r6
 8006cac:	47c0      	blx	r8
 8006cae:	3001      	adds	r0, #1
 8006cb0:	d09a      	beq.n	8006be8 <_printf_i+0x12c>
 8006cb2:	3501      	adds	r5, #1
 8006cb4:	68e3      	ldr	r3, [r4, #12]
 8006cb6:	9a03      	ldr	r2, [sp, #12]
 8006cb8:	1a9b      	subs	r3, r3, r2
 8006cba:	42ab      	cmp	r3, r5
 8006cbc:	dcf2      	bgt.n	8006ca4 <_printf_i+0x1e8>
 8006cbe:	e7eb      	b.n	8006c98 <_printf_i+0x1dc>
 8006cc0:	2500      	movs	r5, #0
 8006cc2:	f104 0919 	add.w	r9, r4, #25
 8006cc6:	e7f5      	b.n	8006cb4 <_printf_i+0x1f8>
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1ac      	bne.n	8006c26 <_printf_i+0x16a>
 8006ccc:	7803      	ldrb	r3, [r0, #0]
 8006cce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cd6:	e76c      	b.n	8006bb2 <_printf_i+0xf6>
 8006cd8:	08006f61 	.word	0x08006f61
 8006cdc:	08006f72 	.word	0x08006f72

08006ce0 <memmove>:
 8006ce0:	4288      	cmp	r0, r1
 8006ce2:	b510      	push	{r4, lr}
 8006ce4:	eb01 0302 	add.w	r3, r1, r2
 8006ce8:	d807      	bhi.n	8006cfa <memmove+0x1a>
 8006cea:	1e42      	subs	r2, r0, #1
 8006cec:	4299      	cmp	r1, r3
 8006cee:	d00a      	beq.n	8006d06 <memmove+0x26>
 8006cf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cf4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006cf8:	e7f8      	b.n	8006cec <memmove+0xc>
 8006cfa:	4283      	cmp	r3, r0
 8006cfc:	d9f5      	bls.n	8006cea <memmove+0xa>
 8006cfe:	1881      	adds	r1, r0, r2
 8006d00:	1ad2      	subs	r2, r2, r3
 8006d02:	42d3      	cmn	r3, r2
 8006d04:	d100      	bne.n	8006d08 <memmove+0x28>
 8006d06:	bd10      	pop	{r4, pc}
 8006d08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d0c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006d10:	e7f7      	b.n	8006d02 <memmove+0x22>
	...

08006d14 <_free_r>:
 8006d14:	b538      	push	{r3, r4, r5, lr}
 8006d16:	4605      	mov	r5, r0
 8006d18:	2900      	cmp	r1, #0
 8006d1a:	d045      	beq.n	8006da8 <_free_r+0x94>
 8006d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d20:	1f0c      	subs	r4, r1, #4
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	bfb8      	it	lt
 8006d26:	18e4      	addlt	r4, r4, r3
 8006d28:	f000 f8d2 	bl	8006ed0 <__malloc_lock>
 8006d2c:	4a1f      	ldr	r2, [pc, #124]	; (8006dac <_free_r+0x98>)
 8006d2e:	6813      	ldr	r3, [r2, #0]
 8006d30:	4610      	mov	r0, r2
 8006d32:	b933      	cbnz	r3, 8006d42 <_free_r+0x2e>
 8006d34:	6063      	str	r3, [r4, #4]
 8006d36:	6014      	str	r4, [r2, #0]
 8006d38:	4628      	mov	r0, r5
 8006d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d3e:	f000 b8c8 	b.w	8006ed2 <__malloc_unlock>
 8006d42:	42a3      	cmp	r3, r4
 8006d44:	d90c      	bls.n	8006d60 <_free_r+0x4c>
 8006d46:	6821      	ldr	r1, [r4, #0]
 8006d48:	1862      	adds	r2, r4, r1
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	bf04      	itt	eq
 8006d4e:	681a      	ldreq	r2, [r3, #0]
 8006d50:	685b      	ldreq	r3, [r3, #4]
 8006d52:	6063      	str	r3, [r4, #4]
 8006d54:	bf04      	itt	eq
 8006d56:	1852      	addeq	r2, r2, r1
 8006d58:	6022      	streq	r2, [r4, #0]
 8006d5a:	6004      	str	r4, [r0, #0]
 8006d5c:	e7ec      	b.n	8006d38 <_free_r+0x24>
 8006d5e:	4613      	mov	r3, r2
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	b10a      	cbz	r2, 8006d68 <_free_r+0x54>
 8006d64:	42a2      	cmp	r2, r4
 8006d66:	d9fa      	bls.n	8006d5e <_free_r+0x4a>
 8006d68:	6819      	ldr	r1, [r3, #0]
 8006d6a:	1858      	adds	r0, r3, r1
 8006d6c:	42a0      	cmp	r0, r4
 8006d6e:	d10b      	bne.n	8006d88 <_free_r+0x74>
 8006d70:	6820      	ldr	r0, [r4, #0]
 8006d72:	4401      	add	r1, r0
 8006d74:	1858      	adds	r0, r3, r1
 8006d76:	4282      	cmp	r2, r0
 8006d78:	6019      	str	r1, [r3, #0]
 8006d7a:	d1dd      	bne.n	8006d38 <_free_r+0x24>
 8006d7c:	6810      	ldr	r0, [r2, #0]
 8006d7e:	6852      	ldr	r2, [r2, #4]
 8006d80:	605a      	str	r2, [r3, #4]
 8006d82:	4401      	add	r1, r0
 8006d84:	6019      	str	r1, [r3, #0]
 8006d86:	e7d7      	b.n	8006d38 <_free_r+0x24>
 8006d88:	d902      	bls.n	8006d90 <_free_r+0x7c>
 8006d8a:	230c      	movs	r3, #12
 8006d8c:	602b      	str	r3, [r5, #0]
 8006d8e:	e7d3      	b.n	8006d38 <_free_r+0x24>
 8006d90:	6820      	ldr	r0, [r4, #0]
 8006d92:	1821      	adds	r1, r4, r0
 8006d94:	428a      	cmp	r2, r1
 8006d96:	bf04      	itt	eq
 8006d98:	6811      	ldreq	r1, [r2, #0]
 8006d9a:	6852      	ldreq	r2, [r2, #4]
 8006d9c:	6062      	str	r2, [r4, #4]
 8006d9e:	bf04      	itt	eq
 8006da0:	1809      	addeq	r1, r1, r0
 8006da2:	6021      	streq	r1, [r4, #0]
 8006da4:	605c      	str	r4, [r3, #4]
 8006da6:	e7c7      	b.n	8006d38 <_free_r+0x24>
 8006da8:	bd38      	pop	{r3, r4, r5, pc}
 8006daa:	bf00      	nop
 8006dac:	20000184 	.word	0x20000184

08006db0 <_malloc_r>:
 8006db0:	b570      	push	{r4, r5, r6, lr}
 8006db2:	1ccd      	adds	r5, r1, #3
 8006db4:	f025 0503 	bic.w	r5, r5, #3
 8006db8:	3508      	adds	r5, #8
 8006dba:	2d0c      	cmp	r5, #12
 8006dbc:	bf38      	it	cc
 8006dbe:	250c      	movcc	r5, #12
 8006dc0:	2d00      	cmp	r5, #0
 8006dc2:	4606      	mov	r6, r0
 8006dc4:	db01      	blt.n	8006dca <_malloc_r+0x1a>
 8006dc6:	42a9      	cmp	r1, r5
 8006dc8:	d903      	bls.n	8006dd2 <_malloc_r+0x22>
 8006dca:	230c      	movs	r3, #12
 8006dcc:	6033      	str	r3, [r6, #0]
 8006dce:	2000      	movs	r0, #0
 8006dd0:	bd70      	pop	{r4, r5, r6, pc}
 8006dd2:	f000 f87d 	bl	8006ed0 <__malloc_lock>
 8006dd6:	4a21      	ldr	r2, [pc, #132]	; (8006e5c <_malloc_r+0xac>)
 8006dd8:	6814      	ldr	r4, [r2, #0]
 8006dda:	4621      	mov	r1, r4
 8006ddc:	b991      	cbnz	r1, 8006e04 <_malloc_r+0x54>
 8006dde:	4c20      	ldr	r4, [pc, #128]	; (8006e60 <_malloc_r+0xb0>)
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	b91b      	cbnz	r3, 8006dec <_malloc_r+0x3c>
 8006de4:	4630      	mov	r0, r6
 8006de6:	f000 f863 	bl	8006eb0 <_sbrk_r>
 8006dea:	6020      	str	r0, [r4, #0]
 8006dec:	4629      	mov	r1, r5
 8006dee:	4630      	mov	r0, r6
 8006df0:	f000 f85e 	bl	8006eb0 <_sbrk_r>
 8006df4:	1c43      	adds	r3, r0, #1
 8006df6:	d124      	bne.n	8006e42 <_malloc_r+0x92>
 8006df8:	230c      	movs	r3, #12
 8006dfa:	6033      	str	r3, [r6, #0]
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	f000 f868 	bl	8006ed2 <__malloc_unlock>
 8006e02:	e7e4      	b.n	8006dce <_malloc_r+0x1e>
 8006e04:	680b      	ldr	r3, [r1, #0]
 8006e06:	1b5b      	subs	r3, r3, r5
 8006e08:	d418      	bmi.n	8006e3c <_malloc_r+0x8c>
 8006e0a:	2b0b      	cmp	r3, #11
 8006e0c:	d90f      	bls.n	8006e2e <_malloc_r+0x7e>
 8006e0e:	600b      	str	r3, [r1, #0]
 8006e10:	50cd      	str	r5, [r1, r3]
 8006e12:	18cc      	adds	r4, r1, r3
 8006e14:	4630      	mov	r0, r6
 8006e16:	f000 f85c 	bl	8006ed2 <__malloc_unlock>
 8006e1a:	f104 000b 	add.w	r0, r4, #11
 8006e1e:	1d23      	adds	r3, r4, #4
 8006e20:	f020 0007 	bic.w	r0, r0, #7
 8006e24:	1ac3      	subs	r3, r0, r3
 8006e26:	d0d3      	beq.n	8006dd0 <_malloc_r+0x20>
 8006e28:	425a      	negs	r2, r3
 8006e2a:	50e2      	str	r2, [r4, r3]
 8006e2c:	e7d0      	b.n	8006dd0 <_malloc_r+0x20>
 8006e2e:	428c      	cmp	r4, r1
 8006e30:	684b      	ldr	r3, [r1, #4]
 8006e32:	bf16      	itet	ne
 8006e34:	6063      	strne	r3, [r4, #4]
 8006e36:	6013      	streq	r3, [r2, #0]
 8006e38:	460c      	movne	r4, r1
 8006e3a:	e7eb      	b.n	8006e14 <_malloc_r+0x64>
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	6849      	ldr	r1, [r1, #4]
 8006e40:	e7cc      	b.n	8006ddc <_malloc_r+0x2c>
 8006e42:	1cc4      	adds	r4, r0, #3
 8006e44:	f024 0403 	bic.w	r4, r4, #3
 8006e48:	42a0      	cmp	r0, r4
 8006e4a:	d005      	beq.n	8006e58 <_malloc_r+0xa8>
 8006e4c:	1a21      	subs	r1, r4, r0
 8006e4e:	4630      	mov	r0, r6
 8006e50:	f000 f82e 	bl	8006eb0 <_sbrk_r>
 8006e54:	3001      	adds	r0, #1
 8006e56:	d0cf      	beq.n	8006df8 <_malloc_r+0x48>
 8006e58:	6025      	str	r5, [r4, #0]
 8006e5a:	e7db      	b.n	8006e14 <_malloc_r+0x64>
 8006e5c:	20000184 	.word	0x20000184
 8006e60:	20000188 	.word	0x20000188

08006e64 <_realloc_r>:
 8006e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e66:	4607      	mov	r7, r0
 8006e68:	4614      	mov	r4, r2
 8006e6a:	460e      	mov	r6, r1
 8006e6c:	b921      	cbnz	r1, 8006e78 <_realloc_r+0x14>
 8006e6e:	4611      	mov	r1, r2
 8006e70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006e74:	f7ff bf9c 	b.w	8006db0 <_malloc_r>
 8006e78:	b922      	cbnz	r2, 8006e84 <_realloc_r+0x20>
 8006e7a:	f7ff ff4b 	bl	8006d14 <_free_r>
 8006e7e:	4625      	mov	r5, r4
 8006e80:	4628      	mov	r0, r5
 8006e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e84:	f000 f826 	bl	8006ed4 <_malloc_usable_size_r>
 8006e88:	42a0      	cmp	r0, r4
 8006e8a:	d20f      	bcs.n	8006eac <_realloc_r+0x48>
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	4638      	mov	r0, r7
 8006e90:	f7ff ff8e 	bl	8006db0 <_malloc_r>
 8006e94:	4605      	mov	r5, r0
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d0f2      	beq.n	8006e80 <_realloc_r+0x1c>
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	4622      	mov	r2, r4
 8006e9e:	f7ff fc11 	bl	80066c4 <memcpy>
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4638      	mov	r0, r7
 8006ea6:	f7ff ff35 	bl	8006d14 <_free_r>
 8006eaa:	e7e9      	b.n	8006e80 <_realloc_r+0x1c>
 8006eac:	4635      	mov	r5, r6
 8006eae:	e7e7      	b.n	8006e80 <_realloc_r+0x1c>

08006eb0 <_sbrk_r>:
 8006eb0:	b538      	push	{r3, r4, r5, lr}
 8006eb2:	4c06      	ldr	r4, [pc, #24]	; (8006ecc <_sbrk_r+0x1c>)
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	4608      	mov	r0, r1
 8006eba:	6023      	str	r3, [r4, #0]
 8006ebc:	f7fa f896 	bl	8000fec <_sbrk>
 8006ec0:	1c43      	adds	r3, r0, #1
 8006ec2:	d102      	bne.n	8006eca <_sbrk_r+0x1a>
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	b103      	cbz	r3, 8006eca <_sbrk_r+0x1a>
 8006ec8:	602b      	str	r3, [r5, #0]
 8006eca:	bd38      	pop	{r3, r4, r5, pc}
 8006ecc:	200002ec 	.word	0x200002ec

08006ed0 <__malloc_lock>:
 8006ed0:	4770      	bx	lr

08006ed2 <__malloc_unlock>:
 8006ed2:	4770      	bx	lr

08006ed4 <_malloc_usable_size_r>:
 8006ed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ed8:	1f18      	subs	r0, r3, #4
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	bfbc      	itt	lt
 8006ede:	580b      	ldrlt	r3, [r1, r0]
 8006ee0:	18c0      	addlt	r0, r0, r3
 8006ee2:	4770      	bx	lr

08006ee4 <_init>:
 8006ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee6:	bf00      	nop
 8006ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eea:	bc08      	pop	{r3}
 8006eec:	469e      	mov	lr, r3
 8006eee:	4770      	bx	lr

08006ef0 <_fini>:
 8006ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef2:	bf00      	nop
 8006ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef6:	bc08      	pop	{r3}
 8006ef8:	469e      	mov	lr, r3
 8006efa:	4770      	bx	lr
