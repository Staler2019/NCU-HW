
uart_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003668  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003908  08003908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080039c0  080039c0  000139c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080039c8  080039c8  000139c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080039cc  080039cc  000139cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  080039d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000013c  20000074  08003a44  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001b0  08003a44  000201b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012644  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002109  00000000  00000000  000326e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000980  00000000  00000000  000347f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008a8  00000000  00000000  00035170  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000382e9  00000000  00000000  00035a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a0c0  00000000  00000000  0006dd01  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001757a7  00000000  00000000  00077dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  001ed568  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000294c  00000000  00000000  001ed5e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080038f0 	.word	0x080038f0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	080038f0 	.word	0x080038f0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <SystemInit+0x104>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a3e      	ldr	r2, [pc, #248]	; (8000784 <SystemInit+0x104>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <SystemInit+0x104>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <SystemInit+0x104>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <SystemInit+0x108>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <SystemInit+0x108>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <SystemInit+0x10c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x10c>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <SystemInit+0x10c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <SystemInit+0x10c>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492e      	ldr	r1, [pc, #184]	; (800078c <SystemInit+0x10c>)
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x110>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemInit+0x108>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	d907      	bls.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemInit+0x108>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <SystemInit+0x108>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemInit+0x10c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemInit+0x10c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemInit+0x10c>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemInit+0x10c>)
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <SystemInit+0x114>)
 800070c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemInit+0x10c>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemInit+0x118>)
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <SystemInit+0x10c>)
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemInit+0x11c>)
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <SystemInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <SystemInit+0x10c>)
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <SystemInit+0x11c>)
 8000724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <SystemInit+0x10c>)
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <SystemInit+0x11c>)
 8000730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <SystemInit+0x10c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <SystemInit+0x10c>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <SystemInit+0x10c>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <SystemInit+0x120>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <SystemInit+0x120>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x124>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <SystemInit+0x128>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x12c>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x130>)
 800076c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000770:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x104>)
 8000774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000778:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	52002000 	.word	0x52002000
 800078c:	58024400 	.word	0x58024400
 8000790:	eaf6ed7f 	.word	0xeaf6ed7f
 8000794:	02020200 	.word	0x02020200
 8000798:	01ff0000 	.word	0x01ff0000
 800079c:	01010280 	.word	0x01010280
 80007a0:	580000c0 	.word	0x580000c0
 80007a4:	5c001000 	.word	0x5c001000
 80007a8:	ffff0000 	.word	0xffff0000
 80007ac:	51008108 	.word	0x51008108
 80007b0:	52004000 	.word	0x52004000

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
    int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /* Wait until CPU2 boots and enters in stop mode or timeout*/
    timeout = 0xFFFF;
 80007ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007be:	617b      	str	r3, [r7, #20]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 80007c0:	bf00      	nop
 80007c2:	4b42      	ldr	r3, [pc, #264]	; (80008cc <main+0x118>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d004      	beq.n	80007d8 <main+0x24>
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	1e5a      	subs	r2, r3, #1
 80007d2:	617a      	str	r2, [r7, #20]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	dcf4      	bgt.n	80007c2 <main+0xe>
        ;
    if (timeout < 0) {
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	da01      	bge.n	80007e2 <main+0x2e>
        Error_Handler();
 80007de:	f000 f993 	bl	8000b08 <Error_Handler>
    }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e2:	f000 fa83 	bl	8000cec <HAL_Init>

/* USER CODE BEGIN Boot_Mode_Sequence_2 */
    /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
    HSEM notification */
    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 80007e6:	4b39      	ldr	r3, [pc, #228]	; (80008cc <main+0x118>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	4a37      	ldr	r2, [pc, #220]	; (80008cc <main+0x118>)
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f6:	4b35      	ldr	r3, [pc, #212]	; (80008cc <main+0x118>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]
    /*Take HSEM */
    HAL_HSEM_FastTake(HSEM_ID_0);
 8000804:	2000      	movs	r0, #0
 8000806:	f000 fd97 	bl	8001338 <HAL_HSEM_FastTake>
    /*Release HSEM in order to notify the CPU2(CM4)*/
    HAL_HSEM_Release(HSEM_ID_0, 0);
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f000 fdad 	bl	800136c <HAL_HSEM_Release>
    /* wait until CPU2 wakes up from stop mode */
    timeout = 0xFFFF;
 8000812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000816:	617b      	str	r3, [r7, #20]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000818:	bf00      	nop
 800081a:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <main+0x118>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d104      	bne.n	8000830 <main+0x7c>
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	617a      	str	r2, [r7, #20]
 800082c:	2b00      	cmp	r3, #0
 800082e:	dcf4      	bgt.n	800081a <main+0x66>
        ;
    if (timeout < 0) {
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	2b00      	cmp	r3, #0
 8000834:	da01      	bge.n	800083a <main+0x86>
        Error_Handler();
 8000836:	f000 f967 	bl	8000b08 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 f89f 	bl	800097c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083e:	f000 f851 	bl	80008e4 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      HAL_UART_Transmit(&huart3, (uint8_t*)"Hello World !\r\n", sizeof("Hello World !\r\n") - 1, HAL_MAX_DELAY);
 8000842:	f04f 33ff 	mov.w	r3, #4294967295
 8000846:	220f      	movs	r2, #15
 8000848:	4921      	ldr	r1, [pc, #132]	; (80008d0 <main+0x11c>)
 800084a:	4822      	ldr	r0, [pc, #136]	; (80008d4 <main+0x120>)
 800084c:	f001 fa6e 	bl	8001d2c <HAL_UART_Transmit>
      uint32_t expected_tick = HAL_GetTick() + 1000;
 8000850:	f000 fad2 	bl	8000df8 <HAL_GetTick>
 8000854:	4603      	mov	r3, r0
 8000856:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800085a:	613b      	str	r3, [r7, #16]
      uint32_t sec = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
      uint32_t nbytes;
    while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if ( HAL_OK == HAL_UART_Receive( &huart3 , &rb , 1, 100) ) {
 8000860:	1df9      	adds	r1, r7, #7
 8000862:	2364      	movs	r3, #100	; 0x64
 8000864:	2201      	movs	r2, #1
 8000866:	481b      	ldr	r0, [pc, #108]	; (80008d4 <main+0x120>)
 8000868:	f001 faf6 	bl	8001e58 <HAL_UART_Receive>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d10e      	bne.n	8000890 <main+0xdc>
            expected_tick = HAL_GetTick() + 1000;
 8000872:	f000 fac1 	bl	8000df8 <HAL_GetTick>
 8000876:	4603      	mov	r3, r0
 8000878:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800087c:	613b      	str	r3, [r7, #16]
            sec = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
            /*nbytes = snprintf(snprintf_buf, sizeof(snprintf_buf), "TIME RESET %c !\r\n", rb);
             HAL_UART_Transmit(&huart3, (uint8_t*)snprintf_buf, nbytes, HAL_MAX_DELAY);*/
            HAL_UART_Transmit(&huart3, (uint8_t *)"TIME RESET\r\n", sizeof("TIME RESET\r\n") - 1,
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	220c      	movs	r2, #12
 8000888:	4913      	ldr	r1, [pc, #76]	; (80008d8 <main+0x124>)
 800088a:	4812      	ldr	r0, [pc, #72]	; (80008d4 <main+0x120>)
 800088c:	f001 fa4e 	bl	8001d2c <HAL_UART_Transmit>
                              HAL_MAX_DELAY);
  }
  if ( HAL_GetTick() > expected_tick ) {
 8000890:	f000 fab2 	bl	8000df8 <HAL_GetTick>
 8000894:	4602      	mov	r2, r0
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	4293      	cmp	r3, r2
 800089a:	d2e1      	bcs.n	8000860 <main+0xac>
            sec++;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	3301      	adds	r3, #1
 80008a0:	60fb      	str	r3, [r7, #12]
            nbytes = snprintf(snprintf_buf, sizeof(snprintf_buf),
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <main+0x128>)
 80008a6:	2180      	movs	r1, #128	; 0x80
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <main+0x12c>)
 80008aa:	f002 fc07 	bl	80030bc <sniprintf>
 80008ae:	4603      	mov	r3, r0
 80008b0:	60bb      	str	r3, [r7, #8]
                              "This program runs since %lu seconds ago\r\n", sec);
            HAL_UART_Transmit(&huart3, (uint8_t *)snprintf_buf, nbytes, HAL_MAX_DELAY);
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	4909      	ldr	r1, [pc, #36]	; (80008e0 <main+0x12c>)
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <main+0x120>)
 80008be:	f001 fa35 	bl	8001d2c <HAL_UART_Transmit>
            expected_tick += 1000;
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80008c8:	613b      	str	r3, [r7, #16]
      if ( HAL_OK == HAL_UART_Receive( &huart3 , &rb , 1, 100) ) {
 80008ca:	e7c9      	b.n	8000860 <main+0xac>
 80008cc:	58024400 	.word	0x58024400
 80008d0:	08003908 	.word	0x08003908
 80008d4:	2000009c 	.word	0x2000009c
 80008d8:	08003918 	.word	0x08003918
 80008dc:	08003928 	.word	0x08003928
 80008e0:	20000128 	.word	0x20000128

080008e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_USART3_UART_Init+0x90>)
 80008ea:	4a23      	ldr	r2, [pc, #140]	; (8000978 <MX_USART3_UART_Init+0x94>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_USART3_UART_Init+0x90>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_USART3_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_USART3_UART_Init+0x90>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_USART3_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800092c:	4811      	ldr	r0, [pc, #68]	; (8000974 <MX_USART3_UART_Init+0x90>)
 800092e:	f001 f9ad 	bl	8001c8c <HAL_UART_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000938:	f000 f8e6 	bl	8000b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093c:	2100      	movs	r1, #0
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000940:	f002 faad 	bl	8002e9e <HAL_UARTEx_SetTxFifoThreshold>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800094a:	f000 f8dd 	bl	8000b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000952:	f002 fae2 	bl	8002f1a <HAL_UARTEx_SetRxFifoThreshold>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800095c:	f000 f8d4 	bl	8000b08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000962:	f002 fa63 	bl	8002e2c <HAL_UARTEx_DisableFifoMode>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800096c:	f000 f8cc 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000009c 	.word	0x2000009c
 8000978:	40004800 	.word	0x40004800

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08c      	sub	sp, #48	; 0x30
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	4b58      	ldr	r3, [pc, #352]	; (8000af4 <MX_GPIO_Init+0x178>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	4a56      	ldr	r2, [pc, #344]	; (8000af4 <MX_GPIO_Init+0x178>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a2:	4b54      	ldr	r3, [pc, #336]	; (8000af4 <MX_GPIO_Init+0x178>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	61bb      	str	r3, [r7, #24]
 80009ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b0:	4b50      	ldr	r3, [pc, #320]	; (8000af4 <MX_GPIO_Init+0x178>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	4a4f      	ldr	r2, [pc, #316]	; (8000af4 <MX_GPIO_Init+0x178>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c0:	4b4c      	ldr	r3, [pc, #304]	; (8000af4 <MX_GPIO_Init+0x178>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b49      	ldr	r3, [pc, #292]	; (8000af4 <MX_GPIO_Init+0x178>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	4a47      	ldr	r2, [pc, #284]	; (8000af4 <MX_GPIO_Init+0x178>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009de:	4b45      	ldr	r3, [pc, #276]	; (8000af4 <MX_GPIO_Init+0x178>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ec:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <MX_GPIO_Init+0x178>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	4a40      	ldr	r2, [pc, #256]	; (8000af4 <MX_GPIO_Init+0x178>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fc:	4b3d      	ldr	r3, [pc, #244]	; (8000af4 <MX_GPIO_Init+0x178>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0a:	4b3a      	ldr	r3, [pc, #232]	; (8000af4 <MX_GPIO_Init+0x178>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	4a38      	ldr	r2, [pc, #224]	; (8000af4 <MX_GPIO_Init+0x178>)
 8000a12:	f043 0308 	orr.w	r3, r3, #8
 8000a16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1a:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <MX_GPIO_Init+0x178>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a20:	f003 0308 	and.w	r3, r3, #8
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a28:	4b32      	ldr	r3, [pc, #200]	; (8000af4 <MX_GPIO_Init+0x178>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2e:	4a31      	ldr	r2, [pc, #196]	; (8000af4 <MX_GPIO_Init+0x178>)
 8000a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a38:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <MX_GPIO_Init+0x178>)
 8000a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a46:	2332      	movs	r3, #50	; 0x32
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a56:	230b      	movs	r3, #11
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4825      	ldr	r0, [pc, #148]	; (8000af8 <MX_GPIO_Init+0x17c>)
 8000a62:	f000 fab9 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a66:	2386      	movs	r3, #134	; 0x86
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a76:	230b      	movs	r3, #11
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	481e      	ldr	r0, [pc, #120]	; (8000afc <MX_GPIO_Init+0x180>)
 8000a82:	f000 faa9 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a98:	230b      	movs	r3, #11
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4817      	ldr	r0, [pc, #92]	; (8000b00 <MX_GPIO_Init+0x184>)
 8000aa4:	f000 fa98 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000aa8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000aba:	230a      	movs	r3, #10
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480d      	ldr	r0, [pc, #52]	; (8000afc <MX_GPIO_Init+0x180>)
 8000ac6:	f000 fa87 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000aca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000adc:	230b      	movs	r3, #11
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4807      	ldr	r0, [pc, #28]	; (8000b04 <MX_GPIO_Init+0x188>)
 8000ae8:	f000 fa76 	bl	8000fd8 <HAL_GPIO_Init>

}
 8000aec:	bf00      	nop
 8000aee:	3730      	adds	r7, #48	; 0x30
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	58024400 	.word	0x58024400
 8000af8:	58020800 	.word	0x58020800
 8000afc:	58020000 	.word	0x58020000
 8000b00:	58020400 	.word	0x58020400
 8000b04:	58021800 	.word	0x58021800

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000b0e:	e7fe      	b.n	8000b0e <Error_Handler+0x6>

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <HAL_MspInit+0x30>)
 8000b18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b1c:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_MspInit+0x30>)
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_MspInit+0x30>)
 8000b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	58024400 	.word	0x58024400

08000b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a1a      	ldr	r2, [pc, #104]	; (8000bcc <HAL_UART_MspInit+0x88>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d12e      	bne.n	8000bc4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b66:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b6c:	4a18      	ldr	r2, [pc, #96]	; (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000b6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8a:	4a11      	ldr	r2, [pc, #68]	; (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000b8c:	f043 0308 	orr.w	r3, r3, #8
 8000b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ba2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <HAL_UART_MspInit+0x90>)
 8000bc0:	f000 fa0a 	bl	8000fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bc4:	bf00      	nop
 8000bc6:	3728      	adds	r7, #40	; 0x28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40004800 	.word	0x40004800
 8000bd0:	58024400 	.word	0x58024400
 8000bd4:	58020c00 	.word	0x58020c00

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler+0x4>

08000bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c24:	f000 f8d4 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f002 fa04 	bl	8003068 <__errno>
 8000c60:	4602      	mov	r2, r0
 8000c62:	230c      	movs	r3, #12
 8000c64:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20020000 	.word	0x20020000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	20000090 	.word	0x20000090
 8000c94:	200001b0 	.word	0x200001b0

08000c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c9c:	f7ff fcf0 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ca0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ca2:	e003      	b.n	8000cac <LoopCopyDataInit>

08000ca4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000ca6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ca8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000caa:	3104      	adds	r1, #4

08000cac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cac:	480a      	ldr	r0, [pc, #40]	; (8000cd8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000cb0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cb2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cb4:	d3f6      	bcc.n	8000ca4 <CopyDataInit>
  ldr  r2, =_sbss
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000cb8:	e002      	b.n	8000cc0 <LoopFillZerobss>

08000cba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cbc:	f842 3b04 	str.w	r3, [r2], #4

08000cc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000cc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cc4:	d3f9      	bcc.n	8000cba <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f002 f9d5 	bl	8003074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cca:	f7ff fd73 	bl	80007b4 <main>
  bx  lr    
 8000cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cd4:	080039d0 	.word	0x080039d0
  ldr  r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cdc:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000ce0:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000ce4:	200001b0 	.word	0x200001b0

08000ce8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC3_IRQHandler>
	...

08000cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	f000 f93e 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cf8:	f000 fb4c 	bl	8001394 <HAL_RCC_GetSysClockFreq>
 8000cfc:	4601      	mov	r1, r0
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_Init+0x68>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	0a1b      	lsrs	r3, r3, #8
 8000d04:	f003 030f 	and.w	r3, r3, #15
 8000d08:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <HAL_Init+0x6c>)
 8000d0a:	5cd3      	ldrb	r3, [r2, r3]
 8000d0c:	f003 031f 	and.w	r3, r3, #31
 8000d10:	fa21 f303 	lsr.w	r3, r1, r3
 8000d14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_Init+0x68>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_Init+0x6c>)
 8000d20:	5cd3      	ldrb	r3, [r2, r3]
 8000d22:	f003 031f 	and.w	r3, r3, #31
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	fa22 f303 	lsr.w	r3, r2, r3
 8000d2c:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <HAL_Init+0x70>)
 8000d2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d30:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <HAL_Init+0x74>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d36:	2000      	movs	r0, #0
 8000d38:	f000 f814 	bl	8000d64 <HAL_InitTick>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e002      	b.n	8000d4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d46:	f7ff fee3 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400
 8000d58:	08003964 	.word	0x08003964
 8000d5c:	20000004 	.word	0x20000004
 8000d60:	20000000 	.word	0x20000000

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_InitTick+0x60>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e021      	b.n	8000dbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <HAL_InitTick+0x64>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_InitTick+0x60>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f915 	bl	8000fbe <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f8ed 	bl	8000f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <HAL_InitTick+0x68>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2000000c 	.word	0x2000000c
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	20000008 	.word	0x20000008

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	2000000c 	.word	0x2000000c
 8000df4:	200001a8 	.word	0x200001a8

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200001a8 	.word	0x200001a8

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <__NVIC_SetPriorityGrouping+0x40>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <__NVIC_SetPriorityGrouping+0x40>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00
 8000e54:	05fa0000 	.word	0x05fa0000

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f40:	d301      	bcc.n	8000f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00f      	b.n	8000f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <SysTick_Config+0x40>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4e:	210f      	movs	r1, #15
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f7ff ff8e 	bl	8000e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <SysTick_Config+0x40>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <SysTick_Config+0x40>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff47 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f98:	f7ff ff5e 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000f9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff ff90 	bl	8000ec8 <NVIC_EncodePriority>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff5f 	bl	8000e74 <__NVIC_SetPriority>
}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ffb2 	bl	8000f30 <SysTick_Config>
 8000fcc:	4603      	mov	r3, r0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000fe6:	4b89      	ldr	r3, [pc, #548]	; (800120c <HAL_GPIO_Init+0x234>)
 8000fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fea:	e194      	b.n	8001316 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 8186 	beq.w	8001310 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d00b      	beq.n	8001024 <HAL_GPIO_Init+0x4c>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b02      	cmp	r3, #2
 8001012:	d007      	beq.n	8001024 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001018:	2b11      	cmp	r3, #17
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b12      	cmp	r3, #18
 8001022:	d130      	bne.n	8001086 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800105a:	2201      	movs	r2, #1
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	091b      	lsrs	r3, r3, #4
 8001070:	f003 0201 	and.w	r2, r3, #1
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0xee>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b12      	cmp	r3, #18
 80010c4:	d123      	bne.n	800110e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	220f      	movs	r2, #15
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	691a      	ldr	r2, [r3, #16]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	69b9      	ldr	r1, [r7, #24]
 800110a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0203 	and.w	r2, r3, #3
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 80e0 	beq.w	8001310 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001150:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <HAL_GPIO_Init+0x238>)
 8001152:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001156:	4a2e      	ldr	r2, [pc, #184]	; (8001210 <HAL_GPIO_Init+0x238>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001160:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <HAL_GPIO_Init+0x238>)
 8001162:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800116e:	4a29      	ldr	r2, [pc, #164]	; (8001214 <HAL_GPIO_Init+0x23c>)
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a20      	ldr	r2, [pc, #128]	; (8001218 <HAL_GPIO_Init+0x240>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d052      	beq.n	8001240 <HAL_GPIO_Init+0x268>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a1f      	ldr	r2, [pc, #124]	; (800121c <HAL_GPIO_Init+0x244>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d031      	beq.n	8001206 <HAL_GPIO_Init+0x22e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a1e      	ldr	r2, [pc, #120]	; (8001220 <HAL_GPIO_Init+0x248>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d02b      	beq.n	8001202 <HAL_GPIO_Init+0x22a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <HAL_GPIO_Init+0x24c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d025      	beq.n	80011fe <HAL_GPIO_Init+0x226>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a1c      	ldr	r2, [pc, #112]	; (8001228 <HAL_GPIO_Init+0x250>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d01f      	beq.n	80011fa <HAL_GPIO_Init+0x222>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <HAL_GPIO_Init+0x254>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d019      	beq.n	80011f6 <HAL_GPIO_Init+0x21e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a1a      	ldr	r2, [pc, #104]	; (8001230 <HAL_GPIO_Init+0x258>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0x21a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a19      	ldr	r2, [pc, #100]	; (8001234 <HAL_GPIO_Init+0x25c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00d      	beq.n	80011ee <HAL_GPIO_Init+0x216>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a18      	ldr	r2, [pc, #96]	; (8001238 <HAL_GPIO_Init+0x260>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d007      	beq.n	80011ea <HAL_GPIO_Init+0x212>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a17      	ldr	r2, [pc, #92]	; (800123c <HAL_GPIO_Init+0x264>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <HAL_GPIO_Init+0x20e>
 80011e2:	2309      	movs	r3, #9
 80011e4:	e02d      	b.n	8001242 <HAL_GPIO_Init+0x26a>
 80011e6:	230a      	movs	r3, #10
 80011e8:	e02b      	b.n	8001242 <HAL_GPIO_Init+0x26a>
 80011ea:	2308      	movs	r3, #8
 80011ec:	e029      	b.n	8001242 <HAL_GPIO_Init+0x26a>
 80011ee:	2307      	movs	r3, #7
 80011f0:	e027      	b.n	8001242 <HAL_GPIO_Init+0x26a>
 80011f2:	2306      	movs	r3, #6
 80011f4:	e025      	b.n	8001242 <HAL_GPIO_Init+0x26a>
 80011f6:	2305      	movs	r3, #5
 80011f8:	e023      	b.n	8001242 <HAL_GPIO_Init+0x26a>
 80011fa:	2304      	movs	r3, #4
 80011fc:	e021      	b.n	8001242 <HAL_GPIO_Init+0x26a>
 80011fe:	2303      	movs	r3, #3
 8001200:	e01f      	b.n	8001242 <HAL_GPIO_Init+0x26a>
 8001202:	2302      	movs	r3, #2
 8001204:	e01d      	b.n	8001242 <HAL_GPIO_Init+0x26a>
 8001206:	2301      	movs	r3, #1
 8001208:	e01b      	b.n	8001242 <HAL_GPIO_Init+0x26a>
 800120a:	bf00      	nop
 800120c:	58000080 	.word	0x58000080
 8001210:	58024400 	.word	0x58024400
 8001214:	58000400 	.word	0x58000400
 8001218:	58020000 	.word	0x58020000
 800121c:	58020400 	.word	0x58020400
 8001220:	58020800 	.word	0x58020800
 8001224:	58020c00 	.word	0x58020c00
 8001228:	58021000 	.word	0x58021000
 800122c:	58021400 	.word	0x58021400
 8001230:	58021800 	.word	0x58021800
 8001234:	58021c00 	.word	0x58021c00
 8001238:	58022000 	.word	0x58022000
 800123c:	58022400 	.word	0x58022400
 8001240:	2300      	movs	r3, #0
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	f002 0203 	and.w	r2, r2, #3
 8001248:	0092      	lsls	r2, r2, #2
 800124a:	4093      	lsls	r3, r2
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001252:	4938      	ldr	r1, [pc, #224]	; (8001334 <HAL_GPIO_Init+0x35c>)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3302      	adds	r3, #2
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80012da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	3301      	adds	r3, #1
 8001314:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa22 f303 	lsr.w	r3, r2, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	f47f ae63 	bne.w	8000fec <HAL_GPIO_Init+0x14>
  }
}
 8001326:	bf00      	nop
 8001328:	3724      	adds	r7, #36	; 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	58000400 	.word	0x58000400

08001338 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001340:	4a08      	ldr	r2, [pc, #32]	; (8001364 <HAL_HSEM_FastTake+0x2c>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3320      	adds	r3, #32
 8001346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134a:	4a07      	ldr	r2, [pc, #28]	; (8001368 <HAL_HSEM_FastTake+0x30>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d101      	bne.n	8001354 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	e000      	b.n	8001356 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	58026400 	.word	0x58026400
 8001368:	80000300 	.word	0x80000300

0800136c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001376:	4906      	ldr	r1, [pc, #24]	; (8001390 <HAL_HSEM_Release+0x24>)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	58026400 	.word	0x58026400

08001394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800139a:	4baf      	ldr	r3, [pc, #700]	; (8001658 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013a2:	2b18      	cmp	r3, #24
 80013a4:	f200 814e 	bhi.w	8001644 <HAL_RCC_GetSysClockFreq+0x2b0>
 80013a8:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80013aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ae:	bf00      	nop
 80013b0:	08001415 	.word	0x08001415
 80013b4:	08001645 	.word	0x08001645
 80013b8:	08001645 	.word	0x08001645
 80013bc:	08001645 	.word	0x08001645
 80013c0:	08001645 	.word	0x08001645
 80013c4:	08001645 	.word	0x08001645
 80013c8:	08001645 	.word	0x08001645
 80013cc:	08001645 	.word	0x08001645
 80013d0:	0800143b 	.word	0x0800143b
 80013d4:	08001645 	.word	0x08001645
 80013d8:	08001645 	.word	0x08001645
 80013dc:	08001645 	.word	0x08001645
 80013e0:	08001645 	.word	0x08001645
 80013e4:	08001645 	.word	0x08001645
 80013e8:	08001645 	.word	0x08001645
 80013ec:	08001645 	.word	0x08001645
 80013f0:	08001441 	.word	0x08001441
 80013f4:	08001645 	.word	0x08001645
 80013f8:	08001645 	.word	0x08001645
 80013fc:	08001645 	.word	0x08001645
 8001400:	08001645 	.word	0x08001645
 8001404:	08001645 	.word	0x08001645
 8001408:	08001645 	.word	0x08001645
 800140c:	08001645 	.word	0x08001645
 8001410:	08001447 	.word	0x08001447
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001414:	4b90      	ldr	r3, [pc, #576]	; (8001658 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0320 	and.w	r3, r3, #32
 800141c:	2b00      	cmp	r3, #0
 800141e:	d009      	beq.n	8001434 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001420:	4b8d      	ldr	r3, [pc, #564]	; (8001658 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	08db      	lsrs	r3, r3, #3
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	4a8c      	ldr	r2, [pc, #560]	; (800165c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800142c:	fa22 f303 	lsr.w	r3, r2, r3
 8001430:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001432:	e10a      	b.n	800164a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001434:	4b89      	ldr	r3, [pc, #548]	; (800165c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001436:	61bb      	str	r3, [r7, #24]
    break;
 8001438:	e107      	b.n	800164a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800143a:	4b89      	ldr	r3, [pc, #548]	; (8001660 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800143c:	61bb      	str	r3, [r7, #24]
    break;
 800143e:	e104      	b.n	800164a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001440:	4b88      	ldr	r3, [pc, #544]	; (8001664 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8001442:	61bb      	str	r3, [r7, #24]
    break;
 8001444:	e101      	b.n	800164a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001446:	4b84      	ldr	r3, [pc, #528]	; (8001658 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001450:	4b81      	ldr	r3, [pc, #516]	; (8001658 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800145a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800145c:	4b7e      	ldr	r3, [pc, #504]	; (8001658 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001466:	4b7c      	ldr	r3, [pc, #496]	; (8001658 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146a:	08db      	lsrs	r3, r3, #3
 800146c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	ee07 3a90 	vmov	s15, r3
 800147a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80da 	beq.w	800163e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d05a      	beq.n	8001546 <HAL_RCC_GetSysClockFreq+0x1b2>
 8001490:	2b01      	cmp	r3, #1
 8001492:	d302      	bcc.n	800149a <HAL_RCC_GetSysClockFreq+0x106>
 8001494:	2b02      	cmp	r3, #2
 8001496:	d078      	beq.n	800158a <HAL_RCC_GetSysClockFreq+0x1f6>
 8001498:	e099      	b.n	80015ce <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800149a:	4b6f      	ldr	r3, [pc, #444]	; (8001658 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0320 	and.w	r3, r3, #32
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d02d      	beq.n	8001502 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80014a6:	4b6c      	ldr	r3, [pc, #432]	; (8001658 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	08db      	lsrs	r3, r3, #3
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	4a6a      	ldr	r2, [pc, #424]	; (800165c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80014b2:	fa22 f303 	lsr.w	r3, r2, r3
 80014b6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	ee07 3a90 	vmov	s15, r3
 80014c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014d0:	4b61      	ldr	r3, [pc, #388]	; (8001658 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014d8:	ee07 3a90 	vmov	s15, r3
 80014dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80014e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80014e4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8001668 <HAL_RCC_GetSysClockFreq+0x2d4>
 80014e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80014ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80014f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80014f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014fc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001500:	e087      	b.n	8001612 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	ee07 3a90 	vmov	s15, r3
 8001508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800150c:	eddf 6a57 	vldr	s13, [pc, #348]	; 800166c <HAL_RCC_GetSysClockFreq+0x2d8>
 8001510:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001514:	4b50      	ldr	r3, [pc, #320]	; (8001658 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001524:	ed97 6a02 	vldr	s12, [r7, #8]
 8001528:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001668 <HAL_RCC_GetSysClockFreq+0x2d4>
 800152c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001530:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001534:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001538:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800153c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001540:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001544:	e065      	b.n	8001612 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	ee07 3a90 	vmov	s15, r3
 800154c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001550:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001670 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001554:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001558:	4b3f      	ldr	r3, [pc, #252]	; (8001658 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001560:	ee07 3a90 	vmov	s15, r3
 8001564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001568:	ed97 6a02 	vldr	s12, [r7, #8]
 800156c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001668 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001570:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001574:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001578:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800157c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001584:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001588:	e043      	b.n	8001612 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	ee07 3a90 	vmov	s15, r3
 8001590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001594:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001674 <HAL_RCC_GetSysClockFreq+0x2e0>
 8001598:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800159c:	4b2e      	ldr	r3, [pc, #184]	; (8001658 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80015ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80015b0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001668 <HAL_RCC_GetSysClockFreq+0x2d4>
 80015b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80015b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80015bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80015c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80015cc:	e021      	b.n	8001612 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001670 <HAL_RCC_GetSysClockFreq+0x2dc>
 80015dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015e8:	ee07 3a90 	vmov	s15, r3
 80015ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80015f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80015f4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001668 <HAL_RCC_GetSysClockFreq+0x2d4>
 80015f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80015fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001604:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001610:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	0a5b      	lsrs	r3, r3, #9
 8001618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800161c:	3301      	adds	r3, #1
 800161e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800162a:	edd7 6a07 	vldr	s13, [r7, #28]
 800162e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001636:	ee17 3a90 	vmov	r3, s15
 800163a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800163c:	e005      	b.n	800164a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
    break;
 8001642:	e002      	b.n	800164a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001646:	61bb      	str	r3, [r7, #24]
    break;
 8001648:	bf00      	nop
  }

  return sysclockfreq;
 800164a:	69bb      	ldr	r3, [r7, #24]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3724      	adds	r7, #36	; 0x24
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	58024400 	.word	0x58024400
 800165c:	03d09000 	.word	0x03d09000
 8001660:	003d0900 	.word	0x003d0900
 8001664:	017d7840 	.word	0x017d7840
 8001668:	46000000 	.word	0x46000000
 800166c:	4c742400 	.word	0x4c742400
 8001670:	4a742400 	.word	0x4a742400
 8001674:	4bbebc20 	.word	0x4bbebc20

08001678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800167e:	f7ff fe89 	bl	8001394 <HAL_RCC_GetSysClockFreq>
 8001682:	4601      	mov	r1, r0
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	4a0f      	ldr	r2, [pc, #60]	; (80016cc <HAL_RCC_GetHCLKFreq+0x54>)
 8001690:	5cd3      	ldrb	r3, [r2, r3]
 8001692:	f003 031f 	and.w	r3, r3, #31
 8001696:	fa21 f303 	lsr.w	r3, r1, r3
 800169a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 030f 	and.w	r3, r3, #15
 80016a4:	4a09      	ldr	r2, [pc, #36]	; (80016cc <HAL_RCC_GetHCLKFreq+0x54>)
 80016a6:	5cd3      	ldrb	r3, [r2, r3]
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	fa22 f303 	lsr.w	r3, r2, r3
 80016b2:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80016b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016b6:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	58024400 	.word	0x58024400
 80016cc:	08003964 	.word	0x08003964
 80016d0:	20000004 	.word	0x20000004
 80016d4:	20000000 	.word	0x20000000

080016d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80016dc:	f7ff ffcc 	bl	8001678 <HAL_RCC_GetHCLKFreq>
 80016e0:	4601      	mov	r1, r0
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	091b      	lsrs	r3, r3, #4
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_RCC_GetPCLK1Freq+0x28>)
 80016ee:	5cd3      	ldrb	r3, [r2, r3]
 80016f0:	f003 031f 	and.w	r3, r3, #31
 80016f4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	58024400 	.word	0x58024400
 8001700:	08003964 	.word	0x08003964

08001704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8001708:	f7ff ffb6 	bl	8001678 <HAL_RCC_GetHCLKFreq>
 800170c:	4601      	mov	r1, r0
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	0a1b      	lsrs	r3, r3, #8
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_RCC_GetPCLK2Freq+0x28>)
 800171a:	5cd3      	ldrb	r3, [r2, r3]
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8001724:	4618      	mov	r0, r3
 8001726:	bd80      	pop	{r7, pc}
 8001728:	58024400 	.word	0x58024400
 800172c:	08003964 	.word	0x08003964

08001730 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8001734:	f7ff ffa0 	bl	8001678 <HAL_RCC_GetHCLKFreq>
 8001738:	4601      	mov	r1, r0
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	091b      	lsrs	r3, r3, #4
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8001746:	5cd3      	ldrb	r3, [r2, r3]
 8001748:	f003 031f 	and.w	r3, r3, #31
 800174c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8001750:	4618      	mov	r0, r3
 8001752:	bd80      	pop	{r7, pc}
 8001754:	58024400 	.word	0x58024400
 8001758:	08003964 	.word	0x08003964

0800175c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001764:	4b9d      	ldr	r3, [pc, #628]	; (80019dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8001766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800176e:	4b9b      	ldr	r3, [pc, #620]	; (80019dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	0b1b      	lsrs	r3, r3, #12
 8001774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001778:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800177a:	4b98      	ldr	r3, [pc, #608]	; (80019dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	091b      	lsrs	r3, r3, #4
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001786:	4b95      	ldr	r3, [pc, #596]	; (80019dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8001788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178a:	08db      	lsrs	r3, r3, #3
 800178c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	fb02 f303 	mul.w	r3, r2, r3
 8001796:	ee07 3a90 	vmov	s15, r3
 800179a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800179e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 810a 	beq.w	80019be <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d05a      	beq.n	8001866 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d302      	bcc.n	80017ba <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d078      	beq.n	80018aa <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80017b8:	e099      	b.n	80018ee <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80017ba:	4b88      	ldr	r3, [pc, #544]	; (80019dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0320 	and.w	r3, r3, #32
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d02d      	beq.n	8001822 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80017c6:	4b85      	ldr	r3, [pc, #532]	; (80019dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	08db      	lsrs	r3, r3, #3
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	4a83      	ldr	r2, [pc, #524]	; (80019e0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80017d2:	fa22 f303 	lsr.w	r3, r2, r3
 80017d6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	ee07 3a90 	vmov	s15, r3
 80017e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017f0:	4b7a      	ldr	r3, [pc, #488]	; (80019dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80017f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001800:	ed97 6a03 	vldr	s12, [r7, #12]
 8001804:	eddf 5a77 	vldr	s11, [pc, #476]	; 80019e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8001808:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800180c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001810:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001814:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8001820:	e087      	b.n	8001932 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800182c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80019e8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8001830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001834:	4b69      	ldr	r3, [pc, #420]	; (80019dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8001836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800183c:	ee07 3a90 	vmov	s15, r3
 8001840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001844:	ed97 6a03 	vldr	s12, [r7, #12]
 8001848:	eddf 5a66 	vldr	s11, [pc, #408]	; 80019e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800184c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001850:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001854:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800185c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001860:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8001864:	e065      	b.n	8001932 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	ee07 3a90 	vmov	s15, r3
 800186c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001870:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80019ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8001874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001878:	4b58      	ldr	r3, [pc, #352]	; (80019dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800187a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001888:	ed97 6a03 	vldr	s12, [r7, #12]
 800188c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80019e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8001890:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001898:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800189c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80018a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80018a8:	e043      	b.n	8001932 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	ee07 3a90 	vmov	s15, r3
 80018b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80019f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80018b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018bc:	4b47      	ldr	r3, [pc, #284]	; (80019dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80018be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80018d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80019e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80018d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80018d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80018e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80018ec:	e021      	b.n	8001932 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018f8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80019ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80018fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001900:	4b36      	ldr	r3, [pc, #216]	; (80019dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8001902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001908:	ee07 3a90 	vmov	s15, r3
 800190c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001910:	ed97 6a03 	vldr	s12, [r7, #12]
 8001914:	eddf 5a33 	vldr	s11, [pc, #204]	; 80019e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8001918:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800191c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001920:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800192c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8001930:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8001932:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8001934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001936:	0a5b      	lsrs	r3, r3, #9
 8001938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800193c:	ee07 3a90 	vmov	s15, r3
 8001940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001944:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001948:	ee37 7a87 	vadd.f32	s14, s15, s14
 800194c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001958:	ee17 2a90 	vmov	r2, s15
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8001962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001964:	0c1b      	lsrs	r3, r3, #16
 8001966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800197a:	edd7 6a07 	vldr	s13, [r7, #28]
 800197e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001986:	ee17 2a90 	vmov	r2, s15
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8001990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001992:	0e1b      	lsrs	r3, r3, #24
 8001994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80019a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80019ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019b4:	ee17 2a90 	vmov	r2, s15
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80019bc:	e008      	b.n	80019d0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
}
 80019d0:	bf00      	nop
 80019d2:	3724      	adds	r7, #36	; 0x24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	58024400 	.word	0x58024400
 80019e0:	03d09000 	.word	0x03d09000
 80019e4:	46000000 	.word	0x46000000
 80019e8:	4c742400 	.word	0x4c742400
 80019ec:	4a742400 	.word	0x4a742400
 80019f0:	4bbebc20 	.word	0x4bbebc20

080019f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80019fc:	4b9d      	ldr	r3, [pc, #628]	; (8001c74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80019fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8001a06:	4b9b      	ldr	r3, [pc, #620]	; (8001c74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	0d1b      	lsrs	r3, r3, #20
 8001a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8001a12:	4b98      	ldr	r3, [pc, #608]	; (8001c74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	0a1b      	lsrs	r3, r3, #8
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8001a1e:	4b95      	ldr	r3, [pc, #596]	; (8001c74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	08db      	lsrs	r3, r3, #3
 8001a24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	fb02 f303 	mul.w	r3, r2, r3
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 810a 	beq.w	8001c56 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d05a      	beq.n	8001afe <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d302      	bcc.n	8001a52 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d078      	beq.n	8001b42 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8001a50:	e099      	b.n	8001b86 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a52:	4b88      	ldr	r3, [pc, #544]	; (8001c74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0320 	and.w	r3, r3, #32
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d02d      	beq.n	8001aba <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a5e:	4b85      	ldr	r3, [pc, #532]	; (8001c74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	08db      	lsrs	r3, r3, #3
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	4a83      	ldr	r2, [pc, #524]	; (8001c78 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8001a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	ee07 3a90 	vmov	s15, r3
 8001a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a88:	4b7a      	ldr	r3, [pc, #488]	; (8001c74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a98:	ed97 6a03 	vldr	s12, [r7, #12]
 8001a9c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8001c7c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8001aa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001aa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001aa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001aac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8001ab8:	e087      	b.n	8001bca <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	ee07 3a90 	vmov	s15, r3
 8001ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ac4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8001c80 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8001ac8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001acc:	4b69      	ldr	r3, [pc, #420]	; (8001c74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad4:	ee07 3a90 	vmov	s15, r3
 8001ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001adc:	ed97 6a03 	vldr	s12, [r7, #12]
 8001ae0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8001c7c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8001ae4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ae8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001aec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001af0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8001afc:	e065      	b.n	8001bca <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b08:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8001c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8001b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b10:	4b58      	ldr	r3, [pc, #352]	; (8001c74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b18:	ee07 3a90 	vmov	s15, r3
 8001b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b20:	ed97 6a03 	vldr	s12, [r7, #12]
 8001b24:	eddf 5a55 	vldr	s11, [pc, #340]	; 8001c7c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8001b28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8001b40:	e043      	b.n	8001bca <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	ee07 3a90 	vmov	s15, r3
 8001b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b4c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001c88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8001b50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b54:	4b47      	ldr	r3, [pc, #284]	; (8001c74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b5c:	ee07 3a90 	vmov	s15, r3
 8001b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b64:	ed97 6a03 	vldr	s12, [r7, #12]
 8001b68:	eddf 5a44 	vldr	s11, [pc, #272]	; 8001c7c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8001b6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8001b84:	e021      	b.n	8001bca <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	ee07 3a90 	vmov	s15, r3
 8001b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b90:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8001b94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b98:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ba8:	ed97 6a03 	vldr	s12, [r7, #12]
 8001bac:	eddf 5a33 	vldr	s11, [pc, #204]	; 8001c7c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8001bb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001bb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001bb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8001bc8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8001bca:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	0a5b      	lsrs	r3, r3, #9
 8001bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bd4:	ee07 3a90 	vmov	s15, r3
 8001bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001be0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001be4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bf0:	ee17 2a90 	vmov	r2, s15
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	0c1b      	lsrs	r3, r3, #16
 8001bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c02:	ee07 3a90 	vmov	s15, r3
 8001c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c12:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c1e:	ee17 2a90 	vmov	r2, s15
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	0e1b      	lsrs	r3, r3, #24
 8001c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c40:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c4c:	ee17 2a90 	vmov	r2, s15
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8001c54:	e008      	b.n	8001c68 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
}
 8001c68:	bf00      	nop
 8001c6a:	3724      	adds	r7, #36	; 0x24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	58024400 	.word	0x58024400
 8001c78:	03d09000 	.word	0x03d09000
 8001c7c:	46000000 	.word	0x46000000
 8001c80:	4c742400 	.word	0x4c742400
 8001c84:	4a742400 	.word	0x4a742400
 8001c88:	4bbebc20 	.word	0x4bbebc20

08001c8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e042      	b.n	8001d24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d106      	bne.n	8001cb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7fe ff47 	bl	8000b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2224      	movs	r2, #36	; 0x24
 8001cba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0201 	bic.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f992 	bl	8001ff8 <UART_SetConfig>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e022      	b.n	8001d24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 ff36 	bl	8002b58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 ffbd 	bl	8002c9c <UART_CheckIdleState>
 8001d22:	4603      	mov	r3, r0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	; 0x28
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d42:	2b20      	cmp	r3, #32
 8001d44:	f040 8083 	bne.w	8001e4e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <HAL_UART_Transmit+0x28>
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e07b      	b.n	8001e50 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_UART_Transmit+0x3a>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e074      	b.n	8001e50 <HAL_UART_Transmit+0x124>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2221      	movs	r2, #33	; 0x21
 8001d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001d7e:	f7ff f83b 	bl	8000df8 <HAL_GetTick>
 8001d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	88fa      	ldrh	r2, [r7, #6]
 8001d88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	88fa      	ldrh	r2, [r7, #6]
 8001d90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d9c:	d108      	bne.n	8001db0 <HAL_UART_Transmit+0x84>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d104      	bne.n	8001db0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	e003      	b.n	8001db8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8001dc0:	e02c      	b.n	8001e1c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2180      	movs	r1, #128	; 0x80
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 ffad 	bl	8002d2c <UART_WaitOnFlagUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e039      	b.n	8001e50 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10b      	bne.n	8001dfa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001df0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	3302      	adds	r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	e007      	b.n	8001e0a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	781a      	ldrb	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	3301      	adds	r3, #1
 8001e08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	3b01      	subs	r3, #1
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1cc      	bne.n	8001dc2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2140      	movs	r1, #64	; 0x40
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 ff7a 	bl	8002d2c <UART_WaitOnFlagUntilTimeout>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e006      	b.n	8001e50 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2220      	movs	r2, #32
 8001e46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8001e4e:	2302      	movs	r3, #2
  }
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	4613      	mov	r3, r2
 8001e66:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	f040 80bd 	bne.w	8001fee <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <HAL_UART_Receive+0x28>
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0b5      	b.n	8001ff0 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_UART_Receive+0x3a>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e0ae      	b.n	8001ff0 <HAL_UART_Receive+0x198>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2222      	movs	r2, #34	; 0x22
 8001ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001eaa:	f7fe ffa5 	bl	8000df8 <HAL_GetTick>
 8001eae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	88fa      	ldrh	r2, [r7, #6]
 8001eb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	88fa      	ldrh	r2, [r7, #6]
 8001ebc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_UART_Receive+0x90>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d105      	bne.n	8001ede <HAL_UART_Receive+0x86>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001ed8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8001edc:	e02d      	b.n	8001f3a <HAL_UART_Receive+0xe2>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	22ff      	movs	r2, #255	; 0xff
 8001ee2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8001ee6:	e028      	b.n	8001f3a <HAL_UART_Receive+0xe2>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10d      	bne.n	8001f0c <HAL_UART_Receive+0xb4>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d104      	bne.n	8001f02 <HAL_UART_Receive+0xaa>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	22ff      	movs	r2, #255	; 0xff
 8001efc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8001f00:	e01b      	b.n	8001f3a <HAL_UART_Receive+0xe2>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	227f      	movs	r2, #127	; 0x7f
 8001f06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8001f0a:	e016      	b.n	8001f3a <HAL_UART_Receive+0xe2>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f14:	d10d      	bne.n	8001f32 <HAL_UART_Receive+0xda>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d104      	bne.n	8001f28 <HAL_UART_Receive+0xd0>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	227f      	movs	r2, #127	; 0x7f
 8001f22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8001f26:	e008      	b.n	8001f3a <HAL_UART_Receive+0xe2>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	223f      	movs	r2, #63	; 0x3f
 8001f2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8001f30:	e003      	b.n	8001f3a <HAL_UART_Receive+0xe2>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001f40:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f4a:	d108      	bne.n	8001f5e <HAL_UART_Receive+0x106>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d104      	bne.n	8001f5e <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	e003      	b.n	8001f66 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8001f6e:	e032      	b.n	8001fd6 <HAL_UART_Receive+0x17e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2200      	movs	r2, #0
 8001f78:	2120      	movs	r1, #32
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 fed6 	bl	8002d2c <UART_WaitOnFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e032      	b.n	8001ff0 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10c      	bne.n	8001faa <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	8a7b      	ldrh	r3, [r7, #18]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	e00c      	b.n	8001fc4 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	8a7b      	ldrh	r3, [r7, #18]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1c6      	bne.n	8001f70 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e000      	b.n	8001ff0 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8001fee:	2302      	movs	r3, #2
  }
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3720      	adds	r7, #32
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ff8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001ffc:	b08e      	sub	sp, #56	; 0x38
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	4313      	orrs	r3, r2
 800201e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002024:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002026:	4313      	orrs	r3, r2
 8002028:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4bc1      	ldr	r3, [pc, #772]	; (8002338 <UART_SetConfig+0x340>)
 8002032:	4013      	ands	r3, r2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800203a:	430b      	orrs	r3, r1
 800203c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4ab7      	ldr	r2, [pc, #732]	; (800233c <UART_SetConfig+0x344>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d004      	beq.n	800206e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800206a:	4313      	orrs	r3, r2
 800206c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	4bb2      	ldr	r3, [pc, #712]	; (8002340 <UART_SetConfig+0x348>)
 8002076:	4013      	ands	r3, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800207e:	430b      	orrs	r3, r1
 8002080:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	f023 010f 	bic.w	r1, r3, #15
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4aa9      	ldr	r2, [pc, #676]	; (8002344 <UART_SetConfig+0x34c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d177      	bne.n	8002192 <UART_SetConfig+0x19a>
 80020a2:	4ba9      	ldr	r3, [pc, #676]	; (8002348 <UART_SetConfig+0x350>)
 80020a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020aa:	2b28      	cmp	r3, #40	; 0x28
 80020ac:	d86c      	bhi.n	8002188 <UART_SetConfig+0x190>
 80020ae:	a201      	add	r2, pc, #4	; (adr r2, 80020b4 <UART_SetConfig+0xbc>)
 80020b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b4:	08002159 	.word	0x08002159
 80020b8:	08002189 	.word	0x08002189
 80020bc:	08002189 	.word	0x08002189
 80020c0:	08002189 	.word	0x08002189
 80020c4:	08002189 	.word	0x08002189
 80020c8:	08002189 	.word	0x08002189
 80020cc:	08002189 	.word	0x08002189
 80020d0:	08002189 	.word	0x08002189
 80020d4:	08002161 	.word	0x08002161
 80020d8:	08002189 	.word	0x08002189
 80020dc:	08002189 	.word	0x08002189
 80020e0:	08002189 	.word	0x08002189
 80020e4:	08002189 	.word	0x08002189
 80020e8:	08002189 	.word	0x08002189
 80020ec:	08002189 	.word	0x08002189
 80020f0:	08002189 	.word	0x08002189
 80020f4:	08002169 	.word	0x08002169
 80020f8:	08002189 	.word	0x08002189
 80020fc:	08002189 	.word	0x08002189
 8002100:	08002189 	.word	0x08002189
 8002104:	08002189 	.word	0x08002189
 8002108:	08002189 	.word	0x08002189
 800210c:	08002189 	.word	0x08002189
 8002110:	08002189 	.word	0x08002189
 8002114:	08002171 	.word	0x08002171
 8002118:	08002189 	.word	0x08002189
 800211c:	08002189 	.word	0x08002189
 8002120:	08002189 	.word	0x08002189
 8002124:	08002189 	.word	0x08002189
 8002128:	08002189 	.word	0x08002189
 800212c:	08002189 	.word	0x08002189
 8002130:	08002189 	.word	0x08002189
 8002134:	08002179 	.word	0x08002179
 8002138:	08002189 	.word	0x08002189
 800213c:	08002189 	.word	0x08002189
 8002140:	08002189 	.word	0x08002189
 8002144:	08002189 	.word	0x08002189
 8002148:	08002189 	.word	0x08002189
 800214c:	08002189 	.word	0x08002189
 8002150:	08002189 	.word	0x08002189
 8002154:	08002181 	.word	0x08002181
 8002158:	2301      	movs	r3, #1
 800215a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800215e:	e233      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002160:	2304      	movs	r3, #4
 8002162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002166:	e22f      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002168:	2308      	movs	r3, #8
 800216a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800216e:	e22b      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002170:	2310      	movs	r3, #16
 8002172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002176:	e227      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002178:	2320      	movs	r3, #32
 800217a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800217e:	e223      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002180:	2340      	movs	r3, #64	; 0x40
 8002182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002186:	e21f      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800218e:	bf00      	nop
 8002190:	e21a      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a6d      	ldr	r2, [pc, #436]	; (800234c <UART_SetConfig+0x354>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d132      	bne.n	8002202 <UART_SetConfig+0x20a>
 800219c:	4b6a      	ldr	r3, [pc, #424]	; (8002348 <UART_SetConfig+0x350>)
 800219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	2b05      	cmp	r3, #5
 80021a6:	d827      	bhi.n	80021f8 <UART_SetConfig+0x200>
 80021a8:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <UART_SetConfig+0x1b8>)
 80021aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ae:	bf00      	nop
 80021b0:	080021c9 	.word	0x080021c9
 80021b4:	080021d1 	.word	0x080021d1
 80021b8:	080021d9 	.word	0x080021d9
 80021bc:	080021e1 	.word	0x080021e1
 80021c0:	080021e9 	.word	0x080021e9
 80021c4:	080021f1 	.word	0x080021f1
 80021c8:	2300      	movs	r3, #0
 80021ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80021ce:	e1fb      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80021d0:	2304      	movs	r3, #4
 80021d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80021d6:	e1f7      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80021d8:	2308      	movs	r3, #8
 80021da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80021de:	e1f3      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80021e0:	2310      	movs	r3, #16
 80021e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80021e6:	e1ef      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80021e8:	2320      	movs	r3, #32
 80021ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80021ee:	e1eb      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80021f0:	2340      	movs	r3, #64	; 0x40
 80021f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80021f6:	e1e7      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80021fe:	bf00      	nop
 8002200:	e1e2      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a52      	ldr	r2, [pc, #328]	; (8002350 <UART_SetConfig+0x358>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d132      	bne.n	8002272 <UART_SetConfig+0x27a>
 800220c:	4b4e      	ldr	r3, [pc, #312]	; (8002348 <UART_SetConfig+0x350>)
 800220e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	2b05      	cmp	r3, #5
 8002216:	d827      	bhi.n	8002268 <UART_SetConfig+0x270>
 8002218:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <UART_SetConfig+0x228>)
 800221a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221e:	bf00      	nop
 8002220:	08002239 	.word	0x08002239
 8002224:	08002241 	.word	0x08002241
 8002228:	08002249 	.word	0x08002249
 800222c:	08002251 	.word	0x08002251
 8002230:	08002259 	.word	0x08002259
 8002234:	08002261 	.word	0x08002261
 8002238:	2300      	movs	r3, #0
 800223a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800223e:	e1c3      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002240:	2304      	movs	r3, #4
 8002242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002246:	e1bf      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002248:	2308      	movs	r3, #8
 800224a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800224e:	e1bb      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002250:	2310      	movs	r3, #16
 8002252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002256:	e1b7      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002258:	2320      	movs	r3, #32
 800225a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800225e:	e1b3      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002260:	2340      	movs	r3, #64	; 0x40
 8002262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002266:	e1af      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800226e:	bf00      	nop
 8002270:	e1aa      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a37      	ldr	r2, [pc, #220]	; (8002354 <UART_SetConfig+0x35c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d132      	bne.n	80022e2 <UART_SetConfig+0x2ea>
 800227c:	4b32      	ldr	r3, [pc, #200]	; (8002348 <UART_SetConfig+0x350>)
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	2b05      	cmp	r3, #5
 8002286:	d827      	bhi.n	80022d8 <UART_SetConfig+0x2e0>
 8002288:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <UART_SetConfig+0x298>)
 800228a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228e:	bf00      	nop
 8002290:	080022a9 	.word	0x080022a9
 8002294:	080022b1 	.word	0x080022b1
 8002298:	080022b9 	.word	0x080022b9
 800229c:	080022c1 	.word	0x080022c1
 80022a0:	080022c9 	.word	0x080022c9
 80022a4:	080022d1 	.word	0x080022d1
 80022a8:	2300      	movs	r3, #0
 80022aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80022ae:	e18b      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80022b0:	2304      	movs	r3, #4
 80022b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80022b6:	e187      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80022b8:	2308      	movs	r3, #8
 80022ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80022be:	e183      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80022c0:	2310      	movs	r3, #16
 80022c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80022c6:	e17f      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80022c8:	2320      	movs	r3, #32
 80022ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80022ce:	e17b      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80022d0:	2340      	movs	r3, #64	; 0x40
 80022d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80022d6:	e177      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80022de:	bf00      	nop
 80022e0:	e172      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a1c      	ldr	r2, [pc, #112]	; (8002358 <UART_SetConfig+0x360>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d144      	bne.n	8002376 <UART_SetConfig+0x37e>
 80022ec:	4b16      	ldr	r3, [pc, #88]	; (8002348 <UART_SetConfig+0x350>)
 80022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d839      	bhi.n	800236c <UART_SetConfig+0x374>
 80022f8:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <UART_SetConfig+0x308>)
 80022fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fe:	bf00      	nop
 8002300:	08002319 	.word	0x08002319
 8002304:	08002321 	.word	0x08002321
 8002308:	08002329 	.word	0x08002329
 800230c:	08002331 	.word	0x08002331
 8002310:	0800235d 	.word	0x0800235d
 8002314:	08002365 	.word	0x08002365
 8002318:	2300      	movs	r3, #0
 800231a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800231e:	e153      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002320:	2304      	movs	r3, #4
 8002322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002326:	e14f      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002328:	2308      	movs	r3, #8
 800232a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800232e:	e14b      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002330:	2310      	movs	r3, #16
 8002332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002336:	e147      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002338:	cfff69f3 	.word	0xcfff69f3
 800233c:	58000c00 	.word	0x58000c00
 8002340:	11fff4ff 	.word	0x11fff4ff
 8002344:	40011000 	.word	0x40011000
 8002348:	58024400 	.word	0x58024400
 800234c:	40004400 	.word	0x40004400
 8002350:	40004800 	.word	0x40004800
 8002354:	40004c00 	.word	0x40004c00
 8002358:	40005000 	.word	0x40005000
 800235c:	2320      	movs	r3, #32
 800235e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002362:	e131      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002364:	2340      	movs	r3, #64	; 0x40
 8002366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800236a:	e12d      	b.n	80025c8 <UART_SetConfig+0x5d0>
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002372:	bf00      	nop
 8002374:	e128      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4ab6      	ldr	r2, [pc, #728]	; (8002654 <UART_SetConfig+0x65c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d178      	bne.n	8002472 <UART_SetConfig+0x47a>
 8002380:	4bb5      	ldr	r3, [pc, #724]	; (8002658 <UART_SetConfig+0x660>)
 8002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002384:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002388:	2b28      	cmp	r3, #40	; 0x28
 800238a:	d86d      	bhi.n	8002468 <UART_SetConfig+0x470>
 800238c:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <UART_SetConfig+0x39c>)
 800238e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002392:	bf00      	nop
 8002394:	08002439 	.word	0x08002439
 8002398:	08002469 	.word	0x08002469
 800239c:	08002469 	.word	0x08002469
 80023a0:	08002469 	.word	0x08002469
 80023a4:	08002469 	.word	0x08002469
 80023a8:	08002469 	.word	0x08002469
 80023ac:	08002469 	.word	0x08002469
 80023b0:	08002469 	.word	0x08002469
 80023b4:	08002441 	.word	0x08002441
 80023b8:	08002469 	.word	0x08002469
 80023bc:	08002469 	.word	0x08002469
 80023c0:	08002469 	.word	0x08002469
 80023c4:	08002469 	.word	0x08002469
 80023c8:	08002469 	.word	0x08002469
 80023cc:	08002469 	.word	0x08002469
 80023d0:	08002469 	.word	0x08002469
 80023d4:	08002449 	.word	0x08002449
 80023d8:	08002469 	.word	0x08002469
 80023dc:	08002469 	.word	0x08002469
 80023e0:	08002469 	.word	0x08002469
 80023e4:	08002469 	.word	0x08002469
 80023e8:	08002469 	.word	0x08002469
 80023ec:	08002469 	.word	0x08002469
 80023f0:	08002469 	.word	0x08002469
 80023f4:	08002451 	.word	0x08002451
 80023f8:	08002469 	.word	0x08002469
 80023fc:	08002469 	.word	0x08002469
 8002400:	08002469 	.word	0x08002469
 8002404:	08002469 	.word	0x08002469
 8002408:	08002469 	.word	0x08002469
 800240c:	08002469 	.word	0x08002469
 8002410:	08002469 	.word	0x08002469
 8002414:	08002459 	.word	0x08002459
 8002418:	08002469 	.word	0x08002469
 800241c:	08002469 	.word	0x08002469
 8002420:	08002469 	.word	0x08002469
 8002424:	08002469 	.word	0x08002469
 8002428:	08002469 	.word	0x08002469
 800242c:	08002469 	.word	0x08002469
 8002430:	08002469 	.word	0x08002469
 8002434:	08002461 	.word	0x08002461
 8002438:	2301      	movs	r3, #1
 800243a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800243e:	e0c3      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002440:	2304      	movs	r3, #4
 8002442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002446:	e0bf      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002448:	2308      	movs	r3, #8
 800244a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800244e:	e0bb      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002450:	2310      	movs	r3, #16
 8002452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002456:	e0b7      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002458:	2320      	movs	r3, #32
 800245a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800245e:	e0b3      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002460:	2340      	movs	r3, #64	; 0x40
 8002462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002466:	e0af      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800246e:	bf00      	nop
 8002470:	e0aa      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a79      	ldr	r2, [pc, #484]	; (800265c <UART_SetConfig+0x664>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d132      	bne.n	80024e2 <UART_SetConfig+0x4ea>
 800247c:	4b76      	ldr	r3, [pc, #472]	; (8002658 <UART_SetConfig+0x660>)
 800247e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	2b05      	cmp	r3, #5
 8002486:	d827      	bhi.n	80024d8 <UART_SetConfig+0x4e0>
 8002488:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <UART_SetConfig+0x498>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024a9 	.word	0x080024a9
 8002494:	080024b1 	.word	0x080024b1
 8002498:	080024b9 	.word	0x080024b9
 800249c:	080024c1 	.word	0x080024c1
 80024a0:	080024c9 	.word	0x080024c9
 80024a4:	080024d1 	.word	0x080024d1
 80024a8:	2300      	movs	r3, #0
 80024aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80024ae:	e08b      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80024b0:	2304      	movs	r3, #4
 80024b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80024b6:	e087      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80024b8:	2308      	movs	r3, #8
 80024ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80024be:	e083      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80024c0:	2310      	movs	r3, #16
 80024c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80024c6:	e07f      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80024c8:	2320      	movs	r3, #32
 80024ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80024ce:	e07b      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80024d0:	2340      	movs	r3, #64	; 0x40
 80024d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80024d6:	e077      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80024de:	bf00      	nop
 80024e0:	e072      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a5e      	ldr	r2, [pc, #376]	; (8002660 <UART_SetConfig+0x668>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d132      	bne.n	8002552 <UART_SetConfig+0x55a>
 80024ec:	4b5a      	ldr	r3, [pc, #360]	; (8002658 <UART_SetConfig+0x660>)
 80024ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d827      	bhi.n	8002548 <UART_SetConfig+0x550>
 80024f8:	a201      	add	r2, pc, #4	; (adr r2, 8002500 <UART_SetConfig+0x508>)
 80024fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fe:	bf00      	nop
 8002500:	08002519 	.word	0x08002519
 8002504:	08002521 	.word	0x08002521
 8002508:	08002529 	.word	0x08002529
 800250c:	08002531 	.word	0x08002531
 8002510:	08002539 	.word	0x08002539
 8002514:	08002541 	.word	0x08002541
 8002518:	2300      	movs	r3, #0
 800251a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800251e:	e053      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002520:	2304      	movs	r3, #4
 8002522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002526:	e04f      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002528:	2308      	movs	r3, #8
 800252a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800252e:	e04b      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002530:	2310      	movs	r3, #16
 8002532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002536:	e047      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002538:	2320      	movs	r3, #32
 800253a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800253e:	e043      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002540:	2340      	movs	r3, #64	; 0x40
 8002542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002546:	e03f      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800254e:	bf00      	nop
 8002550:	e03a      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a43      	ldr	r2, [pc, #268]	; (8002664 <UART_SetConfig+0x66c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d132      	bne.n	80025c2 <UART_SetConfig+0x5ca>
 800255c:	4b3e      	ldr	r3, [pc, #248]	; (8002658 <UART_SetConfig+0x660>)
 800255e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	2b05      	cmp	r3, #5
 8002566:	d827      	bhi.n	80025b8 <UART_SetConfig+0x5c0>
 8002568:	a201      	add	r2, pc, #4	; (adr r2, 8002570 <UART_SetConfig+0x578>)
 800256a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256e:	bf00      	nop
 8002570:	08002589 	.word	0x08002589
 8002574:	08002591 	.word	0x08002591
 8002578:	08002599 	.word	0x08002599
 800257c:	080025a1 	.word	0x080025a1
 8002580:	080025a9 	.word	0x080025a9
 8002584:	080025b1 	.word	0x080025b1
 8002588:	2302      	movs	r3, #2
 800258a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800258e:	e01b      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002590:	2304      	movs	r3, #4
 8002592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002596:	e017      	b.n	80025c8 <UART_SetConfig+0x5d0>
 8002598:	2308      	movs	r3, #8
 800259a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800259e:	e013      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80025a0:	2310      	movs	r3, #16
 80025a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80025a6:	e00f      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80025a8:	2320      	movs	r3, #32
 80025aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80025ae:	e00b      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80025b0:	2340      	movs	r3, #64	; 0x40
 80025b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80025b6:	e007      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80025be:	bf00      	nop
 80025c0:	e002      	b.n	80025c8 <UART_SetConfig+0x5d0>
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a25      	ldr	r2, [pc, #148]	; (8002664 <UART_SetConfig+0x66c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	f040 80b8 	bne.w	8002744 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80025d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d019      	beq.n	8002610 <UART_SetConfig+0x618>
 80025dc:	2b08      	cmp	r3, #8
 80025de:	dc04      	bgt.n	80025ea <UART_SetConfig+0x5f2>
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d009      	beq.n	80025f8 <UART_SetConfig+0x600>
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d00b      	beq.n	8002600 <UART_SetConfig+0x608>
 80025e8:	e042      	b.n	8002670 <UART_SetConfig+0x678>
 80025ea:	2b20      	cmp	r3, #32
 80025ec:	d02b      	beq.n	8002646 <UART_SetConfig+0x64e>
 80025ee:	2b40      	cmp	r3, #64	; 0x40
 80025f0:	d02c      	beq.n	800264c <UART_SetConfig+0x654>
 80025f2:	2b10      	cmp	r3, #16
 80025f4:	d014      	beq.n	8002620 <UART_SetConfig+0x628>
 80025f6:	e03b      	b.n	8002670 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80025f8:	f7ff f89a 	bl	8001730 <HAL_RCCEx_GetD3PCLK1Freq>
 80025fc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80025fe:	e03d      	b.n	800267c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff f8a9 	bl	800175c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800260e:	e035      	b.n	800267c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002610:	f107 0308 	add.w	r3, r7, #8
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff f9ed 	bl	80019f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800261e:	e02d      	b.n	800267c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002620:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <UART_SetConfig+0x660>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b00      	cmp	r3, #0
 800262a:	d009      	beq.n	8002640 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800262c:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <UART_SetConfig+0x660>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	08db      	lsrs	r3, r3, #3
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	4a0c      	ldr	r2, [pc, #48]	; (8002668 <UART_SetConfig+0x670>)
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800263e:	e01d      	b.n	800267c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <UART_SetConfig+0x670>)
 8002642:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002644:	e01a      	b.n	800267c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <UART_SetConfig+0x674>)
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800264a:	e017      	b.n	800267c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800264c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002652:	e013      	b.n	800267c <UART_SetConfig+0x684>
 8002654:	40011400 	.word	0x40011400
 8002658:	58024400 	.word	0x58024400
 800265c:	40007800 	.word	0x40007800
 8002660:	40007c00 	.word	0x40007c00
 8002664:	58000c00 	.word	0x58000c00
 8002668:	03d09000 	.word	0x03d09000
 800266c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800267a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 824d 	beq.w	8002b1e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	4aad      	ldr	r2, [pc, #692]	; (8002940 <UART_SetConfig+0x948>)
 800268a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800268e:	461a      	mov	r2, r3
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	fbb3 f3f2 	udiv	r3, r3, r2
 8002696:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	6a3a      	ldr	r2, [r7, #32]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d305      	bcc.n	80026b4 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80026ae:	6a3a      	ldr	r2, [r7, #32]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d903      	bls.n	80026bc <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80026ba:	e230      	b.n	8002b1e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026be:	4618      	mov	r0, r3
 80026c0:	f04f 0100 	mov.w	r1, #0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	4a9d      	ldr	r2, [pc, #628]	; (8002940 <UART_SetConfig+0x948>)
 80026ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	f04f 0400 	mov.w	r4, #0
 80026d4:	461a      	mov	r2, r3
 80026d6:	4623      	mov	r3, r4
 80026d8:	f7fd fe52 	bl	8000380 <__aeabi_uldivmod>
 80026dc:	4603      	mov	r3, r0
 80026de:	460c      	mov	r4, r1
 80026e0:	4619      	mov	r1, r3
 80026e2:	4622      	mov	r2, r4
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	f04f 0400 	mov.w	r4, #0
 80026ec:	0214      	lsls	r4, r2, #8
 80026ee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80026f2:	020b      	lsls	r3, r1, #8
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6852      	ldr	r2, [r2, #4]
 80026f8:	0852      	lsrs	r2, r2, #1
 80026fa:	4611      	mov	r1, r2
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	eb13 0b01 	adds.w	fp, r3, r1
 8002704:	eb44 0c02 	adc.w	ip, r4, r2
 8002708:	4658      	mov	r0, fp
 800270a:	4661      	mov	r1, ip
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f04f 0400 	mov.w	r4, #0
 8002714:	461a      	mov	r2, r3
 8002716:	4623      	mov	r3, r4
 8002718:	f7fd fe32 	bl	8000380 <__aeabi_uldivmod>
 800271c:	4603      	mov	r3, r0
 800271e:	460c      	mov	r4, r1
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002728:	d308      	bcc.n	800273c <UART_SetConfig+0x744>
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002730:	d204      	bcs.n	800273c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	e1f0      	b.n	8002b1e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8002742:	e1ec      	b.n	8002b1e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800274c:	f040 8100 	bne.w	8002950 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8002750:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	f200 80b7 	bhi.w	80028c8 <UART_SetConfig+0x8d0>
 800275a:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <UART_SetConfig+0x768>)
 800275c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002760:	08002865 	.word	0x08002865
 8002764:	0800286d 	.word	0x0800286d
 8002768:	080028c9 	.word	0x080028c9
 800276c:	080028c9 	.word	0x080028c9
 8002770:	08002875 	.word	0x08002875
 8002774:	080028c9 	.word	0x080028c9
 8002778:	080028c9 	.word	0x080028c9
 800277c:	080028c9 	.word	0x080028c9
 8002780:	08002885 	.word	0x08002885
 8002784:	080028c9 	.word	0x080028c9
 8002788:	080028c9 	.word	0x080028c9
 800278c:	080028c9 	.word	0x080028c9
 8002790:	080028c9 	.word	0x080028c9
 8002794:	080028c9 	.word	0x080028c9
 8002798:	080028c9 	.word	0x080028c9
 800279c:	080028c9 	.word	0x080028c9
 80027a0:	08002895 	.word	0x08002895
 80027a4:	080028c9 	.word	0x080028c9
 80027a8:	080028c9 	.word	0x080028c9
 80027ac:	080028c9 	.word	0x080028c9
 80027b0:	080028c9 	.word	0x080028c9
 80027b4:	080028c9 	.word	0x080028c9
 80027b8:	080028c9 	.word	0x080028c9
 80027bc:	080028c9 	.word	0x080028c9
 80027c0:	080028c9 	.word	0x080028c9
 80027c4:	080028c9 	.word	0x080028c9
 80027c8:	080028c9 	.word	0x080028c9
 80027cc:	080028c9 	.word	0x080028c9
 80027d0:	080028c9 	.word	0x080028c9
 80027d4:	080028c9 	.word	0x080028c9
 80027d8:	080028c9 	.word	0x080028c9
 80027dc:	080028c9 	.word	0x080028c9
 80027e0:	080028bb 	.word	0x080028bb
 80027e4:	080028c9 	.word	0x080028c9
 80027e8:	080028c9 	.word	0x080028c9
 80027ec:	080028c9 	.word	0x080028c9
 80027f0:	080028c9 	.word	0x080028c9
 80027f4:	080028c9 	.word	0x080028c9
 80027f8:	080028c9 	.word	0x080028c9
 80027fc:	080028c9 	.word	0x080028c9
 8002800:	080028c9 	.word	0x080028c9
 8002804:	080028c9 	.word	0x080028c9
 8002808:	080028c9 	.word	0x080028c9
 800280c:	080028c9 	.word	0x080028c9
 8002810:	080028c9 	.word	0x080028c9
 8002814:	080028c9 	.word	0x080028c9
 8002818:	080028c9 	.word	0x080028c9
 800281c:	080028c9 	.word	0x080028c9
 8002820:	080028c9 	.word	0x080028c9
 8002824:	080028c9 	.word	0x080028c9
 8002828:	080028c9 	.word	0x080028c9
 800282c:	080028c9 	.word	0x080028c9
 8002830:	080028c9 	.word	0x080028c9
 8002834:	080028c9 	.word	0x080028c9
 8002838:	080028c9 	.word	0x080028c9
 800283c:	080028c9 	.word	0x080028c9
 8002840:	080028c9 	.word	0x080028c9
 8002844:	080028c9 	.word	0x080028c9
 8002848:	080028c9 	.word	0x080028c9
 800284c:	080028c9 	.word	0x080028c9
 8002850:	080028c9 	.word	0x080028c9
 8002854:	080028c9 	.word	0x080028c9
 8002858:	080028c9 	.word	0x080028c9
 800285c:	080028c9 	.word	0x080028c9
 8002860:	080028c1 	.word	0x080028c1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002864:	f7fe ff38 	bl	80016d8 <HAL_RCC_GetPCLK1Freq>
 8002868:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800286a:	e033      	b.n	80028d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800286c:	f7fe ff4a 	bl	8001704 <HAL_RCC_GetPCLK2Freq>
 8002870:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8002872:	e02f      	b.n	80028d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe ff6f 	bl	800175c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002882:	e027      	b.n	80028d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002884:	f107 0308 	add.w	r3, r7, #8
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff f8b3 	bl	80019f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002892:	e01f      	b.n	80028d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002894:	4b2b      	ldr	r3, [pc, #172]	; (8002944 <UART_SetConfig+0x94c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b00      	cmp	r3, #0
 800289e:	d009      	beq.n	80028b4 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80028a0:	4b28      	ldr	r3, [pc, #160]	; (8002944 <UART_SetConfig+0x94c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	08db      	lsrs	r3, r3, #3
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	4a27      	ldr	r2, [pc, #156]	; (8002948 <UART_SetConfig+0x950>)
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80028b2:	e00f      	b.n	80028d4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80028b4:	4b24      	ldr	r3, [pc, #144]	; (8002948 <UART_SetConfig+0x950>)
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028b8:	e00c      	b.n	80028d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80028ba:	4b24      	ldr	r3, [pc, #144]	; (800294c <UART_SetConfig+0x954>)
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028be:	e009      	b.n	80028d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028c6:	e005      	b.n	80028d4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80028d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80028d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8121 	beq.w	8002b1e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	4a17      	ldr	r2, [pc, #92]	; (8002940 <UART_SetConfig+0x948>)
 80028e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028e6:	461a      	mov	r2, r3
 80028e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80028ee:	005a      	lsls	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	085b      	lsrs	r3, r3, #1
 80028f6:	441a      	add	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002900:	b29b      	uxth	r3, r3
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	2b0f      	cmp	r3, #15
 8002908:	d916      	bls.n	8002938 <UART_SetConfig+0x940>
 800290a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002910:	d212      	bcs.n	8002938 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	b29b      	uxth	r3, r3
 8002916:	f023 030f 	bic.w	r3, r3, #15
 800291a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800291c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291e:	085b      	lsrs	r3, r3, #1
 8002920:	b29b      	uxth	r3, r3
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	b29a      	uxth	r2, r3
 8002928:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800292a:	4313      	orrs	r3, r2
 800292c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	e0f2      	b.n	8002b1e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800293e:	e0ee      	b.n	8002b1e <UART_SetConfig+0xb26>
 8002940:	08003974 	.word	0x08003974
 8002944:	58024400 	.word	0x58024400
 8002948:	03d09000 	.word	0x03d09000
 800294c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8002950:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002954:	2b40      	cmp	r3, #64	; 0x40
 8002956:	f200 80b7 	bhi.w	8002ac8 <UART_SetConfig+0xad0>
 800295a:	a201      	add	r2, pc, #4	; (adr r2, 8002960 <UART_SetConfig+0x968>)
 800295c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002960:	08002a65 	.word	0x08002a65
 8002964:	08002a6d 	.word	0x08002a6d
 8002968:	08002ac9 	.word	0x08002ac9
 800296c:	08002ac9 	.word	0x08002ac9
 8002970:	08002a75 	.word	0x08002a75
 8002974:	08002ac9 	.word	0x08002ac9
 8002978:	08002ac9 	.word	0x08002ac9
 800297c:	08002ac9 	.word	0x08002ac9
 8002980:	08002a85 	.word	0x08002a85
 8002984:	08002ac9 	.word	0x08002ac9
 8002988:	08002ac9 	.word	0x08002ac9
 800298c:	08002ac9 	.word	0x08002ac9
 8002990:	08002ac9 	.word	0x08002ac9
 8002994:	08002ac9 	.word	0x08002ac9
 8002998:	08002ac9 	.word	0x08002ac9
 800299c:	08002ac9 	.word	0x08002ac9
 80029a0:	08002a95 	.word	0x08002a95
 80029a4:	08002ac9 	.word	0x08002ac9
 80029a8:	08002ac9 	.word	0x08002ac9
 80029ac:	08002ac9 	.word	0x08002ac9
 80029b0:	08002ac9 	.word	0x08002ac9
 80029b4:	08002ac9 	.word	0x08002ac9
 80029b8:	08002ac9 	.word	0x08002ac9
 80029bc:	08002ac9 	.word	0x08002ac9
 80029c0:	08002ac9 	.word	0x08002ac9
 80029c4:	08002ac9 	.word	0x08002ac9
 80029c8:	08002ac9 	.word	0x08002ac9
 80029cc:	08002ac9 	.word	0x08002ac9
 80029d0:	08002ac9 	.word	0x08002ac9
 80029d4:	08002ac9 	.word	0x08002ac9
 80029d8:	08002ac9 	.word	0x08002ac9
 80029dc:	08002ac9 	.word	0x08002ac9
 80029e0:	08002abb 	.word	0x08002abb
 80029e4:	08002ac9 	.word	0x08002ac9
 80029e8:	08002ac9 	.word	0x08002ac9
 80029ec:	08002ac9 	.word	0x08002ac9
 80029f0:	08002ac9 	.word	0x08002ac9
 80029f4:	08002ac9 	.word	0x08002ac9
 80029f8:	08002ac9 	.word	0x08002ac9
 80029fc:	08002ac9 	.word	0x08002ac9
 8002a00:	08002ac9 	.word	0x08002ac9
 8002a04:	08002ac9 	.word	0x08002ac9
 8002a08:	08002ac9 	.word	0x08002ac9
 8002a0c:	08002ac9 	.word	0x08002ac9
 8002a10:	08002ac9 	.word	0x08002ac9
 8002a14:	08002ac9 	.word	0x08002ac9
 8002a18:	08002ac9 	.word	0x08002ac9
 8002a1c:	08002ac9 	.word	0x08002ac9
 8002a20:	08002ac9 	.word	0x08002ac9
 8002a24:	08002ac9 	.word	0x08002ac9
 8002a28:	08002ac9 	.word	0x08002ac9
 8002a2c:	08002ac9 	.word	0x08002ac9
 8002a30:	08002ac9 	.word	0x08002ac9
 8002a34:	08002ac9 	.word	0x08002ac9
 8002a38:	08002ac9 	.word	0x08002ac9
 8002a3c:	08002ac9 	.word	0x08002ac9
 8002a40:	08002ac9 	.word	0x08002ac9
 8002a44:	08002ac9 	.word	0x08002ac9
 8002a48:	08002ac9 	.word	0x08002ac9
 8002a4c:	08002ac9 	.word	0x08002ac9
 8002a50:	08002ac9 	.word	0x08002ac9
 8002a54:	08002ac9 	.word	0x08002ac9
 8002a58:	08002ac9 	.word	0x08002ac9
 8002a5c:	08002ac9 	.word	0x08002ac9
 8002a60:	08002ac1 	.word	0x08002ac1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a64:	f7fe fe38 	bl	80016d8 <HAL_RCC_GetPCLK1Freq>
 8002a68:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8002a6a:	e033      	b.n	8002ad4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a6c:	f7fe fe4a 	bl	8001704 <HAL_RCC_GetPCLK2Freq>
 8002a70:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8002a72:	e02f      	b.n	8002ad4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002a74:	f107 0314 	add.w	r3, r7, #20
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe fe6f 	bl	800175c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a82:	e027      	b.n	8002ad4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002a84:	f107 0308 	add.w	r3, r7, #8
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe ffb3 	bl	80019f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a92:	e01f      	b.n	8002ad4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a94:	4b2c      	ldr	r3, [pc, #176]	; (8002b48 <UART_SetConfig+0xb50>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d009      	beq.n	8002ab4 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8002aa0:	4b29      	ldr	r3, [pc, #164]	; (8002b48 <UART_SetConfig+0xb50>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	08db      	lsrs	r3, r3, #3
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	4a28      	ldr	r2, [pc, #160]	; (8002b4c <UART_SetConfig+0xb54>)
 8002aac:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ab2:	e00f      	b.n	8002ad4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8002ab4:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <UART_SetConfig+0xb54>)
 8002ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ab8:	e00c      	b.n	8002ad4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8002aba:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <UART_SetConfig+0xb58>)
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002abe:	e009      	b.n	8002ad4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ac6:	e005      	b.n	8002ad4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8002ad2:	bf00      	nop
    }

    if (pclk != 0U)
 8002ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d021      	beq.n	8002b1e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <UART_SetConfig+0xb5c>)
 8002ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae8:	fbb3 f2f2 	udiv	r2, r3, r2
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	085b      	lsrs	r3, r3, #1
 8002af2:	441a      	add	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b02:	2b0f      	cmp	r3, #15
 8002b04:	d908      	bls.n	8002b18 <UART_SetConfig+0xb20>
 8002b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0c:	d204      	bcs.n	8002b18 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	e002      	b.n	8002b1e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8002b3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3738      	adds	r7, #56	; 0x38
 8002b42:	46bd      	mov	sp, r7
 8002b44:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002b48:	58024400 	.word	0x58024400
 8002b4c:	03d09000 	.word	0x03d09000
 8002b50:	003d0900 	.word	0x003d0900
 8002b54:	08003974 	.word	0x08003974

08002b58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00a      	beq.n	8002b82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00a      	beq.n	8002bc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d01a      	beq.n	8002c6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c56:	d10a      	bne.n	8002c6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	605a      	str	r2, [r3, #4]
  }
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002cac:	f7fe f8a4 	bl	8000df8 <HAL_GetTick>
 8002cb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d10e      	bne.n	8002cde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f82c 	bl	8002d2c <UART_WaitOnFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e022      	b.n	8002d24 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d10e      	bne.n	8002d0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f816 	bl	8002d2c <UART_WaitOnFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e00c      	b.n	8002d24 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d3c:	e062      	b.n	8002e04 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d05e      	beq.n	8002e04 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d46:	f7fe f857 	bl	8000df8 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <UART_WaitOnFlagUntilTimeout+0x30>
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d11d      	bne.n	8002d98 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d6a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e045      	b.n	8002e24 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d02e      	beq.n	8002e04 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002db4:	d126      	bne.n	8002e04 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dbe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002dce:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e00f      	b.n	8002e24 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d08d      	beq.n	8002d3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_UARTEx_DisableFifoMode+0x16>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e027      	b.n	8002e92 <HAL_UARTEx_DisableFifoMode+0x66>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2224      	movs	r2, #36	; 0x24
 8002e4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0201 	bic.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002e70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b084      	sub	sp, #16
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e02d      	b.n	8002f12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2224      	movs	r2, #36	; 0x24
 8002ec2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f850 	bl	8002f98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e02d      	b.n	8002f8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2224      	movs	r2, #36	; 0x24
 8002f3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f812 	bl	8002f98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b089      	sub	sp, #36	; 0x24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002fa0:	4a2f      	ldr	r2, [pc, #188]	; (8003060 <UARTEx_SetNbDataToProcess+0xc8>)
 8002fa2:	f107 0314 	add.w	r3, r7, #20
 8002fa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002faa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002fae:	4a2d      	ldr	r2, [pc, #180]	; (8003064 <UARTEx_SetNbDataToProcess+0xcc>)
 8002fb0:	f107 030c 	add.w	r3, r7, #12
 8002fb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fb8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d108      	bne.n	8002fd6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002fd4:	e03d      	b.n	8003052 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002fd6:	2310      	movs	r3, #16
 8002fd8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002fda:	2310      	movs	r3, #16
 8002fdc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	0e5b      	lsrs	r3, r3, #25
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	0f5b      	lsrs	r3, r3, #29
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002ffe:	7fbb      	ldrb	r3, [r7, #30]
 8003000:	7f3a      	ldrb	r2, [r7, #28]
 8003002:	f107 0120 	add.w	r1, r7, #32
 8003006:	440a      	add	r2, r1
 8003008:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800300c:	fb02 f303 	mul.w	r3, r2, r3
 8003010:	7f3a      	ldrb	r2, [r7, #28]
 8003012:	f107 0120 	add.w	r1, r7, #32
 8003016:	440a      	add	r2, r1
 8003018:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800301c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003020:	b29a      	uxth	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003028:	7ffb      	ldrb	r3, [r7, #31]
 800302a:	7f7a      	ldrb	r2, [r7, #29]
 800302c:	f107 0120 	add.w	r1, r7, #32
 8003030:	440a      	add	r2, r1
 8003032:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	7f7a      	ldrb	r2, [r7, #29]
 800303c:	f107 0120 	add.w	r1, r7, #32
 8003040:	440a      	add	r2, r1
 8003042:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003046:	fb93 f3f2 	sdiv	r3, r3, r2
 800304a:	b29a      	uxth	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003052:	bf00      	nop
 8003054:	3724      	adds	r7, #36	; 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	08003954 	.word	0x08003954
 8003064:	0800395c 	.word	0x0800395c

08003068 <__errno>:
 8003068:	4b01      	ldr	r3, [pc, #4]	; (8003070 <__errno+0x8>)
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000010 	.word	0x20000010

08003074 <__libc_init_array>:
 8003074:	b570      	push	{r4, r5, r6, lr}
 8003076:	4e0d      	ldr	r6, [pc, #52]	; (80030ac <__libc_init_array+0x38>)
 8003078:	4c0d      	ldr	r4, [pc, #52]	; (80030b0 <__libc_init_array+0x3c>)
 800307a:	1ba4      	subs	r4, r4, r6
 800307c:	10a4      	asrs	r4, r4, #2
 800307e:	2500      	movs	r5, #0
 8003080:	42a5      	cmp	r5, r4
 8003082:	d109      	bne.n	8003098 <__libc_init_array+0x24>
 8003084:	4e0b      	ldr	r6, [pc, #44]	; (80030b4 <__libc_init_array+0x40>)
 8003086:	4c0c      	ldr	r4, [pc, #48]	; (80030b8 <__libc_init_array+0x44>)
 8003088:	f000 fc32 	bl	80038f0 <_init>
 800308c:	1ba4      	subs	r4, r4, r6
 800308e:	10a4      	asrs	r4, r4, #2
 8003090:	2500      	movs	r5, #0
 8003092:	42a5      	cmp	r5, r4
 8003094:	d105      	bne.n	80030a2 <__libc_init_array+0x2e>
 8003096:	bd70      	pop	{r4, r5, r6, pc}
 8003098:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800309c:	4798      	blx	r3
 800309e:	3501      	adds	r5, #1
 80030a0:	e7ee      	b.n	8003080 <__libc_init_array+0xc>
 80030a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030a6:	4798      	blx	r3
 80030a8:	3501      	adds	r5, #1
 80030aa:	e7f2      	b.n	8003092 <__libc_init_array+0x1e>
 80030ac:	080039c8 	.word	0x080039c8
 80030b0:	080039c8 	.word	0x080039c8
 80030b4:	080039c8 	.word	0x080039c8
 80030b8:	080039cc 	.word	0x080039cc

080030bc <sniprintf>:
 80030bc:	b40c      	push	{r2, r3}
 80030be:	b530      	push	{r4, r5, lr}
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <sniprintf+0x64>)
 80030c2:	1e0c      	subs	r4, r1, #0
 80030c4:	b09d      	sub	sp, #116	; 0x74
 80030c6:	681d      	ldr	r5, [r3, #0]
 80030c8:	da08      	bge.n	80030dc <sniprintf+0x20>
 80030ca:	238b      	movs	r3, #139	; 0x8b
 80030cc:	602b      	str	r3, [r5, #0]
 80030ce:	f04f 30ff 	mov.w	r0, #4294967295
 80030d2:	b01d      	add	sp, #116	; 0x74
 80030d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80030d8:	b002      	add	sp, #8
 80030da:	4770      	bx	lr
 80030dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80030e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80030e4:	bf14      	ite	ne
 80030e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80030ea:	4623      	moveq	r3, r4
 80030ec:	9304      	str	r3, [sp, #16]
 80030ee:	9307      	str	r3, [sp, #28]
 80030f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030f4:	9002      	str	r0, [sp, #8]
 80030f6:	9006      	str	r0, [sp, #24]
 80030f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80030fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80030fe:	ab21      	add	r3, sp, #132	; 0x84
 8003100:	a902      	add	r1, sp, #8
 8003102:	4628      	mov	r0, r5
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	f000 f867 	bl	80031d8 <_svfiprintf_r>
 800310a:	1c43      	adds	r3, r0, #1
 800310c:	bfbc      	itt	lt
 800310e:	238b      	movlt	r3, #139	; 0x8b
 8003110:	602b      	strlt	r3, [r5, #0]
 8003112:	2c00      	cmp	r4, #0
 8003114:	d0dd      	beq.n	80030d2 <sniprintf+0x16>
 8003116:	9b02      	ldr	r3, [sp, #8]
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	e7d9      	b.n	80030d2 <sniprintf+0x16>
 800311e:	bf00      	nop
 8003120:	20000010 	.word	0x20000010

08003124 <__ssputs_r>:
 8003124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003128:	688e      	ldr	r6, [r1, #8]
 800312a:	429e      	cmp	r6, r3
 800312c:	4682      	mov	sl, r0
 800312e:	460c      	mov	r4, r1
 8003130:	4690      	mov	r8, r2
 8003132:	4699      	mov	r9, r3
 8003134:	d837      	bhi.n	80031a6 <__ssputs_r+0x82>
 8003136:	898a      	ldrh	r2, [r1, #12]
 8003138:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800313c:	d031      	beq.n	80031a2 <__ssputs_r+0x7e>
 800313e:	6825      	ldr	r5, [r4, #0]
 8003140:	6909      	ldr	r1, [r1, #16]
 8003142:	1a6f      	subs	r7, r5, r1
 8003144:	6965      	ldr	r5, [r4, #20]
 8003146:	2302      	movs	r3, #2
 8003148:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800314c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003150:	f109 0301 	add.w	r3, r9, #1
 8003154:	443b      	add	r3, r7
 8003156:	429d      	cmp	r5, r3
 8003158:	bf38      	it	cc
 800315a:	461d      	movcc	r5, r3
 800315c:	0553      	lsls	r3, r2, #21
 800315e:	d530      	bpl.n	80031c2 <__ssputs_r+0x9e>
 8003160:	4629      	mov	r1, r5
 8003162:	f000 fb2b 	bl	80037bc <_malloc_r>
 8003166:	4606      	mov	r6, r0
 8003168:	b950      	cbnz	r0, 8003180 <__ssputs_r+0x5c>
 800316a:	230c      	movs	r3, #12
 800316c:	f8ca 3000 	str.w	r3, [sl]
 8003170:	89a3      	ldrh	r3, [r4, #12]
 8003172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003176:	81a3      	strh	r3, [r4, #12]
 8003178:	f04f 30ff 	mov.w	r0, #4294967295
 800317c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003180:	463a      	mov	r2, r7
 8003182:	6921      	ldr	r1, [r4, #16]
 8003184:	f000 faa8 	bl	80036d8 <memcpy>
 8003188:	89a3      	ldrh	r3, [r4, #12]
 800318a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800318e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003192:	81a3      	strh	r3, [r4, #12]
 8003194:	6126      	str	r6, [r4, #16]
 8003196:	6165      	str	r5, [r4, #20]
 8003198:	443e      	add	r6, r7
 800319a:	1bed      	subs	r5, r5, r7
 800319c:	6026      	str	r6, [r4, #0]
 800319e:	60a5      	str	r5, [r4, #8]
 80031a0:	464e      	mov	r6, r9
 80031a2:	454e      	cmp	r6, r9
 80031a4:	d900      	bls.n	80031a8 <__ssputs_r+0x84>
 80031a6:	464e      	mov	r6, r9
 80031a8:	4632      	mov	r2, r6
 80031aa:	4641      	mov	r1, r8
 80031ac:	6820      	ldr	r0, [r4, #0]
 80031ae:	f000 fa9e 	bl	80036ee <memmove>
 80031b2:	68a3      	ldr	r3, [r4, #8]
 80031b4:	1b9b      	subs	r3, r3, r6
 80031b6:	60a3      	str	r3, [r4, #8]
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	441e      	add	r6, r3
 80031bc:	6026      	str	r6, [r4, #0]
 80031be:	2000      	movs	r0, #0
 80031c0:	e7dc      	b.n	800317c <__ssputs_r+0x58>
 80031c2:	462a      	mov	r2, r5
 80031c4:	f000 fb54 	bl	8003870 <_realloc_r>
 80031c8:	4606      	mov	r6, r0
 80031ca:	2800      	cmp	r0, #0
 80031cc:	d1e2      	bne.n	8003194 <__ssputs_r+0x70>
 80031ce:	6921      	ldr	r1, [r4, #16]
 80031d0:	4650      	mov	r0, sl
 80031d2:	f000 faa5 	bl	8003720 <_free_r>
 80031d6:	e7c8      	b.n	800316a <__ssputs_r+0x46>

080031d8 <_svfiprintf_r>:
 80031d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031dc:	461d      	mov	r5, r3
 80031de:	898b      	ldrh	r3, [r1, #12]
 80031e0:	061f      	lsls	r7, r3, #24
 80031e2:	b09d      	sub	sp, #116	; 0x74
 80031e4:	4680      	mov	r8, r0
 80031e6:	460c      	mov	r4, r1
 80031e8:	4616      	mov	r6, r2
 80031ea:	d50f      	bpl.n	800320c <_svfiprintf_r+0x34>
 80031ec:	690b      	ldr	r3, [r1, #16]
 80031ee:	b96b      	cbnz	r3, 800320c <_svfiprintf_r+0x34>
 80031f0:	2140      	movs	r1, #64	; 0x40
 80031f2:	f000 fae3 	bl	80037bc <_malloc_r>
 80031f6:	6020      	str	r0, [r4, #0]
 80031f8:	6120      	str	r0, [r4, #16]
 80031fa:	b928      	cbnz	r0, 8003208 <_svfiprintf_r+0x30>
 80031fc:	230c      	movs	r3, #12
 80031fe:	f8c8 3000 	str.w	r3, [r8]
 8003202:	f04f 30ff 	mov.w	r0, #4294967295
 8003206:	e0c8      	b.n	800339a <_svfiprintf_r+0x1c2>
 8003208:	2340      	movs	r3, #64	; 0x40
 800320a:	6163      	str	r3, [r4, #20]
 800320c:	2300      	movs	r3, #0
 800320e:	9309      	str	r3, [sp, #36]	; 0x24
 8003210:	2320      	movs	r3, #32
 8003212:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003216:	2330      	movs	r3, #48	; 0x30
 8003218:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800321c:	9503      	str	r5, [sp, #12]
 800321e:	f04f 0b01 	mov.w	fp, #1
 8003222:	4637      	mov	r7, r6
 8003224:	463d      	mov	r5, r7
 8003226:	f815 3b01 	ldrb.w	r3, [r5], #1
 800322a:	b10b      	cbz	r3, 8003230 <_svfiprintf_r+0x58>
 800322c:	2b25      	cmp	r3, #37	; 0x25
 800322e:	d13e      	bne.n	80032ae <_svfiprintf_r+0xd6>
 8003230:	ebb7 0a06 	subs.w	sl, r7, r6
 8003234:	d00b      	beq.n	800324e <_svfiprintf_r+0x76>
 8003236:	4653      	mov	r3, sl
 8003238:	4632      	mov	r2, r6
 800323a:	4621      	mov	r1, r4
 800323c:	4640      	mov	r0, r8
 800323e:	f7ff ff71 	bl	8003124 <__ssputs_r>
 8003242:	3001      	adds	r0, #1
 8003244:	f000 80a4 	beq.w	8003390 <_svfiprintf_r+0x1b8>
 8003248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800324a:	4453      	add	r3, sl
 800324c:	9309      	str	r3, [sp, #36]	; 0x24
 800324e:	783b      	ldrb	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 809d 	beq.w	8003390 <_svfiprintf_r+0x1b8>
 8003256:	2300      	movs	r3, #0
 8003258:	f04f 32ff 	mov.w	r2, #4294967295
 800325c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003260:	9304      	str	r3, [sp, #16]
 8003262:	9307      	str	r3, [sp, #28]
 8003264:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003268:	931a      	str	r3, [sp, #104]	; 0x68
 800326a:	462f      	mov	r7, r5
 800326c:	2205      	movs	r2, #5
 800326e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003272:	4850      	ldr	r0, [pc, #320]	; (80033b4 <_svfiprintf_r+0x1dc>)
 8003274:	f7fd f834 	bl	80002e0 <memchr>
 8003278:	9b04      	ldr	r3, [sp, #16]
 800327a:	b9d0      	cbnz	r0, 80032b2 <_svfiprintf_r+0xda>
 800327c:	06d9      	lsls	r1, r3, #27
 800327e:	bf44      	itt	mi
 8003280:	2220      	movmi	r2, #32
 8003282:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003286:	071a      	lsls	r2, r3, #28
 8003288:	bf44      	itt	mi
 800328a:	222b      	movmi	r2, #43	; 0x2b
 800328c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003290:	782a      	ldrb	r2, [r5, #0]
 8003292:	2a2a      	cmp	r2, #42	; 0x2a
 8003294:	d015      	beq.n	80032c2 <_svfiprintf_r+0xea>
 8003296:	9a07      	ldr	r2, [sp, #28]
 8003298:	462f      	mov	r7, r5
 800329a:	2000      	movs	r0, #0
 800329c:	250a      	movs	r5, #10
 800329e:	4639      	mov	r1, r7
 80032a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032a4:	3b30      	subs	r3, #48	; 0x30
 80032a6:	2b09      	cmp	r3, #9
 80032a8:	d94d      	bls.n	8003346 <_svfiprintf_r+0x16e>
 80032aa:	b1b8      	cbz	r0, 80032dc <_svfiprintf_r+0x104>
 80032ac:	e00f      	b.n	80032ce <_svfiprintf_r+0xf6>
 80032ae:	462f      	mov	r7, r5
 80032b0:	e7b8      	b.n	8003224 <_svfiprintf_r+0x4c>
 80032b2:	4a40      	ldr	r2, [pc, #256]	; (80033b4 <_svfiprintf_r+0x1dc>)
 80032b4:	1a80      	subs	r0, r0, r2
 80032b6:	fa0b f000 	lsl.w	r0, fp, r0
 80032ba:	4318      	orrs	r0, r3
 80032bc:	9004      	str	r0, [sp, #16]
 80032be:	463d      	mov	r5, r7
 80032c0:	e7d3      	b.n	800326a <_svfiprintf_r+0x92>
 80032c2:	9a03      	ldr	r2, [sp, #12]
 80032c4:	1d11      	adds	r1, r2, #4
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	9103      	str	r1, [sp, #12]
 80032ca:	2a00      	cmp	r2, #0
 80032cc:	db01      	blt.n	80032d2 <_svfiprintf_r+0xfa>
 80032ce:	9207      	str	r2, [sp, #28]
 80032d0:	e004      	b.n	80032dc <_svfiprintf_r+0x104>
 80032d2:	4252      	negs	r2, r2
 80032d4:	f043 0302 	orr.w	r3, r3, #2
 80032d8:	9207      	str	r2, [sp, #28]
 80032da:	9304      	str	r3, [sp, #16]
 80032dc:	783b      	ldrb	r3, [r7, #0]
 80032de:	2b2e      	cmp	r3, #46	; 0x2e
 80032e0:	d10c      	bne.n	80032fc <_svfiprintf_r+0x124>
 80032e2:	787b      	ldrb	r3, [r7, #1]
 80032e4:	2b2a      	cmp	r3, #42	; 0x2a
 80032e6:	d133      	bne.n	8003350 <_svfiprintf_r+0x178>
 80032e8:	9b03      	ldr	r3, [sp, #12]
 80032ea:	1d1a      	adds	r2, r3, #4
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	9203      	str	r2, [sp, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bfb8      	it	lt
 80032f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80032f8:	3702      	adds	r7, #2
 80032fa:	9305      	str	r3, [sp, #20]
 80032fc:	4d2e      	ldr	r5, [pc, #184]	; (80033b8 <_svfiprintf_r+0x1e0>)
 80032fe:	7839      	ldrb	r1, [r7, #0]
 8003300:	2203      	movs	r2, #3
 8003302:	4628      	mov	r0, r5
 8003304:	f7fc ffec 	bl	80002e0 <memchr>
 8003308:	b138      	cbz	r0, 800331a <_svfiprintf_r+0x142>
 800330a:	2340      	movs	r3, #64	; 0x40
 800330c:	1b40      	subs	r0, r0, r5
 800330e:	fa03 f000 	lsl.w	r0, r3, r0
 8003312:	9b04      	ldr	r3, [sp, #16]
 8003314:	4303      	orrs	r3, r0
 8003316:	3701      	adds	r7, #1
 8003318:	9304      	str	r3, [sp, #16]
 800331a:	7839      	ldrb	r1, [r7, #0]
 800331c:	4827      	ldr	r0, [pc, #156]	; (80033bc <_svfiprintf_r+0x1e4>)
 800331e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003322:	2206      	movs	r2, #6
 8003324:	1c7e      	adds	r6, r7, #1
 8003326:	f7fc ffdb 	bl	80002e0 <memchr>
 800332a:	2800      	cmp	r0, #0
 800332c:	d038      	beq.n	80033a0 <_svfiprintf_r+0x1c8>
 800332e:	4b24      	ldr	r3, [pc, #144]	; (80033c0 <_svfiprintf_r+0x1e8>)
 8003330:	bb13      	cbnz	r3, 8003378 <_svfiprintf_r+0x1a0>
 8003332:	9b03      	ldr	r3, [sp, #12]
 8003334:	3307      	adds	r3, #7
 8003336:	f023 0307 	bic.w	r3, r3, #7
 800333a:	3308      	adds	r3, #8
 800333c:	9303      	str	r3, [sp, #12]
 800333e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003340:	444b      	add	r3, r9
 8003342:	9309      	str	r3, [sp, #36]	; 0x24
 8003344:	e76d      	b.n	8003222 <_svfiprintf_r+0x4a>
 8003346:	fb05 3202 	mla	r2, r5, r2, r3
 800334a:	2001      	movs	r0, #1
 800334c:	460f      	mov	r7, r1
 800334e:	e7a6      	b.n	800329e <_svfiprintf_r+0xc6>
 8003350:	2300      	movs	r3, #0
 8003352:	3701      	adds	r7, #1
 8003354:	9305      	str	r3, [sp, #20]
 8003356:	4619      	mov	r1, r3
 8003358:	250a      	movs	r5, #10
 800335a:	4638      	mov	r0, r7
 800335c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003360:	3a30      	subs	r2, #48	; 0x30
 8003362:	2a09      	cmp	r2, #9
 8003364:	d903      	bls.n	800336e <_svfiprintf_r+0x196>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0c8      	beq.n	80032fc <_svfiprintf_r+0x124>
 800336a:	9105      	str	r1, [sp, #20]
 800336c:	e7c6      	b.n	80032fc <_svfiprintf_r+0x124>
 800336e:	fb05 2101 	mla	r1, r5, r1, r2
 8003372:	2301      	movs	r3, #1
 8003374:	4607      	mov	r7, r0
 8003376:	e7f0      	b.n	800335a <_svfiprintf_r+0x182>
 8003378:	ab03      	add	r3, sp, #12
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	4622      	mov	r2, r4
 800337e:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <_svfiprintf_r+0x1ec>)
 8003380:	a904      	add	r1, sp, #16
 8003382:	4640      	mov	r0, r8
 8003384:	f3af 8000 	nop.w
 8003388:	f1b0 3fff 	cmp.w	r0, #4294967295
 800338c:	4681      	mov	r9, r0
 800338e:	d1d6      	bne.n	800333e <_svfiprintf_r+0x166>
 8003390:	89a3      	ldrh	r3, [r4, #12]
 8003392:	065b      	lsls	r3, r3, #25
 8003394:	f53f af35 	bmi.w	8003202 <_svfiprintf_r+0x2a>
 8003398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800339a:	b01d      	add	sp, #116	; 0x74
 800339c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033a0:	ab03      	add	r3, sp, #12
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	4622      	mov	r2, r4
 80033a6:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <_svfiprintf_r+0x1ec>)
 80033a8:	a904      	add	r1, sp, #16
 80033aa:	4640      	mov	r0, r8
 80033ac:	f000 f882 	bl	80034b4 <_printf_i>
 80033b0:	e7ea      	b.n	8003388 <_svfiprintf_r+0x1b0>
 80033b2:	bf00      	nop
 80033b4:	0800398c 	.word	0x0800398c
 80033b8:	08003992 	.word	0x08003992
 80033bc:	08003996 	.word	0x08003996
 80033c0:	00000000 	.word	0x00000000
 80033c4:	08003125 	.word	0x08003125

080033c8 <_printf_common>:
 80033c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033cc:	4691      	mov	r9, r2
 80033ce:	461f      	mov	r7, r3
 80033d0:	688a      	ldr	r2, [r1, #8]
 80033d2:	690b      	ldr	r3, [r1, #16]
 80033d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033d8:	4293      	cmp	r3, r2
 80033da:	bfb8      	it	lt
 80033dc:	4613      	movlt	r3, r2
 80033de:	f8c9 3000 	str.w	r3, [r9]
 80033e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033e6:	4606      	mov	r6, r0
 80033e8:	460c      	mov	r4, r1
 80033ea:	b112      	cbz	r2, 80033f2 <_printf_common+0x2a>
 80033ec:	3301      	adds	r3, #1
 80033ee:	f8c9 3000 	str.w	r3, [r9]
 80033f2:	6823      	ldr	r3, [r4, #0]
 80033f4:	0699      	lsls	r1, r3, #26
 80033f6:	bf42      	ittt	mi
 80033f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80033fc:	3302      	addmi	r3, #2
 80033fe:	f8c9 3000 	strmi.w	r3, [r9]
 8003402:	6825      	ldr	r5, [r4, #0]
 8003404:	f015 0506 	ands.w	r5, r5, #6
 8003408:	d107      	bne.n	800341a <_printf_common+0x52>
 800340a:	f104 0a19 	add.w	sl, r4, #25
 800340e:	68e3      	ldr	r3, [r4, #12]
 8003410:	f8d9 2000 	ldr.w	r2, [r9]
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	42ab      	cmp	r3, r5
 8003418:	dc28      	bgt.n	800346c <_printf_common+0xa4>
 800341a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800341e:	6822      	ldr	r2, [r4, #0]
 8003420:	3300      	adds	r3, #0
 8003422:	bf18      	it	ne
 8003424:	2301      	movne	r3, #1
 8003426:	0692      	lsls	r2, r2, #26
 8003428:	d42d      	bmi.n	8003486 <_printf_common+0xbe>
 800342a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800342e:	4639      	mov	r1, r7
 8003430:	4630      	mov	r0, r6
 8003432:	47c0      	blx	r8
 8003434:	3001      	adds	r0, #1
 8003436:	d020      	beq.n	800347a <_printf_common+0xb2>
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	68e5      	ldr	r5, [r4, #12]
 800343c:	f8d9 2000 	ldr.w	r2, [r9]
 8003440:	f003 0306 	and.w	r3, r3, #6
 8003444:	2b04      	cmp	r3, #4
 8003446:	bf08      	it	eq
 8003448:	1aad      	subeq	r5, r5, r2
 800344a:	68a3      	ldr	r3, [r4, #8]
 800344c:	6922      	ldr	r2, [r4, #16]
 800344e:	bf0c      	ite	eq
 8003450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003454:	2500      	movne	r5, #0
 8003456:	4293      	cmp	r3, r2
 8003458:	bfc4      	itt	gt
 800345a:	1a9b      	subgt	r3, r3, r2
 800345c:	18ed      	addgt	r5, r5, r3
 800345e:	f04f 0900 	mov.w	r9, #0
 8003462:	341a      	adds	r4, #26
 8003464:	454d      	cmp	r5, r9
 8003466:	d11a      	bne.n	800349e <_printf_common+0xd6>
 8003468:	2000      	movs	r0, #0
 800346a:	e008      	b.n	800347e <_printf_common+0xb6>
 800346c:	2301      	movs	r3, #1
 800346e:	4652      	mov	r2, sl
 8003470:	4639      	mov	r1, r7
 8003472:	4630      	mov	r0, r6
 8003474:	47c0      	blx	r8
 8003476:	3001      	adds	r0, #1
 8003478:	d103      	bne.n	8003482 <_printf_common+0xba>
 800347a:	f04f 30ff 	mov.w	r0, #4294967295
 800347e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003482:	3501      	adds	r5, #1
 8003484:	e7c3      	b.n	800340e <_printf_common+0x46>
 8003486:	18e1      	adds	r1, r4, r3
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	2030      	movs	r0, #48	; 0x30
 800348c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003490:	4422      	add	r2, r4
 8003492:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003496:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800349a:	3302      	adds	r3, #2
 800349c:	e7c5      	b.n	800342a <_printf_common+0x62>
 800349e:	2301      	movs	r3, #1
 80034a0:	4622      	mov	r2, r4
 80034a2:	4639      	mov	r1, r7
 80034a4:	4630      	mov	r0, r6
 80034a6:	47c0      	blx	r8
 80034a8:	3001      	adds	r0, #1
 80034aa:	d0e6      	beq.n	800347a <_printf_common+0xb2>
 80034ac:	f109 0901 	add.w	r9, r9, #1
 80034b0:	e7d8      	b.n	8003464 <_printf_common+0x9c>
	...

080034b4 <_printf_i>:
 80034b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80034bc:	460c      	mov	r4, r1
 80034be:	7e09      	ldrb	r1, [r1, #24]
 80034c0:	b085      	sub	sp, #20
 80034c2:	296e      	cmp	r1, #110	; 0x6e
 80034c4:	4617      	mov	r7, r2
 80034c6:	4606      	mov	r6, r0
 80034c8:	4698      	mov	r8, r3
 80034ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80034cc:	f000 80b3 	beq.w	8003636 <_printf_i+0x182>
 80034d0:	d822      	bhi.n	8003518 <_printf_i+0x64>
 80034d2:	2963      	cmp	r1, #99	; 0x63
 80034d4:	d036      	beq.n	8003544 <_printf_i+0x90>
 80034d6:	d80a      	bhi.n	80034ee <_printf_i+0x3a>
 80034d8:	2900      	cmp	r1, #0
 80034da:	f000 80b9 	beq.w	8003650 <_printf_i+0x19c>
 80034de:	2958      	cmp	r1, #88	; 0x58
 80034e0:	f000 8083 	beq.w	80035ea <_printf_i+0x136>
 80034e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80034ec:	e032      	b.n	8003554 <_printf_i+0xa0>
 80034ee:	2964      	cmp	r1, #100	; 0x64
 80034f0:	d001      	beq.n	80034f6 <_printf_i+0x42>
 80034f2:	2969      	cmp	r1, #105	; 0x69
 80034f4:	d1f6      	bne.n	80034e4 <_printf_i+0x30>
 80034f6:	6820      	ldr	r0, [r4, #0]
 80034f8:	6813      	ldr	r3, [r2, #0]
 80034fa:	0605      	lsls	r5, r0, #24
 80034fc:	f103 0104 	add.w	r1, r3, #4
 8003500:	d52a      	bpl.n	8003558 <_printf_i+0xa4>
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6011      	str	r1, [r2, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	da03      	bge.n	8003512 <_printf_i+0x5e>
 800350a:	222d      	movs	r2, #45	; 0x2d
 800350c:	425b      	negs	r3, r3
 800350e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003512:	486f      	ldr	r0, [pc, #444]	; (80036d0 <_printf_i+0x21c>)
 8003514:	220a      	movs	r2, #10
 8003516:	e039      	b.n	800358c <_printf_i+0xd8>
 8003518:	2973      	cmp	r1, #115	; 0x73
 800351a:	f000 809d 	beq.w	8003658 <_printf_i+0x1a4>
 800351e:	d808      	bhi.n	8003532 <_printf_i+0x7e>
 8003520:	296f      	cmp	r1, #111	; 0x6f
 8003522:	d020      	beq.n	8003566 <_printf_i+0xb2>
 8003524:	2970      	cmp	r1, #112	; 0x70
 8003526:	d1dd      	bne.n	80034e4 <_printf_i+0x30>
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	f043 0320 	orr.w	r3, r3, #32
 800352e:	6023      	str	r3, [r4, #0]
 8003530:	e003      	b.n	800353a <_printf_i+0x86>
 8003532:	2975      	cmp	r1, #117	; 0x75
 8003534:	d017      	beq.n	8003566 <_printf_i+0xb2>
 8003536:	2978      	cmp	r1, #120	; 0x78
 8003538:	d1d4      	bne.n	80034e4 <_printf_i+0x30>
 800353a:	2378      	movs	r3, #120	; 0x78
 800353c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003540:	4864      	ldr	r0, [pc, #400]	; (80036d4 <_printf_i+0x220>)
 8003542:	e055      	b.n	80035f0 <_printf_i+0x13c>
 8003544:	6813      	ldr	r3, [r2, #0]
 8003546:	1d19      	adds	r1, r3, #4
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6011      	str	r1, [r2, #0]
 800354c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003554:	2301      	movs	r3, #1
 8003556:	e08c      	b.n	8003672 <_printf_i+0x1be>
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6011      	str	r1, [r2, #0]
 800355c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003560:	bf18      	it	ne
 8003562:	b21b      	sxthne	r3, r3
 8003564:	e7cf      	b.n	8003506 <_printf_i+0x52>
 8003566:	6813      	ldr	r3, [r2, #0]
 8003568:	6825      	ldr	r5, [r4, #0]
 800356a:	1d18      	adds	r0, r3, #4
 800356c:	6010      	str	r0, [r2, #0]
 800356e:	0628      	lsls	r0, r5, #24
 8003570:	d501      	bpl.n	8003576 <_printf_i+0xc2>
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	e002      	b.n	800357c <_printf_i+0xc8>
 8003576:	0668      	lsls	r0, r5, #25
 8003578:	d5fb      	bpl.n	8003572 <_printf_i+0xbe>
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	4854      	ldr	r0, [pc, #336]	; (80036d0 <_printf_i+0x21c>)
 800357e:	296f      	cmp	r1, #111	; 0x6f
 8003580:	bf14      	ite	ne
 8003582:	220a      	movne	r2, #10
 8003584:	2208      	moveq	r2, #8
 8003586:	2100      	movs	r1, #0
 8003588:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800358c:	6865      	ldr	r5, [r4, #4]
 800358e:	60a5      	str	r5, [r4, #8]
 8003590:	2d00      	cmp	r5, #0
 8003592:	f2c0 8095 	blt.w	80036c0 <_printf_i+0x20c>
 8003596:	6821      	ldr	r1, [r4, #0]
 8003598:	f021 0104 	bic.w	r1, r1, #4
 800359c:	6021      	str	r1, [r4, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d13d      	bne.n	800361e <_printf_i+0x16a>
 80035a2:	2d00      	cmp	r5, #0
 80035a4:	f040 808e 	bne.w	80036c4 <_printf_i+0x210>
 80035a8:	4665      	mov	r5, ip
 80035aa:	2a08      	cmp	r2, #8
 80035ac:	d10b      	bne.n	80035c6 <_printf_i+0x112>
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	07db      	lsls	r3, r3, #31
 80035b2:	d508      	bpl.n	80035c6 <_printf_i+0x112>
 80035b4:	6923      	ldr	r3, [r4, #16]
 80035b6:	6862      	ldr	r2, [r4, #4]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	bfde      	ittt	le
 80035bc:	2330      	movle	r3, #48	; 0x30
 80035be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80035c6:	ebac 0305 	sub.w	r3, ip, r5
 80035ca:	6123      	str	r3, [r4, #16]
 80035cc:	f8cd 8000 	str.w	r8, [sp]
 80035d0:	463b      	mov	r3, r7
 80035d2:	aa03      	add	r2, sp, #12
 80035d4:	4621      	mov	r1, r4
 80035d6:	4630      	mov	r0, r6
 80035d8:	f7ff fef6 	bl	80033c8 <_printf_common>
 80035dc:	3001      	adds	r0, #1
 80035de:	d14d      	bne.n	800367c <_printf_i+0x1c8>
 80035e0:	f04f 30ff 	mov.w	r0, #4294967295
 80035e4:	b005      	add	sp, #20
 80035e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035ea:	4839      	ldr	r0, [pc, #228]	; (80036d0 <_printf_i+0x21c>)
 80035ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80035f0:	6813      	ldr	r3, [r2, #0]
 80035f2:	6821      	ldr	r1, [r4, #0]
 80035f4:	1d1d      	adds	r5, r3, #4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6015      	str	r5, [r2, #0]
 80035fa:	060a      	lsls	r2, r1, #24
 80035fc:	d50b      	bpl.n	8003616 <_printf_i+0x162>
 80035fe:	07ca      	lsls	r2, r1, #31
 8003600:	bf44      	itt	mi
 8003602:	f041 0120 	orrmi.w	r1, r1, #32
 8003606:	6021      	strmi	r1, [r4, #0]
 8003608:	b91b      	cbnz	r3, 8003612 <_printf_i+0x15e>
 800360a:	6822      	ldr	r2, [r4, #0]
 800360c:	f022 0220 	bic.w	r2, r2, #32
 8003610:	6022      	str	r2, [r4, #0]
 8003612:	2210      	movs	r2, #16
 8003614:	e7b7      	b.n	8003586 <_printf_i+0xd2>
 8003616:	064d      	lsls	r5, r1, #25
 8003618:	bf48      	it	mi
 800361a:	b29b      	uxthmi	r3, r3
 800361c:	e7ef      	b.n	80035fe <_printf_i+0x14a>
 800361e:	4665      	mov	r5, ip
 8003620:	fbb3 f1f2 	udiv	r1, r3, r2
 8003624:	fb02 3311 	mls	r3, r2, r1, r3
 8003628:	5cc3      	ldrb	r3, [r0, r3]
 800362a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800362e:	460b      	mov	r3, r1
 8003630:	2900      	cmp	r1, #0
 8003632:	d1f5      	bne.n	8003620 <_printf_i+0x16c>
 8003634:	e7b9      	b.n	80035aa <_printf_i+0xf6>
 8003636:	6813      	ldr	r3, [r2, #0]
 8003638:	6825      	ldr	r5, [r4, #0]
 800363a:	6961      	ldr	r1, [r4, #20]
 800363c:	1d18      	adds	r0, r3, #4
 800363e:	6010      	str	r0, [r2, #0]
 8003640:	0628      	lsls	r0, r5, #24
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	d501      	bpl.n	800364a <_printf_i+0x196>
 8003646:	6019      	str	r1, [r3, #0]
 8003648:	e002      	b.n	8003650 <_printf_i+0x19c>
 800364a:	066a      	lsls	r2, r5, #25
 800364c:	d5fb      	bpl.n	8003646 <_printf_i+0x192>
 800364e:	8019      	strh	r1, [r3, #0]
 8003650:	2300      	movs	r3, #0
 8003652:	6123      	str	r3, [r4, #16]
 8003654:	4665      	mov	r5, ip
 8003656:	e7b9      	b.n	80035cc <_printf_i+0x118>
 8003658:	6813      	ldr	r3, [r2, #0]
 800365a:	1d19      	adds	r1, r3, #4
 800365c:	6011      	str	r1, [r2, #0]
 800365e:	681d      	ldr	r5, [r3, #0]
 8003660:	6862      	ldr	r2, [r4, #4]
 8003662:	2100      	movs	r1, #0
 8003664:	4628      	mov	r0, r5
 8003666:	f7fc fe3b 	bl	80002e0 <memchr>
 800366a:	b108      	cbz	r0, 8003670 <_printf_i+0x1bc>
 800366c:	1b40      	subs	r0, r0, r5
 800366e:	6060      	str	r0, [r4, #4]
 8003670:	6863      	ldr	r3, [r4, #4]
 8003672:	6123      	str	r3, [r4, #16]
 8003674:	2300      	movs	r3, #0
 8003676:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800367a:	e7a7      	b.n	80035cc <_printf_i+0x118>
 800367c:	6923      	ldr	r3, [r4, #16]
 800367e:	462a      	mov	r2, r5
 8003680:	4639      	mov	r1, r7
 8003682:	4630      	mov	r0, r6
 8003684:	47c0      	blx	r8
 8003686:	3001      	adds	r0, #1
 8003688:	d0aa      	beq.n	80035e0 <_printf_i+0x12c>
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	079b      	lsls	r3, r3, #30
 800368e:	d413      	bmi.n	80036b8 <_printf_i+0x204>
 8003690:	68e0      	ldr	r0, [r4, #12]
 8003692:	9b03      	ldr	r3, [sp, #12]
 8003694:	4298      	cmp	r0, r3
 8003696:	bfb8      	it	lt
 8003698:	4618      	movlt	r0, r3
 800369a:	e7a3      	b.n	80035e4 <_printf_i+0x130>
 800369c:	2301      	movs	r3, #1
 800369e:	464a      	mov	r2, r9
 80036a0:	4639      	mov	r1, r7
 80036a2:	4630      	mov	r0, r6
 80036a4:	47c0      	blx	r8
 80036a6:	3001      	adds	r0, #1
 80036a8:	d09a      	beq.n	80035e0 <_printf_i+0x12c>
 80036aa:	3501      	adds	r5, #1
 80036ac:	68e3      	ldr	r3, [r4, #12]
 80036ae:	9a03      	ldr	r2, [sp, #12]
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	42ab      	cmp	r3, r5
 80036b4:	dcf2      	bgt.n	800369c <_printf_i+0x1e8>
 80036b6:	e7eb      	b.n	8003690 <_printf_i+0x1dc>
 80036b8:	2500      	movs	r5, #0
 80036ba:	f104 0919 	add.w	r9, r4, #25
 80036be:	e7f5      	b.n	80036ac <_printf_i+0x1f8>
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1ac      	bne.n	800361e <_printf_i+0x16a>
 80036c4:	7803      	ldrb	r3, [r0, #0]
 80036c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036ce:	e76c      	b.n	80035aa <_printf_i+0xf6>
 80036d0:	0800399d 	.word	0x0800399d
 80036d4:	080039ae 	.word	0x080039ae

080036d8 <memcpy>:
 80036d8:	b510      	push	{r4, lr}
 80036da:	1e43      	subs	r3, r0, #1
 80036dc:	440a      	add	r2, r1
 80036de:	4291      	cmp	r1, r2
 80036e0:	d100      	bne.n	80036e4 <memcpy+0xc>
 80036e2:	bd10      	pop	{r4, pc}
 80036e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036ec:	e7f7      	b.n	80036de <memcpy+0x6>

080036ee <memmove>:
 80036ee:	4288      	cmp	r0, r1
 80036f0:	b510      	push	{r4, lr}
 80036f2:	eb01 0302 	add.w	r3, r1, r2
 80036f6:	d807      	bhi.n	8003708 <memmove+0x1a>
 80036f8:	1e42      	subs	r2, r0, #1
 80036fa:	4299      	cmp	r1, r3
 80036fc:	d00a      	beq.n	8003714 <memmove+0x26>
 80036fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003702:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003706:	e7f8      	b.n	80036fa <memmove+0xc>
 8003708:	4283      	cmp	r3, r0
 800370a:	d9f5      	bls.n	80036f8 <memmove+0xa>
 800370c:	1881      	adds	r1, r0, r2
 800370e:	1ad2      	subs	r2, r2, r3
 8003710:	42d3      	cmn	r3, r2
 8003712:	d100      	bne.n	8003716 <memmove+0x28>
 8003714:	bd10      	pop	{r4, pc}
 8003716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800371a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800371e:	e7f7      	b.n	8003710 <memmove+0x22>

08003720 <_free_r>:
 8003720:	b538      	push	{r3, r4, r5, lr}
 8003722:	4605      	mov	r5, r0
 8003724:	2900      	cmp	r1, #0
 8003726:	d045      	beq.n	80037b4 <_free_r+0x94>
 8003728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800372c:	1f0c      	subs	r4, r1, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	bfb8      	it	lt
 8003732:	18e4      	addlt	r4, r4, r3
 8003734:	f000 f8d2 	bl	80038dc <__malloc_lock>
 8003738:	4a1f      	ldr	r2, [pc, #124]	; (80037b8 <_free_r+0x98>)
 800373a:	6813      	ldr	r3, [r2, #0]
 800373c:	4610      	mov	r0, r2
 800373e:	b933      	cbnz	r3, 800374e <_free_r+0x2e>
 8003740:	6063      	str	r3, [r4, #4]
 8003742:	6014      	str	r4, [r2, #0]
 8003744:	4628      	mov	r0, r5
 8003746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800374a:	f000 b8c8 	b.w	80038de <__malloc_unlock>
 800374e:	42a3      	cmp	r3, r4
 8003750:	d90c      	bls.n	800376c <_free_r+0x4c>
 8003752:	6821      	ldr	r1, [r4, #0]
 8003754:	1862      	adds	r2, r4, r1
 8003756:	4293      	cmp	r3, r2
 8003758:	bf04      	itt	eq
 800375a:	681a      	ldreq	r2, [r3, #0]
 800375c:	685b      	ldreq	r3, [r3, #4]
 800375e:	6063      	str	r3, [r4, #4]
 8003760:	bf04      	itt	eq
 8003762:	1852      	addeq	r2, r2, r1
 8003764:	6022      	streq	r2, [r4, #0]
 8003766:	6004      	str	r4, [r0, #0]
 8003768:	e7ec      	b.n	8003744 <_free_r+0x24>
 800376a:	4613      	mov	r3, r2
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	b10a      	cbz	r2, 8003774 <_free_r+0x54>
 8003770:	42a2      	cmp	r2, r4
 8003772:	d9fa      	bls.n	800376a <_free_r+0x4a>
 8003774:	6819      	ldr	r1, [r3, #0]
 8003776:	1858      	adds	r0, r3, r1
 8003778:	42a0      	cmp	r0, r4
 800377a:	d10b      	bne.n	8003794 <_free_r+0x74>
 800377c:	6820      	ldr	r0, [r4, #0]
 800377e:	4401      	add	r1, r0
 8003780:	1858      	adds	r0, r3, r1
 8003782:	4282      	cmp	r2, r0
 8003784:	6019      	str	r1, [r3, #0]
 8003786:	d1dd      	bne.n	8003744 <_free_r+0x24>
 8003788:	6810      	ldr	r0, [r2, #0]
 800378a:	6852      	ldr	r2, [r2, #4]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	4401      	add	r1, r0
 8003790:	6019      	str	r1, [r3, #0]
 8003792:	e7d7      	b.n	8003744 <_free_r+0x24>
 8003794:	d902      	bls.n	800379c <_free_r+0x7c>
 8003796:	230c      	movs	r3, #12
 8003798:	602b      	str	r3, [r5, #0]
 800379a:	e7d3      	b.n	8003744 <_free_r+0x24>
 800379c:	6820      	ldr	r0, [r4, #0]
 800379e:	1821      	adds	r1, r4, r0
 80037a0:	428a      	cmp	r2, r1
 80037a2:	bf04      	itt	eq
 80037a4:	6811      	ldreq	r1, [r2, #0]
 80037a6:	6852      	ldreq	r2, [r2, #4]
 80037a8:	6062      	str	r2, [r4, #4]
 80037aa:	bf04      	itt	eq
 80037ac:	1809      	addeq	r1, r1, r0
 80037ae:	6021      	streq	r1, [r4, #0]
 80037b0:	605c      	str	r4, [r3, #4]
 80037b2:	e7c7      	b.n	8003744 <_free_r+0x24>
 80037b4:	bd38      	pop	{r3, r4, r5, pc}
 80037b6:	bf00      	nop
 80037b8:	20000094 	.word	0x20000094

080037bc <_malloc_r>:
 80037bc:	b570      	push	{r4, r5, r6, lr}
 80037be:	1ccd      	adds	r5, r1, #3
 80037c0:	f025 0503 	bic.w	r5, r5, #3
 80037c4:	3508      	adds	r5, #8
 80037c6:	2d0c      	cmp	r5, #12
 80037c8:	bf38      	it	cc
 80037ca:	250c      	movcc	r5, #12
 80037cc:	2d00      	cmp	r5, #0
 80037ce:	4606      	mov	r6, r0
 80037d0:	db01      	blt.n	80037d6 <_malloc_r+0x1a>
 80037d2:	42a9      	cmp	r1, r5
 80037d4:	d903      	bls.n	80037de <_malloc_r+0x22>
 80037d6:	230c      	movs	r3, #12
 80037d8:	6033      	str	r3, [r6, #0]
 80037da:	2000      	movs	r0, #0
 80037dc:	bd70      	pop	{r4, r5, r6, pc}
 80037de:	f000 f87d 	bl	80038dc <__malloc_lock>
 80037e2:	4a21      	ldr	r2, [pc, #132]	; (8003868 <_malloc_r+0xac>)
 80037e4:	6814      	ldr	r4, [r2, #0]
 80037e6:	4621      	mov	r1, r4
 80037e8:	b991      	cbnz	r1, 8003810 <_malloc_r+0x54>
 80037ea:	4c20      	ldr	r4, [pc, #128]	; (800386c <_malloc_r+0xb0>)
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	b91b      	cbnz	r3, 80037f8 <_malloc_r+0x3c>
 80037f0:	4630      	mov	r0, r6
 80037f2:	f000 f863 	bl	80038bc <_sbrk_r>
 80037f6:	6020      	str	r0, [r4, #0]
 80037f8:	4629      	mov	r1, r5
 80037fa:	4630      	mov	r0, r6
 80037fc:	f000 f85e 	bl	80038bc <_sbrk_r>
 8003800:	1c43      	adds	r3, r0, #1
 8003802:	d124      	bne.n	800384e <_malloc_r+0x92>
 8003804:	230c      	movs	r3, #12
 8003806:	6033      	str	r3, [r6, #0]
 8003808:	4630      	mov	r0, r6
 800380a:	f000 f868 	bl	80038de <__malloc_unlock>
 800380e:	e7e4      	b.n	80037da <_malloc_r+0x1e>
 8003810:	680b      	ldr	r3, [r1, #0]
 8003812:	1b5b      	subs	r3, r3, r5
 8003814:	d418      	bmi.n	8003848 <_malloc_r+0x8c>
 8003816:	2b0b      	cmp	r3, #11
 8003818:	d90f      	bls.n	800383a <_malloc_r+0x7e>
 800381a:	600b      	str	r3, [r1, #0]
 800381c:	50cd      	str	r5, [r1, r3]
 800381e:	18cc      	adds	r4, r1, r3
 8003820:	4630      	mov	r0, r6
 8003822:	f000 f85c 	bl	80038de <__malloc_unlock>
 8003826:	f104 000b 	add.w	r0, r4, #11
 800382a:	1d23      	adds	r3, r4, #4
 800382c:	f020 0007 	bic.w	r0, r0, #7
 8003830:	1ac3      	subs	r3, r0, r3
 8003832:	d0d3      	beq.n	80037dc <_malloc_r+0x20>
 8003834:	425a      	negs	r2, r3
 8003836:	50e2      	str	r2, [r4, r3]
 8003838:	e7d0      	b.n	80037dc <_malloc_r+0x20>
 800383a:	428c      	cmp	r4, r1
 800383c:	684b      	ldr	r3, [r1, #4]
 800383e:	bf16      	itet	ne
 8003840:	6063      	strne	r3, [r4, #4]
 8003842:	6013      	streq	r3, [r2, #0]
 8003844:	460c      	movne	r4, r1
 8003846:	e7eb      	b.n	8003820 <_malloc_r+0x64>
 8003848:	460c      	mov	r4, r1
 800384a:	6849      	ldr	r1, [r1, #4]
 800384c:	e7cc      	b.n	80037e8 <_malloc_r+0x2c>
 800384e:	1cc4      	adds	r4, r0, #3
 8003850:	f024 0403 	bic.w	r4, r4, #3
 8003854:	42a0      	cmp	r0, r4
 8003856:	d005      	beq.n	8003864 <_malloc_r+0xa8>
 8003858:	1a21      	subs	r1, r4, r0
 800385a:	4630      	mov	r0, r6
 800385c:	f000 f82e 	bl	80038bc <_sbrk_r>
 8003860:	3001      	adds	r0, #1
 8003862:	d0cf      	beq.n	8003804 <_malloc_r+0x48>
 8003864:	6025      	str	r5, [r4, #0]
 8003866:	e7db      	b.n	8003820 <_malloc_r+0x64>
 8003868:	20000094 	.word	0x20000094
 800386c:	20000098 	.word	0x20000098

08003870 <_realloc_r>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	4607      	mov	r7, r0
 8003874:	4614      	mov	r4, r2
 8003876:	460e      	mov	r6, r1
 8003878:	b921      	cbnz	r1, 8003884 <_realloc_r+0x14>
 800387a:	4611      	mov	r1, r2
 800387c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003880:	f7ff bf9c 	b.w	80037bc <_malloc_r>
 8003884:	b922      	cbnz	r2, 8003890 <_realloc_r+0x20>
 8003886:	f7ff ff4b 	bl	8003720 <_free_r>
 800388a:	4625      	mov	r5, r4
 800388c:	4628      	mov	r0, r5
 800388e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003890:	f000 f826 	bl	80038e0 <_malloc_usable_size_r>
 8003894:	42a0      	cmp	r0, r4
 8003896:	d20f      	bcs.n	80038b8 <_realloc_r+0x48>
 8003898:	4621      	mov	r1, r4
 800389a:	4638      	mov	r0, r7
 800389c:	f7ff ff8e 	bl	80037bc <_malloc_r>
 80038a0:	4605      	mov	r5, r0
 80038a2:	2800      	cmp	r0, #0
 80038a4:	d0f2      	beq.n	800388c <_realloc_r+0x1c>
 80038a6:	4631      	mov	r1, r6
 80038a8:	4622      	mov	r2, r4
 80038aa:	f7ff ff15 	bl	80036d8 <memcpy>
 80038ae:	4631      	mov	r1, r6
 80038b0:	4638      	mov	r0, r7
 80038b2:	f7ff ff35 	bl	8003720 <_free_r>
 80038b6:	e7e9      	b.n	800388c <_realloc_r+0x1c>
 80038b8:	4635      	mov	r5, r6
 80038ba:	e7e7      	b.n	800388c <_realloc_r+0x1c>

080038bc <_sbrk_r>:
 80038bc:	b538      	push	{r3, r4, r5, lr}
 80038be:	4c06      	ldr	r4, [pc, #24]	; (80038d8 <_sbrk_r+0x1c>)
 80038c0:	2300      	movs	r3, #0
 80038c2:	4605      	mov	r5, r0
 80038c4:	4608      	mov	r0, r1
 80038c6:	6023      	str	r3, [r4, #0]
 80038c8:	f7fd f9b0 	bl	8000c2c <_sbrk>
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	d102      	bne.n	80038d6 <_sbrk_r+0x1a>
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	b103      	cbz	r3, 80038d6 <_sbrk_r+0x1a>
 80038d4:	602b      	str	r3, [r5, #0]
 80038d6:	bd38      	pop	{r3, r4, r5, pc}
 80038d8:	200001ac 	.word	0x200001ac

080038dc <__malloc_lock>:
 80038dc:	4770      	bx	lr

080038de <__malloc_unlock>:
 80038de:	4770      	bx	lr

080038e0 <_malloc_usable_size_r>:
 80038e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038e4:	1f18      	subs	r0, r3, #4
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	bfbc      	itt	lt
 80038ea:	580b      	ldrlt	r3, [r1, r0]
 80038ec:	18c0      	addlt	r0, r0, r3
 80038ee:	4770      	bx	lr

080038f0 <_init>:
 80038f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f2:	bf00      	nop
 80038f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f6:	bc08      	pop	{r3}
 80038f8:	469e      	mov	lr, r3
 80038fa:	4770      	bx	lr

080038fc <_fini>:
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	bf00      	nop
 8003900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003902:	bc08      	pop	{r3}
 8003904:	469e      	mov	lr, r3
 8003906:	4770      	bx	lr
